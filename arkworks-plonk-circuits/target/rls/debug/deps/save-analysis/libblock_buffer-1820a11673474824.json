{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0","program":"/Users/thomascnorton/.rustup/toolchains/nightly-2021-11-10-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","block_buffer","--edition=2018","/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"block-padding\"","-C","metadata=1820a11673474824","-C","extra-filename=-1820a11673474824","--out-dir","/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps","-L","dependency=/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps","--extern","block_padding=/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps/libblock_padding-1c42457bed4d4afd.rmeta","--extern","generic_array=/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps/libgeneric_array-9ee89aab4ff7fe77.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/thomascnorton/.rustup/toolchains/nightly-2021-11-10-aarch64-apple-darwin"],"output":"/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps/libblock_buffer-1820a11673474824.rmeta"},"prelude":{"crate_id":{"name":"block_buffer","disambiguator":[15397802166074194054,0]},"crate_root":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src","external_crates":[{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5231689799850066461,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[17864008973282999150,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[17296295565214172833,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","num":4,"id":{"name":"generic_array","disambiguator":[13953929427960432296,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","num":5,"id":{"name":"typenum","disambiguator":[14811765620827620281,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","num":6,"id":{"name":"block_padding","disambiguator":[3425907773768192322,0]}}],"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":0,"byte_end":7312,"line_start":1,"line_end":233,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":4,"index":0},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":19,"byte_end":32,"line_start":2,"line_end":2,"column_start":9,"column_end":22},"alias_span":null,"name":"generic_array","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":6,"index":0},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":76,"byte_end":89,"line_start":4,"line_end":4,"column_start":9,"column_end":22},"alias_span":null,"name":"block_padding","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":0,"byte_end":7312,"line_start":1,"line_end":233,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":54},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":31},{"krate":0,"index":53}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":0,"byte_end":10,"line_start":1,"line_end":1,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":54},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":329,"byte_end":340,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"BlockBuffer","qualname":"::BlockBuffer","value":"BlockBuffer {  }","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57}],"decl_id":null,"docs":" Buffer for block processing of data\n","sig":null,"attributes":[{"value":"/ Buffer for block processing of data","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":252,"byte_end":291,"line_start":11,"line_end":11,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":597,"byte_end":608,"line_start":21,"line_end":21,"column_start":12,"column_end":23},"name":"input_block","qualname":"<BlockBuffer<BlockSize>>::input_block","value":"pub fn input_block<impl FnMut(&GenericArray<u8, BlockSize>): FnMut(&GenericArray<u8,\n                                                                                 BlockSize>)\n                   ->\n                   ()>(&mut Self, &[u8],\n                       impl FnMut(&GenericArray<u8, BlockSize>))","parent":null,"children":[],"decl_id":null,"docs":" Process data in `input` in blocks of size `BlockSize` using function `f`.\n","sig":null,"attributes":[{"value":"/ Process data in `input` in blocks of size `BlockSize` using function `f`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":494,"byte_end":571,"line_start":19,"line_end":19,"column_start":5,"column_end":82}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":576,"byte_end":585,"line_start":20,"line_end":20,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":1628,"byte_end":1640,"line_start":52,"line_end":52,"column_start":12,"column_end":24},"name":"input_blocks","qualname":"<BlockBuffer<BlockSize>>::input_blocks","value":"pub fn input_blocks<impl FnMut(&[GenericArray<u8, BlockSize>]): FnMut(&[GenericArray<u8,\n                                                                                     BlockSize>])\n                    ->\n                    ()>(&mut Self, &[u8],\n                        impl FnMut(&[GenericArray<u8, BlockSize>]))","parent":null,"children":[],"decl_id":null,"docs":" Process data in `input` in blocks of size `BlockSize` using function `f`, which accepts\n slice of blocks.\n","sig":null,"attributes":[{"value":"/ Process data in `input` in blocks of size `BlockSize` using function `f`, which accepts","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":1486,"byte_end":1577,"line_start":49,"line_end":49,"column_start":5,"column_end":96}},{"value":"/ slice of blocks.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":1582,"byte_end":1602,"line_start":50,"line_end":50,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":1607,"byte_end":1616,"line_start":51,"line_end":51,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":3183,"byte_end":3193,"line_start":94,"line_end":94,"column_start":12,"column_end":22},"name":"input_lazy","qualname":"<BlockBuffer<BlockSize>>::input_lazy","value":"pub fn input_lazy<impl FnMut(&GenericArray<u8, BlockSize>): FnMut(&GenericArray<u8,\n                                                                                BlockSize>)\n                  ->\n                  ()>(&mut Self, &[u8],\n                      impl FnMut(&GenericArray<u8, BlockSize>))","parent":null,"children":[],"decl_id":null,"docs":" Variant that doesn't flush the buffer until there's additional\n data to be processed. Suitable for tweakable block ciphers\n like Threefish that need to know whether a block is the *last*\n data block before processing it.\n","sig":null,"attributes":[{"value":"/ Variant that doesn't flush the buffer until there's additional","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":2912,"byte_end":2978,"line_start":89,"line_end":89,"column_start":5,"column_end":71}},{"value":"/ data to be processed. Suitable for tweakable block ciphers","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":2983,"byte_end":3045,"line_start":90,"line_end":90,"column_start":5,"column_end":67}},{"value":"/ like Threefish that need to know whether a block is the *last*","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":3050,"byte_end":3116,"line_start":91,"line_end":91,"column_start":5,"column_end":71}},{"value":"/ data block before processing it.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":3121,"byte_end":3157,"line_start":92,"line_end":92,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":3162,"byte_end":3171,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":4748,"byte_end":4764,"line_start":146,"line_end":146,"column_start":12,"column_end":28},"name":"len64_padding_be","qualname":"<BlockBuffer<BlockSize>>::len64_padding_be","value":"pub fn len64_padding_be<impl FnMut(&GenericArray<u8, BlockSize>): FnMut(&GenericArray<u8,\n                                                                                      BlockSize>)\n                        ->\n                        ()>(&mut Self, u64,\n                            impl FnMut(&GenericArray<u8, BlockSize>))","parent":null,"children":[],"decl_id":null,"docs":" Pad message with 0x80, zeros and 64-bit message length\n using big-endian byte order\n","sig":null,"attributes":[{"value":"/ Pad message with 0x80, zeros and 64-bit message length","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":4628,"byte_end":4686,"line_start":143,"line_end":143,"column_start":5,"column_end":63}},{"value":"/ using big-endian byte order","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":4691,"byte_end":4722,"line_start":144,"line_end":144,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":4727,"byte_end":4736,"line_start":145,"line_end":145,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":5205,"byte_end":5221,"line_start":160,"line_end":160,"column_start":12,"column_end":28},"name":"len64_padding_le","qualname":"<BlockBuffer<BlockSize>>::len64_padding_le","value":"pub fn len64_padding_le<impl FnMut(&GenericArray<u8, BlockSize>): FnMut(&GenericArray<u8,\n                                                                                      BlockSize>)\n                        ->\n                        ()>(&mut Self, u64,\n                            impl FnMut(&GenericArray<u8, BlockSize>))","parent":null,"children":[],"decl_id":null,"docs":" Pad message with 0x80, zeros and 64-bit message length\n using little-endian byte order\n","sig":null,"attributes":[{"value":"/ Pad message with 0x80, zeros and 64-bit message length","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":5082,"byte_end":5140,"line_start":157,"line_end":157,"column_start":5,"column_end":63}},{"value":"/ using little-endian byte order","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":5145,"byte_end":5179,"line_start":158,"line_end":158,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":5184,"byte_end":5193,"line_start":159,"line_end":159,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":5660,"byte_end":5677,"line_start":174,"line_end":174,"column_start":12,"column_end":29},"name":"len128_padding_be","qualname":"<BlockBuffer<BlockSize>>::len128_padding_be","value":"pub fn len128_padding_be<impl FnMut(&GenericArray<u8, BlockSize>): FnMut(&GenericArray<u8,\n                                                                                       BlockSize>)\n                         ->\n                         ()>(&mut Self, u128,\n                             impl FnMut(&GenericArray<u8, BlockSize>))","parent":null,"children":[],"decl_id":null,"docs":" Pad message with 0x80, zeros and 128-bit message length\n using big-endian byte order\n","sig":null,"attributes":[{"value":"/ Pad message with 0x80, zeros and 128-bit message length","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":5539,"byte_end":5598,"line_start":171,"line_end":171,"column_start":5,"column_end":64}},{"value":"/ using big-endian byte order","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":5603,"byte_end":5634,"line_start":172,"line_end":172,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":5639,"byte_end":5648,"line_start":173,"line_end":173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":6221,"byte_end":6229,"line_start":191,"line_end":191,"column_start":12,"column_end":20},"name":"pad_with","qualname":"<BlockBuffer<BlockSize>>::pad_with","value":"pub fn pad_with<P: Padding>(&mut Self)\n-> Result<&mut GenericArray<u8, BlockSize>, PadError>","parent":null,"children":[],"decl_id":null,"docs":" Pad message with a given padding `P`","sig":null,"attributes":[{"value":"/ Pad message with a given padding `P`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":5997,"byte_end":6037,"line_start":185,"line_end":185,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":6042,"byte_end":6045,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ Returns `PadError` if internall buffer is full, which can only happen if","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":6050,"byte_end":6126,"line_start":187,"line_end":187,"column_start":5,"column_end":81}},{"value":"/ `input_lazy` was used.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":6131,"byte_end":6157,"line_start":188,"line_end":188,"column_start":5,"column_end":31}},{"value":"cfg(feature = \"block-padding\")","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":6162,"byte_end":6195,"line_start":189,"line_end":189,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":6200,"byte_end":6209,"line_start":190,"line_end":190,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":6512,"byte_end":6516,"line_start":201,"line_end":201,"column_start":12,"column_end":16},"name":"size","qualname":"<BlockBuffer<BlockSize>>::size","value":"pub fn size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return size of the internall buffer in bytes\n","sig":null,"attributes":[{"value":"/ Return size of the internall buffer in bytes","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":6438,"byte_end":6486,"line_start":199,"line_end":199,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":6491,"byte_end":6500,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":6636,"byte_end":6644,"line_start":207,"line_end":207,"column_start":12,"column_end":20},"name":"position","qualname":"<BlockBuffer<BlockSize>>::position","value":"pub fn position(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return current cursor position\n","sig":null,"attributes":[{"value":"/ Return current cursor position","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":6576,"byte_end":6610,"line_start":205,"line_end":205,"column_start":5,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":6615,"byte_end":6624,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":6777,"byte_end":6786,"line_start":213,"line_end":213,"column_start":12,"column_end":21},"name":"remaining","qualname":"<BlockBuffer<BlockSize>>::remaining","value":"pub fn remaining(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return number of remaining bytes in the internall buffer\n","sig":null,"attributes":[{"value":"/ Return number of remaining bytes in the internall buffer","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":6691,"byte_end":6751,"line_start":211,"line_end":211,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":6756,"byte_end":6765,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":6924,"byte_end":6929,"line_start":219,"line_end":219,"column_start":12,"column_end":17},"name":"reset","qualname":"<BlockBuffer<BlockSize>>::reset","value":"pub fn reset(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reset buffer by setting cursor position to zero\n","sig":null,"attributes":[{"value":"/ Reset buffer by setting cursor position to zero","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":6847,"byte_end":6898,"line_start":217,"line_end":217,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":6903,"byte_end":6912,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":465,"byte_end":476,"line_start":18,"line_end":18,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":35},{"krate":0,"index":37},{"krate":0,"index":39},{"krate":0,"index":41},{"krate":0,"index":43},{"krate":0,"index":45},{"krate":0,"index":47},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/block-buffer-0.9.0/src/lib.rs","byte_start":465,"byte_end":476,"line_start":18,"line_end":18,"column_start":34,"column_end":45},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":54},"to":{"krate":4294967295,"index":4294967295}}]}