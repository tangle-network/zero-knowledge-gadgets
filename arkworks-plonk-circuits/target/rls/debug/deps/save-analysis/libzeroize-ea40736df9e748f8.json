{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3","program":"/Users/thomascnorton/.rustup/toolchains/nightly-2021-11-10-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","zeroize","--edition=2018","/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"zeroize_derive\"","-C","metadata=ea40736df9e748f8","-C","extra-filename=-ea40736df9e748f8","--out-dir","/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps","-L","dependency=/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps","--extern","zeroize_derive=/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps/libzeroize_derive-de3b6e9721790f74.dylib","--cap-lints","allow","--error-format=json","--sysroot","/Users/thomascnorton/.rustup/toolchains/nightly-2021-11-10-aarch64-apple-darwin"],"output":"/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps/libzeroize-ea40736df9e748f8.rmeta"},"prelude":{"crate_id":{"name":"zeroize","disambiguator":[15104117607204699449,0]},"crate_root":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src","external_crates":[{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5231689799850066461,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[17864008973282999150,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[17296295565214172833,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","num":4,"id":{"name":"zeroize_derive","disambiguator":[13491825784207841911,0]}}],"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":0,"byte_end":22261,"line_start":1,"line_end":696,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":4,"index":48},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":8568,"byte_end":8575,"line_start":212,"line_end":212,"column_start":25,"column_end":32},"alias_span":null,"name":"Zeroize","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":0,"byte_end":22261,"line_start":1,"line_end":696,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":71},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":150},{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":72},{"krate":0,"index":77},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":90},{"krate":0,"index":160},{"krate":0,"index":164},{"krate":0,"index":167},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":175},{"krate":0,"index":177},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":99},{"krate":0,"index":102},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":118}],"decl_id":null,"docs":" Securely zero memory with a simple trait ([`Zeroize`]) built on stable Rust\n primitives which guarantee the operation will not be \"optimized away\".","sig":null,"attributes":[{"value":"/ Securely zero memory with a simple trait ([`Zeroize`]) built on stable Rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":0,"byte_end":79,"line_start":1,"line_end":1,"column_start":1,"column_end":80}},{"value":"/ primitives which guarantee the operation will not be \"optimized away\".","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":80,"byte_end":154,"line_start":2,"line_end":2,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":155,"byte_end":158,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ ## About","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":159,"byte_end":171,"line_start":4,"line_end":4,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":172,"byte_end":175,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [Zeroing memory securely is hard] - compilers optimize for performance, and","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":176,"byte_end":255,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/ in doing so they love to \"optimize away\" unnecessary zeroing calls. There are","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":256,"byte_end":337,"line_start":7,"line_end":7,"column_start":1,"column_end":82}},{"value":"/ many documented \"tricks\" to attempt to avoid these optimizations and ensure","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":338,"byte_end":417,"line_start":8,"line_end":8,"column_start":1,"column_end":80}},{"value":"/ that a zeroing routine is performed reliably.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":418,"byte_end":467,"line_start":9,"line_end":9,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":468,"byte_end":471,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This crate isn't about tricks: it uses [`core::ptr::write_volatile`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":472,"byte_end":544,"line_start":11,"line_end":11,"column_start":1,"column_end":73}},{"value":"/ and [`core::sync::atomic`] memory fences to provide easy-to-use, portable","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":545,"byte_end":622,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ zeroing behavior which works on all of Rust's core number types and slices","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":623,"byte_end":701,"line_start":13,"line_end":13,"column_start":1,"column_end":79}},{"value":"/ thereof, implemented in pure Rust with no usage of FFI or assembly.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":702,"byte_end":773,"line_start":14,"line_end":14,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":774,"byte_end":777,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ - No insecure fallbacks!","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":778,"byte_end":806,"line_start":16,"line_end":16,"column_start":1,"column_end":29}},{"value":"/ - No dependencies!","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":807,"byte_end":829,"line_start":17,"line_end":17,"column_start":1,"column_end":23}},{"value":"/ - No FFI or inline assembly! **WASM friendly** (and tested)!","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":830,"byte_end":894,"line_start":18,"line_end":18,"column_start":1,"column_end":65}},{"value":"/ - `#![no_std]` i.e. **embedded-friendly**!","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":895,"byte_end":941,"line_start":19,"line_end":19,"column_start":1,"column_end":47}},{"value":"/ - No functionality besides securely zeroing memory!","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":942,"byte_end":997,"line_start":20,"line_end":20,"column_start":1,"column_end":56}},{"value":"/ - (Optional) Custom derive support for zeroing complex structures","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":998,"byte_end":1067,"line_start":21,"line_end":21,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1068,"byte_end":1071,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ## Minimum Supported Rust Version","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1072,"byte_end":1109,"line_start":23,"line_end":23,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1110,"byte_end":1113,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Requires Rust **1.51** or newer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1114,"byte_end":1150,"line_start":25,"line_end":25,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1151,"byte_end":1154,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ In the future, we reserve the right to change MSRV (i.e. MSRV is out-of-scope","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1155,"byte_end":1236,"line_start":27,"line_end":27,"column_start":1,"column_end":82}},{"value":"/ for this crate's SemVer guarantees), however when we do it will be accompanied","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1237,"byte_end":1319,"line_start":28,"line_end":28,"column_start":1,"column_end":83}},{"value":"/ by a minor version bump.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1320,"byte_end":1348,"line_start":29,"line_end":29,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1349,"byte_end":1352,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1353,"byte_end":1365,"line_start":31,"line_end":31,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1366,"byte_end":1369,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1370,"byte_end":1377,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/ use zeroize::Zeroize;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1378,"byte_end":1403,"line_start":34,"line_end":34,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1404,"byte_end":1407,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1408,"byte_end":1423,"line_start":36,"line_end":36,"column_start":1,"column_end":16}},{"value":"/     // Protip: don't embed secrets in your source code.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1424,"byte_end":1483,"line_start":37,"line_end":37,"column_start":1,"column_end":60}},{"value":"/     // This is just an example.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1484,"byte_end":1519,"line_start":38,"line_end":38,"column_start":1,"column_end":36}},{"value":"/     let mut secret = b\"Air shield password: 1,2,3,4,5\".to_vec();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1520,"byte_end":1588,"line_start":39,"line_end":39,"column_start":1,"column_end":69}},{"value":"/     // [ ... ] open the air shield here","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1589,"byte_end":1632,"line_start":40,"line_end":40,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1633,"byte_end":1636,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/     // Now that we're done using the secret, zero it out.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1637,"byte_end":1698,"line_start":42,"line_end":42,"column_start":1,"column_end":62}},{"value":"/     secret.zeroize();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1699,"byte_end":1724,"line_start":43,"line_end":43,"column_start":1,"column_end":26}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1725,"byte_end":1730,"line_start":44,"line_end":44,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1731,"byte_end":1738,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1739,"byte_end":1742,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ The [`Zeroize`] trait is impl'd on all of Rust's core scalar types including","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1743,"byte_end":1823,"line_start":47,"line_end":47,"column_start":1,"column_end":81}},{"value":"/ integers, floats, `bool`, and `char`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1824,"byte_end":1865,"line_start":48,"line_end":48,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1866,"byte_end":1869,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ Additionally, it's implemented on slices and `IterMut`s of the above types.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1870,"byte_end":1949,"line_start":50,"line_end":50,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1950,"byte_end":1953,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ When the `alloc` feature is enabled (which it is by default), it's also","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":1954,"byte_end":2029,"line_start":52,"line_end":52,"column_start":1,"column_end":76}},{"value":"/ impl'd for `Vec<T>` for the above types as well as `String`, where it provides","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2030,"byte_end":2112,"line_start":53,"line_end":53,"column_start":1,"column_end":83}},{"value":"/ [`Vec::clear`] / [`String::clear`]-like behavior (truncating to zero-length)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2113,"byte_end":2193,"line_start":54,"line_end":54,"column_start":1,"column_end":81}},{"value":"/ but ensures the backing memory is securely zeroed with some caveats.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2194,"byte_end":2266,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/ (NOTE: see \"Stack/Heap Zeroing Notes\" for important `Vec`/`String` details)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2267,"byte_end":2346,"line_start":56,"line_end":56,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2347,"byte_end":2350,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ The [`DefaultIsZeroes`] marker trait can be impl'd on types which also","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2351,"byte_end":2425,"line_start":58,"line_end":58,"column_start":1,"column_end":75}},{"value":"/ impl [`Default`], which implements [`Zeroize`] by overwriting a value with","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2426,"byte_end":2504,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/ the default value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2505,"byte_end":2527,"line_start":60,"line_end":60,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2528,"byte_end":2531,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ## Custom Derive Support","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2532,"byte_end":2560,"line_start":62,"line_end":62,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2561,"byte_end":2564,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ This crate has custom derive support for the `Zeroize` trait,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2565,"byte_end":2630,"line_start":64,"line_end":64,"column_start":1,"column_end":66}},{"value":"/ gated under the `zeroize` crate's `zeroize_derive` Cargo feature,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2631,"byte_end":2700,"line_start":65,"line_end":65,"column_start":1,"column_end":70}},{"value":"/ which automatically calls `zeroize()` on all members of a struct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2701,"byte_end":2769,"line_start":66,"line_end":66,"column_start":1,"column_end":69}},{"value":"/ or tuple struct.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2770,"byte_end":2790,"line_start":67,"line_end":67,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2791,"byte_end":2794,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ Additionally it supports the following attribute:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2795,"byte_end":2848,"line_start":69,"line_end":69,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2849,"byte_end":2852,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ - `#[zeroize(drop)]`: call `zeroize()` when this item is dropped","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2853,"byte_end":2921,"line_start":71,"line_end":71,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2922,"byte_end":2925,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ Example which derives `Drop`:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2926,"byte_end":2959,"line_start":73,"line_end":73,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2960,"byte_end":2963,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2964,"byte_end":2971,"line_start":75,"line_end":75,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(feature = \"derive\")]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":2972,"byte_end":3004,"line_start":76,"line_end":76,"column_start":1,"column_end":33}},{"value":"/ # {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3005,"byte_end":3012,"line_start":77,"line_end":77,"column_start":1,"column_end":8}},{"value":"/ use zeroize::Zeroize;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3013,"byte_end":3038,"line_start":78,"line_end":78,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3039,"byte_end":3042,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ // This struct will be zeroized on drop","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3043,"byte_end":3086,"line_start":80,"line_end":80,"column_start":1,"column_end":44}},{"value":"/ #[derive(Zeroize)]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3087,"byte_end":3109,"line_start":81,"line_end":81,"column_start":1,"column_end":23}},{"value":"/ #[zeroize(drop)]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3110,"byte_end":3130,"line_start":82,"line_end":82,"column_start":1,"column_end":21}},{"value":"/ struct MyStruct([u8; 32]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3131,"byte_end":3161,"line_start":83,"line_end":83,"column_start":1,"column_end":31}},{"value":"/ # }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3162,"byte_end":3169,"line_start":84,"line_end":84,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3170,"byte_end":3177,"line_start":85,"line_end":85,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3178,"byte_end":3181,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Example which does not derive `Drop` (useful for e.g. `Copy` types)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3182,"byte_end":3253,"line_start":87,"line_end":87,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3254,"byte_end":3257,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3258,"byte_end":3265,"line_start":89,"line_end":89,"column_start":1,"column_end":8}},{"value":"/ #[cfg(feature = \"derive\")]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3266,"byte_end":3296,"line_start":90,"line_end":90,"column_start":1,"column_end":31}},{"value":"/ # {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3297,"byte_end":3304,"line_start":91,"line_end":91,"column_start":1,"column_end":8}},{"value":"/ use zeroize::Zeroize;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3305,"byte_end":3330,"line_start":92,"line_end":92,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3331,"byte_end":3334,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ // This struct will *NOT* be zeroized on drop","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3335,"byte_end":3384,"line_start":94,"line_end":94,"column_start":1,"column_end":50}},{"value":"/ #[derive(Copy, Clone, Zeroize)]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3385,"byte_end":3420,"line_start":95,"line_end":95,"column_start":1,"column_end":36}},{"value":"/ struct MyStruct([u8; 32]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3421,"byte_end":3451,"line_start":96,"line_end":96,"column_start":1,"column_end":31}},{"value":"/ # }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3452,"byte_end":3459,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3460,"byte_end":3467,"line_start":98,"line_end":98,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3468,"byte_end":3471,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ ## `Zeroizing<Z>`: wrapper for zeroizing arbitrary values on drop","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3472,"byte_end":3541,"line_start":100,"line_end":100,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3542,"byte_end":3545,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ `Zeroizing<Z: Zeroize>` is a generic wrapper type that impls `Deref`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3546,"byte_end":3618,"line_start":102,"line_end":102,"column_start":1,"column_end":73}},{"value":"/ and `DerefMut`, allowing access to an inner value of type `Z`, and also","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3619,"byte_end":3694,"line_start":103,"line_end":103,"column_start":1,"column_end":76}},{"value":"/ impls a `Drop` handler which calls `zeroize()` on its contents:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3695,"byte_end":3762,"line_start":104,"line_end":104,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3763,"byte_end":3766,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3767,"byte_end":3774,"line_start":106,"line_end":106,"column_start":1,"column_end":8}},{"value":"/ use zeroize::Zeroizing;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3775,"byte_end":3802,"line_start":107,"line_end":107,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3803,"byte_end":3806,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3807,"byte_end":3822,"line_start":109,"line_end":109,"column_start":1,"column_end":16}},{"value":"/     let mut secret = Zeroizing::new([0u8; 5]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3823,"byte_end":3873,"line_start":110,"line_end":110,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3874,"byte_end":3877,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/     // Set the air shield password","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3878,"byte_end":3916,"line_start":112,"line_end":112,"column_start":1,"column_end":39}},{"value":"/     // Protip (again): don't embed secrets in your source code.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3917,"byte_end":3984,"line_start":113,"line_end":113,"column_start":1,"column_end":68}},{"value":"/     secret.copy_from_slice(&[1, 2, 3, 4, 5]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":3985,"byte_end":4034,"line_start":114,"line_end":114,"column_start":1,"column_end":50}},{"value":"/     assert_eq!(secret.as_ref(), &[1, 2, 3, 4, 5]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4035,"byte_end":4089,"line_start":115,"line_end":115,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4090,"byte_end":4093,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/     // The contents of `secret` will be automatically zeroized on drop","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4094,"byte_end":4168,"line_start":117,"line_end":117,"column_start":1,"column_end":75}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4169,"byte_end":4174,"line_start":118,"line_end":118,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4175,"byte_end":4182,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4183,"byte_end":4186,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ ## What guarantees does this crate provide?","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4187,"byte_end":4234,"line_start":121,"line_end":121,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4235,"byte_end":4238,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ This crate guarantees the following:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4239,"byte_end":4279,"line_start":123,"line_end":123,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4280,"byte_end":4283,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ 1. The zeroing operation can't be \"optimized away\" by the compiler.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4284,"byte_end":4355,"line_start":125,"line_end":125,"column_start":1,"column_end":72}},{"value":"/ 2. All subsequent reads to memory will see \"zeroized\" values.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4356,"byte_end":4421,"line_start":126,"line_end":126,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4422,"byte_end":4425,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ LLVM's volatile semantics ensure #1 is true.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4426,"byte_end":4474,"line_start":128,"line_end":128,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4475,"byte_end":4478,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ Additionally, thanks to work by the [Unsafe Code Guidelines Working Group],","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4479,"byte_end":4558,"line_start":130,"line_end":130,"column_start":1,"column_end":80}},{"value":"/ we can now fairly confidently say #2 is true as well. Previously there were","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4559,"byte_end":4638,"line_start":131,"line_end":131,"column_start":1,"column_end":80}},{"value":"/ worries that the approach used by this crate (mixing volatile and","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4639,"byte_end":4708,"line_start":132,"line_end":132,"column_start":1,"column_end":70}},{"value":"/ non-volatile accesses) was undefined behavior due to language contained","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4709,"byte_end":4784,"line_start":133,"line_end":133,"column_start":1,"column_end":76}},{"value":"/ in the documentation for `write_volatile`, however after some discussion","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4785,"byte_end":4861,"line_start":134,"line_end":134,"column_start":1,"column_end":77}},{"value":"/ [these remarks have been removed] and the specific usage pattern in this","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4862,"byte_end":4938,"line_start":135,"line_end":135,"column_start":1,"column_end":77}},{"value":"/ crate is considered to be well-defined.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4939,"byte_end":4982,"line_start":136,"line_end":136,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4983,"byte_end":4986,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ Additionally this crate leverages [`core::sync::atomic::compiler_fence`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":4987,"byte_end":5063,"line_start":138,"line_end":138,"column_start":1,"column_end":77}},{"value":"/ with the strictest ordering","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":5064,"byte_end":5095,"line_start":139,"line_end":139,"column_start":1,"column_end":32}},{"value":"/ ([`Ordering::SeqCst`]) as a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":5096,"byte_end":5127,"line_start":140,"line_end":140,"column_start":1,"column_end":32}},{"value":"/ precaution to help ensure reads are not reordered before memory has been","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":5128,"byte_end":5204,"line_start":141,"line_end":141,"column_start":1,"column_end":77}},{"value":"/ zeroed.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":5205,"byte_end":5216,"line_start":142,"line_end":142,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":5217,"byte_end":5220,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ All of that said, there is still potential for microarchitectural attacks","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":5221,"byte_end":5298,"line_start":144,"line_end":144,"column_start":1,"column_end":78}},{"value":"/ (ala Spectre/Meltdown) to leak \"zeroized\" secrets through covert channels.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":5299,"byte_end":5377,"line_start":145,"line_end":145,"column_start":1,"column_end":79}},{"value":"/ This crate makes no guarantees that zeroized values cannot be leaked","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":5378,"byte_end":5450,"line_start":146,"line_end":146,"column_start":1,"column_end":73}},{"value":"/ through such channels, as they represent flaws in the underlying hardware.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":5451,"byte_end":5529,"line_start":147,"line_end":147,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":5530,"byte_end":5533,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ ## Stack/Heap Zeroing Notes","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":5534,"byte_end":5565,"line_start":149,"line_end":149,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":5566,"byte_end":5569,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ This crate can be used to zero values from either the stack or the heap.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":5570,"byte_end":5646,"line_start":151,"line_end":151,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":5647,"byte_end":5650,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ However, be aware several operations in Rust can unintentionally leave","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":5651,"byte_end":5725,"line_start":153,"line_end":153,"column_start":1,"column_end":75}},{"value":"/ copies of data in memory. This includes but is not limited to:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":5726,"byte_end":5792,"line_start":154,"line_end":154,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":5793,"byte_end":5796,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ - Moves and [`Copy`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":5797,"byte_end":5821,"line_start":156,"line_end":156,"column_start":1,"column_end":25}},{"value":"/ - Heap reallocation when using [`Vec`] and [`String`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":5822,"byte_end":5879,"line_start":157,"line_end":157,"column_start":1,"column_end":58}},{"value":"/ - Borrowers of a reference making copies of the data","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":5880,"byte_end":5936,"line_start":158,"line_end":158,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":5937,"byte_end":5940,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ [`Pin`][`core::pin::Pin`] can be leveraged in conjunction with this crate","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":5941,"byte_end":6018,"line_start":160,"line_end":160,"column_start":1,"column_end":78}},{"value":"/ to ensure data kept on the stack isn't moved.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":6019,"byte_end":6068,"line_start":161,"line_end":161,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":6069,"byte_end":6072,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ The `Zeroize` impls for `Vec` and `String` zeroize the entire capacity of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":6073,"byte_end":6150,"line_start":163,"line_end":163,"column_start":1,"column_end":78}},{"value":"/ their backing buffer, but cannot guarantee copies of the data were not","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":6151,"byte_end":6225,"line_start":164,"line_end":164,"column_start":1,"column_end":75}},{"value":"/ previously made by buffer reallocation. It's therefore important when","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":6226,"byte_end":6299,"line_start":165,"line_end":165,"column_start":1,"column_end":74}},{"value":"/ attempting to zeroize such buffers to initialize them to the correct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":6300,"byte_end":6372,"line_start":166,"line_end":166,"column_start":1,"column_end":73}},{"value":"/ capacity, and take care to prevent subsequent reallocation.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":6373,"byte_end":6436,"line_start":167,"line_end":167,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":6437,"byte_end":6440,"line_start":168,"line_end":168,"column_start":1,"column_end":4}},{"value":"/ The `secrecy` crate provides higher-level abstractions for eliminating","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":6441,"byte_end":6515,"line_start":169,"line_end":169,"column_start":1,"column_end":75}},{"value":"/ usage patterns which can cause reallocations:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":6516,"byte_end":6565,"line_start":170,"line_end":170,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":6566,"byte_end":6569,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ <https://crates.io/crates/secrecy>","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":6570,"byte_end":6608,"line_start":172,"line_end":172,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":6609,"byte_end":6612,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ ## What about: clearing registers, mlock, mprotect, etc?","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":6613,"byte_end":6673,"line_start":174,"line_end":174,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":6674,"byte_end":6677,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ This crate is focused on providing simple, unobtrusive support for reliably","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":6678,"byte_end":6757,"line_start":176,"line_end":176,"column_start":1,"column_end":80}},{"value":"/ zeroing memory using the best approach possible on stable Rust.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":6758,"byte_end":6825,"line_start":177,"line_end":177,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":6826,"byte_end":6829,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ Clearing registers is a difficult problem that can't easily be solved by","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":6830,"byte_end":6906,"line_start":179,"line_end":179,"column_start":1,"column_end":77}},{"value":"/ something like a crate, and requires either inline ASM or rustc support.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":6907,"byte_end":6983,"line_start":180,"line_end":180,"column_start":1,"column_end":77}},{"value":"/ See <https://github.com/rust-lang/rust/issues/17046> for background on","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":6984,"byte_end":7058,"line_start":181,"line_end":181,"column_start":1,"column_end":75}},{"value":"/ this particular problem.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":7059,"byte_end":7087,"line_start":182,"line_end":182,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":7088,"byte_end":7091,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ Other memory protection mechanisms are interesting and useful, but often","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":7092,"byte_end":7168,"line_start":184,"line_end":184,"column_start":1,"column_end":77}},{"value":"/ overkill (e.g. defending against RAM scraping or attackers with swap access).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":7169,"byte_end":7250,"line_start":185,"line_end":185,"column_start":1,"column_end":82}},{"value":"/ In as much as there may be merit to these approaches, there are also many","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":7251,"byte_end":7328,"line_start":186,"line_end":186,"column_start":1,"column_end":78}},{"value":"/ other crates that already implement more sophisticated memory protections.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":7329,"byte_end":7407,"line_start":187,"line_end":187,"column_start":1,"column_end":79}},{"value":"/ Such protections are explicitly out-of-scope for this crate.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":7408,"byte_end":7472,"line_start":188,"line_end":188,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":7473,"byte_end":7476,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ Zeroing memory is [good cryptographic hygiene] and this crate seeks to promote","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":7477,"byte_end":7559,"line_start":190,"line_end":190,"column_start":1,"column_end":83}},{"value":"/ it in the most unobtrusive manner possible. This includes omitting complex","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":7560,"byte_end":7638,"line_start":191,"line_end":191,"column_start":1,"column_end":79}},{"value":"/ `unsafe` memory protection systems and just trying to make the best memory","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":7639,"byte_end":7717,"line_start":192,"line_end":192,"column_start":1,"column_end":79}},{"value":"/ zeroing crate available.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":7718,"byte_end":7746,"line_start":193,"line_end":193,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":7747,"byte_end":7750,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ [Zeroing memory securely is hard]: http://www.daemonology.net/blog/2014-09-04-how-to-zero-a-buffer.html","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":7751,"byte_end":7858,"line_start":195,"line_end":195,"column_start":1,"column_end":108}},{"value":"/ [Unsafe Code Guidelines Working Group]: https://github.com/rust-lang/unsafe-code-guidelines","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":7859,"byte_end":7954,"line_start":196,"line_end":196,"column_start":1,"column_end":96}},{"value":"/ [these remarks have been removed]: https://github.com/rust-lang/rust/pull/60972","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":7955,"byte_end":8038,"line_start":197,"line_end":197,"column_start":1,"column_end":84}},{"value":"/ [good cryptographic hygiene]: https://github.com/veorq/cryptocoding#clean-memory-of-secret-data","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":8039,"byte_end":8138,"line_start":198,"line_end":198,"column_start":1,"column_end":100}},{"value":"/ [`Ordering::SeqCst`]: core::sync::atomic::Ordering::SeqCst","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":8139,"byte_end":8201,"line_start":199,"line_end":199,"column_start":1,"column_end":63}},{"value":"no_std","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":8203,"byte_end":8213,"line_start":201,"line_end":201,"column_start":1,"column_end":11}},{"value":"warn(missing_docs, rust_2018_idioms, unused_qualifications)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":8310,"byte_end":8373,"line_start":204,"line_end":204,"column_start":1,"column_end":64}}]},{"kind":"Trait","id":{"krate":0,"index":64},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":9047,"byte_end":9054,"line_start":228,"line_end":228,"column_start":11,"column_end":18},"name":"Zeroize","qualname":"::Zeroize","value":"Zeroize","parent":null,"children":[{"krate":0,"index":65}],"decl_id":null,"docs":" Trait for securely erasing types from memory\n","sig":null,"attributes":[{"value":"/ Trait for securely erasing types from memory","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":8988,"byte_end":9036,"line_start":227,"line_end":227,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":9215,"byte_end":9222,"line_start":231,"line_end":231,"column_start":8,"column_end":15},"name":"zeroize","qualname":"::Zeroize::zeroize","value":"pub fn zeroize(&mut Self)","parent":{"krate":0,"index":64},"children":[],"decl_id":null,"docs":" Zero out this object from memory using Rust intrinsics which ensure the\n zeroization operation is not \"optimized away\" by the compiler.\n","sig":null,"attributes":[{"value":"/ Zero out this object from memory using Rust intrinsics which ensure the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":9061,"byte_end":9136,"line_start":229,"line_end":229,"column_start":5,"column_end":80}},{"value":"/ zeroization operation is not \"optimized away\" by the compiler.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":9141,"byte_end":9207,"line_start":230,"line_end":230,"column_start":5,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":66},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":9325,"byte_end":9340,"line_start":235,"line_end":235,"column_start":11,"column_end":26},"name":"DefaultIsZeroes","qualname":"::DefaultIsZeroes","value":"DefaultIsZeroes: Copy + Default + Sized","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for types whose `Default` is the desired zeroization result\n","sig":null,"attributes":[{"value":"/ Marker trait for types whose `Default` is the desired zeroization result","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":9238,"byte_end":9314,"line_start":234,"line_end":234,"column_start":1,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":90},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":16169,"byte_end":16179,"line_start":450,"line_end":450,"column_start":11,"column_end":21},"name":"TryZeroize","qualname":"::TryZeroize","value":"TryZeroize","parent":null,"children":[{"krate":0,"index":91}],"decl_id":null,"docs":" Fallible trait for representing cases where zeroization may or may not be\n possible.","sig":null,"attributes":[{"value":"/ Fallible trait for representing cases where zeroization may or may not be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":15916,"byte_end":15993,"line_start":445,"line_end":445,"column_start":1,"column_end":78}},{"value":"/ possible.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":15994,"byte_end":16007,"line_start":446,"line_end":446,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":16008,"byte_end":16011,"line_start":447,"line_end":447,"column_start":1,"column_end":4}},{"value":"/ This is primarily useful for scenarios like reference counted data, where","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":16012,"byte_end":16089,"line_start":448,"line_end":448,"column_start":1,"column_end":78}},{"value":"/ zeroization is only possible when the last reference is dropped.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":16090,"byte_end":16158,"line_start":449,"line_end":449,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":16371,"byte_end":16382,"line_start":455,"line_end":455,"column_start":8,"column_end":19},"name":"try_zeroize","qualname":"::TryZeroize::try_zeroize","value":"pub fn try_zeroize(&mut Self) -> bool","parent":{"krate":0,"index":90},"children":[],"decl_id":null,"docs":" Try to zero out this object from memory using Rust intrinsics which\n ensure the zeroization operation is not \"optimized away\" by the\n compiler.\n","sig":null,"attributes":[{"value":"/ Try to zero out this object from memory using Rust intrinsics which","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":16186,"byte_end":16257,"line_start":451,"line_end":451,"column_start":5,"column_end":76}},{"value":"/ ensure the zeroization operation is not \"optimized away\" by the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":16262,"byte_end":16329,"line_start":452,"line_end":452,"column_start":5,"column_end":72}},{"value":"/ compiler.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":16334,"byte_end":16347,"line_start":453,"line_end":453,"column_start":5,"column_end":18}},{"value":"must_use","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":16352,"byte_end":16363,"line_start":454,"line_end":454,"column_start":5,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":160},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":16584,"byte_end":16593,"line_start":461,"line_end":461,"column_start":12,"column_end":21},"name":"Zeroizing","qualname":"::Zeroizing","value":"","parent":null,"children":[],"decl_id":null,"docs":" `Zeroizing` is a a wrapper for any `Z: Zeroize` type which implements a\n `Drop` handler which zeroizes dropped values.\n","sig":null,"attributes":[{"value":"/ `Zeroizing` is a a wrapper for any `Z: Zeroize` type which implements a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":16406,"byte_end":16481,"line_start":458,"line_end":458,"column_start":1,"column_end":76}},{"value":"/ `Drop` handler which zeroizes dropped values.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":16482,"byte_end":16531,"line_start":459,"line_end":459,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":16776,"byte_end":16779,"line_start":469,"line_end":469,"column_start":12,"column_end":15},"name":"new","qualname":"<Zeroizing<Z>>::new","value":"pub fn new(Z) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Move value inside a `Zeroizing` wrapper which ensures it will be\n zeroized when it's dropped.\n","sig":null,"attributes":[{"value":"/ Move value inside a `Zeroizing` wrapper which ensures it will be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":16660,"byte_end":16728,"line_start":467,"line_end":467,"column_start":5,"column_end":73}},{"value":"/ zeroized when it's dropped.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":16733,"byte_end":16764,"line_start":468,"line_end":468,"column_start":5,"column_end":36}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":9389,"byte_end":9390,"line_start":237,"line_end":237,"column_start":21,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":10593,"byte_end":10600,"line_start":296,"line_end":296,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":10754,"byte_end":10760,"line_start":307,"line_end":307,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":16619,"byte_end":16628,"line_start":463,"line_end":463,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":16865,"byte_end":16874,"line_start":474,"line_end":474,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":17085,"byte_end":17094,"line_start":485,"line_end":485,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":17219,"byte_end":17228,"line_start":494,"line_end":494,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":17357,"byte_end":17366,"line_start":505,"line_end":505,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":17483,"byte_end":17492,"line_start":514,"line_end":514,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":17600,"byte_end":17609,"line_start":523,"line_end":523,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":9342,"byte_end":9346,"line_start":235,"line_end":235,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":1,"index":3014},"to":{"krate":0,"index":66}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":9349,"byte_end":9356,"line_start":235,"line_end":235,"column_start":35,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":2982},"to":{"krate":0,"index":66}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":9359,"byte_end":9364,"line_start":235,"line_end":235,"column_start":45,"column_end":50},"kind":"SuperTrait","from":{"krate":1,"index":3009},"to":{"krate":0,"index":66}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":9389,"byte_end":9390,"line_start":237,"line_end":237,"column_start":21,"column_end":22},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":68},"to":{"krate":0,"index":64}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":10593,"byte_end":10600,"line_start":296,"line_end":296,"column_start":25,"column_end":32},"kind":{"Impl":{"id":29}},"from":{"krate":1,"index":10152},"to":{"krate":0,"index":64}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":10754,"byte_end":10760,"line_start":307,"line_end":307,"column_start":21,"column_end":27},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":36969},"to":{"krate":0,"index":64}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":16619,"byte_end":16628,"line_start":463,"line_end":463,"column_start":9,"column_end":18},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":160},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":16865,"byte_end":16874,"line_start":474,"line_end":474,"column_start":36,"column_end":45},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":160},"to":{"krate":1,"index":2625}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":17085,"byte_end":17094,"line_start":485,"line_end":485,"column_start":21,"column_end":30},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":160},"to":{"krate":1,"index":2910}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":17219,"byte_end":17228,"line_start":494,"line_end":494,"column_start":24,"column_end":33},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":160},"to":{"krate":1,"index":3215}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":17357,"byte_end":17366,"line_start":505,"line_end":505,"column_start":27,"column_end":36},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":160},"to":{"krate":1,"index":3228}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":17483,"byte_end":17492,"line_start":514,"line_end":514,"column_start":21,"column_end":30},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":160},"to":{"krate":0,"index":64}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/zeroize-1.4.3/src/lib.rs","byte_start":17600,"byte_end":17609,"line_start":523,"line_end":523,"column_start":18,"column_end":27},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":160},"to":{"krate":1,"index":3239}}]}