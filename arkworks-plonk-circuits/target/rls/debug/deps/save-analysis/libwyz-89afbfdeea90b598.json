{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0","program":"/Users/thomascnorton/.rustup/toolchains/nightly-2021-11-10-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","wyz","--edition=2018","/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"alloc\"","-C","metadata=89afbfdeea90b598","-C","extra-filename=-89afbfdeea90b598","--out-dir","/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps","-L","dependency=/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/thomascnorton/.rustup/toolchains/nightly-2021-11-10-aarch64-apple-darwin"],"output":"/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps/libwyz-89afbfdeea90b598.rmeta"},"prelude":{"crate_id":{"name":"wyz","disambiguator":[17131935380277713959,0]},"crate_root":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src","external_crates":[{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5231689799850066461,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[17864008973282999150,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[17296295565214172833,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[2118848927325286491,0]}}],"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/lib.rs","byte_start":0,"byte_end":715,"line_start":1,"line_end":35,"column_start":1,"column_end":17}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/lib.rs","byte_start":622,"byte_end":623,"line_start":29,"line_end":29,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/lib.rs","byte_start":638,"byte_end":639,"line_start":30,"line_end":30,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/lib.rs","byte_start":655,"byte_end":656,"line_start":31,"line_end":31,"column_start":15,"column_end":16},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/lib.rs","byte_start":671,"byte_end":672,"line_start":32,"line_end":32,"column_start":14,"column_end":15},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/lib.rs","byte_start":0,"byte_end":715,"line_start":1,"line_end":35,"column_start":1,"column_end":17},"name":"","qualname":"::","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":19},{"krate":0,"index":106},{"krate":0,"index":176},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332}],"decl_id":null,"docs":" `wyz` – myrrlyn’s wyzyrdly library","sig":null,"attributes":[{"value":"* `wyz` – myrrlyn’s wyzyrdly library\n\nThis crate consolidates all the small tools and conveniences I’ve built up in my\nexperience building Rust crates.\n\nEach module has more documentation about what it contains. The modules are\nlargely independent, and can be used individually.\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/lib.rs","byte_start":0,"byte_end":290,"line_start":1,"line_end":8,"column_start":1,"column_end":4}},{"value":"no_std","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/lib.rs","byte_start":292,"byte_end":302,"line_start":10,"line_end":10,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/lib.rs","byte_start":333,"byte_end":351,"line_start":11,"line_end":11,"column_start":31,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":5},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"conv","qualname":"::conv","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","parent":null,"children":[{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":17}],"decl_id":null,"docs":" Directed Type Conversion","sig":null,"attributes":[{"value":"* Directed Type Conversion\n\nThis module provides sibling traits to the `std::convert` module. The standard\nlibrary puts the type parameter in the trait declaration, which makes those\ntraits generic and suitable for constraint clauses and function calls, but not\nusable in indeterminate method-call positions. These traits put the type\nparameter in the function declaration, making the trait non-generic and allowing\nthe function to be called in method-call position without ambiguity.\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":717,"byte_end":1207,"line_start":1,"line_end":9,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":9},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":3769,"byte_end":3773,"line_start":85,"line_end":85,"column_start":11,"column_end":15},"name":"Conv","qualname":"::conv::Conv","value":"Conv: Sized","parent":null,"children":[{"krate":0,"index":10}],"decl_id":null,"docs":" Directed Type Conversion","sig":null,"attributes":[{"value":"* Directed Type Conversion\n\nThis trait is an accessory to [`From`] and [`Into`]. It works by moving the\ndestination type from the trait name (`Into<Target>::into`) into the method name\n(`Conv::conv::<Target>`). This change makes `Into<_>` the correct trait to use\nin trait bounds and `.conv::<_>` the correct method to use in expressions.\n\nA `conv::<T>` method is automatically available whenever an `Into<T>`\nimplementation exists for a type. `Into<T>` is most commonly implemented by\ntaking advantage of the reflexive blanket implentation using `From`, but can\nalso be manually implemented as desired.\n\n`.into()` cannot be used in intermediate expressions, because it is impossible\nfor the compiler’s type engine to select a unique `Into<T>` implementation. This\nmeans that expressions like `v.into().use()` will never compile. Users can\nreplace `.into()` with `.conv::<Dest>()` in order to inform the compiler of the\ntype of the expression after the conversion, and make compilation succeed.\n\n`Conv` cannot be used in trait bounds, because the trait itself is not generic.\nAll `Sized` types implement `Conv` by default, so specifying that a type must be\n`Conv` adds no information to the solver.\n\n# Examples\n\n## Conversion as methods\n\nConversion with `.into()` will fail to compile, even with the type annotation:\n\n```rust,compile_fail\nlet s: String = \"static\".into().clone();\n//              ^^^^^^^^^^^^^^^ cannot infer type for `T`\n// note: type must be known at this point\n```\n\nwhile the equivalent code with `.conv::<_>` does compile:\n\n```rust\n# use wyz::conv::Conv;\nlet s = \"static\".conv::<String>().clone();\n```\n\n## Conversion as traits\n\nBounding a type with `Conv` will not compile, because the trait itself gives no\ninformation:\n\n```rust,compile_fail\n# use wyz::conv::Conv;\nfn lift<T: Conv>(src: T) -> String {\n  src.conv::<String>().clone()\n//    ^^^^ the trait `From<T>` is not implemented for `String`\n// help: consider adding a `where String: From<T>` bound\n// note: required because of the requirements on the impl of `Into<String>` for `T`\n}\n```\n\nThis can be fixed by adding the clause `where String: From<T>`, or by using the\nbound `Into`:\n\n```rust\n# use wyz::conv::Conv;\nfn lift<T: Into<String>>(src: T) -> String {\n  src.conv::<String>().clone()\n}\n```\n\nThe `Into<T>` trait bound makes available both the `Into::<T>::into` method and\nthe `Conv::conv::<T>` method.\n\n[`From`]: https://doc.rust-lang.org/std/convert/trait.From.html\n[`Into`]: https://doc.rust-lang.org/std/convert/trait.Into.html\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":1238,"byte_end":3758,"line_start":13,"line_end":84,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":10},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":4262,"byte_end":4266,"line_start":101,"line_end":101,"column_start":5,"column_end":9},"name":"conv","qualname":"::conv::Conv::conv","value":"pub fn conv<T: Sized>(Self) -> T where Self: Into<T>","parent":{"krate":0,"index":9},"children":[],"decl_id":null,"docs":" Converts `self` into a target type.","sig":null,"attributes":[{"value":"/ Converts `self` into a target type.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":3784,"byte_end":3823,"line_start":86,"line_end":86,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":3825,"byte_end":3828,"line_start":87,"line_end":87,"column_start":2,"column_end":5}},{"value":"/ This method runs `<Self as Into<T>>::into` on `self` to produce the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":3830,"byte_end":3901,"line_start":88,"line_end":88,"column_start":2,"column_end":73}},{"value":"/ desired output. The only difference between using `Conv::conv` and","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":3903,"byte_end":3973,"line_start":89,"line_end":89,"column_start":2,"column_end":72}},{"value":"/ `Into::into` is where the target type is placed in the name; `.conv()`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":3975,"byte_end":4049,"line_start":90,"line_end":90,"column_start":2,"column_end":76}},{"value":"/ can be used in intermediate positions of an expression, while `.into()`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":4051,"byte_end":4126,"line_start":91,"line_end":91,"column_start":2,"column_end":77}},{"value":"/ cannot.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":4128,"byte_end":4139,"line_start":92,"line_end":92,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":4141,"byte_end":4144,"line_start":93,"line_end":93,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":4146,"byte_end":4160,"line_start":94,"line_end":94,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":4162,"byte_end":4165,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":4167,"byte_end":4178,"line_start":96,"line_end":96,"column_start":2,"column_end":13}},{"value":"/ use wyz::conv::Conv;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":4180,"byte_end":4204,"line_start":97,"line_end":97,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":4206,"byte_end":4209,"line_start":98,"line_end":98,"column_start":2,"column_end":5}},{"value":"/ let t = \"hello\".conv::<String>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":4211,"byte_end":4248,"line_start":99,"line_end":99,"column_start":2,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":4250,"byte_end":4257,"line_start":100,"line_end":100,"column_start":2,"column_end":9}}]},{"kind":"Trait","id":{"krate":0,"index":14},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":7208,"byte_end":7215,"line_start":187,"line_end":187,"column_start":11,"column_end":18},"name":"TryConv","qualname":"::conv::TryConv","value":"TryConv: Sized","parent":null,"children":[{"krate":0,"index":15}],"decl_id":null,"docs":" Directed Fallible Type Conversion","sig":null,"attributes":[{"value":"* Directed Fallible Type Conversion\n\nThis trait is an accessory to [`TryFrom`] and [`TryInto`]. It works by moving\nthe destination type from the trait name (`TryInto<Target>::try_into`) into the\nmethod name (`TryConv::try_conv::<Target>`). This change makes `TryInto<_>` the\ncorrect trait to use in trait bounds and `.try_conv::<_>` the correct method to\nuse in expressions.\n\nA `try_conv::<T>` method is automatically available whenever a `TryInto<T>`\nimplementation exists for a type. `TryInto<T>` is most commonly implemented by\ntaking advantage of the reflexive blanket implentation using `TryFrom`, but can\nalso be manually implemented as desired.\n\n`.try_into()` cannot be used in intermediate expressions, because it is\nimpossible for the compiler’s type engine to select a unique `TryInto<T>`\nimplementation. This means that expressions like `v.try_into().use()` will never\ncompile. Users can replace `.try_into()` with `.try_conv::<Dest>()` in order to\ninform the compiler of the type of the expression after the conversion, and make\ncompilation succeed.\n\n`TryConv` cannot be used in trait bounds, because the trait itself is not\ngeneric. All `Sized` types implement `TryConv` by default, so specifying that a\ntype must be `TryConv` adds no information to the solver.\n\n# Examples\n\n## Conversion as methods\n\nConversion with `.try_into()` will fail to compile, even with the type\nannotation:\n\n```rust,ignore\nlet s: String = \"static\".try_into().unwrap().clone();\n//              ^^^^^^^^^^^^^^^^^^^ cannot infer type for `T`\n// note: type must be known at this point\n```\n\nwhile the equivalent code with `.try_conv::<_>` does compile:\n\n```rust\n# use wyz::conv::TryConv;\nlet s = \"static\".try_conv::<String>().unwrap().clone();\n```\n\n## Conversion as traits\n\nBounding a type with `TryConv` will not compile, because the trait itself gives\nno information:\n\n```rust,ignore\n# use wyz::conv::TryConv;\nfn lift<T: TryConv>(src: T) -> String {\n  src.try_conv::<String>().clone()\n//    ^^^^^^^^ the trait `From<T>` is not implemented for `String`\n// help: consider adding a `where String: From<T>` bound\n// note: required because of the requirements on the impl of `Into<String>` for `T`\n// note: required because of the requirements on the impl of `TryFrom<T>` for `String`\n}\n```\n\nThis can be fixed by adding the clause `where String: TryFrom<T>`, or by using\nthe bound `TryInto`:\n\n```rust\n# use std::convert::TryInto;\n# use wyz::conv::TryConv;\nfn lift<T: TryInto<String>>(src: T) -> String {\n  src.try_conv::<String>().ok().unwrap().clone()\n}\n```\n\nThe `TryInto<T>` trait bound makes available both the `TryInto::<T>::try_into`\nmethod and the `TryConv::try_conv::<T>` method.\n\n[`TryFrom`]: https://doc.rust-lang.org/std/convert/trait.TryFrom.html\n[`TryInto`]: https://doc.rust-lang.org/std/convert/trait.TryInto.html\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":4380,"byte_end":7197,"line_start":110,"line_end":186,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":7760,"byte_end":7768,"line_start":203,"line_end":203,"column_start":5,"column_end":13},"name":"try_conv","qualname":"::conv::TryConv::try_conv","value":"pub fn try_conv<T: Sized>(Self) -> Result<T, Self::Error> where\nSelf: TryInto<T>","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Attempts to convert `self` into a target type.","sig":null,"attributes":[{"value":"/ Attempts to convert `self` into a target type.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":7226,"byte_end":7276,"line_start":188,"line_end":188,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":7278,"byte_end":7281,"line_start":189,"line_end":189,"column_start":2,"column_end":5}},{"value":"/ This method runs `<Self as TryInto<T>>::try_into` on `self` to produce","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":7283,"byte_end":7357,"line_start":190,"line_end":190,"column_start":2,"column_end":76}},{"value":"/ the desired output. The only difference between using","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":7359,"byte_end":7416,"line_start":191,"line_end":191,"column_start":2,"column_end":59}},{"value":"/ `TryConv::try_conv` and `TryInto::try_into` is where the target type is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":7418,"byte_end":7493,"line_start":192,"line_end":192,"column_start":2,"column_end":77}},{"value":"/ placed in the name; `.try_conv()` can be used in intermediate positions","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":7495,"byte_end":7570,"line_start":193,"line_end":193,"column_start":2,"column_end":77}},{"value":"/ of an expression, while `.try_into()` cannot.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":7572,"byte_end":7621,"line_start":194,"line_end":194,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":7623,"byte_end":7626,"line_start":195,"line_end":195,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":7628,"byte_end":7642,"line_start":196,"line_end":196,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":7644,"byte_end":7647,"line_start":197,"line_end":197,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":7649,"byte_end":7660,"line_start":198,"line_end":198,"column_start":2,"column_end":13}},{"value":"/ use wyz::conv::TryConv;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":7662,"byte_end":7689,"line_start":199,"line_end":199,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":7691,"byte_end":7694,"line_start":200,"line_end":200,"column_start":2,"column_end":5}},{"value":"/ let t = \"hello\".try_conv::<String>().unwrap();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":7696,"byte_end":7746,"line_start":201,"line_end":201,"column_start":2,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":7748,"byte_end":7755,"line_start":202,"line_end":202,"column_start":2,"column_end":9}}]},{"kind":"Mod","id":{"krate":0,"index":19},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fmt","qualname":"::fmt","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":71},{"krate":0,"index":73},{"krate":0,"index":77},{"krate":0,"index":81},{"krate":0,"index":85},{"krate":0,"index":89},{"krate":0,"index":93},{"krate":0,"index":97},{"krate":0,"index":101},{"krate":0,"index":105},{"krate":0,"index":333},{"krate":0,"index":336},{"krate":0,"index":339},{"krate":0,"index":342},{"krate":0,"index":345},{"krate":0,"index":348},{"krate":0,"index":351},{"krate":0,"index":354},{"krate":0,"index":357},{"krate":0,"index":360},{"krate":0,"index":364},{"krate":0,"index":367},{"krate":0,"index":370},{"krate":0,"index":373},{"krate":0,"index":376},{"krate":0,"index":379},{"krate":0,"index":382},{"krate":0,"index":385},{"krate":0,"index":388},{"krate":0,"index":391},{"krate":0,"index":394},{"krate":0,"index":397},{"krate":0,"index":400},{"krate":0,"index":404},{"krate":0,"index":407},{"krate":0,"index":410},{"krate":0,"index":413},{"krate":0,"index":416},{"krate":0,"index":419},{"krate":0,"index":422},{"krate":0,"index":425},{"krate":0,"index":428},{"krate":0,"index":431},{"krate":0,"index":434},{"krate":0,"index":437},{"krate":0,"index":440},{"krate":0,"index":444},{"krate":0,"index":447},{"krate":0,"index":450},{"krate":0,"index":453},{"krate":0,"index":456},{"krate":0,"index":459},{"krate":0,"index":462},{"krate":0,"index":465},{"krate":0,"index":468},{"krate":0,"index":471},{"krate":0,"index":474},{"krate":0,"index":477},{"krate":0,"index":480},{"krate":0,"index":484},{"krate":0,"index":487},{"krate":0,"index":490},{"krate":0,"index":493},{"krate":0,"index":496},{"krate":0,"index":499},{"krate":0,"index":502},{"krate":0,"index":505},{"krate":0,"index":508},{"krate":0,"index":511},{"krate":0,"index":514},{"krate":0,"index":517},{"krate":0,"index":520},{"krate":0,"index":524},{"krate":0,"index":527},{"krate":0,"index":530},{"krate":0,"index":533},{"krate":0,"index":536},{"krate":0,"index":539},{"krate":0,"index":542},{"krate":0,"index":545},{"krate":0,"index":548},{"krate":0,"index":551},{"krate":0,"index":554},{"krate":0,"index":557},{"krate":0,"index":560},{"krate":0,"index":564},{"krate":0,"index":567},{"krate":0,"index":570},{"krate":0,"index":573},{"krate":0,"index":576},{"krate":0,"index":579},{"krate":0,"index":582},{"krate":0,"index":585},{"krate":0,"index":588},{"krate":0,"index":591},{"krate":0,"index":594},{"krate":0,"index":597},{"krate":0,"index":600},{"krate":0,"index":604},{"krate":0,"index":607},{"krate":0,"index":610},{"krate":0,"index":613},{"krate":0,"index":616},{"krate":0,"index":619},{"krate":0,"index":622},{"krate":0,"index":625},{"krate":0,"index":628},{"krate":0,"index":631},{"krate":0,"index":634},{"krate":0,"index":637},{"krate":0,"index":640},{"krate":0,"index":644},{"krate":0,"index":647},{"krate":0,"index":650}],"decl_id":null,"docs":" Format forwarding","sig":null,"attributes":[{"value":"* Format forwarding\n\nThis module provides wrapper types for each formatting trait other than `Debug`\nwhich, when `Debug`-formatted, forward to the original trait instead of `Debug`.\n\nEach wrapper type is a tuple struct so that it can be used as a named\nconstructor, such as in `.map(FmtDisplay)`. In addition, a blanket trait adds\nextension methods `.fmt_<trait_name>>()` to provide the corresponding wrap.\n\nAny modifiers in the format template string or struct modifier are passed\nthrough to the desired trait implementation unchanged. The only effect of the\nforwarding types in this module is to change the `?` template character to one\nof the other trait signifiers.\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":7916,"byte_end":8591,"line_start":1,"line_end":14,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":62},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":8837,"byte_end":8847,"line_start":37,"line_end":37,"column_start":11,"column_end":21},"name":"FmtForward","qualname":"::fmt::FmtForward","value":"FmtForward: Sized","parent":null,"children":[{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70}],"decl_id":null,"docs":" Wraps any value with a format-forward to `Debug`.\n","sig":null,"attributes":[{"value":"/ Wraps any value with a format-forward to `Debug`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":8773,"byte_end":8826,"line_start":36,"line_end":36,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":8939,"byte_end":8949,"line_start":39,"line_end":39,"column_start":5,"column_end":15},"name":"fmt_binary","qualname":"::fmt::FmtForward::fmt_binary","value":"pub fn fmt_binary(Self) -> FmtBinary<Self> where Self: Binary","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Causes `self` to use its `Binary` implementation when `Debug`-formatted.\n","sig":null,"attributes":[{"value":"/ Causes `self` to use its `Binary` implementation when `Debug`-formatted.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":8858,"byte_end":8934,"line_start":38,"line_end":38,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":9107,"byte_end":9118,"line_start":46,"line_end":46,"column_start":5,"column_end":16},"name":"fmt_display","qualname":"::fmt::FmtForward::fmt_display","value":"pub fn fmt_display(Self) -> FmtDisplay<Self> where Self: Display","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Causes `self` to use its `Display` implementation when\n `Debug`-formatted.\n","sig":null,"attributes":[{"value":"/ Causes `self` to use its `Display` implementation when","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":9020,"byte_end":9078,"line_start":44,"line_end":44,"column_start":2,"column_end":60}},{"value":"/ `Debug`-formatted.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":9080,"byte_end":9102,"line_start":45,"line_end":45,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":9280,"byte_end":9293,"line_start":53,"line_end":53,"column_start":5,"column_end":18},"name":"fmt_lower_exp","qualname":"::fmt::FmtForward::fmt_lower_exp","value":"pub fn fmt_lower_exp(Self) -> FmtLowerExp<Self> where Self: LowerExp","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Causes `self` to use its `LowerExp` implementation when\n `Debug`-formatted.\n","sig":null,"attributes":[{"value":"/ Causes `self` to use its `LowerExp` implementation when","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":9192,"byte_end":9251,"line_start":51,"line_end":51,"column_start":2,"column_end":61}},{"value":"/ `Debug`-formatted.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":9253,"byte_end":9275,"line_start":52,"line_end":52,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":9458,"byte_end":9471,"line_start":60,"line_end":60,"column_start":5,"column_end":18},"name":"fmt_lower_hex","qualname":"::fmt::FmtForward::fmt_lower_hex","value":"pub fn fmt_lower_hex(Self) -> FmtLowerHex<Self> where Self: LowerHex","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Causes `self` to use its `LowerHex` implementation when\n `Debug`-formatted.\n","sig":null,"attributes":[{"value":"/ Causes `self` to use its `LowerHex` implementation when","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":9370,"byte_end":9429,"line_start":58,"line_end":58,"column_start":2,"column_end":61}},{"value":"/ `Debug`-formatted.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":9431,"byte_end":9453,"line_start":59,"line_end":59,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":9628,"byte_end":9637,"line_start":66,"line_end":66,"column_start":5,"column_end":14},"name":"fmt_octal","qualname":"::fmt::FmtForward::fmt_octal","value":"pub fn fmt_octal(Self) -> FmtOctal<Self> where Self: Octal","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Causes `self` to use its `Octal` implementation when `Debug`-formatted.\n","sig":null,"attributes":[{"value":"/ Causes `self` to use its `Octal` implementation when `Debug`-formatted.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":9548,"byte_end":9623,"line_start":65,"line_end":65,"column_start":2,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":9792,"byte_end":9803,"line_start":73,"line_end":73,"column_start":5,"column_end":16},"name":"fmt_pointer","qualname":"::fmt::FmtForward::fmt_pointer","value":"pub fn fmt_pointer(Self) -> FmtPointer<Self> where Self: Pointer","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Causes `self` to use its `Pointer` implementation when\n `Debug`-formatted.\n","sig":null,"attributes":[{"value":"/ Causes `self` to use its `Pointer` implementation when","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":9705,"byte_end":9763,"line_start":71,"line_end":71,"column_start":2,"column_end":60}},{"value":"/ `Debug`-formatted.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":9765,"byte_end":9787,"line_start":72,"line_end":72,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":9965,"byte_end":9978,"line_start":80,"line_end":80,"column_start":5,"column_end":18},"name":"fmt_upper_exp","qualname":"::fmt::FmtForward::fmt_upper_exp","value":"pub fn fmt_upper_exp(Self) -> FmtUpperExp<Self> where Self: UpperExp","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Causes `self` to use its `UpperExp` implementation when\n `Debug`-formatted.\n","sig":null,"attributes":[{"value":"/ Causes `self` to use its `UpperExp` implementation when","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":9877,"byte_end":9936,"line_start":78,"line_end":78,"column_start":2,"column_end":61}},{"value":"/ `Debug`-formatted.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":9938,"byte_end":9960,"line_start":79,"line_end":79,"column_start":2,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10143,"byte_end":10156,"line_start":87,"line_end":87,"column_start":5,"column_end":18},"name":"fmt_upper_hex","qualname":"::fmt::FmtForward::fmt_upper_hex","value":"pub fn fmt_upper_hex(Self) -> FmtUpperHex<Self> where Self: UpperHex","parent":{"krate":0,"index":62},"children":[],"decl_id":null,"docs":" Causes `self` to use its `UpperHex` implementation when\n `Debug`-formatted.\n","sig":null,"attributes":[{"value":"/ Causes `self` to use its `UpperHex` implementation when","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10055,"byte_end":10114,"line_start":85,"line_end":85,"column_start":2,"column_end":61}},{"value":"/ `Debug`-formatted.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10116,"byte_end":10138,"line_start":86,"line_end":86,"column_start":2,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":73},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10374,"byte_end":10383,"line_start":98,"line_end":98,"column_start":12,"column_end":21},"name":"FmtBinary","qualname":"::fmt::FmtBinary","value":"","parent":null,"children":[],"decl_id":null,"docs":" Forwards a type’s `Binary` formatting implementation to `Debug`.\n","sig":null,"attributes":[{"value":"/ Forwards a type’s `Binary` formatting implementation to `Debug`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10271,"byte_end":10341,"line_start":96,"line_end":96,"column_start":1,"column_end":69}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10342,"byte_end":10362,"line_start":97,"line_end":97,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":76},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10395,"byte_end":10400,"line_start":98,"line_end":98,"column_start":33,"column_end":38},"name":"0","qualname":"::fmt::FmtBinary::0","value":"T","parent":{"krate":0,"index":73},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":77},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10508,"byte_end":10518,"line_start":102,"line_end":102,"column_start":12,"column_end":22},"name":"FmtDisplay","qualname":"::fmt::FmtDisplay","value":"","parent":null,"children":[],"decl_id":null,"docs":" Forwards a type’s `Display` formatting implementation to `Debug`.\n","sig":null,"attributes":[{"value":"/ Forwards a type’s `Display` formatting implementation to `Debug`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10404,"byte_end":10475,"line_start":100,"line_end":100,"column_start":1,"column_end":70}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10476,"byte_end":10496,"line_start":101,"line_end":101,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":80},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10531,"byte_end":10536,"line_start":102,"line_end":102,"column_start":35,"column_end":40},"name":"0","qualname":"::fmt::FmtDisplay::0","value":"T","parent":{"krate":0,"index":77},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":81},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10645,"byte_end":10656,"line_start":106,"line_end":106,"column_start":12,"column_end":23},"name":"FmtLowerExp","qualname":"::fmt::FmtLowerExp","value":"","parent":null,"children":[],"decl_id":null,"docs":" Forwards a type’s `LowerExp` formatting implementation to `Debug`.\n","sig":null,"attributes":[{"value":"/ Forwards a type’s `LowerExp` formatting implementation to `Debug`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10540,"byte_end":10612,"line_start":104,"line_end":104,"column_start":1,"column_end":71}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10613,"byte_end":10633,"line_start":105,"line_end":105,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":84},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10670,"byte_end":10675,"line_start":106,"line_end":106,"column_start":37,"column_end":42},"name":"0","qualname":"::fmt::FmtLowerExp::0","value":"T","parent":{"krate":0,"index":81},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":85},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10784,"byte_end":10795,"line_start":110,"line_end":110,"column_start":12,"column_end":23},"name":"FmtLowerHex","qualname":"::fmt::FmtLowerHex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Forwards a type’s `LowerHex` formatting implementation to `Debug`.\n","sig":null,"attributes":[{"value":"/ Forwards a type’s `LowerHex` formatting implementation to `Debug`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10679,"byte_end":10751,"line_start":108,"line_end":108,"column_start":1,"column_end":71}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10752,"byte_end":10772,"line_start":109,"line_end":109,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":88},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10809,"byte_end":10814,"line_start":110,"line_end":110,"column_start":37,"column_end":42},"name":"0","qualname":"::fmt::FmtLowerHex::0","value":"T","parent":{"krate":0,"index":85},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":89},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10920,"byte_end":10928,"line_start":114,"line_end":114,"column_start":12,"column_end":20},"name":"FmtOctal","qualname":"::fmt::FmtOctal","value":"","parent":null,"children":[],"decl_id":null,"docs":" Forwards a type’s `Octal` formatting implementation to `Debug`.\n","sig":null,"attributes":[{"value":"/ Forwards a type’s `Octal` formatting implementation to `Debug`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10818,"byte_end":10887,"line_start":112,"line_end":112,"column_start":1,"column_end":68}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10888,"byte_end":10908,"line_start":113,"line_end":113,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":92},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10939,"byte_end":10944,"line_start":114,"line_end":114,"column_start":31,"column_end":36},"name":"0","qualname":"::fmt::FmtOctal::0","value":"T","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":93},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":11052,"byte_end":11062,"line_start":118,"line_end":118,"column_start":12,"column_end":22},"name":"FmtPointer","qualname":"::fmt::FmtPointer","value":"","parent":null,"children":[],"decl_id":null,"docs":" Forwards a type’s `Pointer` formatting implementation to `Debug`.\n","sig":null,"attributes":[{"value":"/ Forwards a type’s `Pointer` formatting implementation to `Debug`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10948,"byte_end":11019,"line_start":116,"line_end":116,"column_start":1,"column_end":70}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":11020,"byte_end":11040,"line_start":117,"line_end":117,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":96},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":11075,"byte_end":11080,"line_start":118,"line_end":118,"column_start":35,"column_end":40},"name":"0","qualname":"::fmt::FmtPointer::0","value":"T","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":97},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":11189,"byte_end":11200,"line_start":122,"line_end":122,"column_start":12,"column_end":23},"name":"FmtUpperExp","qualname":"::fmt::FmtUpperExp","value":"","parent":null,"children":[],"decl_id":null,"docs":" Forwards a type’s `UpperExp` formatting implementation to `Debug`.\n","sig":null,"attributes":[{"value":"/ Forwards a type’s `UpperExp` formatting implementation to `Debug`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":11084,"byte_end":11156,"line_start":120,"line_end":120,"column_start":1,"column_end":71}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":11157,"byte_end":11177,"line_start":121,"line_end":121,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":100},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":11214,"byte_end":11219,"line_start":122,"line_end":122,"column_start":37,"column_end":42},"name":"0","qualname":"::fmt::FmtUpperExp::0","value":"T","parent":{"krate":0,"index":97},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":101},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":11328,"byte_end":11339,"line_start":126,"line_end":126,"column_start":12,"column_end":23},"name":"FmtUpperHex","qualname":"::fmt::FmtUpperHex","value":"","parent":null,"children":[],"decl_id":null,"docs":" Forwards a type’s `UpperHex` formatting implementation to `Debug`.\n","sig":null,"attributes":[{"value":"/ Forwards a type’s `UpperHex` formatting implementation to `Debug`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":11223,"byte_end":11295,"line_start":124,"line_end":124,"column_start":1,"column_end":71}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":11296,"byte_end":11316,"line_start":125,"line_end":125,"column_start":1,"column_end":21}}]},{"kind":"Field","id":{"krate":0,"index":104},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":11353,"byte_end":11358,"line_start":126,"line_end":126,"column_start":37,"column_end":42},"name":"0","qualname":"::fmt::FmtUpperHex::0","value":"T","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":106},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pipe","qualname":"::pipe","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":126},{"krate":0,"index":135},{"krate":0,"index":146},{"krate":0,"index":157},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174}],"decl_id":null,"docs":" Pipe objects into functions, even those not available for dot-call.","sig":null,"attributes":[{"value":"* Pipe objects into functions, even those not available for dot-call.\n\nRust restricts the `.method()` call syntax to be available only on functions\ndefined in `impl [Trait for] Type` blocks, with language-blessed `self`\nreceivers.\n\nThis module allows any function to be `.call()`ed, with as little overhead as\nis possible in the language.\n\n# Examples\n\n```rust\nuse wyz::pipe::*;\n\nfn double(x: i32) -> i32 {\n  x * 2\n}\n\nfn double_ref(x: &i32) -> i32 {\n  *x * 2\n}\n\nassert_eq!(5.pipe(double), 10);\nassert_eq!(5.pipe_ref(double_ref), 10);\n```\n\nRust’s automatic de/reference chasing only works for the signatures Rust already\npermits in method-call syntax; the `Pipe` trait provides methods for certain\nreference conversion chasing, but cannot otherwise take advantage of the\nlanguage builtin support for such behavior on ordinary methods.\n\nPetition for a `|>` operator; sorry.\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":13278,"byte_end":14156,"line_start":1,"line_end":33,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":122},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":14567,"byte_end":14571,"line_start":55,"line_end":55,"column_start":11,"column_end":15},"name":"Pipe","qualname":"::pipe::Pipe","value":"Pipe: Sized","parent":null,"children":[{"krate":0,"index":123}],"decl_id":null,"docs":" Permit suffixed call of any function on a value.","sig":null,"attributes":[{"value":"* Permit suffixed call of any function on a value.\n\nThis trait provides a verbose, ugly version of the functional-language operator\n`|>`. For any value, calling `.pipe(some_function)` translates to\n`some_function(value)`.\n\nBecause it takes `self` by value, this trait is only implemented on `Sized`\ntypes.\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":14245,"byte_end":14556,"line_start":46,"line_end":54,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":15747,"byte_end":15751,"line_start":89,"line_end":89,"column_start":5,"column_end":9},"name":"pipe","qualname":"::pipe::Pipe::pipe","value":"pub fn pipe<R, impl FnOnce(Self) -> R: FnOnce(Self) ->\n            R>(Self, impl FnOnce(Self) -> R) -> R where R: Sized","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Pipes a value into a function that cannot ordinarily be called in suffix\n position.","sig":null,"attributes":[{"value":"/ Pipes a value into a function that cannot ordinarily be called in suffix","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":14582,"byte_end":14658,"line_start":56,"line_end":56,"column_start":2,"column_end":78}},{"value":"/ position.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":14660,"byte_end":14673,"line_start":57,"line_end":57,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":14675,"byte_end":14678,"line_start":58,"line_end":58,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":14680,"byte_end":14696,"line_start":59,"line_end":59,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":14698,"byte_end":14701,"line_start":60,"line_end":60,"column_start":2,"column_end":5}},{"value":"/ - `self`: Any value","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":14703,"byte_end":14726,"line_start":61,"line_end":61,"column_start":2,"column_end":25}},{"value":"/ - `func`: Any function, which will receive `self` as its first and only","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":14728,"byte_end":14803,"line_start":62,"line_end":62,"column_start":2,"column_end":77}},{"value":"/   parameter. The return value of this function is then returned from","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":14805,"byte_end":14877,"line_start":63,"line_end":63,"column_start":2,"column_end":74}},{"value":"/   `pipe`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":14879,"byte_end":14892,"line_start":64,"line_end":64,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":14894,"byte_end":14897,"line_start":65,"line_end":65,"column_start":2,"column_end":5}},{"value":"/ Because this is a library function, not a language feature, it is not","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":14899,"byte_end":14972,"line_start":66,"line_end":66,"column_start":2,"column_end":75}},{"value":"/ able to use the method-call shorthand of `function(...other_params)`. A","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":14974,"byte_end":15049,"line_start":67,"line_end":67,"column_start":2,"column_end":77}},{"value":"/ suffix function with other params must be called as a closure:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":15051,"byte_end":15117,"line_start":68,"line_end":68,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":15119,"byte_end":15122,"line_start":69,"line_end":69,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":15124,"byte_end":15135,"line_start":70,"line_end":70,"column_start":2,"column_end":13}},{"value":"/ use wyz::pipe::Pipe;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":15137,"byte_end":15161,"line_start":71,"line_end":71,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":15163,"byte_end":15166,"line_start":72,"line_end":72,"column_start":2,"column_end":5}},{"value":"/ fn add(a: i32, b: i32) -> i32 { a + b }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":15168,"byte_end":15211,"line_start":73,"line_end":73,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":15213,"byte_end":15216,"line_start":74,"line_end":74,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(5.pipe(|a| add(a, 2)), 7);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":15218,"byte_end":15259,"line_start":75,"line_end":75,"column_start":2,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":15261,"byte_end":15268,"line_start":76,"line_end":76,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":15270,"byte_end":15273,"line_start":77,"line_end":77,"column_start":2,"column_end":5}},{"value":"/ This is *more* verbose than calling the function in prefix position; its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":15275,"byte_end":15351,"line_start":78,"line_end":78,"column_start":2,"column_end":78}},{"value":"/ only value is for fitting into suffix-call chains.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":15353,"byte_end":15407,"line_start":79,"line_end":79,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":15409,"byte_end":15412,"line_start":80,"line_end":80,"column_start":2,"column_end":5}},{"value":"/ The `.p` method is a shorthand alias for `.pipe`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":15414,"byte_end":15467,"line_start":81,"line_end":81,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":15469,"byte_end":15472,"line_start":82,"line_end":82,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":15474,"byte_end":15495,"line_start":83,"line_end":83,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":15497,"byte_end":15500,"line_start":84,"line_end":84,"column_start":2,"column_end":5}},{"value":"/ - `R`: The return value of `func`, which is then returned from `.pipe`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":15502,"byte_end":15577,"line_start":85,"line_end":85,"column_start":2,"column_end":77}},{"value":"/   This is placed as a function type parameter rather than a trait type","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":15579,"byte_end":15653,"line_start":86,"line_end":86,"column_start":2,"column_end":76}},{"value":"/   parameter so that it can be specified in ambiguous call sites.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":15655,"byte_end":15723,"line_start":87,"line_end":87,"column_start":2,"column_end":70}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":15725,"byte_end":15742,"line_start":88,"line_end":88,"column_start":2,"column_end":19}}]},{"kind":"Trait","id":{"krate":0,"index":126},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":16224,"byte_end":16231,"line_start":106,"line_end":106,"column_start":11,"column_end":18},"name":"PipeRef","qualname":"::pipe::PipeRef","value":"PipeRef","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":131}],"decl_id":null,"docs":" Referential piping.","sig":null,"attributes":[{"value":"* Referential piping.\n\nThe `Pipe` trait passes by value; the functions in this trait pass by reference.\nAs such, this trait is implemented on all types, not just `Sized`. The methods\nin this trait operate by various mechanisms, including:\n\n- normal `&`/`&mut` borrows\n- the `Borrow` and `BorrowMut` traits\n- the `AsRef` and `AsMut` traits\n- the `Deref` and `DerefMut` traits\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":15833,"byte_end":16213,"line_start":95,"line_end":105,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":17163,"byte_end":17171,"line_start":130,"line_end":130,"column_start":5,"column_end":13},"name":"pipe_ref","qualname":"::pipe::PipeRef::pipe_ref","value":"pub fn pipe_ref<'a, R, impl FnOnce(&'a Self) -> R: FnOnce(&'a Self) ->\n                R>(&'a Self, impl FnOnce(&'a Self) -> R) -> R where R: 'a +\nSized","parent":{"krate":0,"index":126},"children":[],"decl_id":null,"docs":" Pipes a reference into a function that cannot ordinarily be called in\n suffix position.","sig":null,"attributes":[{"value":"/ Pipes a reference into a function that cannot ordinarily be called in","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":16235,"byte_end":16308,"line_start":107,"line_end":107,"column_start":2,"column_end":75}},{"value":"/ suffix position.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":16310,"byte_end":16330,"line_start":108,"line_end":108,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":16332,"byte_end":16335,"line_start":109,"line_end":109,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":16337,"byte_end":16353,"line_start":110,"line_end":110,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":16355,"byte_end":16358,"line_start":111,"line_end":111,"column_start":2,"column_end":5}},{"value":"/ - `&self`: A reference to any value. `.pipe_ref` takes it by reference","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":16360,"byte_end":16434,"line_start":112,"line_end":112,"column_start":2,"column_end":76}},{"value":"/   so that the `.pipe_ref` call will not artificially truncate the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":16436,"byte_end":16505,"line_start":113,"line_end":113,"column_start":2,"column_end":71}},{"value":"/   lifetime of `self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":16507,"byte_end":16532,"line_start":114,"line_end":114,"column_start":2,"column_end":27}},{"value":"/ - `func`: Any function, which receives `&self` as its first and only","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":16534,"byte_end":16606,"line_start":115,"line_end":115,"column_start":2,"column_end":74}},{"value":"/   parameter. This function may return any value, including a borrow of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":16608,"byte_end":16682,"line_start":116,"line_end":116,"column_start":2,"column_end":76}},{"value":"/   `self`, as long as it has an equal or greater lifetime than `self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":16684,"byte_end":16757,"line_start":117,"line_end":117,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":16759,"byte_end":16762,"line_start":118,"line_end":118,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":16764,"byte_end":16785,"line_start":119,"line_end":119,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":16787,"byte_end":16790,"line_start":120,"line_end":120,"column_start":2,"column_end":5}},{"value":"/ - `R`: The return value of `func`. This must have a lifetime of at least","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":16792,"byte_end":16868,"line_start":121,"line_end":121,"column_start":2,"column_end":78}},{"value":"/   `'a`, up to and including `'static` and unconstrained (borrow-less","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":16870,"byte_end":16942,"line_start":122,"line_end":122,"column_start":2,"column_end":74}},{"value":"/   value).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":16944,"byte_end":16957,"line_start":123,"line_end":123,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":16959,"byte_end":16962,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ # Lifetimes","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":16964,"byte_end":16979,"line_start":125,"line_end":125,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":16981,"byte_end":16984,"line_start":126,"line_end":126,"column_start":2,"column_end":5}},{"value":"/ - `'a`: The lifetime of the `self` value. `.pipe_ref` borrows `self` for","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":16986,"byte_end":17062,"line_start":127,"line_end":127,"column_start":2,"column_end":78}},{"value":"/   the duration `'a`, and extends it through the return value of `func`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":17064,"byte_end":17139,"line_start":128,"line_end":128,"column_start":2,"column_end":77}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":17141,"byte_end":17158,"line_start":129,"line_end":129,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18220,"byte_end":18228,"line_start":158,"line_end":158,"column_start":5,"column_end":13},"name":"pipe_mut","qualname":"::pipe::PipeRef::pipe_mut","value":"pub fn pipe_mut<'a, R, impl FnOnce(&'a mut Self) -> R: FnOnce(&'a mut Self) ->\n                R>(&'a mut Self, impl FnOnce(&'a mut Self) -> R) -> R where\nR: 'a + Sized","parent":{"krate":0,"index":126},"children":[],"decl_id":null,"docs":" Pipes a mutable reference into a function that cannot ordinarily be\n called in suffix position.","sig":null,"attributes":[{"value":"/ Pipes a mutable reference into a function that cannot ordinarily be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":17269,"byte_end":17340,"line_start":135,"line_end":135,"column_start":2,"column_end":73}},{"value":"/ called in suffix position.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":17342,"byte_end":17372,"line_start":136,"line_end":136,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":17374,"byte_end":17377,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":17379,"byte_end":17395,"line_start":138,"line_end":138,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":17397,"byte_end":17400,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: A mutable reference to any value. `.pipe_mut` takes it by","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":17402,"byte_end":17478,"line_start":140,"line_end":140,"column_start":2,"column_end":78}},{"value":"/   reference so that the `.pipe_mut` call will not artificially truncate","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":17480,"byte_end":17555,"line_start":141,"line_end":141,"column_start":2,"column_end":77}},{"value":"/   the lifetime of `self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":17557,"byte_end":17586,"line_start":142,"line_end":142,"column_start":2,"column_end":31}},{"value":"/ - `func`: Any function, which receives `&mut self` as its first and only","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":17588,"byte_end":17664,"line_start":143,"line_end":143,"column_start":2,"column_end":78}},{"value":"/   parameter. This funtion may return any value, including a borrow of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":17666,"byte_end":17739,"line_start":144,"line_end":144,"column_start":2,"column_end":75}},{"value":"/   `self`, as long as it has an equal or greater lifetime than `self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":17741,"byte_end":17814,"line_start":145,"line_end":145,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":17816,"byte_end":17819,"line_start":146,"line_end":146,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":17821,"byte_end":17842,"line_start":147,"line_end":147,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":17844,"byte_end":17847,"line_start":148,"line_end":148,"column_start":2,"column_end":5}},{"value":"/ - `R`: The return value of `func`. This must have a lifetime of at least","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":17849,"byte_end":17925,"line_start":149,"line_end":149,"column_start":2,"column_end":78}},{"value":"/   `'a`, up to and including `'static` and unconstrained (borrow-less","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":17927,"byte_end":17999,"line_start":150,"line_end":150,"column_start":2,"column_end":74}},{"value":"/   value).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18001,"byte_end":18014,"line_start":151,"line_end":151,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18016,"byte_end":18019,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ # Lifetimes","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18021,"byte_end":18036,"line_start":153,"line_end":153,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18038,"byte_end":18041,"line_start":154,"line_end":154,"column_start":2,"column_end":5}},{"value":"/ - `'a`: The lifetime of the `self` value. `.pipe_mut` borrows `self` for","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18043,"byte_end":18119,"line_start":155,"line_end":155,"column_start":2,"column_end":78}},{"value":"/   the duration `'a`, and extends it through the return value of `func`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18121,"byte_end":18196,"line_start":156,"line_end":156,"column_start":2,"column_end":77}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18198,"byte_end":18215,"line_start":157,"line_end":157,"column_start":2,"column_end":19}}]},{"kind":"Trait","id":{"krate":0,"index":135},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18405,"byte_end":18415,"line_start":165,"line_end":165,"column_start":11,"column_end":21},"name":"PipeBorrow","qualname":"::pipe::PipeBorrow","value":"PipeBorrow","parent":null,"children":[{"krate":0,"index":136},{"krate":0,"index":141}],"decl_id":null,"docs":" Calls the `Borrow` or `BorrowMut` traits before piping.\n","sig":null,"attributes":[{"value":"/ Calls the `Borrow` or `BorrowMut` traits before piping.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18335,"byte_end":18394,"line_start":164,"line_end":164,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":19433,"byte_end":19444,"line_start":191,"line_end":191,"column_start":5,"column_end":16},"name":"pipe_borrow","qualname":"::pipe::PipeBorrow::pipe_borrow","value":"pub fn pipe_borrow<'a, T, R, impl FnOnce(&'a T) -> R: FnOnce(&'a T) ->\n                   R>(&'a Self, impl FnOnce(&'a T) -> R) -> R where\nSelf: Borrow<T>, T: 'a, R: 'a + Sized","parent":{"krate":0,"index":135},"children":[],"decl_id":null,"docs":" Pipes a trait borrow into a function that cannot normally be called in\n suffix position.","sig":null,"attributes":[{"value":"/ Pipes a trait borrow into a function that cannot normally be called in","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18419,"byte_end":18493,"line_start":166,"line_end":166,"column_start":2,"column_end":76}},{"value":"/ suffix position.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18495,"byte_end":18515,"line_start":167,"line_end":167,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18517,"byte_end":18520,"line_start":168,"line_end":168,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18522,"byte_end":18538,"line_start":169,"line_end":169,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18540,"byte_end":18543,"line_start":170,"line_end":170,"column_start":2,"column_end":5}},{"value":"/ - `&self`: A borrow of the receiver. By automatically borrowing, this","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18545,"byte_end":18618,"line_start":171,"line_end":171,"column_start":2,"column_end":75}},{"value":"/   pipe call ensures that the lifetime of the origin object is not","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18620,"byte_end":18689,"line_start":172,"line_end":172,"column_start":2,"column_end":71}},{"value":"/   artificially truncated.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18691,"byte_end":18720,"line_start":173,"line_end":173,"column_start":2,"column_end":31}},{"value":"/ - `func`: A function which receives a trait-directed borrow of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18722,"byte_end":18792,"line_start":174,"line_end":174,"column_start":2,"column_end":72}},{"value":"/   receiver’s value type. Before this function is called, `<Self as","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18794,"byte_end":18866,"line_start":175,"line_end":175,"column_start":2,"column_end":72}},{"value":"/   Borrow<T>::borrow>` is called on the `self` reference, and the output","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18868,"byte_end":18943,"line_start":176,"line_end":176,"column_start":2,"column_end":77}},{"value":"/   of that trait borrow is passed to `func`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18945,"byte_end":18992,"line_start":177,"line_end":177,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18994,"byte_end":18997,"line_start":178,"line_end":178,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":18999,"byte_end":19020,"line_start":179,"line_end":179,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":19022,"byte_end":19025,"line_start":180,"line_end":180,"column_start":2,"column_end":5}},{"value":"/ - `T`: The type to which `self` `Borrow`s. This is required to be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":19027,"byte_end":19096,"line_start":181,"line_end":181,"column_start":2,"column_end":71}},{"value":"/   defined as a method type parameter so that you can disambiguate at","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":19098,"byte_end":19170,"line_start":182,"line_end":182,"column_start":2,"column_end":74}},{"value":"/   call time.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":19172,"byte_end":19188,"line_start":183,"line_end":183,"column_start":2,"column_end":18}},{"value":"/ - `R`: The return type of `func`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":19190,"byte_end":19227,"line_start":184,"line_end":184,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":19229,"byte_end":19232,"line_start":185,"line_end":185,"column_start":2,"column_end":5}},{"value":"/ # Lifetimes","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":19234,"byte_end":19249,"line_start":186,"line_end":186,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":19251,"byte_end":19254,"line_start":187,"line_end":187,"column_start":2,"column_end":5}},{"value":"/ - `'a`: The lifetime of the `self` value. `.pipe_mut` borrows `self` for","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":19256,"byte_end":19332,"line_start":188,"line_end":188,"column_start":2,"column_end":78}},{"value":"/   the duration `'a`, and extends it through the return value of `func`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":19334,"byte_end":19409,"line_start":189,"line_end":189,"column_start":2,"column_end":77}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":19411,"byte_end":19428,"line_start":190,"line_end":190,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":20627,"byte_end":20642,"line_start":224,"line_end":224,"column_start":5,"column_end":20},"name":"pipe_borrow_mut","qualname":"::pipe::PipeBorrow::pipe_borrow_mut","value":"pub fn pipe_borrow_mut<'a, T, R,\n                       impl FnOnce(&'a mut T) -> R: FnOnce(&'a mut T) ->\n                       R>(&'a mut Self, impl FnOnce(&'a mut T) -> R) -> R\nwhere Self: BorrowMut<T>, T: 'a, R: 'a + Sized","parent":{"krate":0,"index":135},"children":[],"decl_id":null,"docs":" Pipes a trait mutable borrow into a function that cannot normally be\n called in suffix position.","sig":null,"attributes":[{"value":"/ Pipes a trait mutable borrow into a function that cannot normally be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":19595,"byte_end":19667,"line_start":200,"line_end":200,"column_start":2,"column_end":74}},{"value":"/ called in suffix position.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":19669,"byte_end":19699,"line_start":201,"line_end":201,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":19701,"byte_end":19704,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":19706,"byte_end":19722,"line_start":203,"line_end":203,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":19724,"byte_end":19727,"line_start":204,"line_end":204,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: A mutable borrow of the receiver. By automatically","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":19729,"byte_end":19798,"line_start":205,"line_end":205,"column_start":2,"column_end":71}},{"value":"/   borrowing, this pipe call ensures that the lifetime of the origin","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":19800,"byte_end":19871,"line_start":206,"line_end":206,"column_start":2,"column_end":73}},{"value":"/   object is not artificially truncated.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":19873,"byte_end":19916,"line_start":207,"line_end":207,"column_start":2,"column_end":45}},{"value":"/ - `func`: A function which receives a trait-directed borrow of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":19918,"byte_end":19988,"line_start":208,"line_end":208,"column_start":2,"column_end":72}},{"value":"/   receiver’s value type. Before this function is called, `<Self as","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":19990,"byte_end":20062,"line_start":209,"line_end":209,"column_start":2,"column_end":72}},{"value":"/   BorrowMut<T>::borrow_mut>` is called on the `self` reference, and the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":20064,"byte_end":20139,"line_start":210,"line_end":210,"column_start":2,"column_end":77}},{"value":"/   output of that trait borrow is passed to `func`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":20141,"byte_end":20195,"line_start":211,"line_end":211,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":20197,"byte_end":20200,"line_start":212,"line_end":212,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":20202,"byte_end":20223,"line_start":213,"line_end":213,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":20225,"byte_end":20228,"line_start":214,"line_end":214,"column_start":2,"column_end":5}},{"value":"/ - `T`: The type to which `self` borrows. This is required to be defined","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":20230,"byte_end":20305,"line_start":215,"line_end":215,"column_start":2,"column_end":77}},{"value":"/   as a method type parameter so that you can disambiguate at call time.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":20307,"byte_end":20382,"line_start":216,"line_end":216,"column_start":2,"column_end":77}},{"value":"/ - `R`: The return type of `func`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":20384,"byte_end":20421,"line_start":217,"line_end":217,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":20423,"byte_end":20426,"line_start":218,"line_end":218,"column_start":2,"column_end":5}},{"value":"/ # Lifetimes","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":20428,"byte_end":20443,"line_start":219,"line_end":219,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":20445,"byte_end":20448,"line_start":220,"line_end":220,"column_start":2,"column_end":5}},{"value":"/ - `'a`: The lifetime of the `self` value. `.pipe_mut` borrows `self` for","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":20450,"byte_end":20526,"line_start":221,"line_end":221,"column_start":2,"column_end":78}},{"value":"/   the duration `'a`, and extends it through the return value of `func`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":20528,"byte_end":20603,"line_start":222,"line_end":222,"column_start":2,"column_end":77}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":20605,"byte_end":20622,"line_start":223,"line_end":223,"column_start":2,"column_end":19}}]},{"kind":"Trait","id":{"krate":0,"index":146},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":20885,"byte_end":20894,"line_start":238,"line_end":238,"column_start":11,"column_end":20},"name":"PipeAsRef","qualname":"::pipe::PipeAsRef","value":"PipeAsRef","parent":null,"children":[{"krate":0,"index":147},{"krate":0,"index":152}],"decl_id":null,"docs":" Calls the `AsRef` or `AsMut` traits before piping.\n","sig":null,"attributes":[{"value":"/ Calls the `AsRef` or `AsMut` traits before piping.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":20820,"byte_end":20874,"line_start":237,"line_end":237,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21445,"byte_end":21456,"line_start":254,"line_end":254,"column_start":5,"column_end":16},"name":"pipe_as_ref","qualname":"::pipe::PipeAsRef::pipe_as_ref","value":"pub fn pipe_as_ref<'a, T, R, impl FnOnce(&'a T) -> R: FnOnce(&'a T) ->\n                   R>(&'a Self, impl FnOnce(&'a T) -> R) -> R where\nSelf: AsRef<T>, T: 'a, R: 'a + Sized","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Pipes a trait borrow into a function that cannot normally be called in\n suffix position.","sig":null,"attributes":[{"value":"/ Pipes a trait borrow into a function that cannot normally be called in","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":20898,"byte_end":20972,"line_start":239,"line_end":239,"column_start":2,"column_end":76}},{"value":"/ suffix position.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":20974,"byte_end":20994,"line_start":240,"line_end":240,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":20996,"byte_end":20999,"line_start":241,"line_end":241,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21001,"byte_end":21017,"line_start":242,"line_end":242,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21019,"byte_end":21022,"line_start":243,"line_end":243,"column_start":2,"column_end":5}},{"value":"/ - `&self`: This borrows `self` for the same reasons as described in the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21024,"byte_end":21099,"line_start":244,"line_end":244,"column_start":2,"column_end":77}},{"value":"/   other methods.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21101,"byte_end":21121,"line_start":245,"line_end":245,"column_start":2,"column_end":22}},{"value":"/ - `func`: A function as described in the other methods. This receives","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21123,"byte_end":21196,"line_start":246,"line_end":246,"column_start":2,"column_end":75}},{"value":"/   the result of `AsRef::<T>::as_ref`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21198,"byte_end":21239,"line_start":247,"line_end":247,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21241,"byte_end":21244,"line_start":248,"line_end":248,"column_start":2,"column_end":5}},{"value":"/ # Lifetimes","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21246,"byte_end":21261,"line_start":249,"line_end":249,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21263,"byte_end":21266,"line_start":250,"line_end":250,"column_start":2,"column_end":5}},{"value":"/ - `'a`: The lifetime of the `self` value. `.pipe_mut` borrows `self` for","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21268,"byte_end":21344,"line_start":251,"line_end":251,"column_start":2,"column_end":78}},{"value":"/   the duration `'a`, and extends it through the return value of `func`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21346,"byte_end":21421,"line_start":252,"line_end":252,"column_start":2,"column_end":77}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21423,"byte_end":21440,"line_start":253,"line_end":253,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":22164,"byte_end":22175,"line_start":278,"line_end":278,"column_start":5,"column_end":16},"name":"pipe_as_mut","qualname":"::pipe::PipeAsRef::pipe_as_mut","value":"pub fn pipe_as_mut<'a, T, R, impl FnOnce(&'a mut T) -> R: FnOnce(&'a mut T) ->\n                   R>(&'a mut Self, impl FnOnce(&'a mut T) -> R) -> R where\nSelf: AsMut<T>, T: 'a, R: 'a + Sized","parent":{"krate":0,"index":146},"children":[],"decl_id":null,"docs":" Pipes a trait mutable borrow into a function that cannot normally be\n called in suffix position.","sig":null,"attributes":[{"value":"/ Pipes a trait mutable borrow into a function that cannot normally be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21605,"byte_end":21677,"line_start":263,"line_end":263,"column_start":2,"column_end":74}},{"value":"/ called in suffix position.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21679,"byte_end":21709,"line_start":264,"line_end":264,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21711,"byte_end":21714,"line_start":265,"line_end":265,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21716,"byte_end":21732,"line_start":266,"line_end":266,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21734,"byte_end":21737,"line_start":267,"line_end":267,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: This borrows `self` for the same reasons as described in","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21739,"byte_end":21814,"line_start":268,"line_end":268,"column_start":2,"column_end":77}},{"value":"/   the other methods.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21816,"byte_end":21840,"line_start":269,"line_end":269,"column_start":2,"column_end":26}},{"value":"/ - `func`: A function as described in the other methods. This receives","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21842,"byte_end":21915,"line_start":270,"line_end":270,"column_start":2,"column_end":75}},{"value":"/   the result of `AsMut::<T>::as_mut`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21917,"byte_end":21958,"line_start":271,"line_end":271,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21960,"byte_end":21963,"line_start":272,"line_end":272,"column_start":2,"column_end":5}},{"value":"/ # Lifetimes","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21965,"byte_end":21980,"line_start":273,"line_end":273,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21982,"byte_end":21985,"line_start":274,"line_end":274,"column_start":2,"column_end":5}},{"value":"/ - `'a`: The lifetime of the `self` value. `.pipe_mut` borrows `self` for","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":21987,"byte_end":22063,"line_start":275,"line_end":275,"column_start":2,"column_end":78}},{"value":"/   the duration `'a`, and extends it through the return value of `func`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":22065,"byte_end":22140,"line_start":276,"line_end":276,"column_start":2,"column_end":77}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":22142,"byte_end":22159,"line_start":277,"line_end":277,"column_start":2,"column_end":19}}]},{"kind":"Trait","id":{"krate":0,"index":157},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":22409,"byte_end":22418,"line_start":292,"line_end":292,"column_start":11,"column_end":20},"name":"PipeDeref","qualname":"::pipe::PipeDeref","value":"PipeDeref","parent":null,"children":[{"krate":0,"index":158},{"krate":0,"index":162}],"decl_id":null,"docs":" Calls the `Deref` or `DerefMut` traits before piping.\n","sig":null,"attributes":[{"value":"/ Calls the `Deref` or `DerefMut` traits before piping.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":22341,"byte_end":22398,"line_start":291,"line_end":291,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":22940,"byte_end":22950,"line_start":307,"line_end":307,"column_start":5,"column_end":15},"name":"pipe_deref","qualname":"::pipe::PipeDeref::pipe_deref","value":"pub fn pipe_deref<'a, R,\n                  impl FnOnce(&'a <Self as Deref>::Target) -> R: FnOnce(&'a <Self\n                                                                            as\n                                                                            Deref>::Target)\n                  ->\n                  R>(&'a Self, impl FnOnce(&'a <Self as Deref>::Target) -> R)\n-> R where Self: Deref, R: 'a + Sized","parent":{"krate":0,"index":157},"children":[],"decl_id":null,"docs":" Pipes a dereference into a function that cannot normally be called in\n suffix position.","sig":null,"attributes":[{"value":"/ Pipes a dereference into a function that cannot normally be called in","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":22422,"byte_end":22495,"line_start":293,"line_end":293,"column_start":2,"column_end":75}},{"value":"/ suffix position.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":22497,"byte_end":22517,"line_start":294,"line_end":294,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":22519,"byte_end":22522,"line_start":295,"line_end":295,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":22524,"byte_end":22540,"line_start":296,"line_end":296,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":22542,"byte_end":22545,"line_start":297,"line_end":297,"column_start":2,"column_end":5}},{"value":"/ - `&self`: This borrows `self` for the same reasons as described in the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":22547,"byte_end":22622,"line_start":298,"line_end":298,"column_start":2,"column_end":77}},{"value":"/ - `func`: A function as described in the other methods. This receives","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":22624,"byte_end":22697,"line_start":299,"line_end":299,"column_start":2,"column_end":75}},{"value":"/   the result of `Deref::deref`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":22699,"byte_end":22734,"line_start":300,"line_end":300,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":22736,"byte_end":22739,"line_start":301,"line_end":301,"column_start":2,"column_end":5}},{"value":"/ # Lifetimes","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":22741,"byte_end":22756,"line_start":302,"line_end":302,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":22758,"byte_end":22761,"line_start":303,"line_end":303,"column_start":2,"column_end":5}},{"value":"/ - `'a`: The lifetime of the `self` value. `.pipe_mut` borrows `self` for","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":22763,"byte_end":22839,"line_start":304,"line_end":304,"column_start":2,"column_end":78}},{"value":"/   the duration `'a`, and extends it through the return value of `func`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":22841,"byte_end":22916,"line_start":305,"line_end":305,"column_start":2,"column_end":77}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":22918,"byte_end":22935,"line_start":306,"line_end":306,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23671,"byte_end":23685,"line_start":333,"line_end":333,"column_start":5,"column_end":19},"name":"pipe_deref_mut","qualname":"::pipe::PipeDeref::pipe_deref_mut","value":"pub fn pipe_deref_mut<'a, R,\n                      impl FnOnce(&'a mut <Self as Deref>::Target) -> R: FnOnce(&'a mut <Self\n                                                                                        as\n                                                                                        Deref>::Target)\n                      ->\n                      R>(&'a mut Self,\n                         impl FnOnce(&'a mut <Self as Deref>::Target) -> R)\n-> R where Self: DerefMut, R: 'a + Sized","parent":{"krate":0,"index":157},"children":[],"decl_id":null,"docs":" Pipes a mutable dereference into a function that cannot normally be\n called in suffix position.","sig":null,"attributes":[{"value":"/ Pipes a mutable dereference into a function that cannot normally be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23108,"byte_end":23179,"line_start":318,"line_end":318,"column_start":2,"column_end":73}},{"value":"/ called in suffix position.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23181,"byte_end":23211,"line_start":319,"line_end":319,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23213,"byte_end":23216,"line_start":320,"line_end":320,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23218,"byte_end":23234,"line_start":321,"line_end":321,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23236,"byte_end":23239,"line_start":322,"line_end":322,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: This mutably borrows `self` for the same reasons as","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23241,"byte_end":23311,"line_start":323,"line_end":323,"column_start":2,"column_end":72}},{"value":"/   described in the other methods.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23313,"byte_end":23350,"line_start":324,"line_end":324,"column_start":2,"column_end":39}},{"value":"/ - `func`: A function as described in the other methods. This receives","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23352,"byte_end":23425,"line_start":325,"line_end":325,"column_start":2,"column_end":75}},{"value":"/   the result of `DerefMut::deref`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23427,"byte_end":23465,"line_start":326,"line_end":326,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23467,"byte_end":23470,"line_start":327,"line_end":327,"column_start":2,"column_end":5}},{"value":"/ # Lifetimes","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23472,"byte_end":23487,"line_start":328,"line_end":328,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23489,"byte_end":23492,"line_start":329,"line_end":329,"column_start":2,"column_end":5}},{"value":"/ - `'a`: The lifetime of the `self` value. `.pipe_mut` borrows `self` for","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23494,"byte_end":23570,"line_start":330,"line_end":330,"column_start":2,"column_end":78}},{"value":"/   the duration `'a`, and extends it through the return value of `func`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23572,"byte_end":23647,"line_start":331,"line_end":331,"column_start":2,"column_end":77}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23649,"byte_end":23666,"line_start":332,"line_end":332,"column_start":2,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":176},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tap","qualname":"::tap","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":182},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":189},{"krate":0,"index":192},{"krate":0,"index":205},{"krate":0,"index":207},{"krate":0,"index":221},{"krate":0,"index":224},{"krate":0,"index":238},{"krate":0,"index":241},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":276},{"krate":0,"index":287},{"krate":0,"index":314}],"decl_id":null,"docs":" Object Tapping","sig":null,"attributes":[{"value":"* Object Tapping\n\nThis crate provides traits for transparently inserting operations into a method\nchain. All traits take and return the object on which they act by value, and run\na provided function on a borrow of the value.\n\nThis allows methods that do not chain (such as mutators with `&mut self -> ()`\nsignatures) to be chained.\n\nThe traits in this crate provide methods that run some function, `Fn(&T)` or\n`Fn(&mut T)`, on a value `T` without changing the binding status of that value.\n\n# Value Tapping\n\nThe primary trait of this crate is [`Tap`], which provides two methods: [`tap`]\nand [`tap_mut`]. These provide immutable or mutable, respectively, borrows of\nthe tapped value to a user-provided function. The user function must not have a\nreturn value.\n\nThis permits using inspector-style (`Fn(&Self)`) or mutator-style\n(`Fn(&mut Self)`) functions in a method chain without breaks or reduction of\naccess to the main value.\n\nTap methods never change the type of the object on which they are called. The\n`mut`-suffixed methods *are* permitted to change the *value* of their object.\n\n# Trait Tapping\n\nRust does not have subtyping in the object-oriented sense; rather, it uses\ntraits to indicate relationships between types and bring behavior of an interior\ntype to the exterior type. This crate provides taps that use the standard\nconversion traits in order to assist in running tap methods generically.\n\n## Borrowed Tapping\n\nThe traits `std::borrow::Borrow` and `std::borrow::BorrowMut` allow container\ntypes to behave as their contained types in borrowed contexts. The [`TapBorrow`]\ntrait provides methods, [`tap_borrow`] and [`tap_borrow_mut`], which depend on\n`Borrow` and `BorrowMut`, respectively, to run the user-provided function on the\nborrowed interior type.\n\nThis is useful for inspecting the interior of a `Cow` or other data structures\nthat abstract away the exact container type but provide uniform access to the\nunderlying data.\n\n## Polymorphic Tapping\n\nThe traits `std::convert::AsRef` and `std::convert::AsMut` allow composed types\nto be used by reference as their component types. The [`TapAsRef`] trait\nprovides methods, [`tap_ref`] and [`tap_ref_mut`], which depend on `AsRef` and\n`AsMut`, respectively, to run the user-provided function on the referred\ncomponent type.\n\nThis is useful for working with types like `Path`, which are commonly used as\ngeneric targets such as `<P: AsRef<Path>>`. All such types `P` may have\n`.tap_ref` called upon them with methods implemented on `Path`.\n\n> Note: `Borrow` and `AsRef` are generic traits, which a type can implement many\n> times with different targets. As such, the referent type must be specified in\n> the tapped function. This can be done with a named method, or by marking the\n> type of the closure argument: `|x: &Referent| ...`.\n\n## Dereferenced Tapping\n\nThe traits `std::ops::Deref` and `std::ops::DerefMut` may be used to make owning\ncontainers transparently defer to their contained data. This is used by `Vec`\nand `String`, for example, to behave like `[T]` and `str` implicitly.\n\nThe [`TapDeref`] trait provides [`tap_deref`] and [`tap_deref_mut`] which call\n`Deref` or `DerefMut`, respectively, on the tapped value before running the\nprovided function on the produced `Deref::Target` value.\n\nSince `Deref` may only be implemented once, this trait does not require any\nextra type information in its tap calls.\n\n# Conditional Tapping\n\nAdditional traits are provided to only invoke the tap when certain conditions\nare met in the value being tapped.\n\n## Boolean Tapping\n\nThe [`TapBool`] trait, with methods [`tap_true`], [`tap_false`], and their\nassociated `_mut` variants, run the provided function only when the value is of\nthe correct variant. This trait is implemented on `bool` by default, and is\nleft open so that user crates may implement it on their own `bool`-like types.\n\n## Optional Tapping\n\nThe [`TapOption`] trait, with methods [`tap_some`], [`tap_some_mut`], and\n[`tap_none`], run the provided function only when the `Option` is of the\nmatching variant. The `tap_some` methods pass `&T` or `&mut T` to their\nfunction; `tap_none` passes nothing.\n\nNote that `tap_some_mut` may change the value of the inner object, but it cannot\nchange the `Option` from `Some` to `None`. If this behavior is desired, use\n`tap_mut` to modify the `Option` wrapper directly, rather than `tap_some_mut` to\nchange the interior value.\n\n## Result Tapping\n\nThis acts exactly like `TapOption`, except that the alternate case has a value\nthat may be modified. It thus has methods [`tap_ok`], [`tap_err`], and the\nassociated `_mut` variants.\n\n## Debug Tapping\n\nAll methods in the crate have a sibling method with the exact same name and\nsignature, except that the name is suffixed with `_dbg`. This method runs the\nnormal tap in a debug build, and is removed in release builds.\n\n```rust\n# macro_rules! debug {\n#   ( $( $t:tt )* ) => { eprintln!( $( $t )* ) };\n# }\nuse wyz::tap::TapOption;\n\nSome(5i32).tap_some_dbg(|n| debug!(\"{}\", n));\n```\n\nThis emits a debug trace when the crate is built in debug mode, and does nothing\nwhen the crate is built in release mode.\n\n# Usage\n\nImport the trait or traits you wish to use, with `use wyz::tap::Tap;`, and then\nattach `.tap` methods on the end of any expression you want to inspect or\nmodify. These methods never change the type or binding status of the object to\nwhich they are attached, and can be added or removed without affecting\nneighboring code.\n\n# Examples\n\nThis uses `tap_mut` to modify a vector using methods that cannot be chained, and\nwithout converting to an iterator and re-collecting.\n\n```rust\nuse wyz::tap::Tap;\n\nlet v = vec![5, 1, 2, 4, 3]\n  .tap_mut(|v| v.sort())\n  .tap_mut(|v| v.iter_mut().for_each(|e| *e *= 2))\n  .tap_mut(|v| v.reverse());\nassert_eq!(&v, &[10, 8, 6, 4, 2]);\n```\n\nThis uses `tap_some` to implement a conditional flag.\n\n```rust\nuse wyz::tap::TapOption;\n\nlet mut flag = false;\n\nlet n = None::<i32>.tap_some(|_| flag = true);\nassert!(n.is_none());\nassert!(!flag);\n\nlet n: Option<i32> = Some(1).tap_some(|_| flag = true);\nassert_eq!(n.unwrap(), 1);\nassert!(flag);\n```\n\nAnd this uses `tap_err` to log errors without suppressing them.\n\n```rust\n# use std::fmt::Display;\nuse wyz::tap::TapResult;\n\nlet mut err_ct = 0;\n\n{\n let mut action = |e: &&str| {\n  err_ct += 1;\n  eprintln!(\"ERROR: {}\", e);\n };\n\n Ok::<_, &str>(\"success\").tap_err(&mut action);\n Err::<(), _>(\"failure\").tap_err(&mut action);\n} // I didn't want to write the closure twice\n\nassert_eq!(err_ct, 1);\n//  printed \"ERROR: failure\"\n```\n\n[`Tap`]: trait.Tap.html\n[`TapAsRef`]: trait.TapAsRef.html\n[`TapBorrow`]: trait.TapBorrow.html\n[`TapDeref`]: trait.TapDeref.html\n[`TapOption`]: trait.TapOption.html\n[`TapResult`]: trait.TapResult.html\n[`tap`]: trait.Tap.html#method.tap\n[`tap_borrow`]: trait.TapBorrow.html#method.tap_borrow\n[`tap_borrow_mut`]: trait.TapBorrow.html#method.tap_borrow_mut\n[`tap_deref`]: trait.TapDeref.html#method.tap_deref\n[`tap_deref_mut`]: trait.TapDeref.html#method.tap_deref_mut\n[`tap_err`]: trait.TapResult.html#method.tap_err\n[`tap_mut`]: trait.Tap.html#method.tap_mut\n[`tap_none`]: trait.TapOption.html#method.tap_none\n[`tap_ok`]: trait.TapResult.html#method.tap_ok\n[`tap_ref`]: trait.TapAsRef.html#method.tap_ref\n[`tap_ref_mut`]: trait.TapAsRef.html#method.tap_ref_mut\n[`tap_some`]: trait.TapOption.html#method.tap_some\n[`tap_some_mut`]: trait.TapOption.html#method.tap_some_mut\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":24008,"byte_end":31415,"line_start":1,"line_end":204,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":192},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":32442,"byte_end":32445,"line_start":246,"line_end":246,"column_start":11,"column_end":14},"name":"Tap","qualname":"::tap::Tap","value":"Tap: Sized","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":196},{"krate":0,"index":199},{"krate":0,"index":202}],"decl_id":null,"docs":" Value Tap","sig":null,"attributes":[{"value":"* Value Tap\n\nThis trait allows any function that takes a borrowed value to be run on a value\ndirectly, without downgrading the binding.\n\n# Examples\n\nSorting a vector is a quintessential example of operations that break the flow\nof handling a value. It cannot be done in the middle of an operation, because it\nhas the signature `&mut self -> ()`.\n\n```rust\nuse wyz::tap::Tap;\n\nlet v = vec![5, 1, 4, 2, 3]\n  .tap_mut(|v| v.sort())\n  .tap_mut(|v| v.reverse())\n  .tap_mut(|v| v.iter_mut().for_each(|elt| *elt *= 2));\nassert_eq!(&v, &[10, 8, 6, 4, 2]);\n```\n\nNote that because `sort` and `reverse` are actually methods on `[T: Ord]`, not\non `Vec<T: Ord>`, they cannot be listed by name in the `tap_mut` call. Their\nsignature is `&mut [T: Ord] -> ()`, but `tap_mut` provides a `&mut Vec<T: Ord>`,\nand deref-coercion does not apply to named functions. The [`TapDeref`] trait\nallows this to work.\n\n[`TapDeref`]: trait.TapDeref.html\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":31504,"byte_end":32431,"line_start":217,"line_end":245,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":33387,"byte_end":33390,"line_start":278,"line_end":278,"column_start":5,"column_end":8},"name":"tap","qualname":"::tap::Tap::tap","value":"pub fn tap<F, R>(Self, F) -> Self where F: FnOnce(&Self) -> R, R: Sized","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Provides immutable access for inspection.","sig":null,"attributes":[{"value":"/ Provides immutable access for inspection.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":32456,"byte_end":32501,"line_start":247,"line_end":247,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":32503,"byte_end":32506,"line_start":248,"line_end":248,"column_start":2,"column_end":5}},{"value":"/ This is most useful for inserting passive inspection points into an","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":32508,"byte_end":32579,"line_start":249,"line_end":249,"column_start":2,"column_end":73}},{"value":"/ expression, such as for logging or counting.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":32581,"byte_end":32629,"line_start":250,"line_end":250,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":32631,"byte_end":32634,"line_start":251,"line_end":251,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":32636,"byte_end":32650,"line_start":252,"line_end":252,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":32652,"byte_end":32655,"line_start":253,"line_end":253,"column_start":2,"column_end":5}},{"value":"/ This demonstrates the use of `tap` to inspect a value and log it as it","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":32657,"byte_end":32731,"line_start":254,"line_end":254,"column_start":2,"column_end":76}},{"value":"/ is transformed.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":32733,"byte_end":32752,"line_start":255,"line_end":255,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":32754,"byte_end":32757,"line_start":256,"line_end":256,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":32759,"byte_end":32770,"line_start":257,"line_end":257,"column_start":2,"column_end":13}},{"value":"/ use wyz::tap::Tap;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":32772,"byte_end":32794,"line_start":258,"line_end":258,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":32796,"byte_end":32799,"line_start":259,"line_end":259,"column_start":2,"column_end":5}},{"value":"/ fn make_value() -> i32 { 5 }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":32801,"byte_end":32833,"line_start":260,"line_end":260,"column_start":2,"column_end":34}},{"value":"/ fn alter_value(n: i32) -> i32 { n * 3 }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":32835,"byte_end":32878,"line_start":261,"line_end":261,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":32880,"byte_end":32883,"line_start":262,"line_end":262,"column_start":2,"column_end":5}},{"value":"/ let mut init_flag = false;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":32885,"byte_end":32915,"line_start":263,"line_end":263,"column_start":2,"column_end":32}},{"value":"/ let mut fini_flag = false;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":32917,"byte_end":32947,"line_start":264,"line_end":264,"column_start":2,"column_end":32}},{"value":"/ let finished = make_value()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":32949,"byte_end":32980,"line_start":265,"line_end":265,"column_start":2,"column_end":33}},{"value":"/   .tap(|n| init_flag = *n == 5)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":32982,"byte_end":33017,"line_start":266,"line_end":266,"column_start":2,"column_end":37}},{"value":"/   .tap_mut(|n| *n = alter_value(*n))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":33019,"byte_end":33059,"line_start":267,"line_end":267,"column_start":2,"column_end":42}},{"value":"/   .tap(|n| fini_flag = *n == 15);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":33061,"byte_end":33098,"line_start":268,"line_end":268,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":33100,"byte_end":33103,"line_start":269,"line_end":269,"column_start":2,"column_end":5}},{"value":"/ assert!(init_flag);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":33105,"byte_end":33128,"line_start":270,"line_end":270,"column_start":2,"column_end":25}},{"value":"/ assert!(fini_flag);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":33130,"byte_end":33153,"line_start":271,"line_end":271,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(finished, 15);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":33155,"byte_end":33184,"line_start":272,"line_end":272,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":33186,"byte_end":33193,"line_start":273,"line_end":273,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":33195,"byte_end":33198,"line_start":274,"line_end":274,"column_start":2,"column_end":5}},{"value":"/ This example is somewhat contrived, since `tap` is most useful for","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":33200,"byte_end":33270,"line_start":275,"line_end":275,"column_start":2,"column_end":72}},{"value":"/ logging values with `eprintln!` or the `log` crate and those are hard to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":33272,"byte_end":33348,"line_start":276,"line_end":276,"column_start":2,"column_end":78}},{"value":"/ nicely demonstrate in tests.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":33350,"byte_end":33382,"line_start":277,"line_end":277,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":33656,"byte_end":33663,"line_start":290,"line_end":290,"column_start":5,"column_end":12},"name":"tap_dbg","qualname":"::tap::Tap::tap_dbg","value":"pub fn tap_dbg<F, R>(Self, F) -> Self where F: FnOnce(&Self) -> R, R: Sized","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Calls `tap` in debug builds, and does nothing in release builds.\n","sig":null,"attributes":[{"value":"/ Calls `tap` in debug builds, and does nothing in release builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":33494,"byte_end":33562,"line_start":287,"line_end":287,"column_start":2,"column_end":70}},{"value":"allow(unused_variables)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":33564,"byte_end":33590,"line_start":288,"line_end":288,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":34309,"byte_end":34316,"line_start":316,"line_end":316,"column_start":5,"column_end":12},"name":"tap_mut","qualname":"::tap::Tap::tap_mut","value":"pub fn tap_mut<F, R>(Self, F) -> Self where F: FnOnce(&mut Self) -> R,\nR: Sized","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Provides mutable access for modification.","sig":null,"attributes":[{"value":"/ Provides mutable access for modification.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":33844,"byte_end":33889,"line_start":301,"line_end":301,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":33891,"byte_end":33894,"line_start":302,"line_end":302,"column_start":2,"column_end":5}},{"value":"/ This is most useful for transforming mutator methods of the kind","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":33896,"byte_end":33964,"line_start":303,"line_end":303,"column_start":2,"column_end":70}},{"value":"/ `&mut self -> ()` and making them fit in value chains of `self -> Self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":33966,"byte_end":34042,"line_start":304,"line_end":304,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":34044,"byte_end":34047,"line_start":305,"line_end":305,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":34049,"byte_end":34063,"line_start":306,"line_end":306,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":34065,"byte_end":34068,"line_start":307,"line_end":307,"column_start":2,"column_end":5}},{"value":"/ Append to a string without a `let mut` statement.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":34070,"byte_end":34123,"line_start":308,"line_end":308,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":34125,"byte_end":34128,"line_start":309,"line_end":309,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":34130,"byte_end":34141,"line_start":310,"line_end":310,"column_start":2,"column_end":13}},{"value":"/ use wyz::tap::Tap;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":34143,"byte_end":34165,"line_start":311,"line_end":311,"column_start":2,"column_end":24}},{"value":"/ let full: String = \"Hello\".to_owned()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":34167,"byte_end":34208,"line_start":312,"line_end":312,"column_start":2,"column_end":43}},{"value":"/   .tap_mut(|s| s.push_str(\", reader!\"));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":34210,"byte_end":34254,"line_start":313,"line_end":313,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(full, \"Hello, reader!\");","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":34256,"byte_end":34295,"line_start":314,"line_end":314,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":34297,"byte_end":34304,"line_start":315,"line_end":315,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":34610,"byte_end":34621,"line_start":328,"line_end":328,"column_start":5,"column_end":16},"name":"tap_mut_dbg","qualname":"::tap::Tap::tap_mut_dbg","value":"pub fn tap_mut_dbg<F, R>(Self, F) -> Self where F: FnOnce(&mut Self) -> R,\nR: Sized","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Calls `tap_mut` in debug builds, and does nothing in release builds.\n","sig":null,"attributes":[{"value":"/ Calls `tap_mut` in debug builds, and does nothing in release builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":34432,"byte_end":34504,"line_start":325,"line_end":325,"column_start":2,"column_end":74}},{"value":"allow(unused_mut, unused_variables)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":34506,"byte_end":34544,"line_start":326,"line_end":326,"column_start":2,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":207},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":35778,"byte_end":35787,"line_start":369,"line_end":369,"column_start":11,"column_end":20},"name":"TapBorrow","qualname":"::tap::TapBorrow","value":"TapBorrow<T: ?Sized>: Sized","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":212},{"krate":0,"index":215},{"krate":0,"index":218}],"decl_id":null,"docs":" Borrowing Tap","sig":null,"attributes":[{"value":"* Borrowing Tap\n\nThis trait runs the [`Borrow`] or [`BorrowMut`] trait on the caller, and passes\nthe borrowed output of it to the action. This permits passing methods defined on\na supertype to the tap of a subtype.\n\nBecause a type may implement `Borrow` multiple times, the function passed to\n`.tap_borrow` must specify its argument type. This can be done by providing the\nname of an explicitly typed function, or by typing a closure’s argument.\n\n# Examples\n\n```rust\nuse wyz::tap::{Tap, TapBorrow};\nlet v = vec![5, 1, 4, 2, 3]\n  .tap_borrow_mut(<[i32]>::sort)\n  .tap_mut(|v| v.reverse());\nassert_eq!(&v, &[5, 4, 3, 2, 1]);\n```\n\n`tap_mut` on a `Vec<T>` cannot call functions defined in `impl [T]`;\n`tap_borrow_mut` can, because `Vec<T>` implements `Borrow<[T]>`.\n\n[`Borrow`]: https://doc.rust-lang.org/stable/core/borrow/trait.Borrow.html\n[`BorrowMut`]: https://doc.rust-lang.org/stable/core/borrow/trait.BorrowMut.html\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":34841,"byte_end":35767,"line_start":343,"line_end":368,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":36195,"byte_end":36205,"line_start":385,"line_end":385,"column_start":5,"column_end":15},"name":"tap_borrow","qualname":"::tap::TapBorrow::tap_borrow","value":"pub fn tap_borrow<F, R>(Self, F) -> Self where Self: Borrow<T>, F: FnOnce(&T)\n-> R, R: Sized","parent":{"krate":0,"index":207},"children":[],"decl_id":null,"docs":" Provides immutable access to the borrow for inspection.","sig":null,"attributes":[{"value":"/ Provides immutable access to the borrow for inspection.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":35809,"byte_end":35868,"line_start":370,"line_end":370,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":35870,"byte_end":35873,"line_start":371,"line_end":371,"column_start":2,"column_end":5}},{"value":"/ This calls `<Self as Borrow<T>>::borrow` on `self`, and calls `func` on","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":35875,"byte_end":35950,"line_start":372,"line_end":372,"column_start":2,"column_end":77}},{"value":"/ the resulting borrow.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":35952,"byte_end":35977,"line_start":373,"line_end":373,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":35979,"byte_end":35982,"line_start":374,"line_end":374,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":35984,"byte_end":35998,"line_start":375,"line_end":375,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":36000,"byte_end":36003,"line_start":376,"line_end":376,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":36005,"byte_end":36016,"line_start":377,"line_end":377,"column_start":2,"column_end":13}},{"value":"/ use std::rc::Rc;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":36018,"byte_end":36038,"line_start":378,"line_end":378,"column_start":2,"column_end":22}},{"value":"/ use wyz::tap::TapBorrow;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":36040,"byte_end":36068,"line_start":379,"line_end":379,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":36070,"byte_end":36073,"line_start":380,"line_end":380,"column_start":2,"column_end":5}},{"value":"/ let mut len = 0;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":36075,"byte_end":36095,"line_start":381,"line_end":381,"column_start":2,"column_end":22}},{"value":"/ let text = Rc::<str>::from(\"hello\")","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":36097,"byte_end":36136,"line_start":382,"line_end":382,"column_start":2,"column_end":41}},{"value":"/   .tap_borrow(|s: &str| len = s.len());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":36138,"byte_end":36181,"line_start":383,"line_end":383,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":36183,"byte_end":36190,"line_start":384,"line_end":384,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":36515,"byte_end":36529,"line_start":398,"line_end":398,"column_start":5,"column_end":19},"name":"tap_borrow_dbg","qualname":"::tap::TapBorrow::tap_borrow_dbg","value":"pub fn tap_borrow_dbg<F, R>(Self, F) -> Self where Self: Borrow<T>,\nF: FnOnce(&T) -> R, R: Sized","parent":{"krate":0,"index":207},"children":[],"decl_id":null,"docs":" Calls `tap_borrow` in debug builds, and does nothing in release builds.\n","sig":null,"attributes":[{"value":"/ Calls `tap_borrow` in debug builds, and does nothing in release builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":36346,"byte_end":36421,"line_start":395,"line_end":395,"column_start":2,"column_end":77}},{"value":"allow(unused_variables)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":36423,"byte_end":36449,"line_start":396,"line_end":396,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":36797,"byte_end":36811,"line_start":411,"line_end":411,"column_start":5,"column_end":19},"name":"tap_borrow_mut","qualname":"::tap::TapBorrow::tap_borrow_mut","value":"pub fn tap_borrow_mut<F, R>(Self, F) -> Self where Self: BorrowMut<T>,\nF: FnOnce(&mut T) -> R, R: Sized","parent":{"krate":0,"index":207},"children":[],"decl_id":null,"docs":" Provides mutable access to the borrow for modification.\n","sig":null,"attributes":[{"value":"/ Provides mutable access to the borrow for modification.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":36733,"byte_end":36792,"line_start":410,"line_end":410,"column_start":2,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":37164,"byte_end":37182,"line_start":425,"line_end":425,"column_start":5,"column_end":23},"name":"tap_borrow_mut_dbg","qualname":"::tap::TapBorrow::tap_borrow_mut_dbg","value":"pub fn tap_borrow_mut_dbg<F, R>(Self, F) -> Self where Self: BorrowMut<T>,\nF: FnOnce(&mut T) -> R, R: Sized","parent":{"krate":0,"index":207},"children":[],"decl_id":null,"docs":" Calls `tap_borrow_mut` in debug builds, and does nothing in release\n builds.\n","sig":null,"attributes":[{"value":"/ Calls `tap_borrow_mut` in debug builds, and does nothing in release","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":36974,"byte_end":37045,"line_start":421,"line_end":421,"column_start":2,"column_end":73}},{"value":"/ builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":37047,"byte_end":37058,"line_start":422,"line_end":422,"column_start":2,"column_end":13}},{"value":"allow(unused_mut, unused_variables)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":37060,"byte_end":37098,"line_start":423,"line_end":423,"column_start":2,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":224},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":39192,"byte_end":39200,"line_start":510,"line_end":510,"column_start":11,"column_end":19},"name":"TapAsRef","qualname":"::tap::TapAsRef","value":"TapAsRef<T: ?Sized>: Sized","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":235}],"decl_id":null,"docs":" Referential Tap","sig":null,"attributes":[{"value":"* Referential Tap\n\nThis trait runs the [`AsRef`] or [`AsMut`] trait on the caller, and passes the\nreferred output of it to the action. This permits passing methods defined on a\nmember value’s type to the tap of an aggregate value.\n\nDue to restrictions in the Rust type system, using these taps on types which\nhave multiple implementations of `AsRef` or `AsMut` must specify which\nimplementation is desired by setting the type of the receiver of the called\nfunction.\n\n# Examples\n\n```rust\nuse wyz::tap::{Tap, TapAsRef};\nlet v = vec![5, 1, 4, 2, 3]\n  .tap_ref_mut(<[i32]>::sort)\n  .tap_mut(|v| v.reverse());\nassert_eq!(&v, &[5, 4, 3, 2, 1]);\n```\n\nThis example demonstrates disambiguating among multiple implementations.\n\n```rust\nuse wyz::tap::TapAsRef;\n\nstruct Example {\n a: [u8; 8],\n b: [u16; 4],\n}\nimpl AsRef<[u8]> for Example {\n fn as_ref(&self) -> &[u8] {\n  &self.a\n }\n}\nimpl AsRef<[u16]> for Example {\n fn as_ref(&self) -> &[u16] {\n  &self.b\n }\n}\nimpl AsMut<[u8]> for Example {\n fn as_mut(&mut self) -> &mut [u8] {\n  &mut self.a\n }\n}\nimpl AsMut<[u16]> for Example {\n fn as_mut(&mut self) -> &mut [u16] {\n  &mut self.b\n }\n}\n\nlet mut sum = 0usize;\nlet e = Example {\n a: [0, 1, 2, 3, 4, 5, 6, 7],\n b: [8, 9, 10, 11],\n}\n .tap_ref(|a: &[u8]| sum += a.iter().sum::<u8>() as usize)\n .tap_ref(|b: &[u16]| sum += b.iter().sum::<u16>() as usize)\n .tap_ref_mut(|a: &mut [u8]| a.iter_mut().for_each(|e| *e *= 2))\n .tap_ref_mut(|b: &mut [u16]| b.iter_mut().for_each(|e| *e *= 2));\n\nassert_eq!(sum, 66);\nassert_eq!(e.a, [0, 2, 4, 6, 8, 10, 12, 14]);\nassert_eq!(e.b, [16, 18, 20, 22]);\n```\n\n[`AsMut`]: https://doc.rust-lang.org/stable/core/convert/trait.AsMut.html\n[`AsRef`]: https://doc.rust-lang.org/stable/core/convert/trait.AsRef.html\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":37448,"byte_end":39181,"line_start":441,"line_end":509,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":39289,"byte_end":39296,"line_start":512,"line_end":512,"column_start":5,"column_end":12},"name":"tap_ref","qualname":"::tap::TapAsRef::tap_ref","value":"pub fn tap_ref<F, R>(Self, F) -> Self where Self: AsRef<T>, F: FnOnce(&T) -> R","parent":{"krate":0,"index":224},"children":[],"decl_id":null,"docs":" Provides immutable access to the reference for inspection.\n","sig":null,"attributes":[{"value":"/ Provides immutable access to the reference for inspection.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":39222,"byte_end":39284,"line_start":511,"line_end":511,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":229},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":39589,"byte_end":39600,"line_start":524,"line_end":524,"column_start":5,"column_end":16},"name":"tap_ref_dbg","qualname":"::tap::TapAsRef::tap_ref_dbg","value":"pub fn tap_ref_dbg<F, R>(Self, F) -> Self where Self: AsRef<T>, F: FnOnce(&T)\n-> R","parent":{"krate":0,"index":224},"children":[],"decl_id":null,"docs":" Calls `tap_ref` in debug builds, and does nothing in release builds.\n","sig":null,"attributes":[{"value":"/ Calls `tap_ref` in debug builds, and does nothing in release builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":39423,"byte_end":39495,"line_start":521,"line_end":521,"column_start":2,"column_end":74}},{"value":"allow(unused_variables)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":39497,"byte_end":39523,"line_start":522,"line_end":522,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":39855,"byte_end":39866,"line_start":536,"line_end":536,"column_start":5,"column_end":16},"name":"tap_ref_mut","qualname":"::tap::TapAsRef::tap_ref_mut","value":"pub fn tap_ref_mut<F, R>(Self, F) -> Self where Self: AsMut<T>,\nF: FnOnce(&mut T) -> R","parent":{"krate":0,"index":224},"children":[],"decl_id":null,"docs":" Provides mutable access to the reference for modification.\n","sig":null,"attributes":[{"value":"/ Provides mutable access to the reference for modification.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":39788,"byte_end":39850,"line_start":535,"line_end":535,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":235},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":40187,"byte_end":40202,"line_start":548,"line_end":548,"column_start":5,"column_end":20},"name":"tap_ref_mut_dbg","qualname":"::tap::TapAsRef::tap_ref_mut_dbg","value":"pub fn tap_ref_mut_dbg<F, R>(Self, F) -> Self where Self: AsMut<T>,\nF: FnOnce(&mut T) -> R","parent":{"krate":0,"index":224},"children":[],"decl_id":null,"docs":" Calls `tap_ref_mut` in debug builds, and does nothing in release builds.\n","sig":null,"attributes":[{"value":"/ Calls `tap_ref_mut` in debug builds, and does nothing in release builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":40005,"byte_end":40081,"line_start":545,"line_end":545,"column_start":2,"column_end":78}},{"value":"allow(unused_mut, unused_variables)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":40083,"byte_end":40121,"line_start":546,"line_end":546,"column_start":2,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":241},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":41308,"byte_end":41316,"line_start":587,"line_end":587,"column_start":11,"column_end":19},"name":"TapDeref","qualname":"::tap::TapDeref","value":"TapDeref: Sized","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":245},{"krate":0,"index":248},{"krate":0,"index":251}],"decl_id":null,"docs":" Dereferencing Tap","sig":null,"attributes":[{"value":"* Dereferencing Tap\n\nThis trait runs the [`Deref`] or [`DerefMut`] trait on the caller, and passes\nthe reborrowed dereference of it to the action. This permits passing methods\ndefined on the supertype to the tap of a subtype *by name*, rather than by using\nclosure syntax.\n\nNote that the implementation of this trait does not require that the implementor\nalso implement `Deref` or `DerefMut`, but the trait methods will cause compiler\nfailures at the call site if the `Deref` or `DerefMut` traits are not present.\n\n# Examples\n\n```rust\nuse wyz::tap::{Tap, TapDeref};\nlet v = vec![5, 1, 4, 2, 3]\n  .tap_deref_mut(<[i32]>::sort)\n  .tap_mut(|v| v.reverse());\nassert_eq!(&v, &[5, 4, 3, 2, 1]);\n```\n\n[`Deref`]: https://doc.rust-lang.org/stable/core/ops/trait.Deref.html\n[`DerefMut`]: https://doc.rust-lang.org/stable/core/ops/trait.DerefMut.html\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":40452,"byte_end":41297,"line_start":563,"line_end":586,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":41381,"byte_end":41390,"line_start":589,"line_end":589,"column_start":5,"column_end":14},"name":"tap_deref","qualname":"::tap::TapDeref::tap_deref","value":"pub fn tap_deref<F, R>(Self, F) -> Self where Self: Deref,\nF: FnOnce(&<Self as Deref>::Target) -> R","parent":{"krate":0,"index":241},"children":[],"decl_id":null,"docs":" Immutably dereferences `self` for inspection.\n","sig":null,"attributes":[{"value":"/ Immutably dereferences `self` for inspection.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":41327,"byte_end":41376,"line_start":588,"line_end":588,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":245},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":41670,"byte_end":41683,"line_start":600,"line_end":600,"column_start":5,"column_end":18},"name":"tap_deref_dbg","qualname":"::tap::TapDeref::tap_deref_dbg","value":"pub fn tap_deref_dbg<F, R>(Self, F) -> Self where Self: Deref,\nF: FnOnce(&<Self as Deref>::Target) -> R","parent":{"krate":0,"index":241},"children":[],"decl_id":null,"docs":" Calls `tap_deref` in debug builds, and does nothing in release builds.\n","sig":null,"attributes":[{"value":"/ Calls `tap_deref` in debug builds, and does nothing in release builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":41530,"byte_end":41604,"line_start":598,"line_end":598,"column_start":2,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":41946,"byte_end":41959,"line_start":612,"line_end":612,"column_start":5,"column_end":18},"name":"tap_deref_mut","qualname":"::tap::TapDeref::tap_deref_mut","value":"pub fn tap_deref_mut<F, R>(Self, F) -> Self where Self: DerefMut,\nF: FnOnce(&mut <Self as Deref>::Target) -> R","parent":{"krate":0,"index":241},"children":[],"decl_id":null,"docs":" Mutably dereferences `self` for modification.\n","sig":null,"attributes":[{"value":"/ Mutably dereferences `self` for modification.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":41892,"byte_end":41941,"line_start":611,"line_end":611,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":42270,"byte_end":42287,"line_start":624,"line_end":624,"column_start":5,"column_end":22},"name":"tap_deref_mut_dbg","qualname":"::tap::TapDeref::tap_deref_mut_dbg","value":"pub fn tap_deref_mut_dbg<F, R>(Self, F) -> Self where Self: DerefMut,\nF: FnOnce(&mut <Self as Deref>::Target) -> R","parent":{"krate":0,"index":241},"children":[],"decl_id":null,"docs":" Calls `tap_deref_mut` in debug builds, and does nothing in release\n builds.\n","sig":null,"attributes":[{"value":"/ Calls `tap_deref_mut` in debug builds, and does nothing in release","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":42121,"byte_end":42191,"line_start":621,"line_end":621,"column_start":2,"column_end":72}},{"value":"/ builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":42193,"byte_end":42204,"line_start":622,"line_end":622,"column_start":2,"column_end":13}}]},{"kind":"Trait","id":{"krate":0,"index":256},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":42750,"byte_end":42759,"line_start":645,"line_end":645,"column_start":11,"column_end":20},"name":"TapOption","qualname":"::tap::TapOption","value":"TapOption<T: Sized>: Sized","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":264},{"krate":0,"index":267},{"krate":0,"index":270},{"krate":0,"index":273}],"decl_id":null,"docs":" Optional Tap","sig":null,"attributes":[{"value":"* Optional Tap\n\nThis trait allows conditional tapping of `Option` wrappers. The methods only\ninvoke their provided function, on the inner type, if the `Option` has the\ncorrect outer variant.\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":42543,"byte_end":42739,"line_start":639,"line_end":644,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":42904,"byte_end":42912,"line_start":649,"line_end":649,"column_start":5,"column_end":13},"name":"tap_some","qualname":"::tap::TapOption::tap_some","value":"pub fn tap_some<F: FnOnce(&T) -> R, R>(Self, F) -> Self","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Provides the interior value for inspection if present.","sig":null,"attributes":[{"value":"/ Provides the interior value for inspection if present.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":42780,"byte_end":42838,"line_start":646,"line_end":646,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":42840,"byte_end":42843,"line_start":647,"line_end":647,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to `.map(|v| { func(&v); v })`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":42845,"byte_end":42899,"line_start":648,"line_end":648,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":43068,"byte_end":43080,"line_start":653,"line_end":653,"column_start":5,"column_end":17},"name":"tap_some_dbg","qualname":"::tap::TapOption::tap_some_dbg","value":"pub fn tap_some_dbg<F: FnOnce(&T) -> R, R>(Self, F) -> Self","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Calls `tap_some` in debug builds, and does nothing in release builds.\n","sig":null,"attributes":[{"value":"/ Calls `tap_some` in debug builds, and does nothing in release builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":42962,"byte_end":43035,"line_start":651,"line_end":651,"column_start":2,"column_end":75}},{"value":"allow(unused_variables)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":43037,"byte_end":43063,"line_start":652,"line_end":652,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":43372,"byte_end":43384,"line_start":663,"line_end":663,"column_start":5,"column_end":17},"name":"tap_some_mut","qualname":"::tap::TapOption::tap_some_mut","value":"pub fn tap_some_mut<F: FnOnce(&mut T) -> R, R>(Self, F) -> Self","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Provides the interior value for modification if present.","sig":null,"attributes":[{"value":"/ Provides the interior value for modification if present.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":43238,"byte_end":43298,"line_start":660,"line_end":660,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":43300,"byte_end":43303,"line_start":661,"line_end":661,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to `.map(|mut v| { func(&mut v); v })`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":43305,"byte_end":43367,"line_start":662,"line_end":662,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":43553,"byte_end":43569,"line_start":668,"line_end":668,"column_start":5,"column_end":21},"name":"tap_some_mut_dbg","qualname":"::tap::TapOption::tap_some_mut_dbg","value":"pub fn tap_some_mut_dbg<F: FnOnce(&mut T) -> R, R>(Self, F) -> Self","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Calls `tap_some_mut` in debug builds, and does nothing in release\n builds.\n","sig":null,"attributes":[{"value":"/ Calls `tap_some_mut` in debug builds, and does nothing in release","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":43438,"byte_end":43507,"line_start":665,"line_end":665,"column_start":2,"column_end":71}},{"value":"/ builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":43509,"byte_end":43520,"line_start":666,"line_end":666,"column_start":2,"column_end":13}},{"value":"allow(unused_variables)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":43522,"byte_end":43548,"line_start":667,"line_end":667,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":43861,"byte_end":43869,"line_start":678,"line_end":678,"column_start":5,"column_end":13},"name":"tap_none","qualname":"::tap::TapOption::tap_none","value":"pub fn tap_none<F: FnOnce() -> R, R>(Self, F) -> Self","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Runs the provided function if the `Option` is empty.","sig":null,"attributes":[{"value":"/ Runs the provided function if the `Option` is empty.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":43735,"byte_end":43791,"line_start":675,"line_end":675,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":43793,"byte_end":43796,"line_start":676,"line_end":676,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to `.or_else(|| { func(); None })`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":43798,"byte_end":43856,"line_start":677,"line_end":677,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":44023,"byte_end":44035,"line_start":682,"line_end":682,"column_start":5,"column_end":17},"name":"tap_none_dbg","qualname":"::tap::TapOption::tap_none_dbg","value":"pub fn tap_none_dbg<F: FnOnce() -> R, R>(Self, F) -> Self","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Calls `tap_none` in debug builds, and does nothing in release builds.\n","sig":null,"attributes":[{"value":"/ Calls `tap_none` in debug builds, and does nothing in release builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":43917,"byte_end":43990,"line_start":680,"line_end":680,"column_start":2,"column_end":75}},{"value":"allow(unused_variables)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":43992,"byte_end":44018,"line_start":681,"line_end":681,"column_start":2,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":287},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":45079,"byte_end":45088,"line_start":724,"line_end":724,"column_start":11,"column_end":20},"name":"TapResult","qualname":"::tap::TapResult","value":"TapResult<T: Sized, E: Sized>: Sized","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":293},{"krate":0,"index":296},{"krate":0,"index":299},{"krate":0,"index":302},{"krate":0,"index":305},{"krate":0,"index":308},{"krate":0,"index":311}],"decl_id":null,"docs":" Result Tap","sig":null,"attributes":[{"value":"* Result Tap\n\nThis trait allows conditional tapping of `Result` wrappers. The methods only\ninvoke their provided function, on the inner type, if the `Result` has the\ncorrect outer variant.\n\nNote that the result value of whichever function you pass to the tapper is\ndiscarded, so if that function returns a `Result`, an “unused must use” warning\nwill be raised! You must explicitly handle or drop a `Result` value if\nyour tapper’s function produces one.\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":44604,"byte_end":45068,"line_start":713,"line_end":723,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":45192,"byte_end":45198,"line_start":726,"line_end":726,"column_start":5,"column_end":11},"name":"tap_ok","qualname":"::tap::TapResult::tap_ok","value":"pub fn tap_ok<F: FnOnce(&T) -> R, R>(Self, F) -> Self","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":" Provides the inner value for inspection if the `Result` is `Ok`.\n","sig":null,"attributes":[{"value":"/ Provides the inner value for inspection if the `Result` is `Ok`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":45119,"byte_end":45187,"line_start":725,"line_end":725,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":45352,"byte_end":45362,"line_start":730,"line_end":730,"column_start":5,"column_end":15},"name":"tap_ok_dbg","qualname":"::tap::TapResult::tap_ok_dbg","value":"pub fn tap_ok_dbg<F: FnOnce(&T) -> R, R>(Self, F) -> Self","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":" Calls `tap_ok` in debug builds, and does nothing in release builds.\n","sig":null,"attributes":[{"value":"/ Calls `tap_ok` in debug builds, and does nothing in release builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":45248,"byte_end":45319,"line_start":728,"line_end":728,"column_start":2,"column_end":73}},{"value":"allow(unused_variables)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":45321,"byte_end":45347,"line_start":729,"line_end":729,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":45593,"byte_end":45603,"line_start":738,"line_end":738,"column_start":5,"column_end":15},"name":"tap_ok_mut","qualname":"::tap::TapResult::tap_ok_mut","value":"pub fn tap_ok_mut<F: FnOnce(&mut T) -> R, R>(Self, F) -> Self","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":" Provides the inner value for modification if the `Result` is `Ok`.\n","sig":null,"attributes":[{"value":"/ Provides the inner value for modification if the `Result` is `Ok`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":45518,"byte_end":45588,"line_start":737,"line_end":737,"column_start":2,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":45765,"byte_end":45779,"line_start":742,"line_end":742,"column_start":5,"column_end":19},"name":"tap_ok_mut_dbg","qualname":"::tap::TapResult::tap_ok_mut_dbg","value":"pub fn tap_ok_mut_dbg<F: FnOnce(&mut T) -> R, R>(Self, F) -> Self","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":" Calls `tap_ok_mut` in debug builds, and does nothing in release builds.\n","sig":null,"attributes":[{"value":"/ Calls `tap_ok_mut` in debug builds, and does nothing in release builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":45657,"byte_end":45732,"line_start":740,"line_end":740,"column_start":2,"column_end":77}},{"value":"allow(unused_variables)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":45734,"byte_end":45760,"line_start":741,"line_end":741,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":46023,"byte_end":46030,"line_start":750,"line_end":750,"column_start":5,"column_end":12},"name":"tap_err","qualname":"::tap::TapResult::tap_err","value":"pub fn tap_err<F: FnOnce(&E) -> R, R>(Self, F) -> Self","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":" Provides the inner error value for inspection if the `Result` is `Err`.\n","sig":null,"attributes":[{"value":"/ Provides the inner error value for inspection if the `Result` is `Err`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":45943,"byte_end":46018,"line_start":749,"line_end":749,"column_start":2,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":46185,"byte_end":46196,"line_start":754,"line_end":754,"column_start":5,"column_end":16},"name":"tap_err_dbg","qualname":"::tap::TapResult::tap_err_dbg","value":"pub fn tap_err_dbg<F: FnOnce(&E) -> R, R>(Self, F) -> Self","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":" Calls `tap_err` in debug builds, and does nothing in release builds.\n","sig":null,"attributes":[{"value":"/ Calls `tap_err` in debug builds, and does nothing in release builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":46080,"byte_end":46152,"line_start":752,"line_end":752,"column_start":2,"column_end":74}},{"value":"allow(unused_variables)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":46154,"byte_end":46180,"line_start":753,"line_end":753,"column_start":2,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":46440,"byte_end":46451,"line_start":763,"line_end":763,"column_start":5,"column_end":16},"name":"tap_err_mut","qualname":"::tap::TapResult::tap_err_mut","value":"pub fn tap_err_mut<F: FnOnce(&mut E) -> R, R>(Self, F) -> Self","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":" Provides the inner error value for modification if the `Result` is\n `Err`.\n","sig":null,"attributes":[{"value":"/ Provides the inner error value for modification if the `Result` is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":46353,"byte_end":46423,"line_start":761,"line_end":761,"column_start":2,"column_end":72}},{"value":"/ `Err`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":46425,"byte_end":46435,"line_start":762,"line_end":762,"column_start":2,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":46614,"byte_end":46629,"line_start":767,"line_end":767,"column_start":5,"column_end":20},"name":"tap_err_mut_dbg","qualname":"::tap::TapResult::tap_err_mut_dbg","value":"pub fn tap_err_mut_dbg<F: FnOnce(&mut E) -> R, R>(Self, F) -> Self","parent":{"krate":0,"index":287},"children":[],"decl_id":null,"docs":" Calls `tap_err_mut` in debug builds, and does nothing in release builds.\n","sig":null,"attributes":[{"value":"/ Calls `tap_err_mut` in debug builds, and does nothing in release builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":46505,"byte_end":46581,"line_start":765,"line_end":765,"column_start":2,"column_end":78}},{"value":"allow(unused_variables)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":46583,"byte_end":46609,"line_start":766,"line_end":766,"column_start":2,"column_end":28}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":4373,"byte_end":4374,"line_start":107,"line_end":107,"column_start":25,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":7909,"byte_end":7910,"line_start":209,"line_end":209,"column_start":28,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10264,"byte_end":10265,"line_start":93,"line_end":93,"column_start":31,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23886,"byte_end":23887,"line_start":345,"line_end":345,"column_start":25,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23913,"byte_end":23914,"line_start":348,"line_end":348,"column_start":21,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23943,"byte_end":23944,"line_start":351,"line_end":351,"column_start":24,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23972,"byte_end":23973,"line_start":354,"line_end":354,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":24001,"byte_end":24002,"line_start":357,"line_end":357,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":34834,"byte_end":34835,"line_start":340,"line_end":340,"column_start":24,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":37441,"byte_end":37442,"line_start":438,"line_end":438,"column_start":44,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":40445,"byte_end":40446,"line_start":560,"line_end":560,"column_start":43,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":42536,"byte_end":42537,"line_start":636,"line_end":636,"column_start":29,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":44217,"byte_end":44223,"line_start":690,"line_end":690,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":281},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":46826,"byte_end":46832,"line_start":775,"line_end":775,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":317},{"krate":0,"index":320},{"krate":0,"index":323},{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/lib.rs","byte_start":509,"byte_end":513,"line_start":20,"line_end":20,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":5}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/lib.rs","byte_start":523,"byte_end":526,"line_start":21,"line_end":21,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":19}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/lib.rs","byte_start":536,"byte_end":540,"line_start":22,"line_end":22,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":106}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/lib.rs","byte_start":550,"byte_end":553,"line_start":23,"line_end":23,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":176}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":3775,"byte_end":3780,"line_start":85,"line_end":85,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":3009},"to":{"krate":0,"index":9}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":4373,"byte_end":4374,"line_start":107,"line_end":107,"column_start":25,"column_end":26},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":13},"to":{"krate":0,"index":9}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":7217,"byte_end":7222,"line_start":187,"line_end":187,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":3009},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/conv.rs","byte_start":7909,"byte_end":7910,"line_start":209,"line_end":209,"column_start":28,"column_end":29},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":18},"to":{"krate":0,"index":14}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":8849,"byte_end":8854,"line_start":37,"line_end":37,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":3009},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/fmt.rs","byte_start":10264,"byte_end":10265,"line_start":93,"line_end":93,"column_start":31,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":72},"to":{"krate":0,"index":62}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":14573,"byte_end":14578,"line_start":55,"line_end":55,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":3009},"to":{"krate":0,"index":122}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23886,"byte_end":23887,"line_start":345,"line_end":345,"column_start":25,"column_end":26},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":167},"to":{"krate":0,"index":122}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23913,"byte_end":23914,"line_start":348,"line_end":348,"column_start":21,"column_end":22},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":169},"to":{"krate":0,"index":126}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23943,"byte_end":23944,"line_start":351,"line_end":351,"column_start":24,"column_end":25},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":171},"to":{"krate":0,"index":135}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":23972,"byte_end":23973,"line_start":354,"line_end":354,"column_start":23,"column_end":24},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":173},"to":{"krate":0,"index":146}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/pipe.rs","byte_start":24001,"byte_end":24002,"line_start":357,"line_end":357,"column_start":23,"column_end":24},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":175},"to":{"krate":0,"index":157}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":32447,"byte_end":32452,"line_start":246,"line_end":246,"column_start":16,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":3009},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":34834,"byte_end":34835,"line_start":340,"line_end":340,"column_start":24,"column_end":25},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":206},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":35800,"byte_end":35805,"line_start":369,"line_end":369,"column_start":33,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":3009},"to":{"krate":0,"index":207}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":37441,"byte_end":37442,"line_start":438,"line_end":438,"column_start":44,"column_end":45},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":222},"to":{"krate":0,"index":207}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":39213,"byte_end":39218,"line_start":510,"line_end":510,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":3009},"to":{"krate":0,"index":224}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":40445,"byte_end":40446,"line_start":560,"line_end":560,"column_start":43,"column_end":44},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":239},"to":{"krate":0,"index":224}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":41318,"byte_end":41323,"line_start":587,"line_end":587,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":1,"index":3009},"to":{"krate":0,"index":241}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":42536,"byte_end":42537,"line_start":636,"line_end":636,"column_start":29,"column_end":30},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":255},"to":{"krate":0,"index":241}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":42771,"byte_end":42776,"line_start":645,"line_end":645,"column_start":32,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":3009},"to":{"krate":0,"index":256}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":44217,"byte_end":44223,"line_start":690,"line_end":690,"column_start":26,"column_end":32},"kind":{"Impl":{"id":116}},"from":{"krate":1,"index":36969},"to":{"krate":0,"index":256}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":45110,"byte_end":45115,"line_start":724,"line_end":724,"column_start":42,"column_end":47},"kind":"SuperTrait","from":{"krate":1,"index":3009},"to":{"krate":0,"index":287}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/wyz-0.2.0/src/tap.rs","byte_start":46826,"byte_end":46832,"line_start":775,"line_end":775,"column_start":32,"column_end":38},"kind":{"Impl":{"id":117}},"from":{"krate":1,"index":37095},"to":{"krate":0,"index":287}}]}