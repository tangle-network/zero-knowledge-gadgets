{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74","program":"/Users/thomascnorton/.rustup/toolchains/nightly-2021-11-10-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","ark_plonk","--edition=2021","/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=e65f985c58a8076e","-C","extra-filename=-e65f985c58a8076e","--out-dir","/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps","-L","dependency=/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps","--extern","ark_ec=/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps/libark_ec-8309ca0a74ebe41f.rmeta","--extern","ark_ff=/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps/libark_ff-a1efa0d85a842967.rmeta","--extern","ark_poly=/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps/libark_poly-b29c58429101b168.rmeta","--extern","ark_poly_commit=/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps/libark_poly_commit-43ce1b031242b53d.rmeta","--extern","ark_serialize=/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps/libark_serialize-cfd6bf7bd79c826f.rmeta","--extern","hashbrown=/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps/libhashbrown-10e39c868fea9616.rmeta","--extern","itertools=/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps/libitertools-9fd7cd77644fbb99.rmeta","--extern","merlin=/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps/libmerlin-0150bf5ee408e1b8.rmeta","--extern","num_traits=/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps/libnum_traits-66022da2061fa197.rmeta","--extern","rand_core=/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps/librand_core-94b2165434f8d256.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/thomascnorton/.rustup/toolchains/nightly-2021-11-10-aarch64-apple-darwin"],"output":"/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps/libark_plonk-e65f985c58a8076e.rmeta"},"prelude":{"crate_id":{"name":"ark_plonk","disambiguator":[9199801830686129729,0]},"crate_root":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src","external_crates":[{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[10313591498153884623,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":2,"id":{"name":"core","disambiguator":[5231689799850066461,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17864008973282999150,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17296295565214172833,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[2118848927325286491,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[13292461249116594054,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4814502004061530608,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15708407810567005444,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2791263468303431766,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6506189918680636659,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[8728067978980854181,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[10381178398037116026,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[10719114933783356113,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[903433031267741442,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[3053230250002770710,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[4944501850750929564,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[675967159280285970,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":18,"id":{"name":"ark_ec","disambiguator":[7925892463367224200,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":19,"id":{"name":"derivative","disambiguator":[2048964035058651348,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":20,"id":{"name":"ark_std","disambiguator":[14941064956311524690,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":21,"id":{"name":"rand","disambiguator":[1630296815793953863,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/helper.rs","num":22,"id":{"name":"rand_core","disambiguator":[2913576076898784547,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":23,"id":{"name":"getrandom","disambiguator":[15405553764762976901,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":24,"id":{"name":"cfg_if","disambiguator":[1558138431257801347,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":25,"id":{"name":"libc","disambiguator":[4936676803799380173,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":26,"id":{"name":"rand_chacha","disambiguator":[17116686438942031574,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":27,"id":{"name":"ppv_lite86","disambiguator":[14548071841810831385,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","num":28,"id":{"name":"num_traits","disambiguator":[16786139580922647431,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":29,"id":{"name":"ark_ff","disambiguator":[17296126062763168929,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":30,"id":{"name":"ark_serialize","disambiguator":[15218200095175345295,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":31,"id":{"name":"ark_serialize_derive","disambiguator":[4348583548406225334,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":32,"id":{"name":"digest","disambiguator":[14056225993223678,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":33,"id":{"name":"generic_array","disambiguator":[13953929427960432296,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":34,"id":{"name":"typenum","disambiguator":[14811765620827620281,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":35,"id":{"name":"num_bigint","disambiguator":[4636019146552445857,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":36,"id":{"name":"num_integer","disambiguator":[8299060462252349654,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":37,"id":{"name":"zeroize","disambiguator":[15104117607204699449,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":38,"id":{"name":"zeroize_derive","disambiguator":[13491825784207841911,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":39,"id":{"name":"ark_ff_macros","disambiguator":[2838155455593372725,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":40,"id":{"name":"rayon","disambiguator":[13330399366239232550,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":41,"id":{"name":"either","disambiguator":[14622614403431603690,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":42,"id":{"name":"rayon_core","disambiguator":[3116011022892733701,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":43,"id":{"name":"crossbeam_channel","disambiguator":[13739473032368610408,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":44,"id":{"name":"crossbeam_utils","disambiguator":[10213785468037743496,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":45,"id":{"name":"lazy_static","disambiguator":[12174376825605781157,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":46,"id":{"name":"crossbeam_deque","disambiguator":[1709988969669620152,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":47,"id":{"name":"crossbeam_epoch","disambiguator":[3934858287726573675,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":48,"id":{"name":"scopeguard","disambiguator":[6150972498434788528,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":49,"id":{"name":"memoffset","disambiguator":[14533121254074024134,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":50,"id":{"name":"num_cpus","disambiguator":[11209614140496852670,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":51,"id":{"name":"ark_ff_asm","disambiguator":[11836283966300403493,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":52,"id":{"name":"paste","disambiguator":[2669140741733867077,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":53,"id":{"name":"ark_poly","disambiguator":[3931761136936561567,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","num":54,"id":{"name":"hashbrown","disambiguator":[11664120914568132752,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":55,"id":{"name":"ahash","disambiguator":[14218587570204302749,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":56,"id":{"name":"once_cell","disambiguator":[5810844705288385153,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","num":57,"id":{"name":"ark_poly_commit","disambiguator":[17895539465307730445,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/permutation/permutation.rs","num":58,"id":{"name":"itertools","disambiguator":[7943983970102495954,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/transcript.rs","num":59,"id":{"name":"merlin","disambiguator":[8809330458080842271,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/transcript.rs","num":60,"id":{"name":"keccak","disambiguator":[2669573614009251601,0]}},{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/transcript.rs","num":61,"id":{"name":"byteorder","disambiguator":[16793779940206171803,0]}}],"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":299,"byte_end":2164,"line_start":8,"line_end":58,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1776},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/mod.rs","byte_start":23389,"byte_end":23405,"line_start":28,"line_end":28,"column_start":19,"column_end":35},"alias_span":null,"name":"StandardComposer","value":"","parent":{"krate":0,"index":110}},{"kind":"Use","ref_id":{"krate":0,"index":1870},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/mod.rs","byte_start":23420,"byte_end":23425,"line_start":29,"line_end":29,"column_start":14,"column_end":19},"alias_span":null,"name":"Point","value":"","parent":{"krate":0,"index":110}},{"kind":"Use","ref_id":{"krate":0,"index":1804},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/mod.rs","byte_start":23445,"byte_end":23453,"line_start":30,"line_end":30,"column_start":19,"column_end":27},"alias_span":null,"name":"Variable","value":"","parent":{"krate":0,"index":110}},{"kind":"Use","ref_id":{"krate":0,"index":1805},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/mod.rs","byte_start":23445,"byte_end":23453,"line_start":30,"line_end":30,"column_start":19,"column_end":27},"alias_span":null,"name":"Variable","value":"","parent":{"krate":0,"index":110}},{"kind":"Use","ref_id":{"krate":0,"index":3},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/prelude.rs","byte_start":213628,"byte_end":213635,"line_start":13,"line_end":13,"column_start":5,"column_end":12},"alias_span":null,"name":"circuit","value":"","parent":{"krate":0,"index":772}},{"kind":"Use","ref_id":{"krate":0,"index":93},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/prelude.rs","byte_start":213644,"byte_end":213651,"line_start":13,"line_end":13,"column_start":21,"column_end":28},"alias_span":null,"name":"Circuit","value":"","parent":{"krate":0,"index":772}},{"kind":"Use","ref_id":{"krate":0,"index":1691},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/prelude.rs","byte_start":213653,"byte_end":213669,"line_start":13,"line_end":13,"column_start":30,"column_end":46},"alias_span":null,"name":"PublicInputValue","value":"","parent":{"krate":0,"index":772}},{"kind":"Use","ref_id":{"krate":0,"index":1728},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/prelude.rs","byte_start":213671,"byte_end":213683,"line_start":13,"line_end":13,"column_start":48,"column_end":60},"alias_span":null,"name":"VerifierData","value":"","parent":{"krate":0,"index":772}},{"kind":"Use","ref_id":{"krate":0,"index":1870},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/prelude.rs","byte_start":213710,"byte_end":213715,"line_start":14,"line_end":14,"column_start":25,"column_end":30},"alias_span":null,"name":"Point","value":"","parent":{"krate":0,"index":772}},{"kind":"Use","ref_id":{"krate":0,"index":1776},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/prelude.rs","byte_start":213717,"byte_end":213733,"line_start":14,"line_end":14,"column_start":32,"column_end":48},"alias_span":null,"name":"StandardComposer","value":"","parent":{"krate":0,"index":772}},{"kind":"Use","ref_id":{"krate":0,"index":1804},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/prelude.rs","byte_start":213735,"byte_end":213743,"line_start":14,"line_end":14,"column_start":50,"column_end":58},"alias_span":null,"name":"Variable","value":"","parent":{"krate":0,"index":772}},{"kind":"Use","ref_id":{"krate":0,"index":1805},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/prelude.rs","byte_start":213735,"byte_end":213743,"line_start":14,"line_end":14,"column_start":50,"column_end":58},"alias_span":null,"name":"Variable","value":"","parent":{"krate":0,"index":772}},{"kind":"Use","ref_id":{"krate":0,"index":972},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/prelude.rs","byte_start":213765,"byte_end":213771,"line_start":15,"line_end":15,"column_start":20,"column_end":26},"alias_span":null,"name":"Prover","value":"","parent":{"krate":0,"index":772}},{"kind":"Use","ref_id":{"krate":0,"index":2588},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/prelude.rs","byte_start":213773,"byte_end":213782,"line_start":15,"line_end":15,"column_start":28,"column_end":37},"alias_span":null,"name":"ProverKey","value":"","parent":{"krate":0,"index":772}},{"kind":"Use","ref_id":{"krate":0,"index":1076},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/prelude.rs","byte_start":213784,"byte_end":213792,"line_start":15,"line_end":15,"column_start":39,"column_end":47},"alias_span":null,"name":"Verifier","value":"","parent":{"krate":0,"index":772}},{"kind":"Use","ref_id":{"krate":0,"index":1933},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/prelude.rs","byte_start":213829,"byte_end":213834,"line_start":18,"line_end":18,"column_start":31,"column_end":36},"alias_span":null,"name":"Proof","value":"","parent":{"krate":0,"index":772}},{"kind":"Use","ref_id":{"krate":0,"index":2532},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/prelude.rs","byte_start":213836,"byte_end":213847,"line_start":18,"line_end":18,"column_start":38,"column_end":49},"alias_span":null,"name":"VerifierKey","value":"","parent":{"krate":0,"index":772}},{"kind":"Use","ref_id":{"krate":0,"index":1895},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/prelude.rs","byte_start":213929,"byte_end":213934,"line_start":21,"line_end":21,"column_start":23,"column_end":28},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":772}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/mod.rs","byte_start":214291,"byte_end":214292,"line_start":11,"line_end":11,"column_start":16,"column_end":17},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":817}},{"kind":"Use","ref_id":{"krate":0,"index":972},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/mod.rs","byte_start":214390,"byte_end":214396,"line_start":15,"line_end":15,"column_start":17,"column_end":23},"alias_span":null,"name":"Prover","value":"","parent":{"krate":0,"index":817}},{"kind":"Use","ref_id":{"krate":0,"index":1076},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/mod.rs","byte_start":214416,"byte_end":214424,"line_start":16,"line_end":16,"column_start":19,"column_end":27},"alias_span":null,"name":"Verifier","value":"","parent":{"krate":0,"index":817}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/mod.rs","byte_start":214442,"byte_end":214443,"line_start":17,"line_end":17,"column_start":17,"column_end":18},"alias_span":null,"name":"*","value":"ProverKey","parent":{"krate":0,"index":817}},{"kind":"Use","ref_id":{"krate":0,"index":1933},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/mod.rs","byte_start":214527,"byte_end":214532,"line_start":21,"line_end":21,"column_start":16,"column_end":21},"alias_span":null,"name":"Proof","value":"","parent":{"krate":0,"index":817}},{"kind":"Use","ref_id":{"krate":0,"index":2532},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/mod.rs","byte_start":214550,"byte_end":214561,"line_start":22,"line_end":22,"column_start":17,"column_end":28},"alias_span":null,"name":"VerifierKey","value":"","parent":{"krate":0,"index":817}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":299,"byte_end":2164,"line_start":8,"line_end":58,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":110},{"krate":0,"index":576},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":769},{"krate":0,"index":772},{"krate":0,"index":817},{"krate":0,"index":1648},{"krate":0,"index":1686}],"decl_id":null,"docs":" Permutations over Lagrange-bases for Oecumenical Noninteractive\n arguments of Knowledge (PLONK) is a zero knowledge proof system.","sig":null,"attributes":[{"value":"/ Permutations over Lagrange-bases for Oecumenical Noninteractive","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":299,"byte_end":366,"line_start":8,"line_end":8,"column_start":1,"column_end":68}},{"value":"/ arguments of Knowledge (PLONK) is a zero knowledge proof system.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":367,"byte_end":435,"line_start":9,"line_end":9,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":436,"byte_end":439,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This protocol was created by:","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":440,"byte_end":473,"line_start":11,"line_end":11,"column_start":1,"column_end":34}},{"value":"/ - Ariel Gabizon (Protocol Labs),","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":474,"byte_end":510,"line_start":12,"line_end":12,"column_start":1,"column_end":37}},{"value":"/ - Zachary J. Williamson (Aztec Protocol)","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":511,"byte_end":555,"line_start":13,"line_end":13,"column_start":1,"column_end":45}},{"value":"/ - Oana Ciobotaru","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":556,"byte_end":576,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":577,"byte_end":580,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ This crate contains a pure Rust implementation of this algorithm using","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":581,"byte_end":655,"line_start":16,"line_end":16,"column_start":1,"column_end":75}},{"value":"/ code done by the creators of the protocol as a reference implementation:","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":656,"byte_end":732,"line_start":17,"line_end":17,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":733,"byte_end":736,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ <https://github.com/AztecProtocol/barretenberg/blob/master/barretenberg/src/aztec/plonk/>","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":737,"byte_end":830,"line_start":19,"line_end":19,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":831,"byte_end":834,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ If you want to see library usage examples, please check:","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":835,"byte_end":895,"line_start":21,"line_end":21,"column_start":1,"column_end":61}},{"value":"/ <https://github.com/dusk-network/plonk/tree/v0.1.0/examples>","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":896,"byte_end":960,"line_start":22,"line_end":22,"column_start":1,"column_end":65}},{"value":"allow(clippy :: suspicious_arithmetic_impl)","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":1018,"byte_end":1063,"line_start":24,"line_end":24,"column_start":1,"column_end":46}},{"value":"allow(clippy :: suspicious_op_assign_impl)","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":1121,"byte_end":1165,"line_start":26,"line_end":26,"column_start":1,"column_end":45}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":1227,"byte_end":1268,"line_start":28,"line_end":28,"column_start":1,"column_end":42}},{"value":"allow(clippy :: match_bool)","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":1332,"byte_end":1361,"line_start":30,"line_end":30,"column_start":1,"column_end":30}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":1498,"byte_end":1535,"line_start":33,"line_end":33,"column_start":1,"column_end":38}},{"value":"deny(rustdoc :: broken_intra_doc_links)","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":1536,"byte_end":1577,"line_start":34,"line_end":34,"column_start":1,"column_end":42}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":1578,"byte_end":1600,"line_start":35,"line_end":35,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":3},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"circuit","qualname":"::circuit","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","parent":null,"children":[{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":1691},{"krate":0,"index":1696},{"krate":0,"index":1705},{"krate":0,"index":1716},{"krate":0,"index":1720},{"krate":0,"index":1724},{"krate":0,"index":75},{"krate":0,"index":79},{"krate":0,"index":83},{"krate":0,"index":1728},{"krate":0,"index":1733},{"krate":0,"index":1742},{"krate":0,"index":1753},{"krate":0,"index":1757},{"krate":0,"index":1761},{"krate":0,"index":1764},{"krate":0,"index":1768},{"krate":0,"index":1771},{"krate":0,"index":87},{"krate":0,"index":93},{"krate":0,"index":102},{"krate":0,"index":105}],"decl_id":null,"docs":" Tools & traits for PLONK circuits\n","sig":null,"attributes":[{"value":"/ Tools & traits for PLONK circuits","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":2424,"byte_end":2461,"line_start":7,"line_end":7,"column_start":1,"column_end":38}}]},{"kind":"Trait","id":{"krate":0,"index":69},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":3775,"byte_end":3789,"line_start":36,"line_end":36,"column_start":11,"column_end":25},"name":"FeIntoPubInput","qualname":"::circuit::FeIntoPubInput","value":"FeIntoPubInput<T>","parent":null,"children":[{"krate":0,"index":71}],"decl_id":null,"docs":" The reason for introducing these two traits, `FeIntoPubInput` and\n `GeIntoPubInput` is to have a workaround for not being able to\n implement `From<_> for Values` for both `PrimeField` and `GroupAffine`. The\n reason why this is not possible is because both the trait `PrimeField` and\n the struct `GroupAffine` are external to the crate, and therefore the\n compiler cannot be sure that `PrimeField` will never be implemented for\n `GroupAffine`. In which case, the two implementations of `From` would be\n inconsistent. To this end, we create to helper traits, `FeIntoPubInput` and\n `GeIntoPubInput`, that stand for \"Field Element Into Public Input\" and\n \"Group Element Into Public Input\" respectively.\n","sig":null,"attributes":[{"value":"/ The reason for introducing these two traits, `FeIntoPubInput` and","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":3035,"byte_end":3104,"line_start":26,"line_end":26,"column_start":1,"column_end":70}},{"value":"/ `GeIntoPubInput` is to have a workaround for not being able to","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":3105,"byte_end":3171,"line_start":27,"line_end":27,"column_start":1,"column_end":67}},{"value":"/ implement `From<_> for Values` for both `PrimeField` and `GroupAffine`. The","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":3172,"byte_end":3251,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ reason why this is not possible is because both the trait `PrimeField` and","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":3252,"byte_end":3330,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"/ the struct `GroupAffine` are external to the crate, and therefore the","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":3331,"byte_end":3404,"line_start":30,"line_end":30,"column_start":1,"column_end":74}},{"value":"/ compiler cannot be sure that `PrimeField` will never be implemented for","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":3405,"byte_end":3480,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"/ `GroupAffine`. In which case, the two implementations of `From` would be","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":3481,"byte_end":3557,"line_start":32,"line_end":32,"column_start":1,"column_end":77}},{"value":"/ inconsistent. To this end, we create to helper traits, `FeIntoPubInput` and","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":3558,"byte_end":3637,"line_start":33,"line_end":33,"column_start":1,"column_end":80}},{"value":"/ `GeIntoPubInput`, that stand for \"Field Element Into Public Input\" and","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":3638,"byte_end":3712,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"/ \"Group Element Into Public Input\" respectively.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":3713,"byte_end":3764,"line_start":35,"line_end":35,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":3955,"byte_end":3962,"line_start":39,"line_end":39,"column_start":8,"column_end":15},"name":"into_pi","qualname":"::circuit::FeIntoPubInput::into_pi","value":"pub fn into_pi(Self) -> T","parent":{"krate":0,"index":69},"children":[],"decl_id":null,"docs":" Ad-hot `Into` implementation. Serves the same purpose as `Into`, but as\n a different trait. Read documentation of Trait for more details.\n","sig":null,"attributes":[{"value":"/ Ad-hot `Into` implementation. Serves the same purpose as `Into`, but as","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":3799,"byte_end":3874,"line_start":37,"line_end":37,"column_start":5,"column_end":80}},{"value":"/ a different trait. Read documentation of Trait for more details.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":3879,"byte_end":3947,"line_start":38,"line_end":38,"column_start":5,"column_end":73}}]},{"kind":"Trait","id":{"krate":0,"index":72},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":4675,"byte_end":4689,"line_start":51,"line_end":51,"column_start":11,"column_end":25},"name":"GeIntoPubInput","qualname":"::circuit::GeIntoPubInput","value":"GeIntoPubInput<T>","parent":null,"children":[{"krate":0,"index":74}],"decl_id":null,"docs":" The reason for introducing these two traits is to have a workaround for not\n being able to implement `From<_> for Values` for both `PrimeField` and\n `GroupAffine`. The reason why this is not possible is because both the trait\n `PrimeField` and the struct `GroupAffine` are external to the crate, and\n therefore the compiler cannot be sure that `PrimeField` will never be\n implemented for `GroupAffine`. In which case, the two implementations of\n `From` would be inconsistent. To this end, we create to helper traits,\n `FeIntoPubInput` and `GeIntoPubInput`, that stand for \"Field Element Into\n Public Input\" and \"Group Element Into Public Input\" respectively.\n","sig":null,"attributes":[{"value":"/ The reason for introducing these two traits is to have a workaround for not","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":3978,"byte_end":4057,"line_start":42,"line_end":42,"column_start":1,"column_end":80}},{"value":"/ being able to implement `From<_> for Values` for both `PrimeField` and","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":4058,"byte_end":4132,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ `GroupAffine`. The reason why this is not possible is because both the trait","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":4133,"byte_end":4213,"line_start":44,"line_end":44,"column_start":1,"column_end":81}},{"value":"/ `PrimeField` and the struct `GroupAffine` are external to the crate, and","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":4214,"byte_end":4290,"line_start":45,"line_end":45,"column_start":1,"column_end":77}},{"value":"/ therefore the compiler cannot be sure that `PrimeField` will never be","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":4291,"byte_end":4364,"line_start":46,"line_end":46,"column_start":1,"column_end":74}},{"value":"/ implemented for `GroupAffine`. In which case, the two implementations of","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":4365,"byte_end":4441,"line_start":47,"line_end":47,"column_start":1,"column_end":77}},{"value":"/ `From` would be inconsistent. To this end, we create to helper traits,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":4442,"byte_end":4516,"line_start":48,"line_end":48,"column_start":1,"column_end":75}},{"value":"/ `FeIntoPubInput` and `GeIntoPubInput`, that stand for \"Field Element Into","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":4517,"byte_end":4594,"line_start":49,"line_end":49,"column_start":1,"column_end":78}},{"value":"/ Public Input\" and \"Group Element Into Public Input\" respectively.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":4595,"byte_end":4664,"line_start":50,"line_end":50,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":4855,"byte_end":4862,"line_start":54,"line_end":54,"column_start":8,"column_end":15},"name":"into_pi","qualname":"::circuit::GeIntoPubInput::into_pi","value":"pub fn into_pi(Self) -> T","parent":{"krate":0,"index":72},"children":[],"decl_id":null,"docs":" Ad-hot `Into` implementation. Serves the same purpose as `Into`, but as\n a different trait. Read documentation of Trait for more details.\n","sig":null,"attributes":[{"value":"/ Ad-hot `Into` implementation. Serves the same purpose as `Into`, but as","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":4699,"byte_end":4774,"line_start":52,"line_end":52,"column_start":5,"column_end":80}},{"value":"/ a different trait. Read documentation of Trait for more details.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":4779,"byte_end":4847,"line_start":53,"line_end":53,"column_start":5,"column_end":73}}]},{"kind":"Struct","id":{"krate":0,"index":1691},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":5069,"byte_end":5085,"line_start":60,"line_end":60,"column_start":12,"column_end":28},"name":"PublicInputValue","qualname":"::circuit::PublicInputValue","value":"PublicInputValue {  }","parent":null,"children":[{"krate":0,"index":1694},{"krate":0,"index":1695}],"decl_id":null,"docs":" Structure that represents a PLONK Circuit Public Input converted into its\n scalar representation.\n","sig":null,"attributes":[{"value":"/ Structure that represents a PLONK Circuit Public Input converted into its","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":4878,"byte_end":4955,"line_start":57,"line_end":57,"column_start":1,"column_end":78}},{"value":"/ scalar representation.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":4956,"byte_end":4982,"line_start":58,"line_end":58,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":1728},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":6499,"byte_end":6511,"line_start":107,"line_end":107,"column_start":12,"column_end":24},"name":"VerifierData","qualname":"::circuit::VerifierData","value":"VerifierData {  }","parent":null,"children":[{"krate":0,"index":1731},{"krate":0,"index":1732}],"decl_id":null,"docs":" Collection of structs/objects that the Verifier will use in order to\n de/serialize data needed for Circuit proof verification.\n This structure can be seen as a link between the [`Circuit`] public input\n positions and the [`VerifierKey`] that the Verifier needs to use.\n","sig":null,"attributes":[{"value":"/ Collection of structs/objects that the Verifier will use in order to","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":6118,"byte_end":6190,"line_start":100,"line_end":100,"column_start":1,"column_end":73}},{"value":"/ de/serialize data needed for Circuit proof verification.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":6191,"byte_end":6251,"line_start":101,"line_end":101,"column_start":1,"column_end":61}},{"value":"/ This structure can be seen as a link between the [`Circuit`] public input","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":6252,"byte_end":6329,"line_start":102,"line_end":102,"column_start":1,"column_end":78}},{"value":"/ positions and the [`VerifierKey`] that the Verifier needs to use.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":6330,"byte_end":6399,"line_start":103,"line_end":103,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":6873,"byte_end":6876,"line_start":120,"line_end":120,"column_start":12,"column_end":15},"name":"new","qualname":"<VerifierData<E, P>>::new","value":"pub fn new(VerifierKey<E, P>, Vec<usize>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `VerifierData` from a [`VerifierKey`] and the public\n input positions of the circuit that it represents.\n","sig":null,"attributes":[{"value":"/ Creates a new `VerifierData` from a [`VerifierKey`] and the public","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":6732,"byte_end":6802,"line_start":118,"line_end":118,"column_start":5,"column_end":75}},{"value":"/ input positions of the circuit that it represents.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":6807,"byte_end":6861,"line_start":119,"line_end":119,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":7040,"byte_end":7043,"line_start":125,"line_end":125,"column_start":12,"column_end":15},"name":"key","qualname":"<VerifierData<E, P>>::key","value":"pub fn key(Self) -> VerifierKey<E, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the contained [`VerifierKey`].\n","sig":null,"attributes":[{"value":"/ Returns a reference to the contained [`VerifierKey`].","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":6971,"byte_end":7028,"line_start":124,"line_end":124,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":7177,"byte_end":7183,"line_start":130,"line_end":130,"column_start":12,"column_end":18},"name":"pi_pos","qualname":"<VerifierData<E, P>>::pi_pos","value":"pub fn pi_pos(&Self) -> &Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the contained Public Input positions.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the contained Public Input positions.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":7101,"byte_end":7165,"line_start":129,"line_end":129,"column_start":5,"column_end":69}}]},{"kind":"Trait","id":{"krate":0,"index":93},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":12233,"byte_end":12240,"line_start":290,"line_end":290,"column_start":11,"column_end":18},"name":"Circuit","qualname":"::circuit::Circuit","value":"Circuit<E, P>","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101}],"decl_id":null,"docs":" Trait that should be implemented for any circuit function to provide to it\n the capabilities of automatically being able to generate, and verify proofs\n as well as compile the circuit.","sig":null,"attributes":[{"value":"/ Trait that should be implemented for any circuit function to provide to it","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":7238,"byte_end":7316,"line_start":135,"line_end":135,"column_start":1,"column_end":79}},{"value":"/ the capabilities of automatically being able to generate, and verify proofs","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":7317,"byte_end":7396,"line_start":136,"line_end":136,"column_start":1,"column_end":80}},{"value":"/ as well as compile the circuit.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":7397,"byte_end":7432,"line_start":137,"line_end":137,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":7433,"byte_end":7436,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":7437,"byte_end":7450,"line_start":139,"line_end":139,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":7451,"byte_end":7454,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":7455,"byte_end":7462,"line_start":141,"line_end":141,"column_start":1,"column_end":8}},{"value":"/ use rand_core::OsRng;","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":7463,"byte_end":7488,"line_start":142,"line_end":142,"column_start":1,"column_end":26}},{"value":"/ use ark_ec::PairingEngine;","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":7489,"byte_end":7519,"line_start":143,"line_end":143,"column_start":1,"column_end":31}},{"value":"/ use ark_plonk::error::Error;","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":7520,"byte_end":7552,"line_start":144,"line_end":144,"column_start":1,"column_end":33}},{"value":"/ use ark_ed_on_bls12_381::{","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":7553,"byte_end":7583,"line_start":145,"line_end":145,"column_start":1,"column_end":31}},{"value":"/     EdwardsAffine as JubjubAffine, EdwardsParameters as JubjubParameters,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":7584,"byte_end":7661,"line_start":146,"line_end":146,"column_start":1,"column_end":78}},{"value":"/     EdwardsProjective as JubjubProjective, Fr as JubjubScalar,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":7662,"byte_end":7728,"line_start":147,"line_end":147,"column_start":1,"column_end":67}},{"value":"/ };","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":7729,"byte_end":7735,"line_start":148,"line_end":148,"column_start":1,"column_end":7}},{"value":"/ use ark_ec::{TEModelParameters, AffineCurve, ProjectiveCurve};","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":7736,"byte_end":7802,"line_start":149,"line_end":149,"column_start":1,"column_end":67}},{"value":"/ use ark_plonk::circuit::{Circuit, PublicInputValue, verify_proof, GeIntoPubInput, FeIntoPubInput};","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":7803,"byte_end":7905,"line_start":150,"line_end":150,"column_start":1,"column_end":103}},{"value":"/ use ark_plonk::constraint_system::StandardComposer;","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":7906,"byte_end":7961,"line_start":151,"line_end":151,"column_start":1,"column_end":56}},{"value":"/ use num_traits::{Zero, One};","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":7962,"byte_end":7994,"line_start":152,"line_end":152,"column_start":1,"column_end":33}},{"value":"/ use ark_ec::models::twisted_edwards_extended::GroupAffine;","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":7995,"byte_end":8057,"line_start":153,"line_end":153,"column_start":1,"column_end":63}},{"value":"/ use ark_poly_commit::kzg10::KZG10;","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8058,"byte_end":8096,"line_start":154,"line_end":154,"column_start":1,"column_end":39}},{"value":"/ use ark_bls12_381::{Bls12_381, Fr as BlsScalar};","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8097,"byte_end":8149,"line_start":155,"line_end":155,"column_start":1,"column_end":53}},{"value":"/ use ark_poly::polynomial::univariate::DensePolynomial;","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8150,"byte_end":8208,"line_start":156,"line_end":156,"column_start":1,"column_end":59}},{"value":"/ use ark_ff::{PrimeField, BigInteger};","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8209,"byte_end":8250,"line_start":157,"line_end":157,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8251,"byte_end":8254,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ fn main() -> Result<(), Error> {","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8255,"byte_end":8291,"line_start":159,"line_end":159,"column_start":1,"column_end":37}},{"value":"/ // Implements a circuit that checks:","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8292,"byte_end":8332,"line_start":160,"line_end":160,"column_start":1,"column_end":41}},{"value":"/ // 1) a + b = c where C is a PI","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8333,"byte_end":8368,"line_start":161,"line_end":161,"column_start":1,"column_end":36}},{"value":"/ // 2) a <= 2^6","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8369,"byte_end":8387,"line_start":162,"line_end":162,"column_start":1,"column_end":19}},{"value":"/ // 3) b <= 2^5","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8388,"byte_end":8406,"line_start":163,"line_end":163,"column_start":1,"column_end":19}},{"value":"/ // 4) a * b = d where D is a PI","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8407,"byte_end":8442,"line_start":164,"line_end":164,"column_start":1,"column_end":36}},{"value":"/ // 5) JubJub::GENERATOR * e(JubJubScalar) = f where F is a PI","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8443,"byte_end":8508,"line_start":165,"line_end":165,"column_start":1,"column_end":66}},{"value":"/ #[derive(Debug)]","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8509,"byte_end":8529,"line_start":166,"line_end":166,"column_start":1,"column_end":21}},{"value":"/ pub struct TestCircuit<","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8530,"byte_end":8557,"line_start":167,"line_end":167,"column_start":1,"column_end":28}},{"value":"/     E: PairingEngine,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8558,"byte_end":8583,"line_start":168,"line_end":168,"column_start":1,"column_end":26}},{"value":"/     P: TEModelParameters<BaseField = E::Fr>","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8584,"byte_end":8631,"line_start":169,"line_end":169,"column_start":1,"column_end":48}},{"value":"/ > {","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8632,"byte_end":8639,"line_start":170,"line_end":170,"column_start":1,"column_end":8}},{"value":"/     a: E::Fr,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8640,"byte_end":8657,"line_start":171,"line_end":171,"column_start":1,"column_end":18}},{"value":"/     b: E::Fr,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8658,"byte_end":8675,"line_start":172,"line_end":172,"column_start":1,"column_end":18}},{"value":"/     c: E::Fr,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8676,"byte_end":8693,"line_start":173,"line_end":173,"column_start":1,"column_end":18}},{"value":"/     d: E::Fr,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8694,"byte_end":8711,"line_start":174,"line_end":174,"column_start":1,"column_end":18}},{"value":"/     e: P::ScalarField,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8712,"byte_end":8738,"line_start":175,"line_end":175,"column_start":1,"column_end":27}},{"value":"/     f: GroupAffine<P>,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8739,"byte_end":8765,"line_start":176,"line_end":176,"column_start":1,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8766,"byte_end":8771,"line_start":177,"line_end":177,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8772,"byte_end":8775,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ impl<","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8776,"byte_end":8785,"line_start":179,"line_end":179,"column_start":1,"column_end":10}},{"value":"/     E: PairingEngine,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8786,"byte_end":8811,"line_start":180,"line_end":180,"column_start":1,"column_end":26}},{"value":"/     P: TEModelParameters<BaseField = E::Fr>","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8812,"byte_end":8859,"line_start":181,"line_end":181,"column_start":1,"column_end":48}},{"value":"/ > Default for TestCircuit<E, P> {","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8860,"byte_end":8897,"line_start":182,"line_end":182,"column_start":1,"column_end":38}},{"value":"/     fn default() -> Self {","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8898,"byte_end":8928,"line_start":183,"line_end":183,"column_start":1,"column_end":31}},{"value":"/         Self {","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8929,"byte_end":8947,"line_start":184,"line_end":184,"column_start":1,"column_end":19}},{"value":"/             a: E::Fr::zero(),","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8948,"byte_end":8981,"line_start":185,"line_end":185,"column_start":1,"column_end":34}},{"value":"/             b: E::Fr::zero(),","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":8982,"byte_end":9015,"line_start":186,"line_end":186,"column_start":1,"column_end":34}},{"value":"/             c: E::Fr::zero(),","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9016,"byte_end":9049,"line_start":187,"line_end":187,"column_start":1,"column_end":34}},{"value":"/             d: E::Fr::zero(),","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9050,"byte_end":9083,"line_start":188,"line_end":188,"column_start":1,"column_end":34}},{"value":"/             e: P::ScalarField::zero(),","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9084,"byte_end":9126,"line_start":189,"line_end":189,"column_start":1,"column_end":43}},{"value":"/             f: GroupAffine::<P>::zero(),","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9127,"byte_end":9171,"line_start":190,"line_end":190,"column_start":1,"column_end":45}},{"value":"/         }","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9172,"byte_end":9185,"line_start":191,"line_end":191,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9186,"byte_end":9195,"line_start":192,"line_end":192,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9196,"byte_end":9201,"line_start":193,"line_end":193,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9202,"byte_end":9205,"line_start":194,"line_end":194,"column_start":1,"column_end":4}},{"value":"/ impl<","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9206,"byte_end":9215,"line_start":195,"line_end":195,"column_start":1,"column_end":10}},{"value":"/     E: PairingEngine,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9216,"byte_end":9241,"line_start":196,"line_end":196,"column_start":1,"column_end":26}},{"value":"/     P: TEModelParameters<BaseField = E::Fr>,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9242,"byte_end":9290,"line_start":197,"line_end":197,"column_start":1,"column_end":49}},{"value":"/ > Circuit<E, P> for TestCircuit<E, P>","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9291,"byte_end":9332,"line_start":198,"line_end":198,"column_start":1,"column_end":42}},{"value":"/ {","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9333,"byte_end":9338,"line_start":199,"line_end":199,"column_start":1,"column_end":6}},{"value":"/     const CIRCUIT_ID: [u8; 32] = [0xff; 32];","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9339,"byte_end":9387,"line_start":200,"line_end":200,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9388,"byte_end":9391,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/     fn gadget(","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9392,"byte_end":9410,"line_start":202,"line_end":202,"column_start":1,"column_end":19}},{"value":"/         &mut self,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9411,"byte_end":9433,"line_start":203,"line_end":203,"column_start":1,"column_end":23}},{"value":"/         composer: &mut StandardComposer<E, P>,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9434,"byte_end":9484,"line_start":204,"line_end":204,"column_start":1,"column_end":51}},{"value":"/     ) -> Result<(), Error> {","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9485,"byte_end":9517,"line_start":205,"line_end":205,"column_start":1,"column_end":33}},{"value":"/         // Add fixed witness zero","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9518,"byte_end":9555,"line_start":206,"line_end":206,"column_start":1,"column_end":38}},{"value":"/         let a = composer.add_input(self.a);","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9556,"byte_end":9603,"line_start":207,"line_end":207,"column_start":1,"column_end":48}},{"value":"/         let b = composer.add_input(self.b);","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9604,"byte_end":9651,"line_start":208,"line_end":208,"column_start":1,"column_end":48}},{"value":"/         // Make first constraint a + b = c","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9652,"byte_end":9698,"line_start":209,"line_end":209,"column_start":1,"column_end":47}},{"value":"/         let add_result = composer.add(","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9699,"byte_end":9741,"line_start":210,"line_end":210,"column_start":1,"column_end":43}},{"value":"/           (E::Fr::one(), a),","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9742,"byte_end":9774,"line_start":211,"line_end":211,"column_start":1,"column_end":33}},{"value":"/           (E::Fr::one(), b),","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9775,"byte_end":9807,"line_start":212,"line_end":212,"column_start":1,"column_end":33}},{"value":"/           E::Fr::zero(),","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9808,"byte_end":9836,"line_start":213,"line_end":213,"column_start":1,"column_end":29}},{"value":"/           Some(-self.c),","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9837,"byte_end":9865,"line_start":214,"line_end":214,"column_start":1,"column_end":29}},{"value":"/         );","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9866,"byte_end":9880,"line_start":215,"line_end":215,"column_start":1,"column_end":15}},{"value":"/         composer.assert_equal(add_result, composer.zero_var());","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9881,"byte_end":9948,"line_start":216,"line_end":216,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9949,"byte_end":9952,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/         // Check that a and b are in range","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":9953,"byte_end":9999,"line_start":218,"line_end":218,"column_start":1,"column_end":47}},{"value":"/         composer.range_gate(a, 1 << 6);","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10000,"byte_end":10043,"line_start":219,"line_end":219,"column_start":1,"column_end":44}},{"value":"/         composer.range_gate(b, 1 << 5);","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10044,"byte_end":10087,"line_start":220,"line_end":220,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10088,"byte_end":10091,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/         // Make second constraint a * b = d","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10092,"byte_end":10139,"line_start":222,"line_end":222,"column_start":1,"column_end":48}},{"value":"/         let mul_result = composer.mul(E::Fr::one(), a, b, E::Fr::zero(), Some(-self.d));","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10140,"byte_end":10232,"line_start":223,"line_end":223,"column_start":1,"column_end":93}},{"value":"/         composer.assert_equal(mul_result, composer.zero_var());","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10233,"byte_end":10300,"line_start":224,"line_end":224,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10301,"byte_end":10304,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/         let e_repr = self.e.into_repr().to_bytes_le();","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10305,"byte_end":10363,"line_start":226,"line_end":226,"column_start":1,"column_end":59}},{"value":"/         let e = composer.add_input(E::Fr::from_le_bytes_mod_order(&e_repr));","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10364,"byte_end":10444,"line_start":227,"line_end":227,"column_start":1,"column_end":81}},{"value":"/         let (x, y) = P::AFFINE_GENERATOR_COEFFS;","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10445,"byte_end":10497,"line_start":228,"line_end":228,"column_start":1,"column_end":53}},{"value":"/         let generator = GroupAffine::new(x, y);","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10498,"byte_end":10549,"line_start":229,"line_end":229,"column_start":1,"column_end":52}},{"value":"/         let scalar_mul_result =","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10550,"byte_end":10585,"line_start":230,"line_end":230,"column_start":1,"column_end":36}},{"value":"/             composer.fixed_base_scalar_mul(e, generator);","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10586,"byte_end":10647,"line_start":231,"line_end":231,"column_start":1,"column_end":62}},{"value":"/         // Apply the constraint","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10648,"byte_end":10683,"line_start":232,"line_end":232,"column_start":1,"column_end":36}},{"value":"/         composer","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10684,"byte_end":10704,"line_start":233,"line_end":233,"column_start":1,"column_end":21}},{"value":"/             .assert_equal_public_point(scalar_mul_result, self.f.clone());","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10705,"byte_end":10783,"line_start":234,"line_end":234,"column_start":1,"column_end":79}},{"value":"/         Ok(())","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10784,"byte_end":10802,"line_start":235,"line_end":235,"column_start":1,"column_end":19}},{"value":"/     }","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10803,"byte_end":10812,"line_start":236,"line_end":236,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10813,"byte_end":10816,"line_start":237,"line_end":237,"column_start":1,"column_end":4}},{"value":"/     fn padded_circuit_size(&self) -> usize {","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10817,"byte_end":10865,"line_start":238,"line_end":238,"column_start":1,"column_end":49}},{"value":"/         1 << 11","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10866,"byte_end":10885,"line_start":239,"line_end":239,"column_start":1,"column_end":20}},{"value":"/     }","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10886,"byte_end":10895,"line_start":240,"line_end":240,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10896,"byte_end":10901,"line_start":241,"line_end":241,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10902,"byte_end":10905,"line_start":242,"line_end":242,"column_start":1,"column_end":4}},{"value":"/ let pp = KZG10::<Bls12_381,DensePolynomial<BlsScalar>,>::setup(","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10906,"byte_end":10973,"line_start":243,"line_end":243,"column_start":1,"column_end":68}},{"value":"/     1 << 12, false, &mut OsRng","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":10974,"byte_end":11008,"line_start":244,"line_end":244,"column_start":1,"column_end":35}},{"value":"/  )?;","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11009,"byte_end":11017,"line_start":245,"line_end":245,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11018,"byte_end":11021,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ // Initialize the circuit","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11022,"byte_end":11051,"line_start":247,"line_end":247,"column_start":1,"column_end":30}},{"value":"/ let mut circuit = TestCircuit::<Bls12_381, JubjubParameters>::default();","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11052,"byte_end":11128,"line_start":248,"line_end":248,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11129,"byte_end":11132,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ // Compile the circuit","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11133,"byte_end":11159,"line_start":250,"line_end":250,"column_start":1,"column_end":27}},{"value":"/ let (pk, vd) = circuit.compile(&pp)?;","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11160,"byte_end":11201,"line_start":251,"line_end":251,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11202,"byte_end":11205,"line_start":252,"line_end":252,"column_start":1,"column_end":4}},{"value":"/ // Prover POV","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11206,"byte_end":11223,"line_start":253,"line_end":253,"column_start":1,"column_end":18}},{"value":"/ let (x, y) = JubjubParameters::AFFINE_GENERATOR_COEFFS;","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11224,"byte_end":11283,"line_start":254,"line_end":254,"column_start":1,"column_end":60}},{"value":"/ let generator = JubjubAffine::new(x, y);","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11284,"byte_end":11328,"line_start":255,"line_end":255,"column_start":1,"column_end":45}},{"value":"/ let point_f_pi: JubjubAffine = AffineCurve::mul(","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11329,"byte_end":11381,"line_start":256,"line_end":256,"column_start":1,"column_end":53}},{"value":"/   &generator,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11382,"byte_end":11399,"line_start":257,"line_end":257,"column_start":1,"column_end":18}},{"value":"/   JubjubScalar::from(2u64).into_repr(),","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11400,"byte_end":11443,"line_start":258,"line_end":258,"column_start":1,"column_end":44}},{"value":"/ ).into_affine();","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11444,"byte_end":11464,"line_start":259,"line_end":259,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11465,"byte_end":11468,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"/ let proof = {","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11469,"byte_end":11486,"line_start":261,"line_end":261,"column_start":1,"column_end":18}},{"value":"/     let mut circuit = TestCircuit {","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11487,"byte_end":11526,"line_start":262,"line_end":262,"column_start":1,"column_end":40}},{"value":"/         a: BlsScalar::from(20u64),","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11527,"byte_end":11565,"line_start":263,"line_end":263,"column_start":1,"column_end":39}},{"value":"/         b: BlsScalar::from(5u64),","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11566,"byte_end":11603,"line_start":264,"line_end":264,"column_start":1,"column_end":38}},{"value":"/         c: BlsScalar::from(25u64),","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11604,"byte_end":11642,"line_start":265,"line_end":265,"column_start":1,"column_end":39}},{"value":"/         d: BlsScalar::from(100u64),","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11643,"byte_end":11682,"line_start":266,"line_end":266,"column_start":1,"column_end":40}},{"value":"/         e: JubjubScalar::from(2u64),","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11683,"byte_end":11723,"line_start":267,"line_end":267,"column_start":1,"column_end":41}},{"value":"/         f: point_f_pi,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11724,"byte_end":11750,"line_start":268,"line_end":268,"column_start":1,"column_end":27}},{"value":"/     };","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11751,"byte_end":11761,"line_start":269,"line_end":269,"column_start":1,"column_end":11}},{"value":"/     circuit.gen_proof(&pp, pk, b\"Test\")","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11762,"byte_end":11805,"line_start":270,"line_end":270,"column_start":1,"column_end":44}},{"value":"/ }?;","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11806,"byte_end":11813,"line_start":271,"line_end":271,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11814,"byte_end":11817,"line_start":272,"line_end":272,"column_start":1,"column_end":4}},{"value":"/ // Verifier POV","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11818,"byte_end":11837,"line_start":273,"line_end":273,"column_start":1,"column_end":20}},{"value":"/ let public_inputs: Vec<PublicInputValue<BlsScalar, JubjubParameters>> = vec![","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11838,"byte_end":11919,"line_start":274,"line_end":274,"column_start":1,"column_end":82}},{"value":"/     BlsScalar::from(25u64).into_pi(),","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11920,"byte_end":11961,"line_start":275,"line_end":275,"column_start":1,"column_end":42}},{"value":"/     BlsScalar::from(100u64).into_pi(),","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":11962,"byte_end":12004,"line_start":276,"line_end":276,"column_start":1,"column_end":43}},{"value":"/     point_f_pi.into_pi(),","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":12005,"byte_end":12034,"line_start":277,"line_end":277,"column_start":1,"column_end":30}},{"value":"/ ];","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":12035,"byte_end":12041,"line_start":278,"line_end":278,"column_start":1,"column_end":7}},{"value":"/ let pi_pos = vd.pi_pos().clone();","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":12042,"byte_end":12079,"line_start":279,"line_end":279,"column_start":1,"column_end":38}},{"value":"/ verify_proof(","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":12080,"byte_end":12097,"line_start":280,"line_end":280,"column_start":1,"column_end":18}},{"value":"/     &pp,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":12098,"byte_end":12110,"line_start":281,"line_end":281,"column_start":1,"column_end":13}},{"value":"/     vd.key(),","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":12111,"byte_end":12128,"line_start":282,"line_end":282,"column_start":1,"column_end":18}},{"value":"/     &proof,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":12129,"byte_end":12144,"line_start":283,"line_end":283,"column_start":1,"column_end":16}},{"value":"/     &public_inputs,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":12145,"byte_end":12168,"line_start":284,"line_end":284,"column_start":1,"column_end":24}},{"value":"/     &pi_pos,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":12169,"byte_end":12185,"line_start":285,"line_end":285,"column_start":1,"column_end":17}},{"value":"/     b\"Test\",","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":12186,"byte_end":12202,"line_start":286,"line_end":286,"column_start":1,"column_end":17}},{"value":"/ )","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":12203,"byte_end":12208,"line_start":287,"line_end":287,"column_start":1,"column_end":6}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":12209,"byte_end":12214,"line_start":288,"line_end":288,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":12215,"byte_end":12222,"line_start":289,"line_end":289,"column_start":1,"column_end":8}}]},{"kind":"Const","id":{"krate":0,"index":96},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":12397,"byte_end":12407,"line_start":297,"line_end":297,"column_start":11,"column_end":21},"name":"CIRCUIT_ID","qualname":"::circuit::Circuit::CIRCUIT_ID","value":"[u8; ]","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Circuit identifier associated constant.\n","sig":null,"attributes":[{"value":"/ Circuit identifier associated constant.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":12343,"byte_end":12386,"line_start":296,"line_end":296,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":12484,"byte_end":12490,"line_start":300,"line_end":300,"column_start":8,"column_end":14},"name":"gadget","qualname":"::circuit::Circuit::gadget","value":"pub fn gadget(&mut Self, &mut StandardComposer<E, P>) -> Result<(), Error>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Gadget implementation used to fill the composer.\n","sig":null,"attributes":[{"value":"/ Gadget implementation used to fill the composer.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":12424,"byte_end":12476,"line_start":299,"line_end":299,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":12805,"byte_end":12812,"line_start":308,"line_end":308,"column_start":8,"column_end":15},"name":"compile","qualname":"::circuit::Circuit::compile","value":"pub fn compile(&mut Self, &UniversalParams<E>)\n-> Result<(ProverKey<E::Fr, P>, VerifierData<E, P>), Error>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Compiles the circuit by using a function that returns a `Result`\n with the `ProverKey`, `VerifierKey` and the circuit size.\n","sig":null,"attributes":[{"value":"/ Compiles the circuit by using a function that returns a `Result`","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":12591,"byte_end":12659,"line_start":305,"line_end":305,"column_start":5,"column_end":73}},{"value":"/ with the `ProverKey`, `VerifierKey` and the circuit size.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":12664,"byte_end":12725,"line_start":306,"line_end":306,"column_start":5,"column_end":66}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":12730,"byte_end":12763,"line_start":307,"line_end":307,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":14449,"byte_end":14458,"line_start":353,"line_end":353,"column_start":8,"column_end":17},"name":"gen_proof","qualname":"::circuit::Circuit::gen_proof","value":"pub fn gen_proof(&mut Self, &UniversalParams<E>, ProverKey<E::Fr, P>,\n                 &'static [u8]) -> Result<Proof<E, P>, Error>","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Generates a proof using the provided `CircuitInputs` & `ProverKey`\n instances.\n","sig":null,"attributes":[{"value":"/ Generates a proof using the provided `CircuitInputs` & `ProverKey`","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":14352,"byte_end":14422,"line_start":351,"line_end":351,"column_start":5,"column_end":75}},{"value":"/ instances.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":14427,"byte_end":14441,"line_start":352,"line_end":352,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":15535,"byte_end":15554,"line_start":384,"line_end":384,"column_start":8,"column_end":27},"name":"padded_circuit_size","qualname":"::circuit::Circuit::padded_circuit_size","value":"pub fn padded_circuit_size(&Self) -> usize","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Returns the Circuit size padded to the next power of two.\n","sig":null,"attributes":[{"value":"/ Returns the Circuit size padded to the next power of two.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":15466,"byte_end":15527,"line_start":383,"line_end":383,"column_start":5,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":102},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":15669,"byte_end":15681,"line_start":389,"line_end":389,"column_start":8,"column_end":20},"name":"verify_proof","qualname":"::circuit::verify_proof","value":"pub fn verify_proof<E: PairingEngine, P: TEModelParameters<BaseField =\n                    E::Fr>>(&UniversalParams<E>, VerifierKey<E, P>,\n                            &Proof<E, P>, &[PublicInputValue<E::Fr, P>],\n                            &[usize], &'static [u8]) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Verifies a proof using the provided `CircuitInputs` & `VerifierKey`\n instances.\n","sig":null,"attributes":[{"value":"/ Verifies a proof using the provided `CircuitInputs` & `VerifierKey`","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":15575,"byte_end":15646,"line_start":387,"line_end":387,"column_start":1,"column_end":72}},{"value":"/ instances.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":15647,"byte_end":15661,"line_start":388,"line_end":388,"column_start":1,"column_end":15}}]},{"kind":"Mod","id":{"krate":0,"index":110},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"constraint_system","qualname":"::constraint_system","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/mod.rs","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":199},{"krate":0,"index":224},{"krate":0,"index":431},{"krate":0,"index":487},{"krate":0,"index":527},{"krate":0,"index":564},{"krate":0,"index":567},{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":573}],"decl_id":null,"docs":" The constraint System module stores the implementation\n of the PLONK Standard Composer, as well as the circuit\n tools and abstractions, used by the Composer to generate,\n build, preprocess circuits.\n","sig":null,"attributes":[{"value":"/ The constraint System module stores the implementation","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/mod.rs","byte_start":22882,"byte_end":22940,"line_start":7,"line_end":7,"column_start":1,"column_end":59}},{"value":"/ of the PLONK Standard Composer, as well as the circuit","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/mod.rs","byte_start":22941,"byte_end":22999,"line_start":8,"line_end":8,"column_start":1,"column_end":59}},{"value":"/ tools and abstractions, used by the Composer to generate,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/mod.rs","byte_start":23000,"byte_end":23061,"line_start":9,"line_end":9,"column_start":1,"column_end":62}},{"value":"/ build, preprocess circuits.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/mod.rs","byte_start":23062,"byte_end":23093,"line_start":10,"line_end":10,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":1776},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":26203,"byte_end":26219,"line_start":58,"line_end":58,"column_start":12,"column_end":28},"name":"StandardComposer","qualname":"::constraint_system::composer::StandardComposer","value":"StandardComposer {  }","parent":null,"children":[{"krate":0,"index":1779},{"krate":0,"index":1780},{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":1783},{"krate":0,"index":1784},{"krate":0,"index":1785},{"krate":0,"index":1786},{"krate":0,"index":1787},{"krate":0,"index":1788},{"krate":0,"index":1789},{"krate":0,"index":1790},{"krate":0,"index":1791},{"krate":0,"index":1792},{"krate":0,"index":1793},{"krate":0,"index":1794},{"krate":0,"index":1795},{"krate":0,"index":1796},{"krate":0,"index":1797},{"krate":0,"index":1798},{"krate":0,"index":1799}],"decl_id":null,"docs":" The StandardComposer is the circuit-builder tool that the `dusk-plonk`\n repository provides so that circuit descriptions can be written, stored and\n transformed into a [`Proof`](crate::proof_system::Proof) at some point.","sig":null,"attributes":[{"value":"/ The StandardComposer is the circuit-builder tool that the `dusk-plonk`","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":24718,"byte_end":24792,"line_start":32,"line_end":32,"column_start":1,"column_end":75}},{"value":"/ repository provides so that circuit descriptions can be written, stored and","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":24793,"byte_end":24872,"line_start":33,"line_end":33,"column_start":1,"column_end":80}},{"value":"/ transformed into a [`Proof`](crate::proof_system::Proof) at some point.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":24873,"byte_end":24948,"line_start":34,"line_end":34,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":24949,"byte_end":24952,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ A StandardComposer stores all of the circuit information, being this one","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":24953,"byte_end":25029,"line_start":36,"line_end":36,"column_start":1,"column_end":77}},{"value":"/ all of the witness and circuit descriptors info (values, positions in the","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":25030,"byte_end":25107,"line_start":37,"line_end":37,"column_start":1,"column_end":78}},{"value":"/ circuits, gates and Wires that occupy..), the public inputs, the connection","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":25108,"byte_end":25187,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ relationships between the witnesses and how they're repesented as Wires (so","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":25188,"byte_end":25267,"line_start":39,"line_end":39,"column_start":1,"column_end":80}},{"value":"/ basically the Permutation argument etc..).","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":25268,"byte_end":25314,"line_start":40,"line_end":40,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":25315,"byte_end":25318,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ The StandardComposer also grants us a way to introduce our secret","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":25319,"byte_end":25388,"line_start":42,"line_end":42,"column_start":1,"column_end":70}},{"value":"/ witnesses in a for of a [`Variable`] into the circuit description as well as","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":25389,"byte_end":25469,"line_start":43,"line_end":43,"column_start":1,"column_end":81}},{"value":"/ the public inputs. We can do this with methods like","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":25470,"byte_end":25525,"line_start":44,"line_end":44,"column_start":1,"column_end":56}},{"value":"/ [`StandardComposer::add_input`].","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":25526,"byte_end":25562,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":25563,"byte_end":25566,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ The StandardComposer also contains as associated functions all the","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":25567,"byte_end":25637,"line_start":47,"line_end":47,"column_start":1,"column_end":71}},{"value":"/ neccessary tools to be able to istrument the circuits that the user needs","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":25638,"byte_end":25715,"line_start":48,"line_end":48,"column_start":1,"column_end":78}},{"value":"/ through the addition of gates. There are functions that may add a single","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":25716,"byte_end":25792,"line_start":49,"line_end":49,"column_start":1,"column_end":77}},{"value":"/ gate to the circuit as for example [`StandardComposer::add_gate`] and others","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":25793,"byte_end":25873,"line_start":50,"line_end":50,"column_start":1,"column_end":81}},{"value":"/ that can add several gates to the circuit description such as","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":25874,"byte_end":25939,"line_start":51,"line_end":51,"column_start":1,"column_end":66}},{"value":"/ [`StandardComposer::conditional_select`].","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":25940,"byte_end":25985,"line_start":52,"line_end":52,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":25986,"byte_end":25989,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ Each gate or group of gates adds an specific functionallity or operation to","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":25990,"byte_end":26069,"line_start":54,"line_end":54,"column_start":1,"column_end":80}},{"value":"/ the circuit description, and so, that's why we can understand","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":26070,"byte_end":26135,"line_start":55,"line_end":55,"column_start":1,"column_end":66}},{"value":"/ the StandardComposer as a builder.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":26136,"byte_end":26174,"line_start":56,"line_end":56,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":28287,"byte_end":28299,"line_start":123,"line_end":123,"column_start":12,"column_end":24},"name":"circuit_size","qualname":"<StandardComposer<E, P>>::circuit_size","value":"pub fn circuit_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of gates in the circuit\n","sig":null,"attributes":[{"value":"/ Returns the number of gates in the circuit","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":28229,"byte_end":28275,"line_start":122,"line_end":122,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":28481,"byte_end":28503,"line_start":129,"line_end":129,"column_start":12,"column_end":34},"name":"construct_dense_pi_vec","qualname":"<StandardComposer<E, P>>::construct_dense_pi_vec","value":"pub fn construct_dense_pi_vec(&Self) -> Vec<E::Fr>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a dense vector of the Public Inputs from the positions and\n the sparse vector that contains the values.\n","sig":null,"attributes":[{"value":"/ Constructs a dense vector of the Public Inputs from the positions and","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":28344,"byte_end":28417,"line_start":127,"line_end":127,"column_start":5,"column_end":78}},{"value":"/ the sparse vector that contains the values.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":28422,"byte_end":28469,"line_start":128,"line_end":128,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":28948,"byte_end":28960,"line_start":143,"line_end":143,"column_start":12,"column_end":24},"name":"pi_positions","qualname":"<StandardComposer<E, P>>::pi_positions","value":"pub fn pi_positions(&Self) -> Vec<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the positions that the Public Inputs occupy in this Composer\n instance.\n","sig":null,"attributes":[{"value":"/ Returns the positions that the Public Inputs occupy in this Composer","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":28749,"byte_end":28821,"line_start":139,"line_end":139,"column_start":5,"column_end":77}},{"value":"/ instance.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":28826,"byte_end":28839,"line_start":140,"line_end":140,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":29685,"byte_end":29688,"line_start":167,"line_end":167,"column_start":12,"column_end":15},"name":"new","qualname":"<StandardComposer<E, P>>::new","value":"pub fn new() -> StandardComposer<E, P>","parent":null,"children":[],"decl_id":null,"docs":" Generates a new empty `StandardComposer` with all of it's fields\n set to hold an initial capacity of 0.","sig":null,"attributes":[{"value":"/ Generates a new empty `StandardComposer` with all of it's fields","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":29317,"byte_end":29385,"line_start":159,"line_end":159,"column_start":5,"column_end":73}},{"value":"/ set to hold an initial capacity of 0.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":29390,"byte_end":29431,"line_start":160,"line_end":160,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":29436,"byte_end":29439,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":29444,"byte_end":29454,"line_start":162,"line_end":162,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":29459,"byte_end":29462,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ The usage of this may cause lots of re-allocations since the `Composer`","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":29467,"byte_end":29542,"line_start":164,"line_end":164,"column_start":5,"column_end":80}},{"value":"/ holds `Vec` for every polynomial, and these will need to be re-allocated","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":29547,"byte_end":29623,"line_start":165,"line_end":165,"column_start":5,"column_end":81}},{"value":"/ each time the circuit grows considerably.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":29628,"byte_end":29673,"line_start":166,"line_end":166,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":29878,"byte_end":29912,"line_start":173,"line_end":173,"column_start":12,"column_end":46},"name":"add_witness_to_circuit_description","qualname":"<StandardComposer<E, P>>::add_witness_to_circuit_description","value":"pub fn add_witness_to_circuit_description(&mut Self, E::Fr) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Fixes a [`Variable`] in the witness to be a part of the circuit\n description.\n","sig":null,"attributes":[{"value":"/ Fixes a [`Variable`] in the witness to be a part of the circuit","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":29778,"byte_end":29845,"line_start":171,"line_end":171,"column_start":5,"column_end":72}},{"value":"/ description.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":29850,"byte_end":29866,"line_start":172,"line_end":172,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":30352,"byte_end":30370,"line_start":186,"line_end":186,"column_start":12,"column_end":30},"name":"with_expected_size","qualname":"<StandardComposer<E, P>>::with_expected_size","value":"pub fn with_expected_size(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new circuit with an expected circuit size.\n This will allow for less reallocations when building the circuit\n since the `Vec`s will already have an appropriate allocation at the\n beginning of the composing stage.\n","sig":null,"attributes":[{"value":"/ Creates a new circuit with an expected circuit size.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":30093,"byte_end":30149,"line_start":182,"line_end":182,"column_start":5,"column_end":61}},{"value":"/ This will allow for less reallocations when building the circuit","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":30154,"byte_end":30222,"line_start":183,"line_end":183,"column_start":5,"column_end":73}},{"value":"/ since the `Vec`s will already have an appropriate allocation at the","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":30227,"byte_end":30298,"line_start":184,"line_end":184,"column_start":5,"column_end":76}},{"value":"/ beginning of the composing stage.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":30303,"byte_end":30340,"line_start":185,"line_end":185,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":31871,"byte_end":31879,"line_start":228,"line_end":228,"column_start":12,"column_end":20},"name":"zero_var","qualname":"<StandardComposer<E, P>>::zero_var","value":"pub fn zero_var(&Self) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Witness representation of zero of the first variable of any circuit\n","sig":null,"attributes":[{"value":"/ Witness representation of zero of the first variable of any circuit","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":31788,"byte_end":31859,"line_start":227,"line_end":227,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":32211,"byte_end":32220,"line_start":239,"line_end":239,"column_start":12,"column_end":21},"name":"add_input","qualname":"<StandardComposer<E, P>>::add_input","value":"pub fn add_input(&mut Self, E::Fr) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Add Input first calls the Permutation\n to generate and allocate a new [`Variable`] `var`.","sig":null,"attributes":[{"value":"/ Add Input first calls the Permutation","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":31934,"byte_end":31975,"line_start":232,"line_end":232,"column_start":5,"column_end":46}},{"value":"/ to generate and allocate a new [`Variable`] `var`.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":31980,"byte_end":32034,"line_start":233,"line_end":233,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":32039,"byte_end":32042,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ The Composer then links the variable to the [`E::Fr`]","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":32047,"byte_end":32104,"line_start":235,"line_end":235,"column_start":5,"column_end":62}},{"value":"/ and returns it for its use in the system.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":32109,"byte_end":32154,"line_start":236,"line_end":236,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":32159,"byte_end":32162,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ [`E::Fr`]: PairingEngine::Fr","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":32167,"byte_end":32199,"line_start":238,"line_end":238,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":33005,"byte_end":33014,"line_start":258,"line_end":258,"column_start":12,"column_end":21},"name":"poly_gate","qualname":"<StandardComposer<E, P>>::poly_gate","value":"pub fn poly_gate(&mut Self, Variable, Variable, Variable, E::Fr, E::Fr, E::Fr,\n                 E::Fr, E::Fr, Option<E::Fr>)\n-> (Variable, Variable, Variable)","parent":null,"children":[],"decl_id":null,"docs":" Adds a width-3 poly gate.\n This gate gives total freedom to the end user to implement the\n corresponding circuits in the most optimized way possible because\n the under has access to the whole set of variables, as well as\n selector coefficients that take part in the computation of the gate\n equation.","sig":null,"attributes":[{"value":"/ Adds a width-3 poly gate.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":32515,"byte_end":32544,"line_start":249,"line_end":249,"column_start":5,"column_end":34}},{"value":"/ This gate gives total freedom to the end user to implement the","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":32549,"byte_end":32615,"line_start":250,"line_end":250,"column_start":5,"column_end":71}},{"value":"/ corresponding circuits in the most optimized way possible because","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":32620,"byte_end":32689,"line_start":251,"line_end":251,"column_start":5,"column_end":74}},{"value":"/ the under has access to the whole set of variables, as well as","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":32694,"byte_end":32760,"line_start":252,"line_end":252,"column_start":5,"column_end":71}},{"value":"/ selector coefficients that take part in the computation of the gate","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":32765,"byte_end":32836,"line_start":253,"line_end":253,"column_start":5,"column_end":76}},{"value":"/ equation.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":32841,"byte_end":32854,"line_start":254,"line_end":254,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":32859,"byte_end":32862,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ The final constraint added will force the following:","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":32867,"byte_end":32923,"line_start":256,"line_end":256,"column_start":5,"column_end":61}},{"value":"/ `(a * b) * q_m + a * q_l + b * q_r + q_c + PI + q_o * c = 0`.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":32928,"byte_end":32993,"line_start":257,"line_end":257,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":34433,"byte_end":34454,"line_start":307,"line_end":307,"column_start":12,"column_end":33},"name":"constrain_to_constant","qualname":"<StandardComposer<E, P>>::constrain_to_constant","value":"pub fn constrain_to_constant(&mut Self, Variable, E::Fr, Option<E::Fr>)","parent":null,"children":[],"decl_id":null,"docs":" Constrain a [`Variable`] to be equal to\n a specific constant value which is part of the circuit description and\n **NOT** a Public Input. ie. this value will be the same for all of the\n circuit instances and [`Proof`](crate::proof_system::Proof)s generated.\n","sig":null,"attributes":[{"value":"/ Constrain a [`Variable`] to be equal to","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":34140,"byte_end":34183,"line_start":303,"line_end":303,"column_start":5,"column_end":48}},{"value":"/ a specific constant value which is part of the circuit description and","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":34188,"byte_end":34262,"line_start":304,"line_end":304,"column_start":5,"column_end":79}},{"value":"/ **NOT** a Public Input. ie. this value will be the same for all of the","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":34267,"byte_end":34341,"line_start":305,"line_end":305,"column_start":5,"column_end":79}},{"value":"/ circuit instances and [`Proof`](crate::proof_system::Proof)s generated.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":34346,"byte_end":34421,"line_start":306,"line_end":306,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":34908,"byte_end":34920,"line_start":328,"line_end":328,"column_start":12,"column_end":24},"name":"assert_equal","qualname":"<StandardComposer<E, P>>::assert_equal","value":"pub fn assert_equal(&mut Self, Variable, Variable)","parent":null,"children":[],"decl_id":null,"docs":" Add a constraint into the circuit description that states that two\n [`Variable`]s are equal.\n","sig":null,"attributes":[{"value":"/ Add a constraint into the circuit description that states that two","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":34793,"byte_end":34863,"line_start":326,"line_end":326,"column_start":5,"column_end":75}},{"value":"/ [`Variable`]s are equal.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":34868,"byte_end":34896,"line_start":327,"line_end":327,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":35589,"byte_end":35607,"line_start":352,"line_end":352,"column_start":12,"column_end":30},"name":"conditional_select","qualname":"<StandardComposer<E, P>>::conditional_select","value":"pub fn conditional_select(&mut Self, Variable, Variable, Variable) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Conditionally selects a [`Variable`] based on an input bit.","sig":null,"attributes":[{"value":"/ Conditionally selects a [`Variable`] based on an input bit.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":35215,"byte_end":35278,"line_start":342,"line_end":342,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":35283,"byte_end":35286,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ If:","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":35291,"byte_end":35298,"line_start":344,"line_end":344,"column_start":5,"column_end":12}},{"value":"/ bit == 1 => choice_a,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":35303,"byte_end":35328,"line_start":345,"line_end":345,"column_start":5,"column_end":30}},{"value":"/ bit == 0 => choice_b,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":35333,"byte_end":35358,"line_start":346,"line_end":346,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":35363,"byte_end":35366,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":35371,"byte_end":35381,"line_start":348,"line_end":348,"column_start":5,"column_end":15}},{"value":"/ The `bit` used as input which is a [`Variable`] should had previously","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":35386,"byte_end":35459,"line_start":349,"line_end":349,"column_start":5,"column_end":78}},{"value":"/ been constrained to be either 1 or 0 using a bool constrain. See:","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":35464,"byte_end":35533,"line_start":350,"line_end":350,"column_start":5,"column_end":74}},{"value":"/ [`StandardComposer::boolean_gate`].","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":35538,"byte_end":35577,"line_start":351,"line_end":351,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":36773,"byte_end":36796,"line_start":392,"line_end":392,"column_start":12,"column_end":35},"name":"conditional_select_zero","qualname":"<StandardComposer<E, P>>::conditional_select_zero","value":"pub fn conditional_select_zero(&mut Self, Variable, Variable) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds the polynomial f(x) = x * a to the circuit description where\n `x = bit`. If:\n bit == 1 => value,\n bit == 0 => 0,","sig":null,"attributes":[{"value":"/ Adds the polynomial f(x) = x * a to the circuit description where","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":36400,"byte_end":36469,"line_start":383,"line_end":383,"column_start":5,"column_end":74}},{"value":"/ `x = bit`. If:","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":36474,"byte_end":36492,"line_start":384,"line_end":384,"column_start":5,"column_end":23}},{"value":"/ bit == 1 => value,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":36497,"byte_end":36519,"line_start":385,"line_end":385,"column_start":5,"column_end":27}},{"value":"/ bit == 0 => 0,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":36524,"byte_end":36542,"line_start":386,"line_end":386,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":36547,"byte_end":36550,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":36555,"byte_end":36565,"line_start":388,"line_end":388,"column_start":5,"column_end":15}},{"value":"/ The `bit` used as input which is a [`Variable`] should had previously","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":36570,"byte_end":36643,"line_start":389,"line_end":389,"column_start":5,"column_end":78}},{"value":"/ been constrained to be either 1 or 0 using a bool constrain. See:","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":36648,"byte_end":36717,"line_start":390,"line_end":390,"column_start":5,"column_end":74}},{"value":"/ [`StandardComposer::boolean_gate`].","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":36722,"byte_end":36761,"line_start":391,"line_end":391,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":37369,"byte_end":37391,"line_start":410,"line_end":410,"column_start":12,"column_end":34},"name":"conditional_select_one","qualname":"<StandardComposer<E, P>>::conditional_select_one","value":"pub fn conditional_select_one(&mut Self, Variable, Variable) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds the polynomial f(x) = 1 - x + xa to the circuit description where\n `x = bit`. If:\n bit == 1 => value,\n bit == 0 => 1,","sig":null,"attributes":[{"value":"/ Adds the polynomial f(x) = 1 - x + xa to the circuit description where","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":36991,"byte_end":37065,"line_start":401,"line_end":401,"column_start":5,"column_end":79}},{"value":"/ `x = bit`. If:","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":37070,"byte_end":37088,"line_start":402,"line_end":402,"column_start":5,"column_end":23}},{"value":"/ bit == 1 => value,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":37093,"byte_end":37115,"line_start":403,"line_end":403,"column_start":5,"column_end":27}},{"value":"/ bit == 0 => 1,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":37120,"byte_end":37138,"line_start":404,"line_end":404,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":37143,"byte_end":37146,"line_start":405,"line_end":405,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":37151,"byte_end":37161,"line_start":406,"line_end":406,"column_start":5,"column_end":15}},{"value":"/ The `bit` used as input which is a [`Variable`] should had previously","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":37166,"byte_end":37239,"line_start":407,"line_end":407,"column_start":5,"column_end":78}},{"value":"/ been constrained to be either 1 or 0 using a bool constrain. See:","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":37244,"byte_end":37313,"line_start":408,"line_end":408,"column_start":5,"column_end":74}},{"value":"/ [`StandardComposer::boolean_gate`].","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":37318,"byte_end":37357,"line_start":409,"line_end":409,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":38237,"byte_end":38258,"line_start":440,"line_end":440,"column_start":12,"column_end":33},"name":"add_dummy_constraints","qualname":"<StandardComposer<E, P>>::add_dummy_constraints","value":"pub fn add_dummy_constraints(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" This function is used to add a blinding factor to the witness\n polynomials. It essentially adds two dummy gates to the circuit\n description which are guaranteed to always satisfy the gate equation.\n","sig":null,"attributes":[{"value":"/ This function is used to add a blinding factor to the witness","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":38010,"byte_end":38075,"line_start":437,"line_end":437,"column_start":5,"column_end":70}},{"value":"/ polynomials. It essentially adds two dummy gates to the circuit","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":38080,"byte_end":38147,"line_start":438,"line_end":438,"column_start":5,"column_end":72}},{"value":"/ description which are guaranteed to always satisfy the gate equation.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":38152,"byte_end":38225,"line_start":439,"line_end":439,"column_start":5,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":1804},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/variable.rs","byte_start":53006,"byte_end":53014,"line_start":13,"line_end":13,"column_start":12,"column_end":20},"name":"Variable","qualname":"::constraint_system::variable::Variable","value":"","parent":null,"children":[],"decl_id":null,"docs":" The value is a reference to the actual value that was added to the\n constraint system\n","sig":null,"attributes":[{"value":"/ The value is a reference to the actual value that was added to the","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/variable.rs","byte_start":52851,"byte_end":52921,"line_start":10,"line_end":10,"column_start":1,"column_end":71}},{"value":"/ constraint system","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/variable.rs","byte_start":52922,"byte_end":52943,"line_start":11,"line_end":11,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":54210,"byte_end":54218,"line_start":18,"line_end":18,"column_start":12,"column_end":20},"name":"add_gate","qualname":"<StandardComposer<E, P>>::add_gate","value":"pub fn add_gate(&mut Self, Variable, Variable, Variable, E::Fr, E::Fr, E::Fr,\n                E::Fr, Option<E::Fr>) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds a width-3 add gate to the circuit, linking the addition of the\n provided inputs, scaled by the selector coefficients with the output\n provided.\n","sig":null,"attributes":[{"value":"/ Adds a width-3 add gate to the circuit, linking the addition of the","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":54032,"byte_end":54103,"line_start":15,"line_end":15,"column_start":5,"column_end":76}},{"value":"/ provided inputs, scaled by the selector coefficients with the output","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":54108,"byte_end":54180,"line_start":16,"line_end":16,"column_start":5,"column_end":77}},{"value":"/ provided.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":54185,"byte_end":54198,"line_start":17,"line_end":17,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":54881,"byte_end":54893,"line_start":39,"line_end":39,"column_start":12,"column_end":24},"name":"big_add_gate","qualname":"<StandardComposer<E, P>>::big_add_gate","value":"pub fn big_add_gate(&mut Self, Variable, Variable, Variable, Option<Variable>,\n                    E::Fr, E::Fr, E::Fr, E::Fr, E::Fr, Option<E::Fr>)\n-> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds a width-4 add gate to the circuit and it's corresponding\n constraint.","sig":null,"attributes":[{"value":"/ Adds a width-4 add gate to the circuit and it's corresponding","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":54520,"byte_end":54585,"line_start":32,"line_end":32,"column_start":5,"column_end":70}},{"value":"/ constraint.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":54590,"byte_end":54605,"line_start":33,"line_end":33,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":54610,"byte_end":54613,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ This type of gate is usually used when we need to have","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":54618,"byte_end":54676,"line_start":35,"line_end":35,"column_start":5,"column_end":63}},{"value":"/ the largest amount of performance and the minimum circuit-size","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":54681,"byte_end":54747,"line_start":36,"line_end":36,"column_start":5,"column_end":71}},{"value":"/ possible. Since it allows the end-user to set every selector coefficient","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":54752,"byte_end":54828,"line_start":37,"line_end":37,"column_start":5,"column_end":81}},{"value":"/ as scaling value on the gate eq.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":54833,"byte_end":54869,"line_start":38,"line_end":38,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":56564,"byte_end":56572,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"mul_gate","qualname":"<StandardComposer<E, P>>::mul_gate","value":"pub fn mul_gate(&mut Self, Variable, Variable, Variable, E::Fr, E::Fr, E::Fr,\n                Option<E::Fr>) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds a width-3 mul gate to the circuit linking the product of the\n provided inputs scaled by the selector coefficient `q_m` with the output\n provided scaled by `q_o`.","sig":null,"attributes":[{"value":"/ Adds a width-3 mul gate to the circuit linking the product of the","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":56202,"byte_end":56271,"line_start":88,"line_end":88,"column_start":5,"column_end":74}},{"value":"/ provided inputs scaled by the selector coefficient `q_m` with the output","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":56276,"byte_end":56352,"line_start":89,"line_end":89,"column_start":5,"column_end":81}},{"value":"/ provided scaled by `q_o`.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":56357,"byte_end":56386,"line_start":90,"line_end":90,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":56391,"byte_end":56394,"line_start":91,"line_end":91,"column_start":5,"column_end":8}},{"value":"/ Note that this gate requires to provide the actual result of the gate","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":56399,"byte_end":56472,"line_start":92,"line_end":92,"column_start":5,"column_end":78}},{"value":"/ (output wire) since it will just add a `mul constraint` to the circuit.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":56477,"byte_end":56552,"line_start":93,"line_end":93,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":57511,"byte_end":57523,"line_start":120,"line_end":120,"column_start":12,"column_end":24},"name":"big_mul_gate","qualname":"<StandardComposer<E, P>>::big_mul_gate","value":"pub fn big_mul_gate(&mut Self, Variable, Variable, Variable, Option<Variable>,\n                    E::Fr, E::Fr, E::Fr, E::Fr, Option<E::Fr>) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds a width-4 `big_mul_gate` with the left, right and fourth inputs\n and it's scaling factors, computing & returning the output (result)\n `Variable` and adding the corresponding mul constraint.","sig":null,"attributes":[{"value":"/ Adds a width-4 `big_mul_gate` with the left, right and fourth inputs","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":56849,"byte_end":56921,"line_start":107,"line_end":107,"column_start":5,"column_end":77}},{"value":"/ and it's scaling factors, computing & returning the output (result)","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":56926,"byte_end":56997,"line_start":108,"line_end":108,"column_start":5,"column_end":76}},{"value":"/ `Variable` and adding the corresponding mul constraint.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":57002,"byte_end":57061,"line_start":109,"line_end":109,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":57066,"byte_end":57069,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ This type of gate is usually used when we need to have","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":57074,"byte_end":57132,"line_start":111,"line_end":111,"column_start":5,"column_end":63}},{"value":"/ the largest amount of performance and the minimum circuit-size","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":57137,"byte_end":57203,"line_start":112,"line_end":112,"column_start":5,"column_end":71}},{"value":"/ possible. Since it allows the end-user to setup all of the selector","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":57208,"byte_end":57279,"line_start":113,"line_end":113,"column_start":5,"column_end":76}},{"value":"/ coefficients.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":57284,"byte_end":57301,"line_start":114,"line_end":114,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":57306,"byte_end":57309,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ Forces `q_m * (w_l * w_r) + w_4 * q_4 + q_c + PI = q_o * w_o`.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":57314,"byte_end":57380,"line_start":116,"line_end":116,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":57385,"byte_end":57388,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ `{w_l, w_r, w_o, w_4} = {a, b, c, d}`","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":57393,"byte_end":57434,"line_start":118,"line_end":118,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":59471,"byte_end":59474,"line_start":183,"line_end":183,"column_start":12,"column_end":15},"name":"add","qualname":"<StandardComposer<E, P>>::add","value":"pub fn add(&mut Self, (E::Fr, Variable), (E::Fr, Variable), E::Fr,\n           Option<E::Fr>) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds a [`StandardComposer::big_add_gate`] with the left and right\n inputs and it's scaling factors, computing & returning the output\n (result) [`Variable`], and adding the corresponding addition\n constraint.","sig":null,"attributes":[{"value":"/ Adds a [`StandardComposer::big_add_gate`] with the left and right","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":58860,"byte_end":58929,"line_start":172,"line_end":172,"column_start":5,"column_end":74}},{"value":"/ inputs and it's scaling factors, computing & returning the output","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":58934,"byte_end":59003,"line_start":173,"line_end":173,"column_start":5,"column_end":74}},{"value":"/ (result) [`Variable`], and adding the corresponding addition","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":59008,"byte_end":59072,"line_start":174,"line_end":174,"column_start":5,"column_end":69}},{"value":"/ constraint.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":59077,"byte_end":59092,"line_start":175,"line_end":175,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":59097,"byte_end":59100,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ This type of gate is usually used when we don't need to have","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":59105,"byte_end":59169,"line_start":177,"line_end":177,"column_start":5,"column_end":69}},{"value":"/ the largest amount of performance as well as the minimum circuit-size","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":59174,"byte_end":59247,"line_start":178,"line_end":178,"column_start":5,"column_end":78}},{"value":"/ possible. Since it defaults some of the selector coeffs = 0 in order","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":59252,"byte_end":59324,"line_start":179,"line_end":179,"column_start":5,"column_end":77}},{"value":"/ to reduce the verbosity and complexity.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":59329,"byte_end":59372,"line_start":180,"line_end":180,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":59377,"byte_end":59380,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ Forces `q_l * w_l + q_r * w_r + q_c + PI = w_o(computed by the gate)`.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":59385,"byte_end":59459,"line_start":182,"line_end":182,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":60322,"byte_end":60329,"line_start":205,"line_end":205,"column_start":12,"column_end":19},"name":"big_add","qualname":"<StandardComposer<E, P>>::big_add","value":"pub fn big_add(&mut Self, (E::Fr, Variable), (E::Fr, Variable),\n               Option<(E::Fr, Variable)>, E::Fr, Option<E::Fr>) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds a [`StandardComposer::big_add_gate`] with the left, right and\n fourth inputs and it's scaling factors, computing & returning the\n output (result) [`Variable`] and adding the corresponding addition\n constraint.","sig":null,"attributes":[{"value":"/ Adds a [`StandardComposer::big_add_gate`] with the left, right and","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":59691,"byte_end":59761,"line_start":193,"line_end":193,"column_start":5,"column_end":75}},{"value":"/ fourth inputs and it's scaling factors, computing & returning the","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":59766,"byte_end":59835,"line_start":194,"line_end":194,"column_start":5,"column_end":74}},{"value":"/ output (result) [`Variable`] and adding the corresponding addition","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":59840,"byte_end":59910,"line_start":195,"line_end":195,"column_start":5,"column_end":75}},{"value":"/ constraint.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":59915,"byte_end":59930,"line_start":196,"line_end":196,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":59935,"byte_end":59938,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ This type of gate is usually used when we don't need to have","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":59943,"byte_end":60007,"line_start":198,"line_end":198,"column_start":5,"column_end":69}},{"value":"/ the largest amount of performance and the minimum circuit-size","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":60012,"byte_end":60078,"line_start":199,"line_end":199,"column_start":5,"column_end":71}},{"value":"/ possible. Since it defaults some of the selector coeffs = 0 in order","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":60083,"byte_end":60155,"line_start":200,"line_end":200,"column_start":5,"column_end":77}},{"value":"/ to reduce the verbosity and complexity.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":60160,"byte_end":60203,"line_start":201,"line_end":201,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":60208,"byte_end":60211,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ Forces `q_l * w_l + q_r * w_r + q_4 * w_4 + q_c + PI = w_o(computed by","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":60216,"byte_end":60290,"line_start":203,"line_end":203,"column_start":5,"column_end":79}},{"value":"/ the gate)`.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":60295,"byte_end":60310,"line_start":204,"line_end":204,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":61913,"byte_end":61916,"line_start":252,"line_end":252,"column_start":12,"column_end":15},"name":"mul","qualname":"<StandardComposer<E, P>>::mul","value":"pub fn mul(&mut Self, E::Fr, Variable, Variable, E::Fr, Option<E::Fr>)\n-> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds a [`StandardComposer::big_mul_gate`] with the left, right\n and fourth inputs and it's scaling factors, computing & returning\n the output (result) [`Variable`] and adding the corresponding mul\n constraint.","sig":null,"attributes":[{"value":"/ Adds a [`StandardComposer::big_mul_gate`] with the left, right","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":61245,"byte_end":61311,"line_start":238,"line_end":238,"column_start":5,"column_end":71}},{"value":"/ and fourth inputs and it's scaling factors, computing & returning","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":61316,"byte_end":61385,"line_start":239,"line_end":239,"column_start":5,"column_end":74}},{"value":"/ the output (result) [`Variable`] and adding the corresponding mul","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":61390,"byte_end":61459,"line_start":240,"line_end":240,"column_start":5,"column_end":74}},{"value":"/ constraint.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":61464,"byte_end":61479,"line_start":241,"line_end":241,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":61484,"byte_end":61487,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ This type of gate is usually used when we don't need to have","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":61492,"byte_end":61556,"line_start":243,"line_end":243,"column_start":5,"column_end":69}},{"value":"/ the largest amount of performance and the minimum circuit-size","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":61561,"byte_end":61627,"line_start":244,"line_end":244,"column_start":5,"column_end":71}},{"value":"/ possible. Since it defaults some of the selector coeffs = 0 in order","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":61632,"byte_end":61704,"line_start":245,"line_end":245,"column_start":5,"column_end":77}},{"value":"/ to reduce the verbosity and complexity.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":61709,"byte_end":61752,"line_start":246,"line_end":246,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":61757,"byte_end":61760,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ Forces `q_m * (w_l * w_r) + w_4 * q_4 + q_c + PI = w_o(computed by the","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":61765,"byte_end":61839,"line_start":248,"line_end":248,"column_start":5,"column_end":79}},{"value":"/ gate)`.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":61844,"byte_end":61855,"line_start":249,"line_end":249,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":61860,"byte_end":61863,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ `{w_l, w_r, w_4} = {a, b, d}`","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":61868,"byte_end":61901,"line_start":251,"line_end":251,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":62800,"byte_end":62807,"line_start":277,"line_end":277,"column_start":12,"column_end":19},"name":"big_mul","qualname":"<StandardComposer<E, P>>::big_mul","value":"pub fn big_mul(&mut Self, E::Fr, Variable, Variable,\n               Option<(E::Fr, Variable)>, E::Fr, Option<E::Fr>) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds a width-4 [`StandardComposer::big_mul_gate`] with the left, right\n and fourth inputs and it's scaling factors, computing & returning\n the output (result) [`Variable`] and adding the corresponding mul\n constraint.","sig":null,"attributes":[{"value":"/ Adds a width-4 [`StandardComposer::big_mul_gate`] with the left, right","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":62124,"byte_end":62198,"line_start":263,"line_end":263,"column_start":5,"column_end":79}},{"value":"/ and fourth inputs and it's scaling factors, computing & returning","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":62203,"byte_end":62272,"line_start":264,"line_end":264,"column_start":5,"column_end":74}},{"value":"/ the output (result) [`Variable`] and adding the corresponding mul","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":62277,"byte_end":62346,"line_start":265,"line_end":265,"column_start":5,"column_end":74}},{"value":"/ constraint.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":62351,"byte_end":62366,"line_start":266,"line_end":266,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":62371,"byte_end":62374,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ This type of gate is usually used when we don't need to have","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":62379,"byte_end":62443,"line_start":268,"line_end":268,"column_start":5,"column_end":69}},{"value":"/ the largest amount of performance and the minimum circuit-size","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":62448,"byte_end":62514,"line_start":269,"line_end":269,"column_start":5,"column_end":71}},{"value":"/ possible. Since it defaults some of the selector coeffs = 0 in order","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":62519,"byte_end":62591,"line_start":270,"line_end":270,"column_start":5,"column_end":77}},{"value":"/ to reduce the verbosity and complexity.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":62596,"byte_end":62639,"line_start":271,"line_end":271,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":62644,"byte_end":62647,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ Forces `q_m * (w_l * w_r) + w_4 * q_4 + q_c + PI = w_o(computed by the","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":62652,"byte_end":62726,"line_start":273,"line_end":273,"column_start":5,"column_end":79}},{"value":"/ gate)`.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":62731,"byte_end":62742,"line_start":274,"line_end":274,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":62747,"byte_end":62750,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ `{w_l, w_r, w_4} = {a, b, d}`","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":62755,"byte_end":62788,"line_start":276,"line_end":276,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/boolean.rs","byte_start":72540,"byte_end":72552,"line_start":22,"line_end":22,"column_start":12,"column_end":24},"name":"boolean_gate","qualname":"<StandardComposer<E, P>>::boolean_gate","value":"pub fn boolean_gate(&mut Self, Variable) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds a boolean constraint (also known as binary constraint) where\n the gate eq. will enforce that the [`Variable`] received is either `0`\n or `1` by adding a constraint in the circuit.","sig":null,"attributes":[{"value":"/ Adds a boolean constraint (also known as binary constraint) where","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/boolean.rs","byte_start":72144,"byte_end":72213,"line_start":15,"line_end":15,"column_start":5,"column_end":74}},{"value":"/ the gate eq. will enforce that the [`Variable`] received is either `0`","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/boolean.rs","byte_start":72218,"byte_end":72292,"line_start":16,"line_end":16,"column_start":5,"column_end":79}},{"value":"/ or `1` by adding a constraint in the circuit.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/boolean.rs","byte_start":72297,"byte_end":72346,"line_start":17,"line_end":17,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/boolean.rs","byte_start":72351,"byte_end":72354,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ Note that using this constraint with whatever [`Variable`] that is not","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/boolean.rs","byte_start":72359,"byte_end":72433,"line_start":19,"line_end":19,"column_start":5,"column_end":79}},{"value":"/ representing a value equalling 0 or 1, will always force the equation to","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/boolean.rs","byte_start":72438,"byte_end":72514,"line_start":20,"line_end":20,"column_start":5,"column_end":81}},{"value":"/ fail.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/boolean.rs","byte_start":72519,"byte_end":72528,"line_start":21,"line_end":21,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":224},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ecc","qualname":"::constraint_system::ecc","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","parent":null,"children":[{"krate":0,"index":225},{"krate":0,"index":281},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":384},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":391},{"krate":0,"index":394},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":404},{"krate":0,"index":1870},{"krate":0,"index":1877},{"krate":0,"index":407},{"krate":0,"index":410},{"krate":0,"index":414},{"krate":0,"index":421}],"decl_id":null,"docs":" Elliptic Curve Crypto gates\n","sig":null,"attributes":[{"value":"/ Elliptic Curve Crypto gates","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/mod.rs","byte_start":23219,"byte_end":23250,"line_start":18,"line_end":18,"column_start":1,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":225},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"curve_addition","qualname":"::constraint_system::ecc::curve_addition","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/mod.rs","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":254}],"decl_id":null,"docs":" Curve addition gate\n","sig":null,"attributes":[{"value":"/ Curve addition gate","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":75349,"byte_end":75372,"line_start":7,"line_end":7,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":1847},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":82536,"byte_end":82545,"line_start":17,"line_end":17,"column_start":12,"column_end":21},"name":"WnafRound","qualname":"::constraint_system::ecc::curve_addition::fixed_base_gate::WnafRound","value":"WnafRound { acc_x, acc_y, accumulated_bit, xy_alpha, x_beta, y_beta, xy_beta }","parent":null,"children":[{"krate":0,"index":1850},{"krate":0,"index":1851},{"krate":0,"index":1852},{"krate":0,"index":1853},{"krate":0,"index":1854},{"krate":0,"index":1855},{"krate":0,"index":1856},{"krate":0,"index":1857},{"krate":0,"index":1858}],"decl_id":null,"docs":" Contains all of the components needed to verify that a bit scalar\n multiplication was computed correctly\n","sig":null,"attributes":[{"value":"/ Contains all of the components needed to verify that a bit scalar","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":82383,"byte_end":82452,"line_start":14,"line_end":14,"column_start":1,"column_end":70}},{"value":"/ multiplication was computed correctly","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":82453,"byte_end":82494,"line_start":15,"line_end":15,"column_start":1,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":1850},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":82812,"byte_end":82817,"line_start":22,"line_end":22,"column_start":9,"column_end":14},"name":"acc_x","qualname":"::constraint_system::ecc::curve_addition::fixed_base_gate::WnafRound::acc_x","value":"constraint_system::variable::Variable","parent":{"krate":0,"index":1847},"children":[],"decl_id":null,"docs":" This is the accumulated x coordinate point that we wish to add (so\n far.. depends on where you are in the scalar mul) it is linked to\n the wnaf entry, so must not be revealed\n","sig":null,"attributes":[{"value":"/ This is the accumulated x coordinate point that we wish to add (so","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":82611,"byte_end":82681,"line_start":19,"line_end":19,"column_start":5,"column_end":75}},{"value":"/ far.. depends on where you are in the scalar mul) it is linked to","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":82686,"byte_end":82755,"line_start":20,"line_end":20,"column_start":5,"column_end":74}},{"value":"/ the wnaf entry, so must not be revealed","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":82760,"byte_end":82803,"line_start":21,"line_end":21,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":1851},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":82882,"byte_end":82887,"line_start":24,"line_end":24,"column_start":9,"column_end":14},"name":"acc_y","qualname":"::constraint_system::ecc::curve_addition::fixed_base_gate::WnafRound::acc_y","value":"constraint_system::variable::Variable","parent":{"krate":0,"index":1847},"children":[],"decl_id":null,"docs":" This is the accumulated y coordinate\n","sig":null,"attributes":[{"value":"/ This is the accumulated y coordinate","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":82833,"byte_end":82873,"line_start":23,"line_end":23,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":1852},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":83029,"byte_end":83044,"line_start":28,"line_end":28,"column_start":9,"column_end":24},"name":"accumulated_bit","qualname":"::constraint_system::ecc::curve_addition::fixed_base_gate::WnafRound::accumulated_bit","value":"constraint_system::variable::Variable","parent":{"krate":0,"index":1847},"children":[],"decl_id":null,"docs":" This is the wnaf accumulated entry\n For all intents and purposes, you can think of this as the secret bit\n","sig":null,"attributes":[{"value":"/ This is the wnaf accumulated entry","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":82904,"byte_end":82942,"line_start":26,"line_end":26,"column_start":5,"column_end":43}},{"value":"/ For all intents and purposes, you can think of this as the secret bit","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":82947,"byte_end":83020,"line_start":27,"line_end":27,"column_start":5,"column_end":78}}]},{"kind":"Field","id":{"krate":0,"index":1853},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":83228,"byte_end":83236,"line_start":33,"line_end":33,"column_start":9,"column_end":17},"name":"xy_alpha","qualname":"::constraint_system::ecc::curve_addition::fixed_base_gate::WnafRound::xy_alpha","value":"constraint_system::variable::Variable","parent":{"krate":0,"index":1847},"children":[],"decl_id":null,"docs":" This is the multiplication of x_\\alpha * y_\\alpha\n we need this as a distinct wire, so that the degree of the polynomial\n does not go over 4\n","sig":null,"attributes":[{"value":"/ This is the multiplication of x_\\alpha * y_\\alpha","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":83061,"byte_end":83114,"line_start":30,"line_end":30,"column_start":5,"column_end":58}},{"value":"/ we need this as a distinct wire, so that the degree of the polynomial","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":83119,"byte_end":83192,"line_start":31,"line_end":31,"column_start":5,"column_end":78}},{"value":"/ does not go over 4","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":83197,"byte_end":83219,"line_start":32,"line_end":32,"column_start":5,"column_end":27}}]},{"kind":"Field","id":{"krate":0,"index":1854},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":83382,"byte_end":83388,"line_start":36,"line_end":36,"column_start":9,"column_end":15},"name":"x_beta","qualname":"::constraint_system::ecc::curve_addition::fixed_base_gate::WnafRound::x_beta","value":"<P as ark_ec::ModelParameters>::BaseField","parent":{"krate":0,"index":1847},"children":[],"decl_id":null,"docs":" This is the possible x co-ordinate of the wnaf point we are going to\n add Actual x-co-ordinate = b_i * x_\\beta\n","sig":null,"attributes":[{"value":"/ This is the possible x co-ordinate of the wnaf point we are going to","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":83252,"byte_end":83324,"line_start":34,"line_end":34,"column_start":5,"column_end":77}},{"value":"/ add Actual x-co-ordinate = b_i * x_\\beta","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":83329,"byte_end":83373,"line_start":35,"line_end":35,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":1855},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":83548,"byte_end":83554,"line_start":39,"line_end":39,"column_start":9,"column_end":15},"name":"y_beta","qualname":"::constraint_system::ecc::curve_addition::fixed_base_gate::WnafRound::y_beta","value":"<P as ark_ec::ModelParameters>::BaseField","parent":{"krate":0,"index":1847},"children":[],"decl_id":null,"docs":" This is the possible y co-ordinate of the wnaf point we are going to\n add Actual y coordinate = (b_i)^2 [y_\\beta -1] + 1\n","sig":null,"attributes":[{"value":"/ This is the possible y co-ordinate of the wnaf point we are going to","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":83408,"byte_end":83480,"line_start":37,"line_end":37,"column_start":5,"column_end":77}},{"value":"/ add Actual y coordinate = (b_i)^2 [y_\\beta -1] + 1","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":83485,"byte_end":83539,"line_start":38,"line_end":38,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":1856},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":83634,"byte_end":83641,"line_start":41,"line_end":41,"column_start":9,"column_end":16},"name":"xy_beta","qualname":"::constraint_system::ecc::curve_addition::fixed_base_gate::WnafRound::xy_beta","value":"<P as ark_ec::ModelParameters>::BaseField","parent":{"krate":0,"index":1847},"children":[],"decl_id":null,"docs":" This is the multiplication of x_\\beta * y_\\beta\n","sig":null,"attributes":[{"value":"/ This is the multiplication of x_\\beta * y_\\beta","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":83574,"byte_end":83625,"line_start":40,"line_end":40,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":83885,"byte_end":83893,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"new_wnaf","qualname":"<StandardComposer<E, P>>::new_wnaf","value":"pub fn new_wnaf(Variable, Variable, Variable, Variable, P::BaseField,\n                P::BaseField, P::BaseField) -> WnafRound<E, P>","parent":null,"children":[],"decl_id":null,"docs":" Generates a new structure for preparing a WNAF ROUND\n","sig":null,"attributes":[{"value":"/ Generates a new structure for preparing a WNAF ROUND","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":83817,"byte_end":83873,"line_start":49,"line_end":49,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/variable_base_gate.rs","byte_start":86244,"byte_end":86263,"line_start":21,"line_end":21,"column_start":12,"column_end":31},"name":"point_addition_gate","qualname":"<StandardComposer<E, P>>::point_addition_gate","value":"pub fn point_addition_gate(&mut Self, Point<E, P>, Point<E, P>) -> Point<E, P>","parent":null,"children":[],"decl_id":null,"docs":" Adds two curve points together using a curve addition gate\n Note that since the points are not fixed the generator is not a part of\n the circuit description, however it is less efficient for a program\n width of 4.\n","sig":null,"attributes":[{"value":"/ Adds two curve points together using a curve addition gate","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/variable_base_gate.rs","byte_start":85994,"byte_end":86056,"line_start":17,"line_end":17,"column_start":5,"column_end":67}},{"value":"/ Note that since the points are not fixed the generator is not a part of","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/variable_base_gate.rs","byte_start":86061,"byte_end":86136,"line_start":18,"line_end":18,"column_start":5,"column_end":80}},{"value":"/ the circuit description, however it is less efficient for a program","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/variable_base_gate.rs","byte_start":86141,"byte_end":86212,"line_start":19,"line_end":19,"column_start":5,"column_end":76}},{"value":"/ width of 4.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/variable_base_gate.rs","byte_start":86217,"byte_end":86232,"line_start":20,"line_end":20,"column_start":5,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":281},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"scalar_mul","qualname":"::constraint_system::ecc::scalar_mul","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/mod.rs","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":337}],"decl_id":null,"docs":" Gates related to scalar multiplication\n","sig":null,"attributes":[{"value":"/ Gates related to scalar multiplication","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":75397,"byte_end":75439,"line_start":9,"line_end":9,"column_start":1,"column_end":43}}]},{"kind":"Mod","id":{"krate":0,"index":282},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/fixed_base.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"fixed_base","qualname":"::constraint_system::ecc::scalar_mul::fixed_base","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/fixed_base.rs","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":297},{"krate":0,"index":300},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":307},{"krate":0,"index":310},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":317},{"krate":0,"index":320},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":327},{"krate":0,"index":330},{"krate":0,"index":332}],"decl_id":null,"docs":" Fixed base scalar multiplication gate\n","sig":null,"attributes":[{"value":"/ Fixed base scalar multiplication gate","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/mod.rs","byte_start":93704,"byte_end":93745,"line_start":7,"line_end":7,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/fixed_base.rs","byte_start":95497,"byte_end":95518,"line_start":45,"line_end":45,"column_start":12,"column_end":33},"name":"fixed_base_scalar_mul","qualname":"<StandardComposer<E, P>>::fixed_base_scalar_mul","value":"pub fn fixed_base_scalar_mul(&mut Self, Variable, GroupAffine<P>)\n-> Point<E, P>","parent":null,"children":[],"decl_id":null,"docs":" Adds an elliptic curve Scalar multiplication gate to the circuit\n description.","sig":null,"attributes":[{"value":"/ Adds an elliptic curve Scalar multiplication gate to the circuit","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/fixed_base.rs","byte_start":95131,"byte_end":95199,"line_start":37,"line_end":37,"column_start":5,"column_end":73}},{"value":"/ description.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/fixed_base.rs","byte_start":95204,"byte_end":95220,"line_start":38,"line_end":38,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/fixed_base.rs","byte_start":95225,"byte_end":95228,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/fixed_base.rs","byte_start":95233,"byte_end":95243,"line_start":40,"line_end":40,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/fixed_base.rs","byte_start":95248,"byte_end":95251,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ This function is optimized for fixed base ops **ONLY** and therefore,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/fixed_base.rs","byte_start":95256,"byte_end":95329,"line_start":42,"line_end":42,"column_start":5,"column_end":78}},{"value":"/ the **ONLY** input that should be passed to the function as a point is","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/fixed_base.rs","byte_start":95334,"byte_end":95408,"line_start":43,"line_end":43,"column_start":5,"column_end":79}},{"value":"/ the generator or basepoint of the curve over which we are operating.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/fixed_base.rs","byte_start":95413,"byte_end":95485,"line_start":44,"line_end":44,"column_start":5,"column_end":77}}]},{"kind":"Mod","id":{"krate":0,"index":337},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/variable_base.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"variable_base","qualname":"::constraint_system::ecc::scalar_mul::variable_base","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/variable_base.rs","parent":null,"children":[{"krate":0,"index":338},{"krate":0,"index":341},{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":345},{"krate":0,"index":348},{"krate":0,"index":351},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":358},{"krate":0,"index":361},{"krate":0,"index":364},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":371},{"krate":0,"index":374}],"decl_id":null,"docs":" Variable base scalar multiplication gate\n","sig":null,"attributes":[{"value":"/ Variable base scalar multiplication gate","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/mod.rs","byte_start":93766,"byte_end":93810,"line_start":9,"line_end":9,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/variable_base.rs","byte_start":112324,"byte_end":112348,"line_start":23,"line_end":23,"column_start":12,"column_end":36},"name":"variable_base_scalar_mul","qualname":"<StandardComposer<E, P>>::variable_base_scalar_mul","value":"pub fn variable_base_scalar_mul(&mut Self, Variable, Point<E, P>)\n-> Point<E, P>","parent":null,"children":[],"decl_id":null,"docs":" Adds a variable-base scalar multiplication to the circuit description.","sig":null,"attributes":[{"value":"/ Adds a variable-base scalar multiplication to the circuit description.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/variable_base.rs","byte_start":112017,"byte_end":112091,"line_start":17,"line_end":17,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/variable_base.rs","byte_start":112096,"byte_end":112099,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/variable_base.rs","byte_start":112104,"byte_end":112114,"line_start":19,"line_end":19,"column_start":5,"column_end":15}},{"value":"/ If you're planning to multiply always by the generator of the Scalar","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/variable_base.rs","byte_start":112119,"byte_end":112191,"line_start":20,"line_end":20,"column_start":5,"column_end":77}},{"value":"/ field, you should use [`StandardComposer::fixed_base_scalar_mul`]","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/variable_base.rs","byte_start":112196,"byte_end":112265,"line_start":21,"line_end":21,"column_start":5,"column_end":74}},{"value":"/ which is optimized for fixed_base ops.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/variable_base.rs","byte_start":112270,"byte_end":112312,"line_start":22,"line_end":22,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":1870},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":75773,"byte_end":75778,"line_start":21,"line_end":21,"column_start":12,"column_end":17},"name":"Point","qualname":"::constraint_system::ecc::Point","value":"Point {  }","parent":null,"children":[{"krate":0,"index":1873},{"krate":0,"index":1874},{"krate":0,"index":1875},{"krate":0,"index":1876}],"decl_id":null,"docs":" Represents a point of the embeded curve in the circuit\n","sig":null,"attributes":[{"value":"/ Represents a point of the embeded curve in the circuit","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":75686,"byte_end":75744,"line_start":19,"line_end":19,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":76323,"byte_end":76326,"line_start":43,"line_end":43,"column_start":12,"column_end":15},"name":"new","qualname":"<Point<E, P>>::new","value":"pub fn new(Variable, Variable) -> Point<E, P>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new point including the markers.\n","sig":null,"attributes":[{"value":"/ Creates a new point including the markers.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":76265,"byte_end":76311,"line_start":42,"line_end":42,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":76555,"byte_end":76563,"line_start":52,"line_end":52,"column_start":12,"column_end":20},"name":"identity","qualname":"<Point<E, P>>::identity","value":"pub fn identity(&mut StandardComposer<E, P>) -> Point<E, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an identity point\n","sig":null,"attributes":[{"value":"/ Returns an identity point","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":76514,"byte_end":76543,"line_start":51,"line_end":51,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":76810,"byte_end":76811,"line_start":57,"line_end":57,"column_start":12,"column_end":13},"name":"x","qualname":"<Point<E, P>>::x","value":"pub fn x(&Self) -> &Variable","parent":null,"children":[],"decl_id":null,"docs":" Return the X coordinate of the point\n","sig":null,"attributes":[{"value":"/ Return the X coordinate of the point","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":76758,"byte_end":76798,"line_start":56,"line_end":56,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":76913,"byte_end":76914,"line_start":62,"line_end":62,"column_start":12,"column_end":13},"name":"y","qualname":"<Point<E, P>>::y","value":"pub fn y(&Self) -> &Variable","parent":null,"children":[],"decl_id":null,"docs":" Return the Y coordinate of the point\n","sig":null,"attributes":[{"value":"/ Return the Y coordinate of the point","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":76861,"byte_end":76901,"line_start":61,"line_end":61,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":77177,"byte_end":77187,"line_start":72,"line_end":72,"column_start":12,"column_end":22},"name":"add_affine","qualname":"<StandardComposer<E, P>>::add_affine","value":"pub fn add_affine(&mut Self, GroupAffine<P>) -> Point<E, P>","parent":null,"children":[],"decl_id":null,"docs":" Converts an embeded curve point into a constraint system Point\n without constraining the values\n","sig":null,"attributes":[{"value":"/ Converts an embeded curve point into a constraint system Point","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":77059,"byte_end":77125,"line_start":70,"line_end":70,"column_start":5,"column_end":71}},{"value":"/ without constraining the values","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":77130,"byte_end":77165,"line_start":71,"line_end":71,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":77486,"byte_end":77503,"line_start":80,"line_end":80,"column_start":12,"column_end":29},"name":"add_public_affine","qualname":"<StandardComposer<E, P>>::add_public_affine","value":"pub fn add_public_affine(&mut Self, GroupAffine<P>) -> Point<E, P>","parent":null,"children":[],"decl_id":null,"docs":" Converts an embeded curve point into a constraint system Point\n without constraining the values\n","sig":null,"attributes":[{"value":"/ Converts an embeded curve point into a constraint system Point","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":77368,"byte_end":77434,"line_start":78,"line_end":78,"column_start":5,"column_end":71}},{"value":"/ without constraining the values","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":77439,"byte_end":77474,"line_start":79,"line_end":79,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":77900,"byte_end":77933,"line_start":90,"line_end":90,"column_start":12,"column_end":45},"name":"add_affine_to_circuit_description","qualname":"<StandardComposer<E, P>>::add_affine_to_circuit_description","value":"pub fn add_affine_to_circuit_description(&mut Self, GroupAffine<P>)\n-> Point<E, P>","parent":null,"children":[],"decl_id":null,"docs":" Add the provided affine point as a circuit description and return its\n constrained witness value\n","sig":null,"attributes":[{"value":"/ Add the provided affine point as a circuit description and return its","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":77781,"byte_end":77854,"line_start":88,"line_end":88,"column_start":5,"column_end":78}},{"value":"/ constrained witness value","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":77859,"byte_end":77888,"line_start":89,"line_end":89,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":78356,"byte_end":78381,"line_start":103,"line_end":103,"column_start":12,"column_end":37},"name":"assert_equal_public_point","qualname":"<StandardComposer<E, P>>::assert_equal_public_point","value":"pub fn assert_equal_public_point(&mut Self, Point<E, P>, GroupAffine<P>)","parent":null,"children":[],"decl_id":null,"docs":" Asserts that a [`Point`] in the circuit is equal to a known public\n point.\n","sig":null,"attributes":[{"value":"/ Asserts that a [`Point`] in the circuit is equal to a known public","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":78259,"byte_end":78329,"line_start":101,"line_end":101,"column_start":5,"column_end":75}},{"value":"/ point.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":78334,"byte_end":78344,"line_start":102,"line_end":102,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":428},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":78846,"byte_end":78864,"line_start":121,"line_end":121,"column_start":12,"column_end":30},"name":"assert_equal_point","qualname":"<StandardComposer<E, P>>::assert_equal_point","value":"pub fn assert_equal_point(&mut Self, Point<E, P>, Point<E, P>)","parent":null,"children":[],"decl_id":null,"docs":" Asserts that a point in the circuit is equal to another point in the\n circuit\n","sig":null,"attributes":[{"value":"/ Asserts that a point in the circuit is equal to another point in the","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":78746,"byte_end":78818,"line_start":119,"line_end":119,"column_start":5,"column_end":77}},{"value":"/ circuit","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":78823,"byte_end":78834,"line_start":120,"line_end":120,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":429},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":79456,"byte_end":79480,"line_start":139,"line_end":139,"column_start":12,"column_end":36},"name":"conditional_point_select","qualname":"<StandardComposer<E, P>>::conditional_point_select","value":"pub fn conditional_point_select(&mut Self, Point<E, P>, Point<E, P>, Variable)\n-> Point<E, P>","parent":null,"children":[],"decl_id":null,"docs":" Adds to the circuit description the conditional selection of the\n a point between two of them.\n bit == 1 => point_a,\n bit == 0 => point_b,","sig":null,"attributes":[{"value":"/ Adds to the circuit description the conditional selection of the","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":79062,"byte_end":79130,"line_start":130,"line_end":130,"column_start":5,"column_end":73}},{"value":"/ a point between two of them.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":79135,"byte_end":79167,"line_start":131,"line_end":131,"column_start":5,"column_end":37}},{"value":"/ bit == 1 => point_a,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":79172,"byte_end":79196,"line_start":132,"line_end":132,"column_start":5,"column_end":29}},{"value":"/ bit == 0 => point_b,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":79201,"byte_end":79225,"line_start":133,"line_end":133,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":79230,"byte_end":79233,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ # Note","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":79238,"byte_end":79248,"line_start":135,"line_end":135,"column_start":5,"column_end":15}},{"value":"/ The `bit` used as input which is a [`Variable`] should had previously","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":79253,"byte_end":79326,"line_start":136,"line_end":136,"column_start":5,"column_end":78}},{"value":"/ been constrained to be either 1 or 0 using a bool constrain. See:","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":79331,"byte_end":79400,"line_start":137,"line_end":137,"column_start":5,"column_end":74}},{"value":"/ [`StandardComposer::boolean_gate`].","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":79405,"byte_end":79444,"line_start":138,"line_end":138,"column_start":5,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":487},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/logic.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"logic","qualname":"::constraint_system::logic","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/logic.rs","parent":null,"children":[{"krate":0,"index":488},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":495},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":502},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":509},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":516},{"krate":0,"index":519}],"decl_id":null,"docs":" XOR and AND gates\n","sig":null,"attributes":[{"value":"/ XOR and AND gates","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/mod.rs","byte_start":23303,"byte_end":23324,"line_start":23,"line_end":23,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/logic.rs","byte_start":134406,"byte_end":134414,"line_start":315,"line_end":315,"column_start":12,"column_end":20},"name":"xor_gate","qualname":"<StandardComposer<E, P>>::xor_gate","value":"pub fn xor_gate(&mut Self, Variable, Variable, usize) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds a logical XOR gate that performs the XOR between two values for the\n specified first `num_bits` returning a [`Variable`] holding the result.","sig":null,"attributes":[{"value":"/ Adds a logical XOR gate that performs the XOR between two values for the","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/logic.rs","byte_start":134144,"byte_end":134220,"line_start":309,"line_end":309,"column_start":5,"column_end":81}},{"value":"/ specified first `num_bits` returning a [`Variable`] holding the result.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/logic.rs","byte_start":134225,"byte_end":134300,"line_start":310,"line_end":310,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/logic.rs","byte_start":134305,"byte_end":134308,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/logic.rs","byte_start":134313,"byte_end":134325,"line_start":312,"line_end":312,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/logic.rs","byte_start":134330,"byte_end":134333,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ If the `num_bits` specified in the fn params is odd.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/logic.rs","byte_start":134338,"byte_end":134394,"line_start":314,"line_end":314,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/logic.rs","byte_start":134857,"byte_end":134865,"line_start":331,"line_end":331,"column_start":12,"column_end":20},"name":"and_gate","qualname":"<StandardComposer<E, P>>::and_gate","value":"pub fn and_gate(&mut Self, Variable, Variable, usize) -> Variable","parent":null,"children":[],"decl_id":null,"docs":" Adds a logical AND gate that performs the bitwise AND between two values\n for the specified first `num_bits` returning a [`Variable`] holding the\n result.","sig":null,"attributes":[{"value":"/ Adds a logical AND gate that performs the bitwise AND between two values","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/logic.rs","byte_start":134579,"byte_end":134655,"line_start":324,"line_end":324,"column_start":5,"column_end":81}},{"value":"/ for the specified first `num_bits` returning a [`Variable`] holding the","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/logic.rs","byte_start":134660,"byte_end":134735,"line_start":325,"line_end":325,"column_start":5,"column_end":80}},{"value":"/ result.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/logic.rs","byte_start":134740,"byte_end":134751,"line_start":326,"line_end":326,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/logic.rs","byte_start":134756,"byte_end":134759,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/logic.rs","byte_start":134764,"byte_end":134776,"line_start":328,"line_end":328,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/logic.rs","byte_start":134781,"byte_end":134784,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ If the `num_bits` specified in the fn params is odd.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/logic.rs","byte_start":134789,"byte_end":134845,"line_start":330,"line_end":330,"column_start":5,"column_end":61}}]},{"kind":"Mod","id":{"krate":0,"index":527},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/range.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"range","qualname":"::constraint_system::range","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/range.rs","parent":null,"children":[{"krate":0,"index":528},{"krate":0,"index":531},{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":535},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":542},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":549},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":556},{"krate":0,"index":559}],"decl_id":null,"docs":" Range gate\n","sig":null,"attributes":[{"value":"/ Range gate","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/mod.rs","byte_start":23340,"byte_end":23354,"line_start":25,"line_end":25,"column_start":1,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/range.rs","byte_start":140504,"byte_end":140514,"line_start":25,"line_end":25,"column_start":12,"column_end":22},"name":"range_gate","qualname":"<StandardComposer<E, P>>::range_gate","value":"pub fn range_gate(&mut Self, Variable, usize)","parent":null,"children":[],"decl_id":null,"docs":" Adds a range-constraint gate that checks and constrains a\n [`Variable`] to be inside of the range \\[0,num_bits\\].","sig":null,"attributes":[{"value":"/ Adds a range-constraint gate that checks and constrains a","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/range.rs","byte_start":140112,"byte_end":140173,"line_start":16,"line_end":16,"column_start":5,"column_end":66}},{"value":"/ [`Variable`] to be inside of the range \\[0,num_bits\\].","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/range.rs","byte_start":140178,"byte_end":140236,"line_start":17,"line_end":17,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/range.rs","byte_start":140241,"byte_end":140244,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ This function adds `num_bits/4` gates to the circuit description in","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/range.rs","byte_start":140249,"byte_end":140320,"line_start":19,"line_end":19,"column_start":5,"column_end":76}},{"value":"/ order to add the range constraint.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/range.rs","byte_start":140325,"byte_end":140363,"line_start":20,"line_end":20,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/range.rs","byte_start":140368,"byte_end":140371,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/# Panics","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/range.rs","byte_start":140376,"byte_end":140387,"line_start":22,"line_end":22,"column_start":5,"column_end":16}},{"value":"/ This function will panic if the num_bits specified is not even, ie.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/range.rs","byte_start":140392,"byte_end":140463,"line_start":23,"line_end":23,"column_start":5,"column_end":76}},{"value":"/ `num_bits % 2 != 0`.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/range.rs","byte_start":140468,"byte_end":140492,"line_start":24,"line_end":24,"column_start":5,"column_end":29}}]},{"kind":"Mod","id":{"krate":0,"index":769},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","parent":null,"children":[{"krate":0,"index":1895},{"krate":0,"index":1931},{"krate":0,"index":770}],"decl_id":null,"docs":" A collection of all possible errors encountered in PLONK.\n","sig":null,"attributes":[{"value":"/ A collection of all possible errors encountered in PLONK.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":208002,"byte_end":208063,"line_start":7,"line_end":7,"column_start":1,"column_end":62}}]},{"kind":"StructVariant","id":{"krate":0,"index":1896},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":208280,"byte_end":208301,"line_start":15,"line_end":15,"column_start":5,"column_end":26},"name":"InvalidEvalDomainSize","qualname":"::error::Error::InvalidEvalDomainSize","value":"Error::InvalidEvalDomainSize { log_size_of_group, adacity }","parent":{"krate":0,"index":1895},"children":[],"decl_id":null,"docs":" This error occurs when an error triggers on any of the fft module\n functions.\n","sig":null,"attributes":[{"value":"/ This error occurs when an error triggers on any of the fft module","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":208187,"byte_end":208256,"line_start":13,"line_end":13,"column_start":5,"column_end":74}},{"value":"/ functions.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":208261,"byte_end":208275,"line_start":14,"line_end":14,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1899},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":208527,"byte_end":208549,"line_start":24,"line_end":24,"column_start":5,"column_end":27},"name":"ProofVerificationError","qualname":"::error::Error::ProofVerificationError","value":"Error::ProofVerificationError","parent":{"krate":0,"index":1895},"children":[],"decl_id":null,"docs":" This error occurs when a proof verification fails.\n","sig":null,"attributes":[{"value":"/ This error occurs when a proof verification fails.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":208468,"byte_end":208522,"line_start":23,"line_end":23,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1901},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":208655,"byte_end":208676,"line_start":27,"line_end":27,"column_start":5,"column_end":26},"name":"CircuitInputsNotFound","qualname":"::error::Error::CircuitInputsNotFound","value":"Error::CircuitInputsNotFound","parent":{"krate":0,"index":1895},"children":[],"decl_id":null,"docs":" This error occurs when the circuit is not provided with all of the\n required inputs.\n","sig":null,"attributes":[{"value":"/ This error occurs when the circuit is not provided with all of the","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":208555,"byte_end":208625,"line_start":25,"line_end":25,"column_start":5,"column_end":75}},{"value":"/ required inputs.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":208630,"byte_end":208650,"line_start":26,"line_end":26,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1903},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":208798,"byte_end":208822,"line_start":30,"line_end":30,"column_start":5,"column_end":29},"name":"UninitializedPIGenerator","qualname":"::error::Error::UninitializedPIGenerator","value":"Error::UninitializedPIGenerator","parent":{"krate":0,"index":1895},"children":[],"decl_id":null,"docs":" This error occurs when we want to verify a Proof but the pi_constructor\n attribute is uninitialized.\n","sig":null,"attributes":[{"value":"/ This error occurs when we want to verify a Proof but the pi_constructor","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":208682,"byte_end":208757,"line_start":28,"line_end":28,"column_start":5,"column_end":80}},{"value":"/ attribute is uninitialized.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":208762,"byte_end":208793,"line_start":29,"line_end":29,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1905},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":208868,"byte_end":208891,"line_start":32,"line_end":32,"column_start":5,"column_end":28},"name":"InvalidPublicInputBytes","qualname":"::error::Error::InvalidPublicInputBytes","value":"Error::InvalidPublicInputBytes","parent":{"krate":0,"index":1895},"children":[],"decl_id":null,"docs":" PublicInput serialization error\n","sig":null,"attributes":[{"value":"/ PublicInput serialization error","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":208828,"byte_end":208863,"line_start":31,"line_end":31,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1907},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":209036,"byte_end":209062,"line_start":35,"line_end":35,"column_start":5,"column_end":31},"name":"CircuitAlreadyPreprocessed","qualname":"::error::Error::CircuitAlreadyPreprocessed","value":"Error::CircuitAlreadyPreprocessed","parent":{"krate":0,"index":1895},"children":[],"decl_id":null,"docs":" This error occurs when the Prover structure already contains a\n preprocessed circuit inside, but you call preprocess again.\n","sig":null,"attributes":[{"value":"/ This error occurs when the Prover structure already contains a","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":208897,"byte_end":208963,"line_start":33,"line_end":33,"column_start":5,"column_end":71}},{"value":"/ preprocessed circuit inside, but you call preprocess again.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":208968,"byte_end":209031,"line_start":34,"line_end":34,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1909},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":209186,"byte_end":209203,"line_start":40,"line_end":40,"column_start":5,"column_end":22},"name":"MismatchedPolyLen","qualname":"::error::Error::MismatchedPolyLen","value":"Error::MismatchedPolyLen","parent":{"krate":0,"index":1895},"children":[],"decl_id":null,"docs":" This error occurs when an error triggers during the preprocessing\n stage.\n","sig":null,"attributes":[{"value":"/ This error occurs when an error triggers during the preprocessing","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":209097,"byte_end":209166,"line_start":38,"line_end":38,"column_start":5,"column_end":74}},{"value":"/ stage.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":209171,"byte_end":209181,"line_start":39,"line_end":39,"column_start":5,"column_end":15}}]},{"kind":"StructVariant","id":{"krate":0,"index":1911},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":209247,"byte_end":209254,"line_start":43,"line_end":43,"column_start":5,"column_end":12},"name":"PCError","qualname":"::error::Error::PCError","value":"Error::PCError { error }","parent":{"krate":0,"index":1895},"children":[],"decl_id":null,"docs":" Polynomial Commitment errors\n","sig":null,"attributes":[{"value":"/ Polynomial Commitment errors","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":209210,"byte_end":209242,"line_start":42,"line_end":42,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1913},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":209535,"byte_end":209547,"line_start":52,"line_end":52,"column_start":5,"column_end":17},"name":"DegreeIsZero","qualname":"::error::Error::DegreeIsZero","value":"Error::DegreeIsZero","parent":{"krate":0,"index":1895},"children":[],"decl_id":null,"docs":" This error occurs when the user tries to create PublicParameters\n and supplies the max degree as zero.\n","sig":null,"attributes":[{"value":"/ This error occurs when the user tries to create PublicParameters","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":209417,"byte_end":209485,"line_start":50,"line_end":50,"column_start":5,"column_end":73}},{"value":"/ and supplies the max degree as zero.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":209490,"byte_end":209530,"line_start":51,"line_end":51,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1915},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":209684,"byte_end":209707,"line_start":55,"line_end":55,"column_start":5,"column_end":28},"name":"TruncatedDegreeTooLarge","qualname":"::error::Error::TruncatedDegreeTooLarge","value":"Error::TruncatedDegreeTooLarge","parent":{"krate":0,"index":1895},"children":[],"decl_id":null,"docs":" This error occurs when the user tries to trim PublicParameters\n to a degree that is larger than the maximum degree.\n","sig":null,"attributes":[{"value":"/ This error occurs when the user tries to trim PublicParameters","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":209553,"byte_end":209619,"line_start":53,"line_end":53,"column_start":5,"column_end":71}},{"value":"/ to a degree that is larger than the maximum degree.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":209624,"byte_end":209679,"line_start":54,"line_end":54,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1917},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":209823,"byte_end":209844,"line_start":58,"line_end":58,"column_start":5,"column_end":26},"name":"TruncatedDegreeIsZero","qualname":"::error::Error::TruncatedDegreeIsZero","value":"Error::TruncatedDegreeIsZero","parent":{"krate":0,"index":1895},"children":[],"decl_id":null,"docs":" This error occurs when the user tries to trim PublicParameters\n down to a degree that is zero.\n","sig":null,"attributes":[{"value":"/ This error occurs when the user tries to trim PublicParameters","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":209713,"byte_end":209779,"line_start":56,"line_end":56,"column_start":5,"column_end":71}},{"value":"/ down to a degree that is zero.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":209784,"byte_end":209818,"line_start":57,"line_end":57,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1919},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":210001,"byte_end":210025,"line_start":61,"line_end":61,"column_start":5,"column_end":29},"name":"PolynomialDegreeTooLarge","qualname":"::error::Error::PolynomialDegreeTooLarge","value":"Error::PolynomialDegreeTooLarge","parent":{"krate":0,"index":1895},"children":[],"decl_id":null,"docs":" This error occurs when the user tries to commit to a polynomial whose\n degree is larger than the supported degree for that proving key.\n","sig":null,"attributes":[{"value":"/ This error occurs when the user tries to commit to a polynomial whose","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":209850,"byte_end":209923,"line_start":59,"line_end":59,"column_start":5,"column_end":78}},{"value":"/ degree is larger than the supported degree for that proving key.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":209928,"byte_end":209996,"line_start":60,"line_end":60,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1921},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":210133,"byte_end":210155,"line_start":64,"line_end":64,"column_start":5,"column_end":27},"name":"PolynomialDegreeIsZero","qualname":"::error::Error::PolynomialDegreeIsZero","value":"Error::PolynomialDegreeIsZero","parent":{"krate":0,"index":1895},"children":[],"decl_id":null,"docs":" This error occurs when the user tries to commit to a polynomial whose\n degree is zero.\n","sig":null,"attributes":[{"value":"/ This error occurs when the user tries to commit to a polynomial whose","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":210031,"byte_end":210104,"line_start":62,"line_end":62,"column_start":5,"column_end":78}},{"value":"/ degree is zero.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":210109,"byte_end":210128,"line_start":63,"line_end":63,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1923},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":210262,"byte_end":210281,"line_start":67,"line_end":67,"column_start":5,"column_end":24},"name":"PairingCheckFailure","qualname":"::error::Error::PairingCheckFailure","value":"Error::PairingCheckFailure","parent":{"krate":0,"index":1895},"children":[],"decl_id":null,"docs":" This error occurs when the pairing check fails at being equal to the\n Identity point.\n","sig":null,"attributes":[{"value":"/ This error occurs when the pairing check fails at being equal to the","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":210161,"byte_end":210233,"line_start":65,"line_end":65,"column_start":5,"column_end":77}},{"value":"/ Identity point.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":210238,"byte_end":210257,"line_start":66,"line_end":66,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1925},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":210401,"byte_end":210415,"line_start":71,"line_end":71,"column_start":5,"column_end":19},"name":"NotEnoughBytes","qualname":"::error::Error::NotEnoughBytes","value":"Error::NotEnoughBytes","parent":{"krate":0,"index":1895},"children":[],"decl_id":null,"docs":" This error occurs when there are not enough bytes to read out of a\n slice during deserialization.\n","sig":null,"attributes":[{"value":"/ This error occurs when there are not enough bytes to read out of a","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":210288,"byte_end":210358,"line_start":69,"line_end":69,"column_start":5,"column_end":75}},{"value":"/ slice during deserialization.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":210363,"byte_end":210396,"line_start":70,"line_end":70,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1927},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":210500,"byte_end":210514,"line_start":73,"line_end":73,"column_start":5,"column_end":19},"name":"PointMalformed","qualname":"::error::Error::PointMalformed","value":"Error::PointMalformed","parent":{"krate":0,"index":1895},"children":[],"decl_id":null,"docs":" This error occurs when a malformed point is decoded from a byte array.\n","sig":null,"attributes":[{"value":"/ This error occurs when a malformed point is decoded from a byte array.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":210421,"byte_end":210495,"line_start":72,"line_end":72,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1929},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":210608,"byte_end":210623,"line_start":76,"line_end":76,"column_start":5,"column_end":20},"name":"ScalarMalformed","qualname":"::error::Error::ScalarMalformed","value":"Error::ScalarMalformed","parent":{"krate":0,"index":1895},"children":[],"decl_id":null,"docs":" This error occurs when a malformed scalar is decoded from a byte\n array.\n","sig":null,"attributes":[{"value":"/ This error occurs when a malformed scalar is decoded from a byte","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":210520,"byte_end":210588,"line_start":74,"line_end":74,"column_start":5,"column_end":73}},{"value":"/ array.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":210593,"byte_end":210603,"line_start":75,"line_end":75,"column_start":5,"column_end":15}}]},{"kind":"Enum","id":{"krate":0,"index":1895},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":208157,"byte_end":208162,"line_start":11,"line_end":11,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"pub enum Error {\n    InvalidEvalDomainSize {\n        log_size_of_group: u32,\n        adacity: u32,\n    },\n    ProofVerificationError,\n    CircuitInputsNotFound,\n    UninitializedPIGenerator,\n    InvalidPublicInputBytes,\n    CircuitAlreadyPreprocessed,\n    MismatchedPolyLen,\n    PCError {\n        error: ark_poly_commit::error::Error,\n    },\n    DegreeIsZero,\n    TruncatedDegreeTooLarge,\n    TruncatedDegreeIsZero,\n    PolynomialDegreeTooLarge,\n    PolynomialDegreeIsZero,\n    PairingCheckFailure,\n    NotEnoughBytes,\n    PointMalformed,\n    ScalarMalformed,\n}","parent":null,"children":[{"krate":0,"index":1896},{"krate":0,"index":1899},{"krate":0,"index":1901},{"krate":0,"index":1903},{"krate":0,"index":1905},{"krate":0,"index":1907},{"krate":0,"index":1909},{"krate":0,"index":1911},{"krate":0,"index":1913},{"krate":0,"index":1915},{"krate":0,"index":1917},{"krate":0,"index":1919},{"krate":0,"index":1921},{"krate":0,"index":1923},{"krate":0,"index":1925},{"krate":0,"index":1927},{"krate":0,"index":1929}],"decl_id":null,"docs":" Defines all possible errors that can be encountered in PLONK.\n","sig":null,"attributes":[{"value":"/ Defines all possible errors that can be encountered in PLONK.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":208065,"byte_end":208130,"line_start":9,"line_end":9,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":772},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/prelude.rs","parent":null,"children":[{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":775},{"krate":0,"index":778},{"krate":0,"index":781},{"krate":0,"index":784},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":791},{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":801},{"krate":0,"index":804},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":811},{"krate":0,"index":814}],"decl_id":null,"docs":" Collection of functions needed to use plonk library.","sig":null,"attributes":[{"value":"/ Collection of functions needed to use plonk library.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/prelude.rs","byte_start":213426,"byte_end":213482,"line_start":7,"line_end":7,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/prelude.rs","byte_start":213483,"byte_end":213486,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Use this as the only import that you need to interact","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/prelude.rs","byte_start":213487,"byte_end":213544,"line_start":9,"line_end":9,"column_start":1,"column_end":58}},{"value":"/ with the principal data structures of the plonk library.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/prelude.rs","byte_start":213545,"byte_end":213605,"line_start":10,"line_end":10,"column_start":1,"column_end":61}}]},{"kind":"Mod","id":{"krate":0,"index":817},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"proof_system","qualname":"::proof_system","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/mod.rs","parent":null,"children":[{"krate":0,"index":818},{"krate":0,"index":901},{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1046},{"krate":0,"index":1096},{"krate":0,"index":1099},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1215},{"krate":0,"index":1589},{"krate":0,"index":1592},{"krate":0,"index":1595}],"decl_id":null,"docs":" Proving system\n","sig":null,"attributes":[{"value":"/ Proving system","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/mod.rs","byte_start":214195,"byte_end":214213,"line_start":7,"line_end":7,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/preprocess.rs","byte_start":218429,"byte_end":218446,"line_start":107,"line_end":107,"column_start":12,"column_end":29},"name":"preprocess_prover","qualname":"<StandardComposer<E, P>>::preprocess_prover","value":"pub fn preprocess_prover(&mut Self, &Powers<, E>, &mut TranscriptWrapper<E>)\n-> Result<ProverKey<E::Fr, P>, Error>","parent":null,"children":[],"decl_id":null,"docs":" These are the parts of preprocessing that the prover must compute\n Although the prover does not need the verification key, he must compute\n the commitments in order to seed the transcript, allowing both the\n prover and verifier to have the same view\n","sig":null,"attributes":[{"value":"/ These are the parts of preprocessing that the prover must compute","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/preprocess.rs","byte_start":218143,"byte_end":218212,"line_start":103,"line_end":103,"column_start":5,"column_end":74}},{"value":"/ Although the prover does not need the verification key, he must compute","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/preprocess.rs","byte_start":218217,"byte_end":218292,"line_start":104,"line_end":104,"column_start":5,"column_end":80}},{"value":"/ the commitments in order to seed the transcript, allowing both the","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/preprocess.rs","byte_start":218297,"byte_end":218367,"line_start":105,"line_end":105,"column_start":5,"column_end":75}},{"value":"/ prover and verifier to have the same view","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/preprocess.rs","byte_start":218372,"byte_end":218417,"line_start":106,"line_end":106,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/preprocess.rs","byte_start":222611,"byte_end":222630,"line_start":213,"line_end":213,"column_start":12,"column_end":31},"name":"preprocess_verifier","qualname":"<StandardComposer<E, P>>::preprocess_verifier","value":"pub fn preprocess_verifier(&mut Self, &Powers<, E>, &mut TranscriptWrapper<E>)\n-> Result<widget::VerifierKey<E, P>, Error>","parent":null,"children":[],"decl_id":null,"docs":" The verifier only requires the commitments in order to verify a\n [`Proof`](super::Proof) We can therefore speed up preprocessing for the\n verifier by skipping the FFTs needed to compute the 4n evaluations.\n","sig":null,"attributes":[{"value":"/ The verifier only requires the commitments in order to verify a","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/preprocess.rs","byte_start":222376,"byte_end":222443,"line_start":210,"line_end":210,"column_start":5,"column_end":72}},{"value":"/ [`Proof`](super::Proof) We can therefore speed up preprocessing for the","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/preprocess.rs","byte_start":222448,"byte_end":222523,"line_start":211,"line_end":211,"column_start":5,"column_end":80}},{"value":"/ verifier by skipping the FFTs needed to compute the 4n evaluations.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/preprocess.rs","byte_start":222528,"byte_end":222599,"line_start":212,"line_end":212,"column_start":5,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":901},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prover","qualname":"::proof_system::prover","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","parent":null,"children":[{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":904},{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":910},{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":917},{"krate":0,"index":920},{"krate":0,"index":923},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":930},{"krate":0,"index":933},{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":940},{"krate":0,"index":943},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":950},{"krate":0,"index":953},{"krate":0,"index":956},{"krate":0,"index":959},{"krate":0,"index":960},{"krate":0,"index":963},{"krate":0,"index":966},{"krate":0,"index":967},{"krate":0,"index":969},{"krate":0,"index":972},{"krate":0,"index":978},{"krate":0,"index":983},{"krate":0,"index":987}],"decl_id":null,"docs":" Represents a PLONK Prover\n","sig":null,"attributes":[{"value":"/ Represents a PLONK Prover","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/mod.rs","byte_start":214230,"byte_end":214259,"line_start":9,"line_end":9,"column_start":1,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":972},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":233252,"byte_end":233258,"line_start":29,"line_end":29,"column_start":12,"column_end":18},"name":"Prover","qualname":"::proof_system::prover::Prover","value":"Prover { prover_key, preprocessed_transcript }","parent":null,"children":[{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977}],"decl_id":null,"docs":" Abstraction structure designed to construct a circuit and generate\n [`Proof`]s for it.\n","sig":null,"attributes":[{"value":"/ Abstraction structure designed to construct a circuit and generate","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":233107,"byte_end":233177,"line_start":26,"line_end":26,"column_start":1,"column_end":71}},{"value":"/ [`Proof`]s for it.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":233178,"byte_end":233200,"line_start":27,"line_end":27,"column_start":1,"column_end":23}},{"value":"allow(missing_debug_implementations)","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":233201,"byte_end":233240,"line_start":28,"line_end":28,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":975},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":233408,"byte_end":233418,"line_start":31,"line_end":31,"column_start":9,"column_end":19},"name":"prover_key","qualname":"::proof_system::prover::Prover::prover_key","value":"std::option::Option<proof_system::widget::ProverKey<<E as ark_ec::PairingEngine>::Fr, P>>","parent":{"krate":0,"index":972},"children":[],"decl_id":null,"docs":" ProverKey which is used to create proofs about a specific PLONK circuit\n","sig":null,"attributes":[{"value":"/ ProverKey which is used to create proofs about a specific PLONK circuit","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":233324,"byte_end":233399,"line_start":30,"line_end":30,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":977},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":233619,"byte_end":233642,"line_start":36,"line_end":36,"column_start":9,"column_end":32},"name":"preprocessed_transcript","qualname":"::proof_system::prover::Prover::preprocessed_transcript","value":"transcript::TranscriptWrapper<E>","parent":{"krate":0,"index":972},"children":[],"decl_id":null,"docs":" Store the messages exchanged during the preprocessing stage\n This is copied each time, we make a proof\n","sig":null,"attributes":[{"value":"/ Store the messages exchanged during the preprocessing stage","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":233497,"byte_end":233560,"line_start":34,"line_end":34,"column_start":5,"column_end":68}},{"value":"/ This is copied each time, we make a proof","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":233565,"byte_end":233610,"line_start":35,"line_end":35,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":981},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":233830,"byte_end":233836,"line_start":41,"line_end":41,"column_start":12,"column_end":18},"name":"mut_cs","qualname":"<Prover<E, P>>::mut_cs","value":"pub fn mut_cs(&mut Self) -> &mut StandardComposer<E, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable copy of the underlying [`StandardComposer`].\n","sig":null,"attributes":[{"value":"/ Returns a mutable copy of the underlying [`StandardComposer`].","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":233752,"byte_end":233818,"line_start":40,"line_end":40,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":982},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":233975,"byte_end":233985,"line_start":46,"line_end":46,"column_start":12,"column_end":22},"name":"preprocess","qualname":"<Prover<E, P>>::preprocess","value":"pub fn preprocess(&mut Self, &Powers<, E>) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Preprocesses the underlying constraint system.\n","sig":null,"attributes":[{"value":"/ Preprocesses the underlying constraint system.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":233913,"byte_end":233963,"line_start":45,"line_end":45,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":990},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":234630,"byte_end":234633,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"new","qualname":"<Prover<E, P>>::new","value":"pub fn new(&'static [u8]) -> Prover<E, P>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Prover` instance.\n","sig":null,"attributes":[{"value":"/ Creates a new `Prover` instance.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":234582,"byte_end":234618,"line_start":67,"line_end":67,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":991},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":234921,"byte_end":234939,"line_start":77,"line_end":77,"column_start":12,"column_end":30},"name":"with_expected_size","qualname":"<Prover<E, P>>::with_expected_size","value":"pub fn with_expected_size(&'static [u8], usize) -> Prover<E, P>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Prover` object with some expected size.\n","sig":null,"attributes":[{"value":"/ Creates a new `Prover` object with some expected size.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":234851,"byte_end":234909,"line_start":76,"line_end":76,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":992},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":235320,"byte_end":235332,"line_start":90,"line_end":90,"column_start":12,"column_end":24},"name":"circuit_size","qualname":"<Prover<E, P>>::circuit_size","value":"pub fn circuit_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of gates in the circuit thet the `Prover` actually\n stores inside.\n","sig":null,"attributes":[{"value":"/ Returns the number of gates in the circuit thet the `Prover` actually","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":235212,"byte_end":235285,"line_start":88,"line_end":88,"column_start":5,"column_end":78}},{"value":"/ stores inside.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":235290,"byte_end":235308,"line_start":89,"line_end":89,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":237246,"byte_end":237259,"line_start":144,"line_end":144,"column_start":12,"column_end":25},"name":"clear_witness","qualname":"<Prover<E, P>>::clear_witness","value":"pub fn clear_witness(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Resets the witnesses in the prover object.\n This function is used when the user wants to make multiple proofs with\n the same circuit.\n","sig":null,"attributes":[{"value":"/ Resets the witnesses in the prover object.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":237083,"byte_end":237129,"line_start":141,"line_end":141,"column_start":5,"column_end":51}},{"value":"/ This function is used when the user wants to make multiple proofs with","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":237134,"byte_end":237208,"line_start":142,"line_end":142,"column_start":5,"column_end":79}},{"value":"/ the same circuit.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":237213,"byte_end":237234,"line_start":143,"line_end":143,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":237518,"byte_end":237523,"line_start":151,"line_end":151,"column_start":12,"column_end":17},"name":"clear","qualname":"<Prover<E, P>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears all data in the `Prover` instance.\n This function is used when the user wants to use the same `Prover` to\n make a [`Proof`] regarding a different circuit.\n","sig":null,"attributes":[{"value":"/ Clears all data in the `Prover` instance.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":237327,"byte_end":237372,"line_start":148,"line_end":148,"column_start":5,"column_end":50}},{"value":"/ This function is used when the user wants to use the same `Prover` to","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":237377,"byte_end":237450,"line_start":149,"line_end":149,"column_start":5,"column_end":78}},{"value":"/ make a [`Proof`] regarding a different circuit.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":237455,"byte_end":237506,"line_start":150,"line_end":150,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":999},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":237936,"byte_end":237950,"line_start":162,"line_end":162,"column_start":12,"column_end":26},"name":"key_transcript","qualname":"<Prover<E, P>>::key_transcript","value":"pub fn key_transcript(&mut Self, &'static [u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Keys the [`Transcript`] with additional seed information\n Wrapper around [`Transcript::append_message`].","sig":null,"attributes":[{"value":"/ Keys the [`Transcript`] with additional seed information","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":237683,"byte_end":237743,"line_start":157,"line_end":157,"column_start":5,"column_end":65}},{"value":"/ Wrapper around [`Transcript::append_message`].","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":237748,"byte_end":237798,"line_start":158,"line_end":158,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":237803,"byte_end":237806,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ [`Transcript`]: merlin::Transcript","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":237811,"byte_end":237849,"line_start":160,"line_end":160,"column_start":5,"column_end":43}},{"value":"/ [`Transcript::append_message`]: merlin::Transcript::append_message","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":237854,"byte_end":237924,"line_start":161,"line_end":161,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1002},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":239396,"byte_end":239419,"line_start":198,"line_end":198,"column_start":12,"column_end":35},"name":"prove_with_preprocessed","qualname":"<Prover<E, P>>::prove_with_preprocessed","value":"pub fn prove_with_preprocessed(&Self, &Powers<, E>, &ProverKey<E::Fr, P>)\n-> Result<Proof<E, P>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Creates a [`Proof]` that demonstrates that a circuit is satisfied.\n # Note\n If you intend to construct multiple [`Proof`]s with different witnesses,\n after calling this method, the user should then call\n [`Prover::clear_witness`].\n This is automatically done when [`Prover::prove`] is called.\n","sig":null,"attributes":[{"value":"/ Creates a [`Proof]` that demonstrates that a circuit is satisfied.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":239053,"byte_end":239123,"line_start":192,"line_end":192,"column_start":5,"column_end":75}},{"value":"/ # Note","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":239128,"byte_end":239138,"line_start":193,"line_end":193,"column_start":5,"column_end":15}},{"value":"/ If you intend to construct multiple [`Proof`]s with different witnesses,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":239143,"byte_end":239219,"line_start":194,"line_end":194,"column_start":5,"column_end":81}},{"value":"/ after calling this method, the user should then call","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":239224,"byte_end":239280,"line_start":195,"line_end":195,"column_start":5,"column_end":61}},{"value":"/ [`Prover::clear_witness`].","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":239285,"byte_end":239315,"line_start":196,"line_end":196,"column_start":5,"column_end":35}},{"value":"/ This is automatically done when [`Prover::prove`] is called.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":239320,"byte_end":239384,"line_start":197,"line_end":197,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1003},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":250145,"byte_end":250150,"line_start":481,"line_end":481,"column_start":12,"column_end":17},"name":"prove","qualname":"<Prover<E, P>>::prove","value":"pub fn prove(&mut Self, &Powers<, E>) -> Result<Proof<E, P>, Error>","parent":null,"children":[],"decl_id":null,"docs":" Proves a circuit is satisfied, then clears the witness variables\n If the circuit is not pre-processed, then the preprocessed circuit will\n also be computed.\n","sig":null,"attributes":[{"value":"/ Proves a circuit is satisfied, then clears the witness variables","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":249959,"byte_end":250027,"line_start":478,"line_end":478,"column_start":5,"column_end":73}},{"value":"/ If the circuit is not pre-processed, then the preprocessed circuit will","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":250032,"byte_end":250107,"line_start":479,"line_end":479,"column_start":5,"column_end":80}},{"value":"/ also be computed.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":250112,"byte_end":250133,"line_start":480,"line_end":480,"column_start":5,"column_end":26}}]},{"kind":"Mod","id":{"krate":0,"index":1046},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"verifier","qualname":"::proof_system::verifier","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","parent":null,"children":[{"krate":0,"index":1047},{"krate":0,"index":1050},{"krate":0,"index":1053},{"krate":0,"index":1056},{"krate":0,"index":1059},{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1066},{"krate":0,"index":1069},{"krate":0,"index":1070},{"krate":0,"index":1073},{"krate":0,"index":1076},{"krate":0,"index":1082},{"krate":0,"index":1086}],"decl_id":null,"docs":" Represents a PLONK Verifier\n","sig":null,"attributes":[{"value":"/ Represents a PLONK Verifier","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/mod.rs","byte_start":214324,"byte_end":214355,"line_start":13,"line_end":13,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":1076},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":258386,"byte_end":258394,"line_start":17,"line_end":17,"column_start":12,"column_end":20},"name":"Verifier","qualname":"::proof_system::verifier::Verifier","value":"Verifier { verifier_key, preprocessed_transcript }","parent":null,"children":[{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1081}],"decl_id":null,"docs":" Abstraction structure designed verify [`Proof`]s.\n","sig":null,"attributes":[{"value":"/ Abstraction structure designed verify [`Proof`]s.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":258281,"byte_end":258334,"line_start":15,"line_end":15,"column_start":1,"column_end":54}},{"value":"allow(missing_debug_implementations)","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":258335,"byte_end":258374,"line_start":16,"line_end":16,"column_start":1,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1079},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":258537,"byte_end":258549,"line_start":19,"line_end":19,"column_start":9,"column_end":21},"name":"verifier_key","qualname":"::proof_system::verifier::Verifier::verifier_key","value":"std::option::Option<proof_system::widget::VerifierKey<E, P>>","parent":{"krate":0,"index":1076},"children":[],"decl_id":null,"docs":" VerificationKey which is used to verify a specific PLONK circuit\n","sig":null,"attributes":[{"value":"/ VerificationKey which is used to verify a specific PLONK circuit","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":258460,"byte_end":258528,"line_start":18,"line_end":18,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":1081},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":258985,"byte_end":259008,"line_start":27,"line_end":27,"column_start":9,"column_end":32},"name":"preprocessed_transcript","qualname":"::proof_system::verifier::Verifier::preprocessed_transcript","value":"transcript::TranscriptWrapper<E>","parent":{"krate":0,"index":1076},"children":[],"decl_id":null,"docs":" Store the messages exchanged during the preprocessing stage\n This is copied each time, we make a proof, so that we can use the same\n verifier to Verify multiple proofs from the same circuit. If this\n is not copied, then the verification procedure will modify\n the transcript, making it unusable for future proofs.\n","sig":null,"attributes":[{"value":"/ Store the messages exchanged during the preprocessing stage","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":258631,"byte_end":258694,"line_start":22,"line_end":22,"column_start":5,"column_end":68}},{"value":"/ This is copied each time, we make a proof, so that we can use the same","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":258699,"byte_end":258773,"line_start":23,"line_end":23,"column_start":5,"column_end":79}},{"value":"/ verifier to Verify multiple proofs from the same circuit. If this","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":258778,"byte_end":258847,"line_start":24,"line_end":24,"column_start":5,"column_end":74}},{"value":"/ is not copied, then the verification procedure will modify","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":258852,"byte_end":258914,"line_start":25,"line_end":25,"column_start":5,"column_end":67}},{"value":"/ the transcript, making it unusable for future proofs.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":258919,"byte_end":258976,"line_start":26,"line_end":26,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1089},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":259345,"byte_end":259348,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"new","qualname":"<Verifier<E, P>>::new","value":"pub fn new(&'static [u8]) -> Verifier<E, P>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Verifier` instance.\n","sig":null,"attributes":[{"value":"/ Creates a new `Verifier` instance.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":259295,"byte_end":259333,"line_start":39,"line_end":39,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":259646,"byte_end":259664,"line_start":49,"line_end":49,"column_start":12,"column_end":30},"name":"with_expected_size","qualname":"<Verifier<E, P>>::with_expected_size","value":"pub fn with_expected_size(&'static [u8], usize) -> Verifier<E, P>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Verifier` instance with some expected size.\n","sig":null,"attributes":[{"value":"/ Creates a new `Verifier` instance with some expected size.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":259572,"byte_end":259634,"line_start":48,"line_end":48,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1091},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":260002,"byte_end":260014,"line_start":61,"line_end":61,"column_start":12,"column_end":24},"name":"circuit_size","qualname":"<Verifier<E, P>>::circuit_size","value":"pub fn circuit_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of gates in the circuit.\n","sig":null,"attributes":[{"value":"/ Returns the number of gates in the circuit.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":259943,"byte_end":259990,"line_start":60,"line_end":60,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":260141,"byte_end":260147,"line_start":66,"line_end":66,"column_start":12,"column_end":18},"name":"mut_cs","qualname":"<Verifier<E, P>>::mut_cs","value":"pub fn mut_cs(&mut Self) -> &mut StandardComposer<E, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable copy of the underlying composer.\n","sig":null,"attributes":[{"value":"/ Returns a mutable copy of the underlying composer.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":260075,"byte_end":260129,"line_start":65,"line_end":65,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":260421,"byte_end":260431,"line_start":73,"line_end":73,"column_start":12,"column_end":22},"name":"preprocess","qualname":"<Verifier<E, P>>::preprocess","value":"pub fn preprocess(&mut Self, &Powers<, E>) -> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Preprocess a circuit to obtain a [`VerifierKey`] and a circuit\n descriptor so that the `Verifier` instance can verify [`Proof`]s\n for this circuit descriptor instance.\n","sig":null,"attributes":[{"value":"/ Preprocess a circuit to obtain a [`VerifierKey`] and a circuit","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":260224,"byte_end":260290,"line_start":70,"line_end":70,"column_start":5,"column_end":71}},{"value":"/ descriptor so that the `Verifier` instance can verify [`Proof`]s","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":260295,"byte_end":260363,"line_start":71,"line_end":71,"column_start":5,"column_end":73}},{"value":"/ for this circuit descriptor instance.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":260368,"byte_end":260409,"line_start":72,"line_end":72,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":260937,"byte_end":260951,"line_start":88,"line_end":88,"column_start":12,"column_end":26},"name":"key_transcript","qualname":"<Verifier<E, P>>::key_transcript","value":"pub fn key_transcript(&mut Self, &'static [u8], &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Keys the [`Transcript`] with additional seed information\n Wrapper around [`Transcript::append_message`].","sig":null,"attributes":[{"value":"/ Keys the [`Transcript`] with additional seed information","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":260684,"byte_end":260744,"line_start":83,"line_end":83,"column_start":5,"column_end":65}},{"value":"/ Wrapper around [`Transcript::append_message`].","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":260749,"byte_end":260799,"line_start":84,"line_end":84,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":260804,"byte_end":260807,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ [`Transcript`]: merlin::Transcript","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":260812,"byte_end":260850,"line_start":86,"line_end":86,"column_start":5,"column_end":43}},{"value":"/ [`Transcript::append_message`]: merlin::Transcript::append_message","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":260855,"byte_end":260925,"line_start":87,"line_end":87,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1095},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":261157,"byte_end":261163,"line_start":95,"line_end":95,"column_start":12,"column_end":18},"name":"verify","qualname":"<Verifier<E, P>>::verify","value":"pub fn verify(&Self, &Proof<E, P>, &VerifierKey<E>, &[E::Fr])\n-> Result<(), Error>","parent":null,"children":[],"decl_id":null,"docs":" Verifies a [`Proof`].\n","sig":null,"attributes":[{"value":"/ Verifies a [`Proof`].","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":261120,"byte_end":261145,"line_start":94,"line_end":94,"column_start":5,"column_end":30}}]},{"kind":"Mod","id":{"krate":0,"index":1103},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/proof.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"proof","qualname":"::proof_system::proof","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/proof.rs","parent":null,"children":[{"krate":0,"index":1104},{"krate":0,"index":1107},{"krate":0,"index":1110},{"krate":0,"index":1113},{"krate":0,"index":1116},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1123},{"krate":0,"index":1126},{"krate":0,"index":1127},{"krate":0,"index":1128},{"krate":0,"index":1130},{"krate":0,"index":1133},{"krate":0,"index":1136},{"krate":0,"index":1137},{"krate":0,"index":1140},{"krate":0,"index":1143},{"krate":0,"index":1144},{"krate":0,"index":1147},{"krate":0,"index":1150},{"krate":0,"index":1153},{"krate":0,"index":1156},{"krate":0,"index":1157},{"krate":0,"index":1160},{"krate":0,"index":1163},{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":1170},{"krate":0,"index":1173},{"krate":0,"index":1176},{"krate":0,"index":1177},{"krate":0,"index":1178},{"krate":0,"index":1180},{"krate":0,"index":1181},{"krate":0,"index":1183},{"krate":0,"index":1186},{"krate":0,"index":1189},{"krate":0,"index":1192},{"krate":0,"index":1193},{"krate":0,"index":1195},{"krate":0,"index":1196},{"krate":0,"index":1933},{"krate":0,"index":1949},{"krate":0,"index":1958},{"krate":0,"index":1969},{"krate":0,"index":1973},{"krate":0,"index":1977},{"krate":0,"index":1981},{"krate":0,"index":1984},{"krate":0,"index":1988},{"krate":0,"index":1991},{"krate":0,"index":1198},{"krate":0,"index":1208},{"krate":0,"index":1210}],"decl_id":null,"docs":" Represents a PLONK Proof\n A Proof stores the commitments to all of the elements that\n are needed to univocally identify a prove of some statement.","sig":null,"attributes":[{"value":"/ Represents a PLONK Proof","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/mod.rs","byte_start":214445,"byte_end":214473,"line_start":18,"line_end":18,"column_start":1,"column_end":29}},{"value":"/ A Proof stores the commitments to all of the elements that","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/proof.rs","byte_start":261880,"byte_end":261942,"line_start":7,"line_end":7,"column_start":1,"column_end":63}},{"value":"/ are needed to univocally identify a prove of some statement.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/proof.rs","byte_start":261943,"byte_end":262007,"line_start":8,"line_end":8,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/proof.rs","byte_start":262008,"byte_end":262011,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This module contains the implementation of the `StandardComposer`s","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/proof.rs","byte_start":262012,"byte_end":262082,"line_start":10,"line_end":10,"column_start":1,"column_end":71}},{"value":"/ `Proof` structure and it's methods.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/proof.rs","byte_start":262083,"byte_end":262122,"line_start":11,"line_end":11,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":1933},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/proof.rs","byte_start":263570,"byte_end":263575,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"Proof","qualname":"::proof_system::proof::Proof","value":"Proof {  }","parent":null,"children":[{"krate":0,"index":1936},{"krate":0,"index":1937},{"krate":0,"index":1938},{"krate":0,"index":1939},{"krate":0,"index":1940},{"krate":0,"index":1941},{"krate":0,"index":1942},{"krate":0,"index":1943},{"krate":0,"index":1944},{"krate":0,"index":1945},{"krate":0,"index":1946},{"krate":0,"index":1947},{"krate":0,"index":1948}],"decl_id":null,"docs":" A Proof is a composition of `Commitment`s to the Witness, Permutation,\n Quotient, Shifted and Opening polynomials as well as the\n `ProofEvaluations`.","sig":null,"attributes":[{"value":"/ A Proof is a composition of `Commitment`s to the Witness, Permutation,","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/proof.rs","byte_start":262908,"byte_end":262982,"line_start":32,"line_end":32,"column_start":1,"column_end":75}},{"value":"/ Quotient, Shifted and Opening polynomials as well as the","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/proof.rs","byte_start":262983,"byte_end":263043,"line_start":33,"line_end":33,"column_start":1,"column_end":61}},{"value":"/ `ProofEvaluations`.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/proof.rs","byte_start":263044,"byte_end":263067,"line_start":34,"line_end":34,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/proof.rs","byte_start":263068,"byte_end":263071,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ It's main goal is to allow the `Verifier` to","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/proof.rs","byte_start":263072,"byte_end":263120,"line_start":36,"line_end":36,"column_start":1,"column_end":49}},{"value":"/ formally verify that the secret witnesses used to generate the [`Proof`]","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/proof.rs","byte_start":263121,"byte_end":263197,"line_start":37,"line_end":37,"column_start":1,"column_end":77}},{"value":"/ satisfy a circuit that both [`Prover`](super::Prover) and","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/proof.rs","byte_start":263198,"byte_end":263259,"line_start":38,"line_end":38,"column_start":1,"column_end":62}},{"value":"/ [`Verifier`](super::Verifier) have in common succintly and without any","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/proof.rs","byte_start":263260,"byte_end":263334,"line_start":39,"line_end":39,"column_start":1,"column_end":75}},{"value":"/ capabilities of adquiring any kind of knowledge about the witness used to","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/proof.rs","byte_start":263335,"byte_end":263412,"line_start":40,"line_end":40,"column_start":1,"column_end":78}},{"value":"/ construct the Proof.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/proof.rs","byte_start":263413,"byte_end":263437,"line_start":41,"line_end":41,"column_start":1,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":1216},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/arithmetic/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"arithmetic","qualname":"::proof_system::widget::arithmetic","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/arithmetic/mod.rs","parent":null,"children":[{"krate":0,"index":1217},{"krate":0,"index":1232},{"krate":0,"index":1246},{"krate":0,"index":1249}],"decl_id":null,"docs":" XXX: Doc this\n XXX: Doc this\n","sig":null,"attributes":[{"value":"/ XXX: Doc this","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":283163,"byte_end":283180,"line_start":6,"line_end":6,"column_start":1,"column_end":18}},{"value":"/ XXX: Doc this","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":283182,"byte_end":283199,"line_start":8,"line_end":8,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":1252},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/ecc/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ecc","qualname":"::proof_system::widget::ecc","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/ecc/mod.rs","parent":null,"children":[{"krate":0,"index":1253},{"krate":0,"index":1309}],"decl_id":null,"docs":" XXX: Doc this\n","sig":null,"attributes":[{"value":"/ XXX: Doc this","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":283220,"byte_end":283237,"line_start":10,"line_end":10,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":1380},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/logic/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"logic","qualname":"::proof_system::widget::logic","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/logic/mod.rs","parent":null,"children":[{"krate":0,"index":1381},{"krate":0,"index":1400},{"krate":0,"index":1403},{"krate":0,"index":1427}],"decl_id":null,"docs":" XXX: Doc this\n","sig":null,"attributes":[{"value":"/ XXX: Doc this","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":283251,"byte_end":283268,"line_start":12,"line_end":12,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":1430},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/permutation/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"permutation","qualname":"::proof_system::widget::permutation","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/permutation/mod.rs","parent":null,"children":[{"krate":0,"index":1431},{"krate":0,"index":1472},{"krate":0,"index":1475},{"krate":0,"index":1503}],"decl_id":null,"docs":" XXX: Doc this\n","sig":null,"attributes":[{"value":"/ XXX: Doc this","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":283284,"byte_end":283301,"line_start":14,"line_end":14,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":1506},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/range/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"range","qualname":"::proof_system::widget::range","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/range/mod.rs","parent":null,"children":[{"krate":0,"index":1507},{"krate":0,"index":1524},{"krate":0,"index":1527},{"krate":0,"index":1547}],"decl_id":null,"docs":" XXX: Doc this\n","sig":null,"attributes":[{"value":"/ XXX: Doc this","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":283323,"byte_end":283340,"line_start":16,"line_end":16,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":2532},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":283834,"byte_end":283845,"line_start":33,"line_end":33,"column_start":12,"column_end":23},"name":"VerifierKey","qualname":"::proof_system::widget::VerifierKey","value":"VerifierKey {  }","parent":null,"children":[{"krate":0,"index":2535},{"krate":0,"index":2536},{"krate":0,"index":2537},{"krate":0,"index":2538},{"krate":0,"index":2539},{"krate":0,"index":2540},{"krate":0,"index":2541}],"decl_id":null,"docs":" PLONK circuit Verification Key.","sig":null,"attributes":[{"value":"/ PLONK circuit Verification Key.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":283596,"byte_end":283631,"line_start":26,"line_end":26,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":283632,"byte_end":283635,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ This structure is used by the Verifier in order to verify a","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":283636,"byte_end":283699,"line_start":28,"line_end":28,"column_start":1,"column_end":64}},{"value":"/ [`Proof`](super::Proof).","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":283700,"byte_end":283728,"line_start":29,"line_end":29,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1577},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":284782,"byte_end":284801,"line_start":57,"line_end":57,"column_start":12,"column_end":31},"name":"padded_circuit_size","qualname":"<VerifierKey<E, P>>::padded_circuit_size","value":"pub fn padded_circuit_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the Circuit size padded to the next power of two.\n","sig":null,"attributes":[{"value":"/ Returns the Circuit size padded to the next power of two.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":284709,"byte_end":284770,"line_start":56,"line_end":56,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":2588},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":288421,"byte_end":288430,"line_start":167,"line_end":167,"column_start":12,"column_end":21},"name":"ProverKey","qualname":"::proof_system::widget::ProverKey","value":"ProverKey {  }","parent":null,"children":[{"krate":0,"index":2591},{"krate":0,"index":2592},{"krate":0,"index":2593},{"krate":0,"index":2594},{"krate":0,"index":2595},{"krate":0,"index":2596},{"krate":0,"index":2597},{"krate":0,"index":2598}],"decl_id":null,"docs":" PLONK circuit Proving Key.","sig":null,"attributes":[{"value":"/ PLONK circuit Proving Key.","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":288179,"byte_end":288209,"line_start":160,"line_end":160,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":288210,"byte_end":288213,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ This structure is used by the Prover in order to construct a","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":288214,"byte_end":288278,"line_start":162,"line_end":162,"column_start":1,"column_end":65}},{"value":"/ [`Proof`](crate::proof_system::Proof).","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":288279,"byte_end":288321,"line_start":163,"line_end":163,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":2698},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/transcript.rs","byte_start":351161,"byte_end":351178,"line_start":18,"line_end":18,"column_start":12,"column_end":29},"name":"TranscriptWrapper","qualname":"::transcript::TranscriptWrapper","value":"TranscriptWrapper { transcript }","parent":null,"children":[{"krate":0,"index":2700},{"krate":0,"index":2701}],"decl_id":null,"docs":" Wrapper around [`Transcript`]\n","sig":null,"attributes":[{"value":"/ Wrapper around [`Transcript`]","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/transcript.rs","byte_start":351099,"byte_end":351132,"line_start":16,"line_end":16,"column_start":1,"column_end":34}}]},{"kind":"Field","id":{"krate":0,"index":2700},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/transcript.rs","byte_start":351207,"byte_end":351217,"line_start":19,"line_end":19,"column_start":9,"column_end":19},"name":"transcript","qualname":"::transcript::TranscriptWrapper::transcript","value":"merlin::Transcript","parent":{"krate":0,"index":2698},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1673},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/transcript.rs","byte_start":351320,"byte_end":351323,"line_start":24,"line_end":24,"column_start":12,"column_end":15},"name":"new","qualname":"<TranscriptWrapper<E>>::new","value":"pub fn new(&'static [u8]) -> TranscriptWrapper<E>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1686},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":1812,"byte_end":1817,"line_start":49,"line_end":49,"column_start":9,"column_end":14},"name":"notes","qualname":"::notes","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","parent":null,"children":[{"krate":0,"index":1687},{"krate":0,"index":1688},{"krate":0,"index":1689},{"krate":0,"index":1690}],"decl_id":null,"docs":"This module is a self contained file which explains\nhow PLONK and its protocol components work in our library.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1687},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":1890,"byte_end":1908,"line_start":51,"line_end":51,"column_start":13,"column_end":31},"name":"commitment_schemes","qualname":"::notes::commitment_schemes","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","parent":null,"children":[],"decl_id":null,"docs":"This module explains the inner workings of\ncommitment schemes. ","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1688},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":1976,"byte_end":1994,"line_start":53,"line_end":53,"column_start":13,"column_end":31},"name":"snark_construction","qualname":"::notes::snark_construction","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","parent":null,"children":[],"decl_id":null,"docs":"This module contains the methodology of how\nzk-SNARKS are constructed.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1689},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":2069,"byte_end":2081,"line_start":55,"line_end":55,"column_start":13,"column_end":25},"name":"prove_verify","qualname":"::notes::prove_verify","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","parent":null,"children":[],"decl_id":null,"docs":"This module contains the notes on \nhow the prover algorithm is \nconstructed for PLONK.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1690},"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":2149,"byte_end":2159,"line_start":57,"line_end":57,"column_start":13,"column_end":23},"name":"kzg10_docs","qualname":"::notes::kzg10_docs","value":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","parent":null,"children":[],"decl_id":null,"docs":"In this module we show how, and why, the KZG10 \npolynomial commitment scheme has been implemented\nfor this PLONK implementation.","sig":null,"attributes":[]}],"impls":[{"id":2,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":5307,"byte_end":5308,"line_start":67,"line_end":67,"column_start":48,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":5576,"byte_end":5587,"line_start":78,"line_end":78,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":5868,"byte_end":5883,"line_start":89,"line_end":89,"column_start":48,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":6707,"byte_end":6719,"line_start":116,"line_end":116,"column_start":5,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":28200,"byte_end":28216,"line_start":120,"line_end":120,"column_start":5,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":29139,"byte_end":29155,"line_start":149,"line_end":149,"column_start":9,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":29288,"byte_end":29304,"line_start":157,"line_end":157,"column_start":5,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":54003,"byte_end":54019,"line_start":13,"line_end":13,"column_start":5,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/boolean.rs","byte_start":72115,"byte_end":72131,"line_start":13,"line_end":13,"column_start":5,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":83788,"byte_end":83804,"line_start":47,"line_end":47,"column_start":5,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/variable_base_gate.rs","byte_start":85965,"byte_end":85981,"line_start":15,"line_end":15,"column_start":5,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/fixed_base.rs","byte_start":95102,"byte_end":95118,"line_start":35,"line_end":35,"column_start":5,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":335}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/variable_base.rs","byte_start":111988,"byte_end":112004,"line_start":15,"line_end":15,"column_start":5,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":76014,"byte_end":76019,"line_start":29,"line_end":29,"column_start":9,"column_end":14},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":76109,"byte_end":76114,"line_start":34,"line_end":34,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":76247,"byte_end":76252,"line_start":41,"line_end":41,"column_start":65,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":77030,"byte_end":77046,"line_start":68,"line_end":68,"column_start":5,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/logic.rs","byte_start":121040,"byte_end":121056,"line_start":14,"line_end":14,"column_start":5,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":525},{"krate":0,"index":526}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/range.rs","byte_start":140083,"byte_end":140099,"line_start":14,"line_end":14,"column_start":5,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/permutation/permutation.rs","byte_start":152929,"byte_end":152940,"line_start":27,"line_end":27,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":645},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":662},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/util.rs","byte_start":203151,"byte_end":203174,"line_start":76,"line_end":76,"column_start":36,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":758}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":210673,"byte_end":210678,"line_start":79,"line_end":79,"column_start":46,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":771}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/preprocess.rs","byte_start":216125,"byte_end":216141,"line_start":43,"line_end":43,"column_start":5,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":892},{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":233733,"byte_end":233739,"line_start":39,"line_end":39,"column_start":65,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":981},{"krate":0,"index":982}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":234410,"byte_end":234416,"line_start":59,"line_end":59,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":234563,"byte_end":234569,"line_start":66,"line_end":66,"column_start":65,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":990},{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":993},{"krate":0,"index":994},{"krate":0,"index":995},{"krate":0,"index":997},{"krate":0,"index":998},{"krate":0,"index":999},{"krate":0,"index":1000},{"krate":0,"index":1002},{"krate":0,"index":1003}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":259115,"byte_end":259123,"line_start":31,"line_end":31,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1085}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":259274,"byte_end":259282,"line_start":38,"line_end":38,"column_start":65,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/proof.rs","byte_start":264907,"byte_end":264912,"line_start":82,"line_end":82,"column_start":65,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1206}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/arithmetic/proverkey.rs","byte_start":299091,"byte_end":299100,"line_start":25,"line_end":25,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1230},{"krate":0,"index":1231}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/arithmetic/verifierkey.rs","byte_start":301805,"byte_end":301816,"line_start":26,"line_end":26,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1245}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/ecc/curve_addition/proverkey.rs","byte_start":304162,"byte_end":304171,"line_start":23,"line_end":23,"column_start":58,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1274},{"krate":0,"index":1275},{"krate":0,"index":1276}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/ecc/curve_addition/verifierkey.rs","byte_start":308157,"byte_end":308168,"line_start":26,"line_end":26,"column_start":5,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1301},{"krate":0,"index":1302}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/ecc/scalar_mul/fixed_base/proverkey.rs","byte_start":311969,"byte_end":311978,"line_start":26,"line_end":26,"column_start":58,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/ecc/scalar_mul/fixed_base/verifierkey.rs","byte_start":317887,"byte_end":317898,"line_start":32,"line_end":32,"column_start":5,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1372},{"krate":0,"index":1373}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/logic/proverkey.rs","byte_start":321215,"byte_end":321224,"line_start":20,"line_end":20,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1394},{"krate":0,"index":1395}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/logic/verifierkey.rs","byte_start":325124,"byte_end":325135,"line_start":22,"line_end":22,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1426}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/permutation/proverkey.rs","byte_start":327736,"byte_end":327745,"line_start":32,"line_end":32,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1464},{"krate":0,"index":1465},{"krate":0,"index":1466},{"krate":0,"index":1467},{"krate":0,"index":1468},{"krate":0,"index":1469},{"krate":0,"index":1470},{"krate":0,"index":1471}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/permutation/verifierkey.rs","byte_start":335506,"byte_end":335517,"line_start":24,"line_end":24,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1501},{"krate":0,"index":1502}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/range/proverkey.rs","byte_start":338815,"byte_end":338824,"line_start":19,"line_end":19,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1520},{"krate":0,"index":1521}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/range/verifierkey.rs","byte_start":341584,"byte_end":341595,"line_start":21,"line_end":21,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1546}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":284685,"byte_end":284696,"line_start":54,"line_end":54,"column_start":5,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1577},{"krate":0,"index":1578}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":286610,"byte_end":286621,"line_start":122,"line_end":122,"column_start":5,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1582}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":289546,"byte_end":289555,"line_start":190,"line_end":190,"column_start":58,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1587},{"krate":0,"index":1588}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/transcript.rs","byte_start":351286,"byte_end":351303,"line_start":23,"line_end":23,"column_start":24,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1673}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/transcript.rs","byte_start":352158,"byte_end":352175,"line_start":48,"line_end":48,"column_start":50,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":1682},{"krate":0,"index":1683},{"krate":0,"index":1684},{"krate":0,"index":1685}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":1610,"byte_end":1617,"line_start":37,"line_end":37,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":3}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":1627,"byte_end":1644,"line_start":38,"line_end":38,"column_start":9,"column_end":26},"ref_id":{"krate":0,"index":110}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/mod.rs","byte_start":23259,"byte_end":23262,"line_start":19,"line_end":19,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":224}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":75381,"byte_end":75395,"line_start":8,"line_end":8,"column_start":9,"column_end":23},"ref_id":{"krate":0,"index":225}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":75448,"byte_end":75458,"line_start":10,"line_end":10,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":281}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/mod.rs","byte_start":93754,"byte_end":93764,"line_start":8,"line_end":8,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":282}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/mod.rs","byte_start":93819,"byte_end":93832,"line_start":10,"line_end":10,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":337}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/mod.rs","byte_start":23333,"byte_end":23338,"line_start":24,"line_end":24,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":487}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/mod.rs","byte_start":23363,"byte_end":23368,"line_start":26,"line_end":26,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":527}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":1693,"byte_end":1698,"line_start":43,"line_end":43,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":769}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":1708,"byte_end":1715,"line_start":44,"line_end":44,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":772}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/lib.rs","byte_start":1725,"byte_end":1737,"line_start":45,"line_end":45,"column_start":9,"column_end":21},"ref_id":{"krate":0,"index":817}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/mod.rs","byte_start":214268,"byte_end":214274,"line_start":10,"line_end":10,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":901}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/mod.rs","byte_start":214364,"byte_end":214372,"line_start":14,"line_end":14,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1046}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/mod.rs","byte_start":214482,"byte_end":214487,"line_start":19,"line_end":19,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1103}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":283208,"byte_end":283218,"line_start":9,"line_end":9,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":1216}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":283246,"byte_end":283249,"line_start":11,"line_end":11,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1252}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":283277,"byte_end":283282,"line_start":13,"line_end":13,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1380}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":283310,"byte_end":283321,"line_start":15,"line_end":15,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":1430}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":283349,"byte_end":283354,"line_start":17,"line_end":17,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1506}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":5307,"byte_end":5308,"line_start":67,"line_end":67,"column_start":48,"column_end":49},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":76},"to":{"krate":0,"index":69}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":5576,"byte_end":5587,"line_start":78,"line_end":78,"column_start":48,"column_end":59},"kind":{"Impl":{"id":3}},"from":{"krate":18,"index":2635},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":5868,"byte_end":5883,"line_start":89,"line_end":89,"column_start":48,"column_end":63},"kind":{"Impl":{"id":4}},"from":{"krate":18,"index":2695},"to":{"krate":0,"index":72}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/circuit.rs","byte_start":6707,"byte_end":6719,"line_start":116,"line_end":116,"column_start":5,"column_end":17},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1728},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":28200,"byte_end":28216,"line_start":120,"line_end":120,"column_start":5,"column_end":21},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":29139,"byte_end":29155,"line_start":149,"line_end":149,"column_start":9,"column_end":25},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1776},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/composer.rs","byte_start":29288,"byte_end":29304,"line_start":157,"line_end":157,"column_start":5,"column_end":21},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/arithmetic.rs","byte_start":54003,"byte_end":54019,"line_start":13,"line_end":13,"column_start":5,"column_end":21},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/boolean.rs","byte_start":72115,"byte_end":72131,"line_start":13,"line_end":13,"column_start":5,"column_end":21},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/fixed_base_gate.rs","byte_start":83788,"byte_end":83804,"line_start":47,"line_end":47,"column_start":5,"column_end":21},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/curve_addition/variable_base_gate.rs","byte_start":85965,"byte_end":85981,"line_start":15,"line_end":15,"column_start":5,"column_end":21},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/fixed_base.rs","byte_start":95102,"byte_end":95118,"line_start":35,"line_end":35,"column_start":5,"column_end":21},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/scalar_mul/variable_base.rs","byte_start":111988,"byte_end":112004,"line_start":15,"line_end":15,"column_start":5,"column_end":21},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":76014,"byte_end":76019,"line_start":29,"line_end":29,"column_start":9,"column_end":14},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1870},"to":{"krate":2,"index":3014}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":76109,"byte_end":76114,"line_start":34,"line_end":34,"column_start":9,"column_end":14},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1870},"to":{"krate":2,"index":2625}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":76247,"byte_end":76252,"line_start":41,"line_end":41,"column_start":65,"column_end":70},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1870},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/ecc/mod.rs","byte_start":77030,"byte_end":77046,"line_start":68,"line_end":68,"column_start":5,"column_end":21},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/logic.rs","byte_start":121040,"byte_end":121056,"line_start":14,"line_end":14,"column_start":5,"column_end":21},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/constraint_system/range.rs","byte_start":140083,"byte_end":140099,"line_start":14,"line_end":14,"column_start":5,"column_end":21},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/permutation/permutation.rs","byte_start":152929,"byte_end":152940,"line_start":27,"line_end":27,"column_start":21,"column_end":32},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1881},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/util.rs","byte_start":202605,"byte_end":202621,"line_start":56,"line_end":56,"column_start":35,"column_end":51},"kind":"SuperTrait","from":{"krate":53,"index":399},"to":{"krate":0,"index":745}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/util.rs","byte_start":203151,"byte_end":203174,"line_start":76,"line_end":76,"column_start":36,"column_end":59},"kind":{"Impl":{"id":24}},"from":{"krate":53,"index":1765},"to":{"krate":0,"index":745}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/error.rs","byte_start":210673,"byte_end":210678,"line_start":79,"line_end":79,"column_start":46,"column_end":51},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1895},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/preprocess.rs","byte_start":216125,"byte_end":216141,"line_start":43,"line_end":43,"column_start":5,"column_end":21},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":233733,"byte_end":233739,"line_start":39,"line_end":39,"column_start":65,"column_end":71},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":972},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":234410,"byte_end":234416,"line_start":59,"line_end":59,"column_start":9,"column_end":15},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":972},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/prover.rs","byte_start":234563,"byte_end":234569,"line_start":66,"line_end":66,"column_start":65,"column_end":71},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":972},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":259115,"byte_end":259123,"line_start":31,"line_end":31,"column_start":9,"column_end":17},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1076},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/verifier.rs","byte_start":259274,"byte_end":259282,"line_start":38,"line_end":38,"column_start":65,"column_end":73},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1076},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/proof.rs","byte_start":264907,"byte_end":264912,"line_start":82,"line_end":82,"column_start":65,"column_end":70},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1933},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/arithmetic/proverkey.rs","byte_start":299091,"byte_end":299100,"line_start":25,"line_end":25,"column_start":21,"column_end":30},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1996},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/arithmetic/verifierkey.rs","byte_start":301805,"byte_end":301816,"line_start":26,"line_end":26,"column_start":24,"column_end":35},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2040},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/ecc/curve_addition/proverkey.rs","byte_start":304162,"byte_end":304171,"line_start":23,"line_end":23,"column_start":58,"column_end":67},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2086},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/ecc/curve_addition/verifierkey.rs","byte_start":308157,"byte_end":308168,"line_start":26,"line_end":26,"column_start":5,"column_end":16},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":2134},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/ecc/scalar_mul/fixed_base/proverkey.rs","byte_start":311969,"byte_end":311978,"line_start":26,"line_end":26,"column_start":58,"column_end":67},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":2185},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/ecc/scalar_mul/fixed_base/verifierkey.rs","byte_start":317887,"byte_end":317898,"line_start":32,"line_end":32,"column_start":5,"column_end":16},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":2236},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/logic/proverkey.rs","byte_start":321215,"byte_end":321224,"line_start":20,"line_end":20,"column_start":21,"column_end":30},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":2289},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/logic/verifierkey.rs","byte_start":325124,"byte_end":325135,"line_start":22,"line_end":22,"column_start":24,"column_end":35},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":2328},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/permutation/proverkey.rs","byte_start":327736,"byte_end":327745,"line_start":32,"line_end":32,"column_start":21,"column_end":30},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":2369},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/permutation/verifierkey.rs","byte_start":335506,"byte_end":335517,"line_start":24,"line_end":24,"column_start":24,"column_end":35},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2411},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/range/proverkey.rs","byte_start":338815,"byte_end":338824,"line_start":19,"line_end":19,"column_start":21,"column_end":30},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2454},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/range/verifierkey.rs","byte_start":341584,"byte_end":341595,"line_start":21,"line_end":21,"column_start":24,"column_end":35},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2492},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":284685,"byte_end":284696,"line_start":54,"line_end":54,"column_start":5,"column_end":16},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2532},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":286610,"byte_end":286621,"line_start":122,"line_end":122,"column_start":5,"column_end":16},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2532},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/proof_system/widget/mod.rs","byte_start":289546,"byte_end":289555,"line_start":190,"line_end":190,"column_start":58,"column_end":67},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2588},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/transcript.rs","byte_start":351286,"byte_end":351303,"line_start":23,"line_end":23,"column_start":24,"column_end":41},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2698},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/git/checkouts/ark-plonk-846408264c130f59/33b8b74/src/transcript.rs","byte_start":352158,"byte_end":352175,"line_start":48,"line_end":48,"column_start":50,"column_end":67},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2698},"to":{"krate":0,"index":1674}}]}