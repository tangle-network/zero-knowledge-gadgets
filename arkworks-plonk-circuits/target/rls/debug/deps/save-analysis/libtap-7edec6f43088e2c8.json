{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1","program":"/Users/thomascnorton/.rustup/toolchains/nightly-2021-11-10-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","tap","/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=7edec6f43088e2c8","-C","extra-filename=-7edec6f43088e2c8","--out-dir","/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps","-L","dependency=/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/thomascnorton/.rustup/toolchains/nightly-2021-11-10-aarch64-apple-darwin"],"output":"/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps/libtap-7edec6f43088e2c8.rmeta"},"prelude":{"crate_id":{"name":"tap","disambiguator":[11512447895934554756,0]},"crate_root":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src","external_crates":[{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5231689799850066461,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[17864008973282999150,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[17296295565214172833,0]}}],"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/lib.rs","byte_start":0,"byte_end":4872,"line_start":1,"line_end":147,"column_start":1,"column_end":20}},"imports":[{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/lib.rs","byte_start":4770,"byte_end":4771,"line_start":142,"line_end":142,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":196}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/lib.rs","byte_start":4779,"byte_end":4780,"line_start":142,"line_end":142,"column_start":33,"column_end":34},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":196}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/lib.rs","byte_start":4787,"byte_end":4788,"line_start":142,"line_end":142,"column_start":41,"column_end":42},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":196}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/lib.rs","byte_start":4870,"byte_end":4871,"line_start":147,"line_end":147,"column_start":18,"column_end":19},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/lib.rs","byte_start":0,"byte_end":4872,"line_start":1,"line_end":147,"column_start":1,"column_end":20},"name":"","qualname":"::","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":18},{"krate":0,"index":78},{"krate":0,"index":196},{"krate":0,"index":201}],"decl_id":null,"docs":" # `tap` – Syntactical Plumb-Lines","sig":null,"attributes":[{"value":"* # `tap` – Syntactical Plumb-Lines\n\nRust permits functions that take a `self` receiver to be written in “dot-call”\nsuffix position, rather than the more traditional prefix-position function call\nsyntax. These functions are restricted to `impl [Trait for] Type` blocks, and\nfunctions anywhere else cannot take advantage of this syntax.\n\nThis crate provides universally-implemented extension traits that permit smooth\nsuffix-position calls for a handful of common operations: transparent inspection\nor modification (tapping), transformation (piping), and type conversion.\n\n## Tapping\n\nThe [`tap`] module provides the [`Tap`], [`TapOptional`], and [`TapFallible`]\ntraits. Each of these traits provides methods that take and return a value, and\nexpose it as a borrow to an effect function. They look like this:\n\n```rust\nuse tap::prelude::*;\n# struct Tmp;\n# fn make_value() -> Tmp { Tmp }\n# impl Tmp { fn process_value(self) {} }\n# macro_rules! log { ($msg:literal, $val:ident) => {{}}; }\n\nlet end = make_value()\n  .tap(|v| log!(\"Produced value: {:?}\", v))\n  .process_value();\n```\n\nThese methods are `self -> Self`, and return the value they received without\nany transformation. This enables them to be placed anywhere in a larger\nexpression witohut changing its shape, or causing any semantic changes to the\ncode. The effect function receives a borrow of the tapped value, optionally run\nthrough the `Borrow`, `AsRef`, or `Deref` view conversions, for the duration of\nits execution.\n\nThe effect function cannot return a value, as the tap is incapable of handling\nit.\n\n## Piping\n\nThe [`pipe`] module provides the [`Pipe`] trait. This trait provides methods\nthat take and transform a value, returning the result of the transformation.\nThey look like this:\n\n```rust\nuse tap::prelude::*;\n\nstruct One;\nfn start() -> One { One }\nstruct Two;\nfn end(_: One) -> Two { Two }\n\nlet val: Two = start().pipe(end);\n\n// without pipes, this would be written as\nlet _: Two = end(start());\n```\n\nThese methods are `self -> Other`, and return the value produced by the effect\nfunction. As the methods are always available in suffix position, they can take\nas arguments methods that are *not* eligible for dot-call syntax and still place\nthem as expression suffices. The effect function receives the piped value,\noptionally run through the `Borrow`, `AsRef`, or `Deref` view conversions, as\nits input, and its output is returned from the pipe.\n\nFor `.pipe()`, the input value is *moved* into the pipe and the effect function,\nso the effect function *cannot* return a value whose lifetime depends on the\ninput value. The other pipe methods all borrow the input value, and may return a\nvalue whose lifetime is tied to it.\n\n## Converting\n\nThe [`conv`] module provides the [`Conv`] and [`TryConv`] traits. These provide\nmethods that accept a type parameter on the method name, and forward to the\nappropriate `Into` or `TryInto` trait implementation when called. The difference\nbetween `Conv` and `Into` is that `Conv` is declared as `Conv::conv::<T>`, while\n`Into` is declared as `Into::<T>::into`. The location of the destination type\nparameter makes `.into()` unusable as a non-terminal method call of an\nexpression, while `.conv::<T>()` can be used as a method call anywhere.\n\n```rust,compile_fail\nlet upper = \"hello, world\"\n  .into()\n  .tap_mut(|s| s.make_ascii_uppercase());\n```\n\nThe above snippet is illegal, because the Rust type solver cannot determine the\ntype of the sub-expression `\"hello, world\".into()`, and it will not attempt to\nsearch all available `impl Into<X> for str` implementations to find an `X` which\nhas a\n`fn tap_mut({self, &self, &mut self, Box<Self>, Rc<Self>, Arc<Self>}, _) -> Y`\ndeclared, either as an inherent method or in a trait implemented by `X`, to\nresolve the expression.\n\nInstead, you can write it as\n\n```rust\nuse tap::prelude::*;\n\nlet upper = \"hello, world\"\n  .conv::<String>()\n  .tap_mut(|s| s.make_ascii_uppercase());\n```\n\nThe trait implementation is\n\n```rust\npub trait Conv: Sized {\n fn conv<T: Sized>(self) -> T\n where Self: Into<T> {\n  self.into()\n }\n}\n```\n\nEach monomorphization of `.conv::<T>()` expands to the appropriate `Into<T>`\nimplementation, and does nothing else.\n\n[`Conv`]: conv/trait.Conv.html\n[`Pipe`]: pipe/trait.Pipe.html\n[`Tap`]: tap/trait.Tap.html\n[`TapFallible`]: tap/trait.TapFallible.html\n[`TapOptional`]: tap/trait.TapOptional.html\n[`TryConv`]: conv/trait.TryConv.html\n[`conv`]: conv/index.html\n[`pipe`]: pipe/index.html\n[`tap`]: tap/index.html\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/lib.rs","byte_start":0,"byte_end":4493,"line_start":1,"line_end":129,"column_start":1,"column_end":4}},{"value":"no_std","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/lib.rs","byte_start":4495,"byte_end":4505,"line_start":131,"line_end":131,"column_start":1,"column_end":11}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/lib.rs","byte_start":4536,"byte_end":4554,"line_start":132,"line_end":132,"column_start":31,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"conv","qualname":"::conv","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":13},{"krate":0,"index":16}],"decl_id":null,"docs":" # Method-Directed Type Conversion","sig":null,"attributes":[{"value":"* # Method-Directed Type Conversion\n\nThe `std::convert` module provides traits for converting values from one type to\nanother. The first of these, [`From<T>`], provides an associated function\n[`from(orig: T) -> Self`]. This function can only be called in prefix-position,\nas it does not have a `self` receiver. The second, [`Into<T>`], provides a\nmethod [`into(self) -> T`] which *can* be called in suffix-position; due to\nintractable problems in the type solver, this method cannot have any *further*\nmethod calls attached to it. It must be bound directly into a `let` or function\ncall.\n\nThe [`TryFrom<T>`] and [`TryInto<T>`] traits have the same properties, but\npermit failure.\n\nThis module provides traits that place the conversion type parameter in the\nmethod, rather than in the trait, so that users can write `.conv::<T>()` to\nconvert the preceding expression into `T`, without causing any failures in the\ntype solver. These traits are blanket-implemented on all types that have an\n`Into<T>` implementation, which covers both the blanket implementation of `Into`\nfor types with `From`, and manual implementations of `Into`.\n\n[`From<T>`]: https://doc.rust-lang.org/std/convert/trait.From.html\n[`Into<T>`]: https://doc.rust-lang.org/std/convert/trait.Into.html\n[`TryFrom<T>`]: https://doc.rust-lang.org/std/convert/trait.TryFrom.html\n[`TryInto<T>`]: https://doc.rust-lang.org/std/convert/trait.TryInto.html\n[`from(orig: T) -> Self`]: https://doc.rust-lang.org/std/convert/trait.From.html#tymethod.from\n[`into(self) -> T`]: https://doc.rust-lang.org/std/convert/trait.Into.html#tymethod.into\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":4874,"byte_end":6474,"line_start":1,"line_end":28,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":8},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":6588,"byte_end":6592,"line_start":33,"line_end":33,"column_start":11,"column_end":15},"name":"Conv","qualname":"::conv::Conv","value":"Conv","parent":null,"children":[{"krate":0,"index":9}],"decl_id":null,"docs":" Wraps `Into::<T>::into` as a method that can be placed in pipelines.\n","sig":null,"attributes":[{"value":"/ Wraps `Into::<T>::into` as a method that can be placed in pipelines.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":6505,"byte_end":6577,"line_start":32,"line_end":32,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":9},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":6837,"byte_end":6841,"line_start":49,"line_end":49,"column_start":5,"column_end":9},"name":"conv","qualname":"::conv::Conv::conv","value":"pub fn conv<T>(Self) -> T where Self: Into<T>, T: Sized","parent":{"krate":0,"index":8},"children":[],"decl_id":null,"docs":" Converts `self` into `T` using `Into<T>`.","sig":null,"attributes":[{"value":"/ Converts `self` into `T` using `Into<T>`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":6616,"byte_end":6661,"line_start":37,"line_end":37,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":6663,"byte_end":6666,"line_start":38,"line_end":38,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":6668,"byte_end":6682,"line_start":39,"line_end":39,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":6684,"byte_end":6687,"line_start":40,"line_end":40,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":6689,"byte_end":6700,"line_start":41,"line_end":41,"column_start":2,"column_end":13}},{"value":"/ use tap::conv::Conv;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":6702,"byte_end":6726,"line_start":42,"line_end":42,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":6728,"byte_end":6731,"line_start":43,"line_end":43,"column_start":2,"column_end":5}},{"value":"/ let len = \"Saluton, mondo!\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":6733,"byte_end":6764,"line_start":44,"line_end":44,"column_start":2,"column_end":33}},{"value":"/   .conv::<String>()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":6766,"byte_end":6789,"line_start":45,"line_end":45,"column_start":2,"column_end":25}},{"value":"/   .len();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":6791,"byte_end":6804,"line_start":46,"line_end":46,"column_start":2,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":6806,"byte_end":6813,"line_start":47,"line_end":47,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":6815,"byte_end":6832,"line_start":48,"line_end":48,"column_start":2,"column_end":19}}]},{"kind":"Trait","id":{"krate":0,"index":13},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":7038,"byte_end":7045,"line_start":61,"line_end":61,"column_start":11,"column_end":18},"name":"TryConv","qualname":"::conv::TryConv","value":"TryConv","parent":null,"children":[{"krate":0,"index":14}],"decl_id":null,"docs":" Wraps `TryInto::<T>::try_into` as a method that can be placed in pipelines.\n","sig":null,"attributes":[{"value":"/ Wraps `TryInto::<T>::try_into` as a method that can be placed in pipelines.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":6948,"byte_end":7027,"line_start":60,"line_end":60,"column_start":1,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":14},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":7328,"byte_end":7336,"line_start":78,"line_end":78,"column_start":5,"column_end":13},"name":"try_conv","qualname":"::conv::TryConv::try_conv","value":"pub fn try_conv<T>(Self) -> Result<T, Self::Error> where Self: TryInto<T>,\nT: Sized","parent":{"krate":0,"index":13},"children":[],"decl_id":null,"docs":" Attempts to convert `self` into `T` using `TryInto<T>`.","sig":null,"attributes":[{"value":"/ Attempts to convert `self` into `T` using `TryInto<T>`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":7069,"byte_end":7128,"line_start":65,"line_end":65,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":7130,"byte_end":7133,"line_start":66,"line_end":66,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":7135,"byte_end":7149,"line_start":67,"line_end":67,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":7151,"byte_end":7154,"line_start":68,"line_end":68,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":7156,"byte_end":7167,"line_start":69,"line_end":69,"column_start":2,"column_end":13}},{"value":"/ use tap::conv::TryConv;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":7169,"byte_end":7196,"line_start":70,"line_end":70,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":7198,"byte_end":7201,"line_start":71,"line_end":71,"column_start":2,"column_end":5}},{"value":"/ let len = \"Saluton, mondo!\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":7203,"byte_end":7234,"line_start":72,"line_end":72,"column_start":2,"column_end":33}},{"value":"/   .try_conv::<String>()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":7236,"byte_end":7263,"line_start":73,"line_end":73,"column_start":2,"column_end":29}},{"value":"/   .unwrap()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":7265,"byte_end":7280,"line_start":74,"line_end":74,"column_start":2,"column_end":17}},{"value":"/   .len();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":7282,"byte_end":7295,"line_start":75,"line_end":75,"column_start":2,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":7297,"byte_end":7304,"line_start":76,"line_end":76,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":7306,"byte_end":7323,"line_start":77,"line_end":77,"column_start":2,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":18},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pipe","qualname":"::pipe","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","parent":null,"children":[{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":76}],"decl_id":null,"docs":" # Universal Suffix Calls","sig":null,"attributes":[{"value":"* # Universal Suffix Calls\n\nThis module provides a single trait, `Pipe`, which provides a number of methods\nuseful for placing functions in suffix position. The most common method, `pipe`,\nforwards a value `T` into any function `T -> R`, returning `R`. The other\nmethods all apply some form of borrowing to the value before passing the borrow\ninto the piped function. These are of less value, but provided to maintain a\nsimilar API to the `tap` module’s methods, and for convenience in the event that\nyou do have a use for them.\n\nThis module is as much of a [UFCS] method syntax that can be provided as a\nlibrary, rather than in the language grammar.\n\n[UFCS]: https://en.wikipedia.org/wiki/Uniform_Function_Call_Syntax\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":7477,"byte_end":8203,"line_start":1,"line_end":15,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":34},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9474,"byte_end":9478,"line_start":55,"line_end":55,"column_start":11,"column_end":15},"name":"Pipe","qualname":"::pipe::Pipe","value":"Pipe","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":42},{"krate":0,"index":46},{"krate":0,"index":51},{"krate":0,"index":56},{"krate":0,"index":61},{"krate":0,"index":66},{"krate":0,"index":71}],"decl_id":null,"docs":" Provides universal suffix-position call syntax for any function.","sig":null,"attributes":[{"value":"* Provides universal suffix-position call syntax for any function.\n\nThis trait provides methods that allow any closure or free function to be placed\nas a suffix-position call, by writing them as\n\n```rust\n# use tap::pipe::Pipe;\n# let receiver = 5;\nfn not_a_method(x: i32) -> u8 { x as u8 }\nreceiver.pipe(not_a_method);\n```\n\nPiping into functions that take more than one argument still requires writing a\nclosure with ordinary function-call syntax. This is after all only a library,\nnot a syntax transformation:\n\n```rust\nuse tap::pipe::Pipe;\nfn add(x: i32, y: i32) -> i32 { x + y }\n\nlet out = 5.pipe(|x| add(x, 10));\nassert_eq!(out, 15);\n```\n\nLike tapping, piping is useful for cases where you want to write a sequence of\nprocessing steps without introducing many intermediate bindings, and your steps\ncontain functions which are not eligible for dot-call syntax.\n\nThe main difference between piping and tapping is that tapping always returns\nthe value that was passed into the tap, while piping forwards the value into the\neffect function, and returns the output of evaluating the effect function with\nthe value. Piping is a transformation, not merely an inspection or modification.\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":8276,"byte_end":9463,"line_start":22,"line_end":54,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9774,"byte_end":9778,"line_start":73,"line_end":73,"column_start":5,"column_end":9},"name":"pipe","qualname":"::pipe::Pipe::pipe","value":"pub fn pipe<R, impl FnOnce(Self) -> R: FnOnce(Self) ->\n            R>(Self, impl FnOnce(Self) -> R) -> R where Self: Sized, R: Sized","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Pipes by value. This is generally the method you want to use.","sig":null,"attributes":[{"value":"/ Pipes by value. This is generally the method you want to use.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9482,"byte_end":9547,"line_start":56,"line_end":56,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9549,"byte_end":9552,"line_start":57,"line_end":57,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9554,"byte_end":9568,"line_start":58,"line_end":58,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9570,"byte_end":9573,"line_start":59,"line_end":59,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9575,"byte_end":9586,"line_start":60,"line_end":60,"column_start":2,"column_end":13}},{"value":"/ use tap::pipe::Pipe;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9588,"byte_end":9612,"line_start":61,"line_end":61,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9614,"byte_end":9617,"line_start":62,"line_end":62,"column_start":2,"column_end":5}},{"value":"/ fn triple(x: i32) -> i64 {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9619,"byte_end":9649,"line_start":63,"line_end":63,"column_start":2,"column_end":32}},{"value":"/   x as i64 * 3","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9651,"byte_end":9669,"line_start":64,"line_end":64,"column_start":2,"column_end":20}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9671,"byte_end":9676,"line_start":65,"line_end":65,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9678,"byte_end":9681,"line_start":66,"line_end":66,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9683,"byte_end":9698,"line_start":67,"line_end":67,"column_start":2,"column_end":17}},{"value":"/   10.pipe(triple),","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9700,"byte_end":9722,"line_start":68,"line_end":68,"column_start":2,"column_end":24}},{"value":"/   30,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9724,"byte_end":9733,"line_start":69,"line_end":69,"column_start":2,"column_end":11}},{"value":"/ );","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9735,"byte_end":9741,"line_start":70,"line_end":70,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9743,"byte_end":9750,"line_start":71,"line_end":71,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9752,"byte_end":9769,"line_start":72,"line_end":72,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10248,"byte_end":10256,"line_start":97,"line_end":97,"column_start":5,"column_end":13},"name":"pipe_ref","qualname":"::pipe::Pipe::pipe_ref","value":"pub fn pipe_ref<'a, R, impl FnOnce(&'a Self) -> R: FnOnce(&'a Self) ->\n                R>(&'a Self, impl FnOnce(&'a Self) -> R) -> R where R: 'a +\nSized","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Borrows `self` and passes that borrow into the pipe function.","sig":null,"attributes":[{"value":"/ Borrows `self` and passes that borrow into the pipe function.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9878,"byte_end":9943,"line_start":81,"line_end":81,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9945,"byte_end":9948,"line_start":82,"line_end":82,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9950,"byte_end":9964,"line_start":83,"line_end":83,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9966,"byte_end":9969,"line_start":84,"line_end":84,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9971,"byte_end":9982,"line_start":85,"line_end":85,"column_start":2,"column_end":13}},{"value":"/ use tap::pipe::Pipe;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":9984,"byte_end":10008,"line_start":86,"line_end":86,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10010,"byte_end":10013,"line_start":87,"line_end":87,"column_start":2,"column_end":5}},{"value":"/ fn fold(v: &Vec<i32>) -> i32 {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10015,"byte_end":10049,"line_start":88,"line_end":88,"column_start":2,"column_end":36}},{"value":"/   v.iter().copied().sum()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10051,"byte_end":10080,"line_start":89,"line_end":89,"column_start":2,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10082,"byte_end":10087,"line_start":90,"line_end":90,"column_start":2,"column_end":7}},{"value":"/ let vec = vec![1, 2, 3, 4, 5];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10089,"byte_end":10123,"line_start":91,"line_end":91,"column_start":2,"column_end":36}},{"value":"/ let sum = vec.pipe_ref(fold);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10125,"byte_end":10158,"line_start":92,"line_end":92,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(sum, 15);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10160,"byte_end":10184,"line_start":93,"line_end":93,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(vec.len(), 5);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10186,"byte_end":10215,"line_start":94,"line_end":94,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10217,"byte_end":10224,"line_start":95,"line_end":95,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10226,"byte_end":10243,"line_start":96,"line_end":96,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10847,"byte_end":10859,"line_start":122,"line_end":122,"column_start":5,"column_end":17},"name":"pipe_ref_mut","qualname":"::pipe::Pipe::pipe_ref_mut","value":"pub fn pipe_ref_mut<'a, R,\n                    impl FnOnce(&'a mut Self) -> R: FnOnce(&'a mut Self) ->\n                    R>(&'a mut Self, impl FnOnce(&'a mut Self) -> R) -> R\nwhere R: 'a + Sized","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Mutably borrows `self` and passes that borrow into the pipe function.","sig":null,"attributes":[{"value":"/ Mutably borrows `self` and passes that borrow into the pipe function.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10358,"byte_end":10431,"line_start":104,"line_end":104,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10433,"byte_end":10436,"line_start":105,"line_end":105,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10438,"byte_end":10452,"line_start":106,"line_end":106,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10454,"byte_end":10457,"line_start":107,"line_end":107,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10459,"byte_end":10470,"line_start":108,"line_end":108,"column_start":2,"column_end":13}},{"value":"/ use tap::pipe::Pipe;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10472,"byte_end":10496,"line_start":109,"line_end":109,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10498,"byte_end":10501,"line_start":110,"line_end":110,"column_start":2,"column_end":5}},{"value":"/ let mut vec = vec![false, true];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10503,"byte_end":10539,"line_start":111,"line_end":111,"column_start":2,"column_end":38}},{"value":"/ let last = vec","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10541,"byte_end":10559,"line_start":112,"line_end":112,"column_start":2,"column_end":20}},{"value":"/   .pipe_ref_mut(Vec::pop)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10561,"byte_end":10590,"line_start":113,"line_end":113,"column_start":2,"column_end":31}},{"value":"/   .pipe(Option::unwrap);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10592,"byte_end":10620,"line_start":114,"line_end":114,"column_start":2,"column_end":30}},{"value":"/ assert!(last);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10622,"byte_end":10640,"line_start":115,"line_end":115,"column_start":2,"column_end":20}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10642,"byte_end":10649,"line_start":116,"line_end":116,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10651,"byte_end":10654,"line_start":117,"line_end":117,"column_start":2,"column_end":5}},{"value":"/ Both of these functions are eligible for method-call syntax, and should","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10656,"byte_end":10731,"line_start":118,"line_end":118,"column_start":2,"column_end":77}},{"value":"/ not be piped. Writing out non-trivial examples for these is a lot of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10733,"byte_end":10805,"line_start":119,"line_end":119,"column_start":2,"column_end":74}},{"value":"/ boilerplate.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10807,"byte_end":10823,"line_start":120,"line_end":120,"column_start":2,"column_end":18}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10825,"byte_end":10842,"line_start":121,"line_end":121,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11292,"byte_end":11303,"line_start":145,"line_end":145,"column_start":5,"column_end":16},"name":"pipe_borrow","qualname":"::pipe::Pipe::pipe_borrow","value":"pub fn pipe_borrow<'a, B, R, impl FnOnce(&'a B) -> R: FnOnce(&'a B) ->\n                   R>(&'a Self, impl FnOnce(&'a B) -> R) -> R where\nSelf: Borrow<B>, B: 'a + ?Sized, R: 'a + Sized","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Borrows `self`, then passes `self.borrow()` into the pipe function.","sig":null,"attributes":[{"value":"/ Borrows `self`, then passes `self.borrow()` into the pipe function.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":10977,"byte_end":11048,"line_start":132,"line_end":132,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11050,"byte_end":11053,"line_start":133,"line_end":133,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11055,"byte_end":11069,"line_start":134,"line_end":134,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11071,"byte_end":11074,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11076,"byte_end":11087,"line_start":136,"line_end":136,"column_start":2,"column_end":13}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11089,"byte_end":11114,"line_start":137,"line_end":137,"column_start":2,"column_end":27}},{"value":"/ use tap::pipe::Pipe;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11116,"byte_end":11140,"line_start":138,"line_end":138,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11142,"byte_end":11145,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ let len = Cow::<'static, str>::from(\"hello, world\")","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11147,"byte_end":11202,"line_start":140,"line_end":140,"column_start":2,"column_end":57}},{"value":"/   .pipe_borrow(str::len);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11204,"byte_end":11233,"line_start":141,"line_end":141,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(len, 12);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11235,"byte_end":11259,"line_start":142,"line_end":142,"column_start":2,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11261,"byte_end":11268,"line_start":143,"line_end":143,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11270,"byte_end":11287,"line_start":144,"line_end":144,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11958,"byte_end":11973,"line_start":169,"line_end":169,"column_start":5,"column_end":20},"name":"pipe_borrow_mut","qualname":"::pipe::Pipe::pipe_borrow_mut","value":"pub fn pipe_borrow_mut<'a, B, R,\n                       impl FnOnce(&'a mut B) -> R: FnOnce(&'a mut B) ->\n                       R>(&'a mut Self, impl FnOnce(&'a mut B) -> R) -> R\nwhere Self: BorrowMut<B>, B: 'a + ?Sized, R: 'a + Sized","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Mutably borrows `self`, then passes `self.borrow_mut()` into the pipe\n function.","sig":null,"attributes":[{"value":"/ Mutably borrows `self`, then passes `self.borrow_mut()` into the pipe","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11463,"byte_end":11536,"line_start":154,"line_end":154,"column_start":2,"column_end":75}},{"value":"/ function.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11538,"byte_end":11551,"line_start":155,"line_end":155,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11553,"byte_end":11556,"line_start":156,"line_end":156,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11558,"byte_end":11569,"line_start":157,"line_end":157,"column_start":2,"column_end":13}},{"value":"/ use tap::pipe::Pipe;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11571,"byte_end":11595,"line_start":158,"line_end":158,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11597,"byte_end":11600,"line_start":159,"line_end":159,"column_start":2,"column_end":5}},{"value":"/ let mut txt = \"hello, world\".to_string();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11602,"byte_end":11647,"line_start":160,"line_end":160,"column_start":2,"column_end":47}},{"value":"/ let ptr = txt","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11649,"byte_end":11666,"line_start":161,"line_end":161,"column_start":2,"column_end":19}},{"value":"/   .pipe_borrow_mut(str::as_mut_ptr);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11668,"byte_end":11708,"line_start":162,"line_end":162,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11710,"byte_end":11717,"line_start":163,"line_end":163,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11719,"byte_end":11722,"line_start":164,"line_end":164,"column_start":2,"column_end":5}},{"value":"/ This is a very contrived example, but the `BorrowMut` trait has almost","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11724,"byte_end":11798,"line_start":165,"line_end":165,"column_start":2,"column_end":76}},{"value":"/ no implementors in the standard library, and of the implementations","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11800,"byte_end":11871,"line_start":166,"line_end":166,"column_start":2,"column_end":73}},{"value":"/ available, there are almost no methods that fit this API.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11873,"byte_end":11934,"line_start":167,"line_end":167,"column_start":2,"column_end":63}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":11936,"byte_end":11953,"line_start":168,"line_end":168,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":12254,"byte_end":12265,"line_start":183,"line_end":183,"column_start":5,"column_end":16},"name":"pipe_as_ref","qualname":"::pipe::Pipe::pipe_as_ref","value":"pub fn pipe_as_ref<'a, U, R, impl FnOnce(&'a U) -> R: FnOnce(&'a U) ->\n                   R>(&'a Self, impl FnOnce(&'a U) -> R) -> R where\nSelf: AsRef<U>, U: 'a + ?Sized, R: 'a + Sized","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Borrows `self`, then passes `self.as_ref()` into the pipe function.\n","sig":null,"attributes":[{"value":"/ Borrows `self`, then passes `self.as_ref()` into the pipe function.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":12159,"byte_end":12230,"line_start":181,"line_end":181,"column_start":2,"column_end":73}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":12232,"byte_end":12249,"line_start":182,"line_end":182,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":12531,"byte_end":12542,"line_start":195,"line_end":195,"column_start":5,"column_end":16},"name":"pipe_as_mut","qualname":"::pipe::Pipe::pipe_as_mut","value":"pub fn pipe_as_mut<'a, U, R, impl FnOnce(&'a mut U) -> R: FnOnce(&'a mut U) ->\n                   R>(&'a mut Self, impl FnOnce(&'a mut U) -> R) -> R where\nSelf: AsMut<U>, U: 'a + ?Sized, R: 'a + Sized","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Mutably borrows `self`, then passes `self.as_mut()` into the pipe\n function.\n","sig":null,"attributes":[{"value":"/ Mutably borrows `self`, then passes `self.as_mut()` into the pipe","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":12423,"byte_end":12492,"line_start":192,"line_end":192,"column_start":2,"column_end":71}},{"value":"/ function.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":12494,"byte_end":12507,"line_start":193,"line_end":193,"column_start":2,"column_end":15}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":12509,"byte_end":12526,"line_start":194,"line_end":194,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":12810,"byte_end":12820,"line_start":209,"line_end":209,"column_start":5,"column_end":15},"name":"pipe_deref","qualname":"::pipe::Pipe::pipe_deref","value":"pub fn pipe_deref<'a, T, R, impl FnOnce(&'a T) -> R: FnOnce(&'a T) ->\n                  R>(&'a Self, impl FnOnce(&'a T) -> R) -> R where\nSelf: Deref<Target = T>, T: 'a + ?Sized, R: 'a + Sized","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Borrows `self`, then passes `self.deref()` into the pipe function.\n","sig":null,"attributes":[{"value":"/ Borrows `self`, then passes `self.deref()` into the pipe function.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":12716,"byte_end":12786,"line_start":207,"line_end":207,"column_start":2,"column_end":72}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":12788,"byte_end":12805,"line_start":208,"line_end":208,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":13092,"byte_end":13106,"line_start":221,"line_end":221,"column_start":5,"column_end":19},"name":"pipe_deref_mut","qualname":"::pipe::Pipe::pipe_deref_mut","value":"pub fn pipe_deref_mut<'a, T, R, impl FnOnce(&'a mut T) -> R: FnOnce(&'a mut T)\n                      -> R>(&'a mut Self, impl FnOnce(&'a mut T) -> R) -> R\nwhere Self: DerefMut + Deref<Target = T>, T: 'a + ?Sized, R: 'a + Sized","parent":{"krate":0,"index":34},"children":[],"decl_id":null,"docs":" Mutably borrows `self`, then passes `self.deref_mut()` into the pipe\n function.\n","sig":null,"attributes":[{"value":"/ Mutably borrows `self`, then passes `self.deref_mut()` into the pipe","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":12981,"byte_end":13053,"line_start":218,"line_end":218,"column_start":2,"column_end":74}},{"value":"/ function.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":13055,"byte_end":13068,"line_start":219,"line_end":219,"column_start":2,"column_end":15}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":13070,"byte_end":13087,"line_start":220,"line_end":220,"column_start":2,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":78},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tap","qualname":"::tap","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":91},{"krate":0,"index":94},{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":155},{"krate":0,"index":164},{"krate":0,"index":183}],"decl_id":null,"docs":" # Point-Free Inspection","sig":null,"attributes":[{"value":"* # Point-Free Inspection\n\nThe standard library does not provide a way to view or modify an expression\nwithout binding it to a name. This module provides extension methods that take\nand return a value, allowing it to be temporarily bound without creating a new\n`let`-statement in the enclosing scope.\n\nThe two main uses of these methods are to temporarily attach debugging\ntracepoints to an expression without modifying its surrounding code, or to\ntemporarily mutate an otherwise-immutable object.\n\nFor convenience, methods are available that will modify the *view* of the tapped\nobject that is passed to the effect function, by using the value’s\n`Borrow`/`BorrowMut`, `AsRef`/`AsMut`, or `Index`/`IndexMut` trait\nimplementations. For example, the `Vec` collection has no `fn sort` method: this\nis actually implemented on slices, to which `Vec` dereferences.\n\n```rust\nuse tap::tap::*;\n# fn make_vec() -> Vec<i32> { vec![] }\n\n// taps take ordinary closures, which can use deref coercion\nmake_vec().tap_mut(|v| v.sort());\n// `Vec<T>` implements `BorrowMut<[T]>`,\nmake_vec().tap_borrow_mut(<[_]>::sort);\n// and `AsMut<[T]>`,\nmake_vec().tap_ref_mut(<[_]>::sort);\n// and `DerefMut<Target = [T]>,\nmake_vec().tap_deref_mut(<[_]>::sort);\n// but has no inherent method `sort`.\n// make_vec().tap_mut(Vec::sort);\n```\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":13341,"byte_end":14654,"line_start":1,"line_end":33,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":94},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15143,"byte_end":15146,"line_start":49,"line_end":49,"column_start":11,"column_end":14},"name":"Tap","qualname":"::tap::Tap","value":"Tap","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":108},{"krate":0,"index":111},{"krate":0,"index":114},{"krate":0,"index":117},{"krate":0,"index":119},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":127},{"krate":0,"index":130},{"krate":0,"index":133},{"krate":0,"index":136}],"decl_id":null,"docs":" Point-free value inspection and modification.","sig":null,"attributes":[{"value":"* Point-free value inspection and modification.\n\nThis trait provides methods that permit viewing the value of an expression\nwithout requiring a new `let` binding or any other alterations to the original\ncode other than insertion of the `.tap()` call.\n\nThe methods in this trait do not perform any view conversions on the value they\nreceive; it is borrowed and passed directly to the effect argument.\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":14727,"byte_end":15132,"line_start":40,"line_end":48,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16028,"byte_end":16031,"line_start":78,"line_end":78,"column_start":5,"column_end":8},"name":"tap","qualname":"::tap::Tap::tap","value":"pub fn tap<impl FnOnce(&Self): FnOnce(&Self) -> ()>(Self, impl FnOnce(&Self))\n-> Self","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Immutable access to a value.","sig":null,"attributes":[{"value":"/ Immutable access to a value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15170,"byte_end":15202,"line_start":53,"line_end":53,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15204,"byte_end":15207,"line_start":54,"line_end":54,"column_start":2,"column_end":5}},{"value":"/ This function permits a value to be viewed by some inspecting function","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15209,"byte_end":15283,"line_start":55,"line_end":55,"column_start":2,"column_end":76}},{"value":"/ without affecting the overall shape of the expression that contains this","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15285,"byte_end":15361,"line_start":56,"line_end":56,"column_start":2,"column_end":78}},{"value":"/ method call. It is useful for attaching assertions or logging points","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15363,"byte_end":15435,"line_start":57,"line_end":57,"column_start":2,"column_end":74}},{"value":"/ into a multi-part expression.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15437,"byte_end":15470,"line_start":58,"line_end":58,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15472,"byte_end":15475,"line_start":59,"line_end":59,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15477,"byte_end":15491,"line_start":60,"line_end":60,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15493,"byte_end":15496,"line_start":61,"line_end":61,"column_start":2,"column_end":5}},{"value":"/ Here we use `.tap()` to attach logging tracepoints to each stage of a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15498,"byte_end":15571,"line_start":62,"line_end":62,"column_start":2,"column_end":75}},{"value":"/ value-processing pipeline.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15573,"byte_end":15603,"line_start":63,"line_end":63,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15605,"byte_end":15608,"line_start":64,"line_end":64,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15610,"byte_end":15621,"line_start":65,"line_end":65,"column_start":2,"column_end":13}},{"value":"/ use tap::tap::Tap;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15623,"byte_end":15645,"line_start":66,"line_end":66,"column_start":2,"column_end":24}},{"value":"/ # struct Tmp;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15647,"byte_end":15664,"line_start":67,"line_end":67,"column_start":2,"column_end":19}},{"value":"/ # impl Tmp { fn process_value(self) -> Self { self } }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15666,"byte_end":15724,"line_start":68,"line_end":68,"column_start":2,"column_end":60}},{"value":"/ # fn make_value() -> Tmp { Tmp }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15726,"byte_end":15762,"line_start":69,"line_end":69,"column_start":2,"column_end":38}},{"value":"/ # macro_rules! log { ($msg:literal, $x:ident) => {{}}; }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15764,"byte_end":15824,"line_start":70,"line_end":70,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15826,"byte_end":15829,"line_start":71,"line_end":71,"column_start":2,"column_end":5}},{"value":"/ let end = make_value()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15831,"byte_end":15857,"line_start":72,"line_end":72,"column_start":2,"column_end":28}},{"value":"/   // this line has no effect on the rest of the code","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15859,"byte_end":15915,"line_start":73,"line_end":73,"column_start":2,"column_end":58}},{"value":"/   .tap(|v| log!(\"The produced value was: {}\", v))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15917,"byte_end":15970,"line_start":74,"line_end":74,"column_start":2,"column_end":55}},{"value":"/   .process_value();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15972,"byte_end":15995,"line_start":75,"line_end":75,"column_start":2,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":15997,"byte_end":16004,"line_start":76,"line_end":76,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16006,"byte_end":16023,"line_start":77,"line_end":77,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":17127,"byte_end":17134,"line_start":116,"line_end":116,"column_start":5,"column_end":12},"name":"tap_mut","qualname":"::tap::Tap::tap_mut","value":"pub fn tap_mut<impl FnOnce(&mut Self): FnOnce(&mut Self) ->\n               ()>(Self, impl FnOnce(&mut Self)) -> Self","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Mutable access to a value.","sig":null,"attributes":[{"value":"/ Mutable access to a value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16101,"byte_end":16131,"line_start":83,"line_end":83,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16133,"byte_end":16136,"line_start":84,"line_end":84,"column_start":2,"column_end":5}},{"value":"/ This function permits a value to be modified by some function without","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16138,"byte_end":16211,"line_start":85,"line_end":85,"column_start":2,"column_end":75}},{"value":"/ affecting the overall shape of the expression that contains this method","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16213,"byte_end":16288,"line_start":86,"line_end":86,"column_start":2,"column_end":77}},{"value":"/ call. It is useful for attaching modifier functions that have an","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16290,"byte_end":16358,"line_start":87,"line_end":87,"column_start":2,"column_end":70}},{"value":"/ `&mut Self -> ()` signature to an expression, without requiring an","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16360,"byte_end":16430,"line_start":88,"line_end":88,"column_start":2,"column_end":72}},{"value":"/ explicit `let mut` binding.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16432,"byte_end":16463,"line_start":89,"line_end":89,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16465,"byte_end":16468,"line_start":90,"line_end":90,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16470,"byte_end":16484,"line_start":91,"line_end":91,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16486,"byte_end":16489,"line_start":92,"line_end":92,"column_start":2,"column_end":5}},{"value":"/ Here we use `.tap_mut()` to sort an array without requring multiple","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16491,"byte_end":16562,"line_start":93,"line_end":93,"column_start":2,"column_end":73}},{"value":"/ bindings.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16564,"byte_end":16577,"line_start":94,"line_end":94,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16579,"byte_end":16582,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16584,"byte_end":16595,"line_start":96,"line_end":96,"column_start":2,"column_end":13}},{"value":"/ use tap::tap::Tap;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16597,"byte_end":16619,"line_start":97,"line_end":97,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16621,"byte_end":16624,"line_start":98,"line_end":98,"column_start":2,"column_end":5}},{"value":"/ let sorted = [1i32, 5, 2, 4, 3]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16626,"byte_end":16661,"line_start":99,"line_end":99,"column_start":2,"column_end":37}},{"value":"/   .tap_mut(|arr| arr.sort());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16663,"byte_end":16696,"line_start":100,"line_end":100,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(sorted, [1, 2, 3, 4, 5]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16698,"byte_end":16738,"line_start":101,"line_end":101,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16740,"byte_end":16747,"line_start":102,"line_end":102,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16749,"byte_end":16752,"line_start":103,"line_end":103,"column_start":2,"column_end":5}},{"value":"/ Without tapping, this would be written as","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16754,"byte_end":16799,"line_start":104,"line_end":104,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16801,"byte_end":16804,"line_start":105,"line_end":105,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16806,"byte_end":16817,"line_start":106,"line_end":106,"column_start":2,"column_end":13}},{"value":"/ let mut received = [1, 5, 2, 4, 3];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16819,"byte_end":16858,"line_start":107,"line_end":107,"column_start":2,"column_end":41}},{"value":"/ received.sort();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16860,"byte_end":16880,"line_start":108,"line_end":108,"column_start":2,"column_end":22}},{"value":"/ let sorted = received;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16882,"byte_end":16908,"line_start":109,"line_end":109,"column_start":2,"column_end":28}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16910,"byte_end":16917,"line_start":110,"line_end":110,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16919,"byte_end":16922,"line_start":111,"line_end":111,"column_start":2,"column_end":5}},{"value":"/ The mutable tap is a convenient alternative when the expression to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16924,"byte_end":16994,"line_start":112,"line_end":112,"column_start":2,"column_end":72}},{"value":"/ produce the collection is more complex, for example, an iterator","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":16996,"byte_end":17064,"line_start":113,"line_end":113,"column_start":2,"column_end":70}},{"value":"/ pipeline collected into a vector.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":17066,"byte_end":17103,"line_start":114,"line_end":114,"column_start":2,"column_end":39}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":17105,"byte_end":17122,"line_start":115,"line_end":115,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":17512,"byte_end":17522,"line_start":129,"line_end":129,"column_start":5,"column_end":15},"name":"tap_borrow","qualname":"::tap::Tap::tap_borrow","value":"pub fn tap_borrow<B, impl FnOnce(&B): FnOnce(&B) -> ()>(Self, impl FnOnce(&B))\n-> Self where Self: Borrow<B>, B: ?Sized","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Immutable access to the `Borrow<B>` of a value.","sig":null,"attributes":[{"value":"/ Immutable access to the `Borrow<B>` of a value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":17216,"byte_end":17267,"line_start":121,"line_end":121,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":17269,"byte_end":17272,"line_start":122,"line_end":122,"column_start":2,"column_end":5}},{"value":"/ This function is identcal to [`Tap::tap`], except that the effect","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":17274,"byte_end":17343,"line_start":123,"line_end":123,"column_start":2,"column_end":71}},{"value":"/ function recevies an `&B` produced by `Borrow::<B>::borrow`, rather than","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":17345,"byte_end":17421,"line_start":124,"line_end":124,"column_start":2,"column_end":78}},{"value":"/ an `&Self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":17423,"byte_end":17438,"line_start":125,"line_end":125,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":17440,"byte_end":17443,"line_start":126,"line_end":126,"column_start":2,"column_end":5}},{"value":"/ [`Tap::tap`]: trait.Tap.html#method.tap","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":17445,"byte_end":17488,"line_start":127,"line_end":127,"column_start":2,"column_end":45}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":17490,"byte_end":17507,"line_start":128,"line_end":128,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":17978,"byte_end":17992,"line_start":146,"line_end":146,"column_start":5,"column_end":19},"name":"tap_borrow_mut","qualname":"::tap::Tap::tap_borrow_mut","value":"pub fn tap_borrow_mut<B, impl FnOnce(&mut B): FnOnce(&mut B) ->\n                      ()>(Self, impl FnOnce(&mut B)) -> Self where\nSelf: BorrowMut<B>, B: ?Sized","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Mutable access to the `BorrowMut<B>` of a value.","sig":null,"attributes":[{"value":"/ Mutable access to the `BorrowMut<B>` of a value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":17653,"byte_end":17705,"line_start":138,"line_end":138,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":17707,"byte_end":17710,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ This function is identical to [`Tap::tap_mut`], except that the effect","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":17712,"byte_end":17786,"line_start":140,"line_end":140,"column_start":2,"column_end":76}},{"value":"/ function receives an `&mut B` produced by `BorrowMut::<B>::borrow_mut`,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":17788,"byte_end":17863,"line_start":141,"line_end":141,"column_start":2,"column_end":77}},{"value":"/ rather than an `&mut Self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":17865,"byte_end":17896,"line_start":142,"line_end":142,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":17898,"byte_end":17901,"line_start":143,"line_end":143,"column_start":2,"column_end":5}},{"value":"/ [`Tap::tap_mut`]: trait.Tap.html#method.tap_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":17903,"byte_end":17954,"line_start":144,"line_end":144,"column_start":2,"column_end":53}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":17956,"byte_end":17973,"line_start":145,"line_end":145,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":18445,"byte_end":18452,"line_start":163,"line_end":163,"column_start":5,"column_end":12},"name":"tap_ref","qualname":"::tap::Tap::tap_ref","value":"pub fn tap_ref<R, impl FnOnce(&R): FnOnce(&R) -> ()>(Self, impl FnOnce(&R))\n-> Self where Self: AsRef<R>, R: ?Sized","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Immutable access to the `AsRef<R>` view of a value.","sig":null,"attributes":[{"value":"/ Immutable access to the `AsRef<R>` view of a value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":18145,"byte_end":18200,"line_start":155,"line_end":155,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":18202,"byte_end":18205,"line_start":156,"line_end":156,"column_start":2,"column_end":5}},{"value":"/ This function is identical to [`Tap::tap`], except that the effect","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":18207,"byte_end":18277,"line_start":157,"line_end":157,"column_start":2,"column_end":72}},{"value":"/ function receives an `&R` produced by `AsRef::<R>::as_ref`, rather than","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":18279,"byte_end":18354,"line_start":158,"line_end":158,"column_start":2,"column_end":77}},{"value":"/ an `&Self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":18356,"byte_end":18371,"line_start":159,"line_end":159,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":18373,"byte_end":18376,"line_start":160,"line_end":160,"column_start":2,"column_end":5}},{"value":"/ [`Tap::tap`]: trait.Tap.html#method.tap","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":18378,"byte_end":18421,"line_start":161,"line_end":161,"column_start":2,"column_end":45}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":18423,"byte_end":18440,"line_start":162,"line_end":162,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":18899,"byte_end":18910,"line_start":180,"line_end":180,"column_start":5,"column_end":16},"name":"tap_ref_mut","qualname":"::tap::Tap::tap_ref_mut","value":"pub fn tap_ref_mut<R, impl FnOnce(&mut R): FnOnce(&mut R) ->\n                   ()>(Self, impl FnOnce(&mut R)) -> Self where\nSelf: AsMut<R>, R: ?Sized","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Mutable access to the `AsMut<R>` view of a value.","sig":null,"attributes":[{"value":"/ Mutable access to the `AsMut<R>` view of a value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":18581,"byte_end":18634,"line_start":172,"line_end":172,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":18636,"byte_end":18639,"line_start":173,"line_end":173,"column_start":2,"column_end":5}},{"value":"/ This function is identical to [`Tap::tap_mut`], except that the effect","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":18641,"byte_end":18715,"line_start":174,"line_end":174,"column_start":2,"column_end":76}},{"value":"/ function receives an `&mut R` produced by `AsMut::<R>::as_mut`, rather","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":18717,"byte_end":18791,"line_start":175,"line_end":175,"column_start":2,"column_end":76}},{"value":"/ than an `&mut Self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":18793,"byte_end":18817,"line_start":176,"line_end":176,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":18819,"byte_end":18822,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ [`Tap::tap_mut`]: trait.Tap.html#method.tap_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":18824,"byte_end":18875,"line_start":178,"line_end":178,"column_start":2,"column_end":53}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":18877,"byte_end":18894,"line_start":179,"line_end":179,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":19356,"byte_end":19365,"line_start":197,"line_end":197,"column_start":5,"column_end":14},"name":"tap_deref","qualname":"::tap::Tap::tap_deref","value":"pub fn tap_deref<T, impl FnOnce(&T): FnOnce(&T) -> ()>(Self, impl FnOnce(&T))\n-> Self where Self: Deref<Target = T>, T: ?Sized","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Immutable access to the `Deref::Target` of a value.","sig":null,"attributes":[{"value":"/ Immutable access to the `Deref::Target` of a value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":19051,"byte_end":19106,"line_start":189,"line_end":189,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":19108,"byte_end":19111,"line_start":190,"line_end":190,"column_start":2,"column_end":5}},{"value":"/ This function is identical to [`Tap::tap`], except that the effect","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":19113,"byte_end":19183,"line_start":191,"line_end":191,"column_start":2,"column_end":72}},{"value":"/ function receives an `&Self::Target` produced by `Deref::deref`, rather","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":19185,"byte_end":19260,"line_start":192,"line_end":192,"column_start":2,"column_end":77}},{"value":"/ than an `&Self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":19262,"byte_end":19282,"line_start":193,"line_end":193,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":19284,"byte_end":19287,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ [`Tap::tap`]: trait.Tap.html#method.tap","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":19289,"byte_end":19332,"line_start":195,"line_end":195,"column_start":2,"column_end":45}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":19334,"byte_end":19351,"line_start":196,"line_end":196,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":19827,"byte_end":19840,"line_start":214,"line_end":214,"column_start":5,"column_end":18},"name":"tap_deref_mut","qualname":"::tap::Tap::tap_deref_mut","value":"pub fn tap_deref_mut<T, impl FnOnce(&mut T): FnOnce(&mut T) ->\n                     ()>(Self, impl FnOnce(&mut T)) -> Self where\nSelf: DerefMut + Deref<Target = T>, T: ?Sized","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Mutable access to the `Deref::Target` of a value.","sig":null,"attributes":[{"value":"/ Mutable access to the `Deref::Target` of a value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":19497,"byte_end":19550,"line_start":206,"line_end":206,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":19552,"byte_end":19555,"line_start":207,"line_end":207,"column_start":2,"column_end":5}},{"value":"/ This function is identical to [`Tap::tap_mut`], except that the effect","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":19557,"byte_end":19631,"line_start":208,"line_end":208,"column_start":2,"column_end":76}},{"value":"/ function receives an `&mut Self::Target` produced by","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":19633,"byte_end":19689,"line_start":209,"line_end":209,"column_start":2,"column_end":58}},{"value":"/ `DerefMut::deref_mut`, rather than an `&mut Self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":19691,"byte_end":19745,"line_start":210,"line_end":210,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":19747,"byte_end":19750,"line_start":211,"line_end":211,"column_start":2,"column_end":5}},{"value":"/ [`Tap::tap_mut`]: trait.Tap.html#method.tap_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":19752,"byte_end":19803,"line_start":212,"line_end":212,"column_start":2,"column_end":53}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":19805,"byte_end":19822,"line_start":213,"line_end":213,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":20150,"byte_end":20157,"line_start":227,"line_end":227,"column_start":5,"column_end":12},"name":"tap_dbg","qualname":"::tap::Tap::tap_dbg","value":"pub fn tap_dbg<impl FnOnce(&Self): FnOnce(&Self) ->\n               ()>(Self, impl FnOnce(&Self)) -> Self","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Calls `.tap()` only in debug builds, and is erased in release builds.\n","sig":null,"attributes":[{"value":"/ Calls `.tap()` only in debug builds, and is erased in release builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":20053,"byte_end":20126,"line_start":225,"line_end":225,"column_start":2,"column_end":75}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":20128,"byte_end":20145,"line_start":226,"line_end":226,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":20368,"byte_end":20379,"line_start":237,"line_end":237,"column_start":5,"column_end":16},"name":"tap_mut_dbg","qualname":"::tap::Tap::tap_mut_dbg","value":"pub fn tap_mut_dbg<impl FnOnce(&mut Self): FnOnce(&mut Self) ->\n                   ()>(Self, impl FnOnce(&mut Self)) -> Self","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Calls `.tap_mut()` only in debug builds, and is erased in release\n builds.\n","sig":null,"attributes":[{"value":"/ Calls `.tap_mut()` only in debug builds, and is erased in release","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":20262,"byte_end":20331,"line_start":234,"line_end":234,"column_start":2,"column_end":71}},{"value":"/ builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":20333,"byte_end":20344,"line_start":235,"line_end":235,"column_start":2,"column_end":13}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":20346,"byte_end":20363,"line_start":236,"line_end":236,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":20605,"byte_end":20619,"line_start":247,"line_end":247,"column_start":5,"column_end":19},"name":"tap_borrow_dbg","qualname":"::tap::Tap::tap_borrow_dbg","value":"pub fn tap_borrow_dbg<B, impl FnOnce(&B): FnOnce(&B) ->\n                      ()>(Self, impl FnOnce(&B)) -> Self where\nSelf: Borrow<B>, B: ?Sized","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Calls `.tap_borrow()` only in debug builds, and is erased in release\n builds.\n","sig":null,"attributes":[{"value":"/ Calls `.tap_borrow()` only in debug builds, and is erased in release","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":20496,"byte_end":20568,"line_start":244,"line_end":244,"column_start":2,"column_end":74}},{"value":"/ builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":20570,"byte_end":20581,"line_start":245,"line_end":245,"column_start":2,"column_end":13}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":20583,"byte_end":20600,"line_start":246,"line_end":246,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":20898,"byte_end":20916,"line_start":261,"line_end":261,"column_start":5,"column_end":23},"name":"tap_borrow_mut_dbg","qualname":"::tap::Tap::tap_borrow_mut_dbg","value":"pub fn tap_borrow_mut_dbg<B, impl FnOnce(&mut B): FnOnce(&mut B) ->\n                          ()>(Self, impl FnOnce(&mut B)) -> Self where\nSelf: BorrowMut<B>, B: ?Sized","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Calls `.tap_borrow_mut()` only in debug builds, and is erased in release\n builds.\n","sig":null,"attributes":[{"value":"/ Calls `.tap_borrow_mut()` only in debug builds, and is erased in release","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":20785,"byte_end":20861,"line_start":258,"line_end":258,"column_start":2,"column_end":78}},{"value":"/ builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":20863,"byte_end":20874,"line_start":259,"line_end":259,"column_start":2,"column_end":13}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":20876,"byte_end":20893,"line_start":260,"line_end":260,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":21210,"byte_end":21221,"line_start":275,"line_end":275,"column_start":5,"column_end":16},"name":"tap_ref_dbg","qualname":"::tap::Tap::tap_ref_dbg","value":"pub fn tap_ref_dbg<R, impl FnOnce(&R): FnOnce(&R) ->\n                   ()>(Self, impl FnOnce(&R)) -> Self where Self: AsRef<R>,\nR: ?Sized","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Calls `.tap_ref()` only in debug builds, and is erased in release\n builds.\n","sig":null,"attributes":[{"value":"/ Calls `.tap_ref()` only in debug builds, and is erased in release","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":21104,"byte_end":21173,"line_start":272,"line_end":272,"column_start":2,"column_end":71}},{"value":"/ builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":21175,"byte_end":21186,"line_start":273,"line_end":273,"column_start":2,"column_end":13}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":21188,"byte_end":21205,"line_start":274,"line_end":274,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":21495,"byte_end":21510,"line_start":289,"line_end":289,"column_start":5,"column_end":20},"name":"tap_ref_mut_dbg","qualname":"::tap::Tap::tap_ref_mut_dbg","value":"pub fn tap_ref_mut_dbg<R, impl FnOnce(&mut R): FnOnce(&mut R) ->\n                       ()>(Self, impl FnOnce(&mut R)) -> Self where\nSelf: AsMut<R>, R: ?Sized","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Calls `.tap_ref_mut()` only in debug builds, and is erased in release\n builds.\n","sig":null,"attributes":[{"value":"/ Calls `.tap_ref_mut()` only in debug builds, and is erased in release","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":21385,"byte_end":21458,"line_start":286,"line_end":286,"column_start":2,"column_end":75}},{"value":"/ builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":21460,"byte_end":21471,"line_start":287,"line_end":287,"column_start":2,"column_end":13}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":21473,"byte_end":21490,"line_start":288,"line_end":288,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":21794,"byte_end":21807,"line_start":303,"line_end":303,"column_start":5,"column_end":18},"name":"tap_deref_dbg","qualname":"::tap::Tap::tap_deref_dbg","value":"pub fn tap_deref_dbg<T, impl FnOnce(&T): FnOnce(&T) ->\n                     ()>(Self, impl FnOnce(&T)) -> Self where\nSelf: Deref<Target = T>, T: ?Sized","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Calls `.tap_deref()` only in debug builds, and is erased in release\n builds.\n","sig":null,"attributes":[{"value":"/ Calls `.tap_deref()` only in debug builds, and is erased in release","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":21686,"byte_end":21757,"line_start":300,"line_end":300,"column_start":2,"column_end":73}},{"value":"/ builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":21759,"byte_end":21770,"line_start":301,"line_end":301,"column_start":2,"column_end":13}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":21772,"byte_end":21789,"line_start":302,"line_end":302,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":22086,"byte_end":22103,"line_start":317,"line_end":317,"column_start":5,"column_end":22},"name":"tap_deref_mut_dbg","qualname":"::tap::Tap::tap_deref_mut_dbg","value":"pub fn tap_deref_mut_dbg<T, impl FnOnce(&mut T): FnOnce(&mut T) ->\n                         ()>(Self, impl FnOnce(&mut T)) -> Self where\nSelf: DerefMut + Deref<Target = T>, T: ?Sized","parent":{"krate":0,"index":94},"children":[],"decl_id":null,"docs":" Calls `.tap_deref_mut()` only in debug builds, and is erased in release\n builds.\n","sig":null,"attributes":[{"value":"/ Calls `.tap_deref_mut()` only in debug builds, and is erased in release","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":21974,"byte_end":22049,"line_start":314,"line_end":314,"column_start":2,"column_end":77}},{"value":"/ builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":22051,"byte_end":22062,"line_start":315,"line_end":315,"column_start":2,"column_end":13}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":22064,"byte_end":22081,"line_start":316,"line_end":316,"column_start":2,"column_end":19}}]},{"kind":"Trait","id":{"krate":0,"index":141},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":23070,"byte_end":23081,"line_start":346,"line_end":346,"column_start":11,"column_end":22},"name":"TapOptional","qualname":"::tap::TapOptional","value":"TapOptional","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":145},{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":151},{"krate":0,"index":153}],"decl_id":null,"docs":" Optional tapping, conditional on the optional presence of a value.","sig":null,"attributes":[{"value":"* Optional tapping, conditional on the optional presence of a value.\n\nThis trait is intended for use on types that express the concept of “optional\npresence”, primarily the [`Option`] monad. It provides taps that inspect the\ncontainer to determine if the effect function should execute or not.\n\n> Note: This trait is a specialization of [`TapFallible`], and exists because\n> the [`std::ops::Try`] trait is still unstable. When `Try` stabilizes, this\n> trait can be removed, and `TapFallible` blanket-applied to all `Try`\n> implementors.\n\n[`Option`]: https://doc.rust-lang.org/std/option/enum.Option.html\n[`TapFallible`]: trait.TapFallible.html\n[`std::ops::Try`]: https://doc.rust-lang.org/std/ops/trait.Try.html\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":22338,"byte_end":23059,"line_start":331,"line_end":345,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":142},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":23174,"byte_end":23177,"line_start":351,"line_end":351,"column_start":7,"column_end":10},"name":"Val","qualname":"::tap::TapOptional::Val","value":"type Val: ?Sized;","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":" The interior type that the container may or may not carry.\n","sig":null,"attributes":[{"value":"/ The interior type that the container may or may not carry.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":23105,"byte_end":23167,"line_start":350,"line_end":350,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":23566,"byte_end":23574,"line_start":361,"line_end":361,"column_start":5,"column_end":13},"name":"tap_some","qualname":"::tap::TapOptional::tap_some","value":"pub fn tap_some<impl FnOnce(&Self::Val): FnOnce(&Self::Val) ->\n                ()>(Self, impl FnOnce(&Self::Val)) -> Self","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":" Immutabily accesses an interior value only when it is present.","sig":null,"attributes":[{"value":"/ Immutabily accesses an interior value only when it is present.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":23189,"byte_end":23255,"line_start":353,"line_end":353,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":23257,"byte_end":23260,"line_start":354,"line_end":354,"column_start":2,"column_end":5}},{"value":"/ This function is identical to [`Tap::tap`], except that it is required","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":23262,"byte_end":23336,"line_start":355,"line_end":355,"column_start":2,"column_end":76}},{"value":"/ to check the implementing container for value presence before running.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":23338,"byte_end":23412,"line_start":356,"line_end":356,"column_start":2,"column_end":76}},{"value":"/ Implementors must not run the effect function if the container is marked","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":23414,"byte_end":23490,"line_start":357,"line_end":357,"column_start":2,"column_end":78}},{"value":"/ as being empty.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":23492,"byte_end":23511,"line_start":358,"line_end":358,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":23513,"byte_end":23516,"line_start":359,"line_end":359,"column_start":2,"column_end":5}},{"value":"/ [`Tap::tap`]: trait.Tap.html#method.tap","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":23518,"byte_end":23561,"line_start":360,"line_end":360,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":24008,"byte_end":24020,"line_start":371,"line_end":371,"column_start":5,"column_end":17},"name":"tap_some_mut","qualname":"::tap::TapOptional::tap_some_mut","value":"pub fn tap_some_mut<impl FnOnce(&mut Self::Val): FnOnce(&mut Self::Val) ->\n                    ()>(Self, impl FnOnce(&mut Self::Val)) -> Self","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":" Mutably accesses an interor value only when it is present.","sig":null,"attributes":[{"value":"/ Mutably accesses an interor value only when it is present.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":23623,"byte_end":23685,"line_start":363,"line_end":363,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":23687,"byte_end":23690,"line_start":364,"line_end":364,"column_start":2,"column_end":5}},{"value":"/ This function is identical to [`Tap::tap_mut`], except that it is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":23692,"byte_end":23761,"line_start":365,"line_end":365,"column_start":2,"column_end":71}},{"value":"/ required to check the implementing container for value presence before","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":23763,"byte_end":23837,"line_start":366,"line_end":366,"column_start":2,"column_end":76}},{"value":"/ running. Implementors must not run the effect function if the container","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":23839,"byte_end":23914,"line_start":367,"line_end":367,"column_start":2,"column_end":77}},{"value":"/ is marked as being empty.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":23916,"byte_end":23945,"line_start":368,"line_end":368,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":23947,"byte_end":23950,"line_start":369,"line_end":369,"column_start":2,"column_end":5}},{"value":"/ [`Tap::tap_mut`]: trait.Tap.html#method.tap_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":23952,"byte_end":24003,"line_start":370,"line_end":370,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":24443,"byte_end":24451,"line_start":381,"line_end":381,"column_start":5,"column_end":13},"name":"tap_none","qualname":"::tap::TapOptional::tap_none","value":"pub fn tap_none<impl FnOnce(): FnOnce() -> ()>(Self, impl FnOnce()) -> Self","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":" Runs an effect function when the container is empty.","sig":null,"attributes":[{"value":"/ Runs an effect function when the container is empty.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":24073,"byte_end":24129,"line_start":373,"line_end":373,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":24131,"byte_end":24134,"line_start":374,"line_end":374,"column_start":2,"column_end":5}},{"value":"/ This function is identical to [`Tap::tap`], except that it is required","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":24136,"byte_end":24210,"line_start":375,"line_end":375,"column_start":2,"column_end":76}},{"value":"/ to check the implementing container for value absence before running.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":24212,"byte_end":24285,"line_start":376,"line_end":376,"column_start":2,"column_end":75}},{"value":"/ Implementors must not run the effect function if the container is marked","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":24287,"byte_end":24363,"line_start":377,"line_end":377,"column_start":2,"column_end":78}},{"value":"/ as being non-empty.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":24365,"byte_end":24388,"line_start":378,"line_end":378,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":24390,"byte_end":24393,"line_start":379,"line_end":379,"column_start":2,"column_end":5}},{"value":"/ [`Tap::tap`]: trait.Tap.html#method.tap","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":24395,"byte_end":24438,"line_start":380,"line_end":380,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":24597,"byte_end":24609,"line_start":386,"line_end":386,"column_start":5,"column_end":17},"name":"tap_some_dbg","qualname":"::tap::TapOptional::tap_some_dbg","value":"pub fn tap_some_dbg<impl FnOnce(&Self::Val): FnOnce(&Self::Val) ->\n                    ()>(Self, impl FnOnce(&Self::Val)) -> Self","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":" Calls `.tap_some()` only in debug builds, and is erased in release\n builds.\n","sig":null,"attributes":[{"value":"/ Calls `.tap_some()` only in debug builds, and is erased in release","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":24490,"byte_end":24560,"line_start":383,"line_end":383,"column_start":2,"column_end":72}},{"value":"/ builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":24562,"byte_end":24573,"line_start":384,"line_end":384,"column_start":2,"column_end":13}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":24575,"byte_end":24592,"line_start":385,"line_end":385,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":24849,"byte_end":24865,"line_start":397,"line_end":397,"column_start":5,"column_end":21},"name":"tap_some_mut_dbg","qualname":"::tap::TapOptional::tap_some_mut_dbg","value":"pub fn tap_some_mut_dbg<impl FnOnce(&mut Self::Val): FnOnce(&mut Self::Val) ->\n                        ()>(Self, impl FnOnce(&mut Self::Val)) -> Self","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":" Calls `.tap_some_mut()` only in debug builds, and is erased in release\n builds.\n","sig":null,"attributes":[{"value":"/ Calls `.tap_some_mut()` only in debug builds, and is erased in release","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":24738,"byte_end":24812,"line_start":394,"line_end":394,"column_start":2,"column_end":76}},{"value":"/ builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":24814,"byte_end":24825,"line_start":395,"line_end":395,"column_start":2,"column_end":13}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":24827,"byte_end":24844,"line_start":396,"line_end":396,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":25109,"byte_end":25121,"line_start":408,"line_end":408,"column_start":5,"column_end":17},"name":"tap_none_dbg","qualname":"::tap::TapOptional::tap_none_dbg","value":"pub fn tap_none_dbg<impl FnOnce(): FnOnce() -> ()>(Self, impl FnOnce())\n-> Self","parent":{"krate":0,"index":141},"children":[],"decl_id":null,"docs":" Calls `.tap_none()` only in debug builds, and is erased in release\n builds.\n","sig":null,"attributes":[{"value":"/ Calls `.tap_none()` only in debug builds, and is erased in release","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":25002,"byte_end":25072,"line_start":405,"line_end":405,"column_start":2,"column_end":72}},{"value":"/ builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":25074,"byte_end":25085,"line_start":406,"line_end":406,"column_start":2,"column_end":13}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":25087,"byte_end":25104,"line_start":407,"line_end":407,"column_start":2,"column_end":19}}]},{"kind":"Trait","id":{"krate":0,"index":164},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":26312,"byte_end":26323,"line_start":458,"line_end":458,"column_start":11,"column_end":22},"name":"TapFallible","qualname":"::tap::TapFallible","value":"TapFallible","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":169},{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":175},{"krate":0,"index":177},{"krate":0,"index":179},{"krate":0,"index":181}],"decl_id":null,"docs":" Fallible tapping, conditional on the optional success of an expression.","sig":null,"attributes":[{"value":"* Fallible tapping, conditional on the optional success of an expression.\n\nThis trait is intended for use on types that express the concept of “fallible\npresence”, primarily the [`Result`] monad. It provides taps that inspect the\ncontainer to determine if the effect function should execute or not.\n\n> Note: This trait would ideally be implemented as a blanket over all\n> [`std::ops::Try`] implementors. When `Try` stabilizes, this crate can be\n> updated to do so.\n\n[`Result`]: https://doc.rust-lang.org/std/result/enum.Result.html\n[`std::ops::Try`]: https://doc.rust-lang.org/std/ops/trait.Try.html\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":25692,"byte_end":26301,"line_start":445,"line_end":457,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":165},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":26419,"byte_end":26421,"line_start":463,"line_end":463,"column_start":7,"column_end":9},"name":"Ok","qualname":"::tap::TapFallible::Ok","value":"type Ok: ?Sized;","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" The interior type used to indicate a successful construction.\n","sig":null,"attributes":[{"value":"/ The interior type used to indicate a successful construction.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":26347,"byte_end":26412,"line_start":462,"line_end":462,"column_start":2,"column_end":67}}]},{"kind":"Type","id":{"krate":0,"index":166},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":26501,"byte_end":26504,"line_start":466,"line_end":466,"column_start":7,"column_end":10},"name":"Err","qualname":"::tap::TapFallible::Err","value":"type Err: ?Sized;","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" The interior type used to indicate a failed construction.\n","sig":null,"attributes":[{"value":"/ The interior type used to indicate a failed construction.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":26433,"byte_end":26494,"line_start":465,"line_end":465,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":26879,"byte_end":26885,"line_start":476,"line_end":476,"column_start":5,"column_end":11},"name":"tap_ok","qualname":"::tap::TapFallible::tap_ok","value":"pub fn tap_ok<impl FnOnce(&Self::Ok): FnOnce(&Self::Ok) ->\n              ()>(Self, impl FnOnce(&Self::Ok)) -> Self","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" Immutably accesses an interior success value.","sig":null,"attributes":[{"value":"/ Immutably accesses an interior success value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":26516,"byte_end":26565,"line_start":468,"line_end":468,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":26567,"byte_end":26570,"line_start":469,"line_end":469,"column_start":2,"column_end":5}},{"value":"/ This function is identical to [`Tap::tap`], except that it is required","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":26572,"byte_end":26646,"line_start":470,"line_end":470,"column_start":2,"column_end":76}},{"value":"/ to check the implementing container for value success before running.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":26648,"byte_end":26721,"line_start":471,"line_end":471,"column_start":2,"column_end":75}},{"value":"/ Implementors must not run the effect function if the container is marked","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":26723,"byte_end":26799,"line_start":472,"line_end":472,"column_start":2,"column_end":78}},{"value":"/ as being a failure.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":26801,"byte_end":26824,"line_start":473,"line_end":473,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":26826,"byte_end":26829,"line_start":474,"line_end":474,"column_start":2,"column_end":5}},{"value":"/ [`Tap::tap`]: trait.Tap.html#method.tap","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":26831,"byte_end":26874,"line_start":475,"line_end":475,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":27306,"byte_end":27316,"line_start":486,"line_end":486,"column_start":5,"column_end":15},"name":"tap_ok_mut","qualname":"::tap::TapFallible::tap_ok_mut","value":"pub fn tap_ok_mut<impl FnOnce(&mut Self::Ok): FnOnce(&mut Self::Ok) ->\n                  ()>(Self, impl FnOnce(&mut Self::Ok)) -> Self","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" Mutably accesses an interior success value.","sig":null,"attributes":[{"value":"/ Mutably accesses an interior success value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":26933,"byte_end":26980,"line_start":478,"line_end":478,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":26982,"byte_end":26985,"line_start":479,"line_end":479,"column_start":2,"column_end":5}},{"value":"/ This function is identical to [`Tap::tap_mut`], except that it is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":26987,"byte_end":27056,"line_start":480,"line_end":480,"column_start":2,"column_end":71}},{"value":"/ required to check the implementing container for value success before","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":27058,"byte_end":27131,"line_start":481,"line_end":481,"column_start":2,"column_end":75}},{"value":"/ running. Implementors must not run the effect function if the container","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":27133,"byte_end":27208,"line_start":482,"line_end":482,"column_start":2,"column_end":77}},{"value":"/ is marked as being a failure.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":27210,"byte_end":27243,"line_start":483,"line_end":483,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":27245,"byte_end":27248,"line_start":484,"line_end":484,"column_start":2,"column_end":5}},{"value":"/ [`Tap::tap_mut`]: trait.Tap.html#method.tap_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":27250,"byte_end":27301,"line_start":485,"line_end":485,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":27731,"byte_end":27738,"line_start":496,"line_end":496,"column_start":5,"column_end":12},"name":"tap_err","qualname":"::tap::TapFallible::tap_err","value":"pub fn tap_err<impl FnOnce(&Self::Err): FnOnce(&Self::Err) ->\n               ()>(Self, impl FnOnce(&Self::Err)) -> Self","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" Immutably accesses an interior failure value.","sig":null,"attributes":[{"value":"/ Immutably accesses an interior failure value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":27368,"byte_end":27417,"line_start":488,"line_end":488,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":27419,"byte_end":27422,"line_start":489,"line_end":489,"column_start":2,"column_end":5}},{"value":"/ This function is identical to [`Tap::tap`], except that it is required","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":27424,"byte_end":27498,"line_start":490,"line_end":490,"column_start":2,"column_end":76}},{"value":"/ to check the implementing container for value failure before running.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":27500,"byte_end":27573,"line_start":491,"line_end":491,"column_start":2,"column_end":75}},{"value":"/ Implementors must not run the effect function if the container is marked","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":27575,"byte_end":27651,"line_start":492,"line_end":492,"column_start":2,"column_end":78}},{"value":"/ as being a success.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":27653,"byte_end":27676,"line_start":493,"line_end":493,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":27678,"byte_end":27681,"line_start":494,"line_end":494,"column_start":2,"column_end":5}},{"value":"/ [`Tap::tap`]: trait.Tap.html#method.tap","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":27683,"byte_end":27726,"line_start":495,"line_end":495,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":28160,"byte_end":28171,"line_start":506,"line_end":506,"column_start":5,"column_end":16},"name":"tap_err_mut","qualname":"::tap::TapFallible::tap_err_mut","value":"pub fn tap_err_mut<impl FnOnce(&mut Self::Err): FnOnce(&mut Self::Err) ->\n                   ()>(Self, impl FnOnce(&mut Self::Err)) -> Self","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" Mutably accesses an interior failure value.","sig":null,"attributes":[{"value":"/ Mutably accesses an interior failure value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":27787,"byte_end":27834,"line_start":498,"line_end":498,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":27836,"byte_end":27839,"line_start":499,"line_end":499,"column_start":2,"column_end":5}},{"value":"/ This function is identical to [`Tap::tap_mut`], except that it is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":27841,"byte_end":27910,"line_start":500,"line_end":500,"column_start":2,"column_end":71}},{"value":"/ required to check the implementing container for value failure before","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":27912,"byte_end":27985,"line_start":501,"line_end":501,"column_start":2,"column_end":75}},{"value":"/ running. Implementors must not run the effect function if the container","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":27987,"byte_end":28062,"line_start":502,"line_end":502,"column_start":2,"column_end":77}},{"value":"/ is marked as being a success.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":28064,"byte_end":28097,"line_start":503,"line_end":503,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":28099,"byte_end":28102,"line_start":504,"line_end":504,"column_start":2,"column_end":5}},{"value":"/ [`Tap::tap_mut`]: trait.Tap.html#method.tap_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":28104,"byte_end":28155,"line_start":505,"line_end":505,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":175},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":28324,"byte_end":28334,"line_start":510,"line_end":510,"column_start":5,"column_end":15},"name":"tap_ok_dbg","qualname":"::tap::TapFallible::tap_ok_dbg","value":"pub fn tap_ok_dbg<impl FnOnce(&Self::Ok): FnOnce(&Self::Ok) ->\n                  ()>(Self, impl FnOnce(&Self::Ok)) -> Self","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" Calls `.tap_ok()` only in debug builds, and is erased in release builds.\n","sig":null,"attributes":[{"value":"/ Calls `.tap_ok()` only in debug builds, and is erased in release builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":28224,"byte_end":28300,"line_start":508,"line_end":508,"column_start":2,"column_end":78}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":28302,"byte_end":28319,"line_start":509,"line_end":509,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":28569,"byte_end":28583,"line_start":521,"line_end":521,"column_start":5,"column_end":19},"name":"tap_ok_mut_dbg","qualname":"::tap::TapFallible::tap_ok_mut_dbg","value":"pub fn tap_ok_mut_dbg<impl FnOnce(&mut Self::Ok): FnOnce(&mut Self::Ok) ->\n                      ()>(Self, impl FnOnce(&mut Self::Ok)) -> Self","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" Calls `.tap_ok_mut()` only in debug builds, and is erased in release\n builds.\n","sig":null,"attributes":[{"value":"/ Calls `.tap_ok_mut()` only in debug builds, and is erased in release","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":28460,"byte_end":28532,"line_start":518,"line_end":518,"column_start":2,"column_end":74}},{"value":"/ builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":28534,"byte_end":28545,"line_start":519,"line_end":519,"column_start":2,"column_end":13}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":28547,"byte_end":28564,"line_start":520,"line_end":520,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":28823,"byte_end":28834,"line_start":532,"line_end":532,"column_start":5,"column_end":16},"name":"tap_err_dbg","qualname":"::tap::TapFallible::tap_err_dbg","value":"pub fn tap_err_dbg<impl FnOnce(&Self::Err): FnOnce(&Self::Err) ->\n                   ()>(Self, impl FnOnce(&Self::Err)) -> Self","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" Calls `.tap_err()` only in debug builds, and is erased in release\n builds.\n","sig":null,"attributes":[{"value":"/ Calls `.tap_err()` only in debug builds, and is erased in release","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":28717,"byte_end":28786,"line_start":529,"line_end":529,"column_start":2,"column_end":71}},{"value":"/ builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":28788,"byte_end":28799,"line_start":530,"line_end":530,"column_start":2,"column_end":13}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":28801,"byte_end":28818,"line_start":531,"line_end":531,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":29072,"byte_end":29087,"line_start":543,"line_end":543,"column_start":5,"column_end":20},"name":"tap_err_mut_dbg","qualname":"::tap::TapFallible::tap_err_mut_dbg","value":"pub fn tap_err_mut_dbg<impl FnOnce(&mut Self::Err): FnOnce(&mut Self::Err) ->\n                       ()>(Self, impl FnOnce(&mut Self::Err)) -> Self","parent":{"krate":0,"index":164},"children":[],"decl_id":null,"docs":" Calls `.tap_err_mut()` only in debug builds, and is erased in release\n builds.\n","sig":null,"attributes":[{"value":"/ Calls `.tap_err_mut()` only in debug builds, and is erased in release","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":28962,"byte_end":29035,"line_start":540,"line_end":540,"column_start":2,"column_end":75}},{"value":"/ builds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":29037,"byte_end":29048,"line_start":541,"line_end":541,"column_start":2,"column_end":13}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":29050,"byte_end":29067,"line_start":542,"line_end":542,"column_start":2,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":196},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/lib.rs","byte_start":4721,"byte_end":4728,"line_start":140,"line_end":140,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200}],"decl_id":null,"docs":" Reëxports all traits in one place, for easy import.\n","sig":null,"attributes":[{"value":"/ Reëxports all traits in one place, for easy import.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/lib.rs","byte_start":4656,"byte_end":4712,"line_start":139,"line_end":139,"column_start":1,"column_end":56}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":6942,"byte_end":6943,"line_start":58,"line_end":58,"column_start":18,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":7471,"byte_end":7472,"line_start":87,"line_end":87,"column_start":21,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":13319,"byte_end":13320,"line_start":234,"line_end":234,"column_start":18,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":22317,"byte_end":22318,"line_start":329,"line_end":329,"column_start":17,"column_end":18},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":25265,"byte_end":25271,"line_start":417,"line_end":417,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":29251,"byte_end":29257,"line_start":552,"line_end":552,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/lib.rs","byte_start":4622,"byte_end":4626,"line_start":135,"line_end":135,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/lib.rs","byte_start":4636,"byte_end":4640,"line_start":136,"line_end":136,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":18}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/lib.rs","byte_start":4650,"byte_end":4653,"line_start":137,"line_end":137,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":78}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":6942,"byte_end":6943,"line_start":58,"line_end":58,"column_start":18,"column_end":19},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":12},"to":{"krate":0,"index":8}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/conv.rs","byte_start":7471,"byte_end":7472,"line_start":87,"line_end":87,"column_start":21,"column_end":22},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":17},"to":{"krate":0,"index":13}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/pipe.rs","byte_start":13319,"byte_end":13320,"line_start":234,"line_end":234,"column_start":18,"column_end":19},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":77},"to":{"krate":0,"index":34}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":22317,"byte_end":22318,"line_start":329,"line_end":329,"column_start":17,"column_end":18},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":140},"to":{"krate":0,"index":94}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":25265,"byte_end":25271,"line_start":417,"line_end":417,"column_start":25,"column_end":31},"kind":{"Impl":{"id":4}},"from":{"krate":1,"index":36969},"to":{"krate":0,"index":141}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/tap-1.0.1/src/tap.rs","byte_start":29251,"byte_end":29257,"line_start":552,"line_end":552,"column_start":28,"column_end":34},"kind":{"Impl":{"id":5}},"from":{"krate":1,"index":37095},"to":{"krate":0,"index":164}}]}