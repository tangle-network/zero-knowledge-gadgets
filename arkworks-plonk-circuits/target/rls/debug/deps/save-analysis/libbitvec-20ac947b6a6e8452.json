{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4","program":"/Users/thomascnorton/.rustup/toolchains/nightly-2021-11-10-aarch64-apple-darwin/bin/rls","arguments":["--crate-name","bitvec","--edition=2018","/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"std\"","-C","metadata=20ac947b6a6e8452","-C","extra-filename=-20ac947b6a6e8452","--out-dir","/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps","-L","dependency=/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps","--extern","funty=/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps/libfunty-bf00fa3fbe923273.rmeta","--extern","radium=/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps/libradium-d82f93426915a6ab.rmeta","--extern","tap=/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps/libtap-7edec6f43088e2c8.rmeta","--extern","wyz=/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps/libwyz-89afbfdeea90b598.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/thomascnorton/.rustup/toolchains/nightly-2021-11-10-aarch64-apple-darwin"],"output":"/Users/thomascnorton/Documents/Webb/arkworks-gadgets/arkworks-plonk-circuits/target/rls/debug/deps/libbitvec-20ac947b6a6e8452.rmeta"},"prelude":{"crate_id":{"name":"bitvec","disambiguator":[1226961441699041326,0]},"crate_root":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src","external_crates":[{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[10313591498153884623,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","num":2,"id":{"name":"core","disambiguator":[5231689799850066461,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[17864008973282999150,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17296295565214172833,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[2118848927325286491,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[13292461249116594054,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4814502004061530608,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[15708407810567005444,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2791263468303431766,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[6506189918680636659,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[8728067978980854181,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[10381178398037116026,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[10719114933783356113,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[903433031267741442,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[3053230250002770710,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[4944501850750929564,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[675967159280285970,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","num":18,"id":{"name":"funty","disambiguator":[3290783299580355146,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","num":19,"id":{"name":"radium","disambiguator":[9909629879838656081,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","num":20,"id":{"name":"tap","disambiguator":[11512447895934554756,0]}},{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","num":21,"id":{"name":"wyz","disambiguator":[17131935380277713959,0]}}],"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":0,"byte_end":11445,"line_start":1,"line_end":298,"column_start":1,"column_end":12}},"imports":[{"kind":"Use","ref_id":{"krate":2,"index":0},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":29169,"byte_end":29173,"line_start":14,"line_end":14,"column_start":9,"column_end":13},"alias_span":null,"name":"core","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":18,"index":0},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":29199,"byte_end":29204,"line_start":17,"line_end":17,"column_start":9,"column_end":14},"alias_span":null,"name":"funty","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":0,"index":18},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":41795,"byte_end":41810,"line_start":423,"line_end":423,"column_start":15,"column_end":30},"alias_span":null,"name":"u8_from_ne_bits","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":0,"index":4938},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60745,"byte_end":60753,"line_start":284,"line_end":284,"column_start":21,"column_end":29},"alias_span":null,"name":"IntoIter","value":"","parent":{"krate":0,"index":65}},{"kind":"Use","ref_id":{"krate":0,"index":5372},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":217377,"byte_end":217381,"line_start":359,"line_end":359,"column_start":15,"column_end":19},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":1058}},{"kind":"Use","ref_id":{"krate":0,"index":5373},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":217377,"byte_end":217381,"line_start":359,"line_end":359,"column_start":15,"column_end":19},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":1058}},{"kind":"Use","ref_id":{"krate":0,"index":90},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":223322,"byte_end":223330,"line_start":10,"line_end":10,"column_start":9,"column_end":17},"alias_span":null,"name":"BitArray","value":"","parent":{"krate":0,"index":1117}},{"kind":"Use","ref_id":{"krate":0,"index":24},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":223333,"byte_end":223339,"line_start":11,"line_end":11,"column_start":2,"column_end":8},"alias_span":null,"name":"bitarr","value":"","parent":{"krate":0,"index":1117}},{"kind":"Use","ref_id":{"krate":0,"index":25},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":223342,"byte_end":223346,"line_start":12,"line_end":12,"column_start":2,"column_end":6},"alias_span":null,"name":"bits","value":"","parent":{"krate":0,"index":1117}},{"kind":"Use","ref_id":{"krate":0,"index":699},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":223356,"byte_end":223364,"line_start":13,"line_end":13,"column_start":9,"column_end":17},"alias_span":null,"name":"BitField","value":"","parent":{"krate":0,"index":1117}},{"kind":"Use","ref_id":{"krate":0,"index":1079},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":223378,"byte_end":223386,"line_start":15,"line_end":15,"column_start":3,"column_end":11},"alias_span":null,"name":"BitOrder","value":"","parent":{"krate":0,"index":1117}},{"kind":"Use","ref_id":{"krate":0,"index":5372},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":223390,"byte_end":223399,"line_start":16,"line_end":16,"column_start":3,"column_end":12},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":1117}},{"kind":"Use","ref_id":{"krate":0,"index":5373},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":223390,"byte_end":223399,"line_start":16,"line_end":16,"column_start":3,"column_end":12},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":1117}},{"kind":"Use","ref_id":{"krate":0,"index":5372},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":223403,"byte_end":223407,"line_start":17,"line_end":17,"column_start":3,"column_end":7},"alias_span":null,"name":"Lsb0","value":"","parent":{"krate":0,"index":1117}},{"kind":"Use","ref_id":{"krate":0,"index":5373},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":223403,"byte_end":223407,"line_start":17,"line_end":17,"column_start":3,"column_end":7},"alias_span":null,"name":"Lsb0","value":"","parent":{"krate":0,"index":1117}},{"kind":"Use","ref_id":{"krate":0,"index":5394},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":223411,"byte_end":223415,"line_start":18,"line_end":18,"column_start":3,"column_end":7},"alias_span":null,"name":"Msb0","value":"","parent":{"krate":0,"index":1117}},{"kind":"Use","ref_id":{"krate":0,"index":5395},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":223411,"byte_end":223415,"line_start":18,"line_end":18,"column_start":3,"column_end":7},"alias_span":null,"name":"Msb0","value":"","parent":{"krate":0,"index":1117}},{"kind":"Use","ref_id":{"krate":0,"index":1804},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":223431,"byte_end":223437,"line_start":21,"line_end":21,"column_start":3,"column_end":9},"alias_span":null,"name":"BitPtr","value":"","parent":{"krate":0,"index":1117}},{"kind":"Use","ref_id":{"krate":0,"index":1604},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":223441,"byte_end":223452,"line_start":22,"line_end":22,"column_start":3,"column_end":14},"alias_span":null,"name":"BitPtrRange","value":"","parent":{"krate":0,"index":1117}},{"kind":"Use","ref_id":{"krate":0,"index":1425},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":223456,"byte_end":223462,"line_start":23,"line_end":23,"column_start":3,"column_end":9},"alias_span":null,"name":"BitRef","value":"","parent":{"krate":0,"index":1117}},{"kind":"Use","ref_id":{"krate":0,"index":2345},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":223476,"byte_end":223484,"line_start":25,"line_end":25,"column_start":9,"column_end":17},"alias_span":null,"name":"BitSlice","value":"","parent":{"krate":0,"index":1117}},{"kind":"Use","ref_id":{"krate":0,"index":3478},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":223494,"byte_end":223502,"line_start":26,"line_end":26,"column_start":9,"column_end":17},"alias_span":null,"name":"BitStore","value":"","parent":{"krate":0,"index":1117}},{"kind":"Use","ref_id":{"krate":0,"index":3523},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":223511,"byte_end":223518,"line_start":27,"line_end":27,"column_start":8,"column_end":15},"alias_span":null,"name":"BitView","value":"","parent":{"krate":0,"index":1117}},{"kind":"Use","ref_id":{"krate":0,"index":27},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":223568,"byte_end":223574,"line_start":32,"line_end":32,"column_start":2,"column_end":8},"alias_span":null,"name":"bitbox","value":"","parent":{"krate":0,"index":1117}},{"kind":"Use","ref_id":{"krate":0,"index":26},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":223577,"byte_end":223583,"line_start":33,"line_end":33,"column_start":2,"column_end":8},"alias_span":null,"name":"bitvec","value":"","parent":{"krate":0,"index":1117}},{"kind":"Use","ref_id":{"krate":0,"index":3622},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":223593,"byte_end":223599,"line_start":34,"line_end":34,"column_start":9,"column_end":15},"alias_span":null,"name":"BitBox","value":"","parent":{"krate":0,"index":1117}},{"kind":"Use","ref_id":{"krate":0,"index":4097},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":223607,"byte_end":223613,"line_start":35,"line_end":35,"column_start":7,"column_end":13},"alias_span":null,"name":"BitVec","value":"","parent":{"krate":0,"index":1117}},{"kind":"Use","ref_id":{"krate":0,"index":5338},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228249,"byte_end":228254,"line_start":103,"line_end":103,"column_start":3,"column_end":8},"alias_span":null,"name":"Const","value":"","parent":{"krate":0,"index":1176}},{"kind":"Use","ref_id":{"krate":0,"index":5339},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228249,"byte_end":228254,"line_start":103,"line_end":103,"column_start":3,"column_end":8},"alias_span":null,"name":"Const","value":"","parent":{"krate":0,"index":1176}},{"kind":"Use","ref_id":{"krate":0,"index":5355},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228258,"byte_end":228261,"line_start":104,"line_end":104,"column_start":3,"column_end":6},"alias_span":null,"name":"Mut","value":"","parent":{"krate":0,"index":1176}},{"kind":"Use","ref_id":{"krate":0,"index":5356},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228258,"byte_end":228261,"line_start":104,"line_end":104,"column_start":3,"column_end":6},"alias_span":null,"name":"Mut","value":"","parent":{"krate":0,"index":1176}},{"kind":"Use","ref_id":{"krate":0,"index":1265},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228291,"byte_end":228298,"line_start":108,"line_end":108,"column_start":4,"column_end":11},"alias_span":null,"name":"Address","value":"","parent":{"krate":0,"index":1176}},{"kind":"Use","ref_id":{"krate":0,"index":5416},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228303,"byte_end":228315,"line_start":109,"line_end":109,"column_start":4,"column_end":16},"alias_span":null,"name":"AddressError","value":"","parent":{"krate":0,"index":1176}},{"kind":"Use","ref_id":{"krate":0,"index":1425},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228331,"byte_end":228337,"line_start":111,"line_end":111,"column_start":10,"column_end":16},"alias_span":null,"name":"BitRef","value":"","parent":{"krate":0,"index":1176}},{"kind":"Use","ref_id":{"krate":0,"index":1604},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228348,"byte_end":228359,"line_start":112,"line_end":112,"column_start":10,"column_end":21},"alias_span":null,"name":"BitPtrRange","value":"","parent":{"krate":0,"index":1176}},{"kind":"Use","ref_id":{"krate":0,"index":1804},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228376,"byte_end":228382,"line_start":114,"line_end":114,"column_start":4,"column_end":10},"alias_span":null,"name":"BitPtr","value":"","parent":{"krate":0,"index":1176}},{"kind":"Use","ref_id":{"krate":0,"index":5452},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228387,"byte_end":228398,"line_start":115,"line_end":115,"column_start":4,"column_end":15},"alias_span":null,"name":"BitPtrError","value":"","parent":{"krate":0,"index":1176}},{"kind":"Use","ref_id":{"krate":0,"index":5489},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228413,"byte_end":228425,"line_start":117,"line_end":117,"column_start":9,"column_end":21},"alias_span":null,"name":"BitSpanError","value":"","parent":{"krate":0,"index":1176}},{"kind":"Use","ref_id":{"krate":0,"index":2695},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437358,"byte_end":437366,"line_start":2736,"line_end":2736,"column_start":3,"column_end":11},"alias_span":null,"name":"from_mut","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":2698},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437370,"byte_end":437384,"line_start":2737,"line_end":2737,"column_start":3,"column_end":17},"alias_span":null,"name":"from_raw_parts","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":2702},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437388,"byte_end":437406,"line_start":2738,"line_end":2738,"column_start":3,"column_end":21},"alias_span":null,"name":"from_raw_parts_mut","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":2692},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437410,"byte_end":437418,"line_start":2739,"line_end":2739,"column_start":3,"column_end":11},"alias_span":null,"name":"from_ref","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":2706},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437422,"byte_end":437435,"line_start":2740,"line_end":2740,"column_start":3,"column_end":16},"alias_span":null,"name":"BitSliceIndex","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":5709},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437452,"byte_end":437458,"line_start":2743,"line_end":2743,"column_start":3,"column_end":9},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":5782},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437462,"byte_end":437473,"line_start":2744,"line_end":2744,"column_start":3,"column_end":14},"alias_span":null,"name":"ChunksExact","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":5822},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437477,"byte_end":437491,"line_start":2745,"line_end":2745,"column_start":3,"column_end":17},"alias_span":null,"name":"ChunksExactMut","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":5748},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437495,"byte_end":437504,"line_start":2746,"line_end":2746,"column_start":3,"column_end":12},"alias_span":null,"name":"ChunksMut","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":2821},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437508,"byte_end":437512,"line_start":2747,"line_end":2747,"column_start":3,"column_end":7},"alias_span":null,"name":"Iter","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":2854},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437516,"byte_end":437523,"line_start":2748,"line_end":2748,"column_start":3,"column_end":10},"alias_span":null,"name":"IterMut","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":6302},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437527,"byte_end":437535,"line_start":2749,"line_end":2749,"column_start":3,"column_end":11},"alias_span":null,"name":"IterOnes","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":6351},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437539,"byte_end":437548,"line_start":2750,"line_end":2750,"column_start":3,"column_end":12},"alias_span":null,"name":"IterZeros","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":5857},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437552,"byte_end":437559,"line_start":2751,"line_end":2751,"column_start":3,"column_end":10},"alias_span":null,"name":"RChunks","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":5930},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437563,"byte_end":437575,"line_start":2752,"line_end":2752,"column_start":3,"column_end":15},"alias_span":null,"name":"RChunksExact","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":5970},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437579,"byte_end":437594,"line_start":2753,"line_end":2753,"column_start":3,"column_end":18},"alias_span":null,"name":"RChunksExactMut","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":5896},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437598,"byte_end":437608,"line_start":2754,"line_end":2754,"column_start":3,"column_end":13},"alias_span":null,"name":"RChunksMut","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":6120},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437612,"byte_end":437618,"line_start":2755,"line_end":2755,"column_start":3,"column_end":9},"alias_span":null,"name":"RSplit","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":2908},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437622,"byte_end":437631,"line_start":2756,"line_end":2756,"column_start":3,"column_end":12},"alias_span":null,"name":"RSplitMut","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":2932},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437635,"byte_end":437642,"line_start":2757,"line_end":2757,"column_start":3,"column_end":10},"alias_span":null,"name":"RSplitN","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":2939},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437646,"byte_end":437656,"line_start":2758,"line_end":2758,"column_start":3,"column_end":13},"alias_span":null,"name":"RSplitNMut","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":6030},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437660,"byte_end":437665,"line_start":2759,"line_end":2759,"column_start":3,"column_end":8},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":2900},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437669,"byte_end":437677,"line_start":2760,"line_end":2760,"column_start":3,"column_end":11},"alias_span":null,"name":"SplitMut","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":2918},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437681,"byte_end":437687,"line_start":2761,"line_end":2761,"column_start":3,"column_end":9},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":2925},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437691,"byte_end":437700,"line_start":2762,"line_end":2762,"column_start":3,"column_end":12},"alias_span":null,"name":"SplitNMut","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":5670},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437704,"byte_end":437711,"line_start":2763,"line_end":2763,"column_start":3,"column_end":10},"alias_span":null,"name":"Windows","value":"","parent":{"krate":0,"index":2242}},{"kind":"Use","ref_id":{"krate":0,"index":4462},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":705359,"byte_end":705364,"line_start":1054,"line_end":1054,"column_start":2,"column_end":7},"alias_span":null,"name":"Drain","value":"","parent":{"krate":0,"index":4028}},{"kind":"Use","ref_id":{"krate":0,"index":4419},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":705367,"byte_end":705375,"line_start":1055,"line_end":1055,"column_start":2,"column_end":10},"alias_span":null,"name":"IntoIter","value":"","parent":{"krate":0,"index":4028}},{"kind":"Use","ref_id":{"krate":0,"index":7890},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":705378,"byte_end":705384,"line_start":1056,"line_end":1056,"column_start":2,"column_end":8},"alias_span":null,"name":"Splice","value":"","parent":{"krate":0,"index":4028}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":0,"byte_end":11445,"line_start":1,"line_end":298,"column_start":1,"column_end":12},"name":"","qualname":"::","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":28},{"krate":0,"index":65},{"krate":0,"index":516},{"krate":0,"index":550},{"krate":0,"index":642},{"krate":0,"index":829},{"krate":0,"index":1019},{"krate":0,"index":1050},{"krate":0,"index":1058},{"krate":0,"index":1117},{"krate":0,"index":1176},{"krate":0,"index":2242},{"krate":0,"index":3448},{"krate":0,"index":3495},{"krate":0,"index":3575},{"krate":0,"index":4028}],"decl_id":null,"docs":" # `bitvec` — Addressable Bits","sig":null,"attributes":[{"value":"* # `bitvec` — Addressable Bits\n\n`bitvec` provides the foundation tools needed to implement truly single-bit\n`bool` collections and arbitrary bit-precision addressing. It builds compact\ncollections and performant [bitfield] regions with a high-level, expressive, API\nthat compiles down to the simple machine instructions you would expect.\n\n# Examples\n\nThe [`examples/`] directory of the project repository contains some programs\nthat showcase different `bitvec` features and use cases. In addition, each data\nstructure’s API documentation contains more focused samples.\n\nTo begin using `bitvec`, you need only import its [prelude]. Once in scope,\n`bitvec` can take over existing memory buffers or create entirely new values:\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = &[0u8, 1, 2, 3];\nlet data_bits = data.view_bits::<Msb0>();\n\nlet literal_bits = bits![Lsb0, u16; 1, 0, 1, 1];\nassert_eq!(literal_bits.as_slice()[0], 0b1101);\n\nlet array_bool = bitarr![1; 40];\n# #[cfg(feature = \"alloc\")] {\nlet boxed_bool = bitbox![Lsb0, u32; 1; 50];\nlet vec_bool = bitvec![Msb0, usize; 1; 60];\n# }\n```\n\nThe two easiest entry points into `bitvec` are through the [`BitView`] trait,\nwhich provides extension methods on ordinary memory to view it as a\n[`BitSlice`], and the [macro] constructors, which convert token strings into\nappropriate buffers at compile time. Each data structure also has its own\nconstructor functions that create new buffers or borrow existing values.\n\nOnce in use, `bitvec`’s types obey all the same patterns and APIs that you have\ncome to expect from their analogues in the [`core`], [`alloc`], and [`std`]\nlibraries.\n\n# Usage\n\n`bitvec` provides data structures that specialize the major sequence types in\nthe standard libraries:\n\n- `[bool]` becomes [`BitSlice`]\n- `[bool; N]` becomes [`BitArray`]\n- `Box<[bool]>` becomes [`BitBox`]\n- `Vec<bool>` becomes [`BitVec`]\n\nYou can start using the crate in an existing codebase by replacing types and\nchasing compiler errors from there.\n\nAs an example,\n\n```rust\n# #[cfg(feature = \"alloc\")] {\nlet mut io_buf: Vec<u8> = Vec::new();\nio_buf.extend(&[0x47, 0xA5]);\n\nlet stats: Vec<bool> = vec![\n  true, false, true, true,\n  false, false, true, false,\n];\n# }\n```\n\nwould become\n\n```rust\n# #[cfg(feature = \"alloc\")] {\nuse bitvec::prelude::*;\n\nlet mut io_buf: BitVec<Msb0, u8> = BitVec::new();\nio_buf.resize(16, false);\nio_buf[.. 4].store(4u8);\nio_buf[4 .. 8].store(7u8);\nio_buf[8 .. 16].store(0xA5u8);\n\nlet stats: BitVec = bitvec![\n  1, 0, 1, 1,\n  0, 0, 1, 0,\n];\n# }\n```\n\n## Type Arguments\n\nThe `bitvec` data structures are all generic over two type parameters which\ncontrol how they view and manage the memory they use. These type parameters\nallow users to precisely control the memory layout, value bit-patterns, and\ngenerated instructions, but most users of the library will not need to be\ngeneric over them. Instead, you probably either do not care about the details of\nthe underlying memory, or you have a specific and fixed layout requirement. In\neither case, you will likely select a specific combination of type arguments and\nuse it consistently throughout your project.\n\nYou *can* write your project to be generic over these type arguments, and this\nis certainly useful when writing code that is not coupled directly to memory,\nincreases complexity with little practical gain.\n\nThe default type arguments are chosen for optimal behavior in memory use and\ninstruction selection. The unadorned types [`BitArray`], [`BitSlice`],\n[`BitBox`], and [`BitVec`] can all be used in type-annotation position (`let`\nbindings, `struct` fields, and function arguments). Users who need to specify\ntheir type arguments should prefer to do so in a `type` alias, and use that\nalias throughout their project instead of the much longer fully-qualified\n`bitvec` type names:\n\n```rust\nuse bitvec::prelude::*;\n\npub type MySlice = BitSlice<Msb0, u8>;\npub type MyArray20 = bitarr![for 20, in Msb0, u8];\n# #[cfg(feature = \"alloc\")]\npub type MyVec = BitVec<Msb0, u8>;\n\nfn make_buffer() -> MyVec {\n  MyVec::new()\n}\n```\n\nIn general, you will probably work with [`BitSlice`] borrows and [`BitVec`]\nowned buffers. The [`BitArray`] and [`BitBox`] types are provided for\ncompleteness and have their uses, but the additional constraints and frozen size\nrender them less commonly useful.\n\n## Additional Details\n\nAs a replacement for `bool` sequences, you should be able to replace old type\ndefinition and value construction sites with their corresponding items from this\nproject, and the rest of your project should just work with the new types.\n\nTo use `bitvec` for structural [bitfields] or specialized I/O protocol buffers,\nyou should use [`BitArray`] or [`BitVec`] to manage your data buffers (for\ncompile-time statically-sized and run-time dynamically-sized, respectively), and\nthe [`BitField`] trait to manage transferring values into and out of them.\n\nThe [`BitSlice`] type contains most of the behavior that interacts with the\n*contents* of a memory buffer. [`BitVec`] adds behavior that operates on\nallocations, and specializes [`BitSlice`] behaviors that can take advantage of\nowned buffers.\n\nThe [`domain`] module, whose types are accessed by the `.{bit_,}domain{,_mut}`\nmethods on [`BitSlice`], allows users to split their views of memory at aliasing\nboundaries. This removes synchronization guards where `bitvec` can prove that\ndoing so is legal and correct.\n\nThere are many ways to construct a bit-level view of data. The [`BitArray`],\n[`BitBox`], and [`BitVec`] types all own a buffer of memory and dereference it\nto [`BitSlice`] in order to view it. In addition, you can borrow any piece of\nordinary Rust memory as a `BitSlice` view by using its borrowing constructor\nfunctions or the [`BitView`] trait’s extension methods.\n\n# Capabilities\n\n`bitvec` stands out from other bit-sequence libraries, both in Rust and in other\nlanguages, in a few significant ways.\n\nUnlike other Rust libraries, `bitvec` stores its region information in\nspecially-encoded pointers *to* memory regions, rather than in the region\nitself. By using its own pointer encoding scheme, `bitvec` can use references\n(`&BitSlice<_, _>` and `&mut BitSlice<_, _>`) to manage memory accesses and fit\nseamlessly into the Rust language rules and API signatures.\n\nUnlike *any* other bit-sequence system, `bitvec` enables users to specify both\nthe register element type used to store data and also the ordering of bits\nwithin each register element. This sidesteps the problems found in C\n[bitfields], C++ [`std::bitset`] and [`std::vector<bool>`], Python’s\n[`bitstring`], Erlang’s [`bitstream`], and other Rust libraries such as\n[`bit-vec`].\n\nBy permitting the in-memory layout to be specified by the user, rather than\nhard-coding it within the library, `bitvec` enables users to select the behavior\ncharacteristics they want or need without significant effort on their part.\n\nThis works by supplying two type parameters: an `O` [`BitOrder`] ordering of\nbits within a register element, and a `T` [`BitStore`] register element used for\nstorage and memory description. `T` is restricted to be only the raw unsigned\nintegers, and [`bitvec`-provided wrappers][`BitSafe`] over [atomic] and [`Cell`]\nsynchronization guards, that fit within processor registers on your target.\n\nThese parameters permit the `bitvec` type system to track memory access rules\nand bit addressing, thus enabling a nearly seamless use of [`BitSlice`]s as if\nthey were ordinary Rust slices.\n\n`bitvec` correctly handles memory aliasing by leveraging the type system to mark\nregions that have become subject to shared mutability. This mark can, depending\non your build settings, either forbid moving such slices across threads, or\nissue lock instructions to the memory bus when accessing memory. You will never\nneed to add your own guards to prevent race conditions, and [`BitSlice`]\nprovides interfaces to separate any bit-slice into its aliased and unaliased\nsubslices.\n\nWhere possible, `bitvec` uses its knowledge of bit ordering and memory\navailability to accelerate memory operations from individual bit-by-bit walks to\nbatched operations within a register. This is an area of ongoing development,\nand is an implementation detail rather than an aspect of public API.\n\n`bitvec`’s performance even when working with individual bits is as close to\nideal as a general-purpose library can be, but the width of processor registers\nmeans that no amount of performance improvement at the individual bit level can\ncompete with instructions operating on 32 or 64 bits at once. If you encounter\nperformance bottlenecks, you can escape `bitvec`’s views to operate on the\nmemory directly, or submit an issue for future work on specialized batch\nparallelization.\n\n# Project Structure\n\nYou should generally import the library [prelude], with\n\n```rust\nuse bitvec::prelude::*;\n```\n\nThe prelude contains the basic symbols you will need to make use of the crate:\nthe names of data structures, ordering parameters, useful traits, and\nconstructor macros. Almost all symbols begin with the prefix `Bit`; only the\norderings [`Lsb0`], [`Msb0`], and [`LocalBits`] do not. This will reduce the\nlikelihood of name collisions.\n\nEach major component in the library is divided into its own module. This\nincludes each data structure and trait, as well as utility objects used for\nimplementation. The data structures that mirror the language distribution have\nsubmodules for each part of their mirroring: `api` ports inherent methods,\n`iter` contains iteration logic, `ops` overrides operator sigils, and `traits`\nholds all other trait implementations. The data structure’s own module typically\nonly contains its own definition and its inherent methods that are not ports of\nthe standard libraries.\n\n[atomic]: core::sync::atomic\n[bitfield]: https://en.cppreference.com/w/c/language/bit_field\n[bitfields]: https://en.cppreference.com/w/c/language/bit_field\n[macro]: #macros\n[prelude]: crate::prelude\n\n[`BitArray`]: crate::array::BitArray\n[`BitBox`]: crate::boxed::BitBox\n[`BitField`]: crate::field::BitField\n[`BitOrder`]: crate::order::BitOrder\n[`BitSafe`]: crate::access::BitSafe\n[`BitSlice`]: crate::slice::BitSlice\n[`BitStore`]: crate::store::BitStore\n[`BitVec`]: crate::vec::BitVec\n[`BitView`]: crate::view::BitView\n[`Cell`]: core::cell::Cell\n[`LocalBits`]: crate::order::LocalBits\n[`Lsb0`]: crate::order::Lsb0\n[`Msb0`]: crate::order::Msb0\n\n[`alloc`]: alloc\n[`bitstream`]: https://erlang.org/doc/programming_examples/bit_syntax.html\n[`bitstring`]: https://pypi.org/project/bitstring/\n[`bit-vec`]: https://crates.io/crates/bit-vec\n[`core`]: core\n[`domain`]: crate::domain\n[`examples/`]: https://github.com/myrrlyn/bitvec/tree/HEAD/examples\n[`std`]: std\n[`std::bitset`]: https://en.cppreference.com/w/cpp/utility/bitset\n[`std::vector<bool>`]: https://en.cppreference.com/w/cpp/container/vector_bool\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":0,"byte_end":10855,"line_start":1,"line_end":263,"column_start":1,"column_end":4}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":10930,"byte_end":10948,"line_start":266,"line_end":266,"column_start":31,"column_end":49}},{"value":"deny(unconditional_recursion)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11007,"byte_end":11040,"line_start":268,"line_end":268,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"macros","qualname":"::macros","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27}],"decl_id":null,"docs":" Constructor macros for the crate’s collection types.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11089,"byte_end":11101,"line_start":273,"line_end":273,"column_start":1,"column_end":13}},{"value":"/ Constructor macros for the crate’s collection types.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros.rs","byte_start":11447,"byte_end":11505,"line_start":1,"line_end":1,"column_start":1,"column_end":57}},{"value":"allow(deprecated)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros.rs","byte_start":11507,"byte_end":11528,"line_start":3,"line_end":3,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":5},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"internal","qualname":"::macros::internal","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","parent":null,"children":[{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":23}],"decl_id":null,"docs":" Internal implementation macros for the public exports.","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros.rs","byte_start":11530,"byte_end":11542,"line_start":5,"line_end":5,"column_start":1,"column_end":13}},{"value":"* Internal implementation macros for the public exports.\n\nThe macros in this module are required to be exported from the crate, as the\npublic macros will call them from client contexts (`macro_rules!` expansion\nbodies are not in source crate scope, as they are token expansion rather than\nsymbolic calls). However, they are not part of the public *API* of the crate,\nand are not intended for use anywhere but in the expansion bodies of the\npublic-API constructor macros.\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":28651,"byte_end":29127,"line_start":1,"line_end":9,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":18},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":41052,"byte_end":41067,"line_start":378,"line_end":378,"column_start":14,"column_end":29},"name":"u8_from_le_bits","qualname":"::macros::internal::u8_from_le_bits","value":"pub const fn u8_from_le_bits(bool, bool, bool, bool, bool, bool, bool, bool)\n-> u8","parent":null,"children":[],"decl_id":null,"docs":" Construct a `u8` from bits applied in Lsb0-order.\n","sig":null,"attributes":[{"value":"/ Construct a `u8` from bits applied in Lsb0-order.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":40907,"byte_end":40960,"line_start":375,"line_end":375,"column_start":1,"column_end":54}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":40961,"byte_end":41001,"line_start":376,"line_end":376,"column_start":1,"column_end":41}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":41002,"byte_end":41038,"line_start":377,"line_end":377,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":19},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":41465,"byte_end":41480,"line_start":401,"line_end":401,"column_start":14,"column_end":29},"name":"u8_from_be_bits","qualname":"::macros::internal::u8_from_be_bits","value":"pub const fn u8_from_be_bits(bool, bool, bool, bool, bool, bool, bool, bool)\n-> u8","parent":null,"children":[],"decl_id":null,"docs":" Construct a `u8` from bits applied in Msb0-order.\n","sig":null,"attributes":[{"value":"/ Construct a `u8` from bits applied in Msb0-order.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":41320,"byte_end":41373,"line_start":398,"line_end":398,"column_start":1,"column_end":54}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":41374,"byte_end":41414,"line_start":399,"line_end":399,"column_start":1,"column_end":41}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":41415,"byte_end":41451,"line_start":400,"line_end":400,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":23},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":42166,"byte_end":42193,"line_start":434,"line_end":434,"column_start":14,"column_end":41},"name":"__deprecated_order_no_store","qualname":"::macros::internal::__deprecated_order_no_store","value":"pub const fn __deprecated_order_no_store()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":41943,"byte_end":41973,"line_start":430,"line_end":430,"column_start":1,"column_end":31}},{"value":"deprecated =\n  \"Ordering-only macro constructors are deprecated. Specify a \\\n                storage type as well, or remove the ordering and use the \\\n                default.\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":41974,"byte_end":42152,"line_start":431,"line_end":433,"column_start":1,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":28},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"access","qualname":"::access","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","parent":null,"children":[{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":57},{"krate":0,"index":59},{"krate":0,"index":64},{"krate":0,"index":4908},{"krate":0,"index":4910},{"krate":0,"index":4893},{"krate":0,"index":4912},{"krate":0,"index":4914},{"krate":0,"index":4898},{"krate":0,"index":4916},{"krate":0,"index":4918},{"krate":0,"index":4903},{"krate":0,"index":4925},{"krate":0,"index":4927},{"krate":0,"index":4920},{"krate":0,"index":4934},{"krate":0,"index":4936},{"krate":0,"index":4929}],"decl_id":null,"docs":" Memory access guards.","sig":null,"attributes":[{"value":"* Memory access guards.\n\n[`bitvec`] allows a program to produce handles over memory that do not logically\nalias their bits, but may alias in hardware. This module provides a unified\ninterface for memory accesses that can be specialized to handle aliased and\nunaliased access events.\n\nThe [`BitAccess`] trait provides capabilities to access bits in memory elements\nthrough shared references, and its implementations are responsible for\ncoördinating synchronization and contention as needed.\n\nThe [`BitSafe`] trait abstracts over wrappers to the [`Cell`] and [atomic] types\nthat forbid writing through their references, even when other references to the\nsame location may write.\n\n[`BitAccess`]: crate::access::BitAccess\n[`BitSafe`]: crate::access::BitSafe\n[`Cell`]: core::cell::Cell\n[`bitvec`]: crate\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":42492,"byte_end":43298,"line_start":1,"line_end":20,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":49},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44272,"byte_end":44281,"line_start":54,"line_end":54,"column_start":11,"column_end":20},"name":"BitAccess","qualname":"::access::BitAccess","value":"BitAccess: Radium","parent":null,"children":[{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":55}],"decl_id":null,"docs":" Abstracts over the instructions used when accessing a memory location.","sig":null,"attributes":[{"value":"* Abstracts over the instructions used when accessing a memory location.\n\nThis trait provides functions to manipulate bits in a referent memory register\nthrough the appropriate access instructions, so that use sites elsewhere in the\ncrate can select their required behavior without changing their interface.\n\nThis is automatically implemented for all types that permit shared/mutable\nmemory access to memory registers through the [`radium`] crate. Its use is\nconstrained in the [`store`] module.\n\nThis trait is only ever used by [`bitvec`] internals, and is never exposed\noutside the crate. It must be marked as public so that it can be used as an\nassociated item in [`BitStore`], even though it is never made accessible.\n\n[`BitStore`]: crate::store::BitStore\n[`bitvec`]: crate\n[`radium`]: radium\n[`store`]: crate::store\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":43435,"byte_end":44261,"line_start":35,"line_end":53,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45297,"byte_end":45307,"line_start":81,"line_end":81,"column_start":5,"column_end":15},"name":"clear_bits","qualname":"::access::BitAccess::clear_bits","value":"pub fn clear_bits(&Self, BitMask<Self::Item>)","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Clears any number of bits in a memory register to `0`.","sig":null,"attributes":[{"value":"/ Clears any number of bits in a memory register to `0`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44335,"byte_end":44393,"line_start":57,"line_end":57,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44395,"byte_end":44398,"line_start":58,"line_end":58,"column_start":2,"column_end":5}},{"value":"/ The mask provided to this method must be constructed from indices that","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44400,"byte_end":44474,"line_start":59,"line_end":59,"column_start":2,"column_end":76}},{"value":"/ are valid in the caller’s context. As the mask is already computed by","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44476,"byte_end":44551,"line_start":60,"line_end":60,"column_start":2,"column_end":75}},{"value":"/ the caller, this does not take an ordering type parameter.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44553,"byte_end":44615,"line_start":61,"line_end":61,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44617,"byte_end":44620,"line_start":62,"line_end":62,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44622,"byte_end":44638,"line_start":63,"line_end":63,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44640,"byte_end":44643,"line_start":64,"line_end":64,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44645,"byte_end":44658,"line_start":65,"line_end":65,"column_start":2,"column_end":15}},{"value":"/ - `mask`: A mask of any number of bits. This is a selection mask: all","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44660,"byte_end":44733,"line_start":66,"line_end":66,"column_start":2,"column_end":75}},{"value":"/   bits in the mask that are set to `1` will be modified in the element","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44735,"byte_end":44809,"line_start":67,"line_end":67,"column_start":2,"column_end":76}},{"value":"/   at `*self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44811,"byte_end":44828,"line_start":68,"line_end":68,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44830,"byte_end":44833,"line_start":69,"line_end":69,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44835,"byte_end":44848,"line_start":70,"line_end":70,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44850,"byte_end":44853,"line_start":71,"line_end":71,"column_start":2,"column_end":5}},{"value":"/ All bits in `*self` that are selected (set to `1` in the `mask`) will be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44855,"byte_end":44931,"line_start":72,"line_end":72,"column_start":2,"column_end":78}},{"value":"/ cleared. All bits in `*self` that are not selected (cleared to `0` in","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44933,"byte_end":45006,"line_start":73,"line_end":73,"column_start":2,"column_end":75}},{"value":"/ the `mask`) are unchanged.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45008,"byte_end":45038,"line_start":74,"line_end":74,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45040,"byte_end":45043,"line_start":75,"line_end":75,"column_start":2,"column_end":5}},{"value":"/ Do not invert the `mask` prior to calling this function in order to save","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45045,"byte_end":45121,"line_start":76,"line_end":76,"column_start":2,"column_end":78}},{"value":"/ the unselected bits and clear the selected bits. [`BitMask`] is a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45123,"byte_end":45192,"line_start":77,"line_end":77,"column_start":2,"column_end":71}},{"value":"/ selection type, not a bitwise-operation argument.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45194,"byte_end":45247,"line_start":78,"line_end":78,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45249,"byte_end":45252,"line_start":79,"line_end":79,"column_start":2,"column_end":5}},{"value":"/ [`BitMask`]: crate::index::BitMask","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45254,"byte_end":45292,"line_start":80,"line_end":80,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46115,"byte_end":46123,"line_start":103,"line_end":103,"column_start":5,"column_end":13},"name":"set_bits","qualname":"::access::BitAccess::set_bits","value":"pub fn set_bits(&Self, BitMask<Self::Item>)","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Sets any number of bits in a memory register to `1`.","sig":null,"attributes":[{"value":"/ Sets any number of bits in a memory register to `1`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45409,"byte_end":45465,"line_start":85,"line_end":85,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45467,"byte_end":45470,"line_start":86,"line_end":86,"column_start":2,"column_end":5}},{"value":"/ The mask provided to this method must be constructed from indices that","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45472,"byte_end":45546,"line_start":87,"line_end":87,"column_start":2,"column_end":76}},{"value":"/ are valid in the caller’s context. As the mask is already computed by","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45548,"byte_end":45623,"line_start":88,"line_end":88,"column_start":2,"column_end":75}},{"value":"/ the caller, this does not take an ordering type parameter.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45625,"byte_end":45687,"line_start":89,"line_end":89,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45689,"byte_end":45692,"line_start":90,"line_end":90,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45694,"byte_end":45710,"line_start":91,"line_end":91,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45712,"byte_end":45715,"line_start":92,"line_end":92,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45717,"byte_end":45730,"line_start":93,"line_end":93,"column_start":2,"column_end":15}},{"value":"/ - `mask`: A mask of any number of bits. This is a selection mask: all","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45732,"byte_end":45805,"line_start":94,"line_end":94,"column_start":2,"column_end":75}},{"value":"/   bits in the mask that are set to `1` will be modified in the element","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45807,"byte_end":45881,"line_start":95,"line_end":95,"column_start":2,"column_end":76}},{"value":"/   at `*self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45883,"byte_end":45900,"line_start":96,"line_end":96,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45902,"byte_end":45905,"line_start":97,"line_end":97,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45907,"byte_end":45920,"line_start":98,"line_end":98,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45922,"byte_end":45925,"line_start":99,"line_end":99,"column_start":2,"column_end":5}},{"value":"/ All bits in `*self` that are selected (set to `1` in the `mask`) will be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45927,"byte_end":46003,"line_start":100,"line_end":100,"column_start":2,"column_end":78}},{"value":"/ cleared. All bits in `*self` that are not selected (cleared to `0` in","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46005,"byte_end":46078,"line_start":101,"line_end":101,"column_start":2,"column_end":75}},{"value":"/ the `mask`) are unchanged.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46080,"byte_end":46110,"line_start":102,"line_end":102,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46926,"byte_end":46937,"line_start":125,"line_end":125,"column_start":5,"column_end":16},"name":"invert_bits","qualname":"::access::BitAccess::invert_bits","value":"pub fn invert_bits(&Self, BitMask<Self::Item>)","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Inverts any number of bits in a memory register.","sig":null,"attributes":[{"value":"/ Inverts any number of bits in a memory register.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46223,"byte_end":46275,"line_start":107,"line_end":107,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46277,"byte_end":46280,"line_start":108,"line_end":108,"column_start":2,"column_end":5}},{"value":"/ The mask provided to this method must be constructed from indices that","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46282,"byte_end":46356,"line_start":109,"line_end":109,"column_start":2,"column_end":76}},{"value":"/ are valid in the caller’s context. As the mask is already computed by","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46358,"byte_end":46433,"line_start":110,"line_end":110,"column_start":2,"column_end":75}},{"value":"/ the caller, this does not take an ordering type parameter.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46435,"byte_end":46497,"line_start":111,"line_end":111,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46499,"byte_end":46502,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46504,"byte_end":46520,"line_start":113,"line_end":113,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46522,"byte_end":46525,"line_start":114,"line_end":114,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46527,"byte_end":46540,"line_start":115,"line_end":115,"column_start":2,"column_end":15}},{"value":"/ - `mask`: A mask of any number of bits. This is a selection mask: all","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46542,"byte_end":46615,"line_start":116,"line_end":116,"column_start":2,"column_end":75}},{"value":"/   bits in the mask that are set to `1` will be modified in the element","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46617,"byte_end":46691,"line_start":117,"line_end":117,"column_start":2,"column_end":76}},{"value":"/   at `*self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46693,"byte_end":46710,"line_start":118,"line_end":118,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46712,"byte_end":46715,"line_start":119,"line_end":119,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46717,"byte_end":46730,"line_start":120,"line_end":120,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46732,"byte_end":46735,"line_start":121,"line_end":121,"column_start":2,"column_end":5}},{"value":"/ All bits in `*self` that are selected (set to `1` in the `mask`) will be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46737,"byte_end":46813,"line_start":122,"line_end":122,"column_start":2,"column_end":78}},{"value":"/ inverted. All bits in `*self` that are not selected (cleared to `0` in","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46815,"byte_end":46889,"line_start":123,"line_end":123,"column_start":2,"column_end":76}},{"value":"/ the `mask`) are unchanged.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46891,"byte_end":46921,"line_start":124,"line_end":124,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47539,"byte_end":47548,"line_start":146,"line_end":146,"column_start":5,"column_end":14},"name":"write_bit","qualname":"::access::BitAccess::write_bit","value":"pub fn write_bit<O>(&Self, BitIdx<Self::Item>, bool) where O: BitOrder","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Writes a value to one bit in a memory register.","sig":null,"attributes":[{"value":"/ Writes a value to one bit in a memory register.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47038,"byte_end":47089,"line_start":129,"line_end":129,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47091,"byte_end":47094,"line_start":130,"line_end":130,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47096,"byte_end":47117,"line_start":131,"line_end":131,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47119,"byte_end":47122,"line_start":132,"line_end":132,"column_start":2,"column_end":5}},{"value":"/ - `O`: A bit ordering.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47124,"byte_end":47150,"line_start":133,"line_end":133,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47152,"byte_end":47155,"line_start":134,"line_end":134,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47157,"byte_end":47173,"line_start":135,"line_end":135,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47175,"byte_end":47178,"line_start":136,"line_end":136,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47180,"byte_end":47193,"line_start":137,"line_end":137,"column_start":2,"column_end":15}},{"value":"/ - `index`: The semantic index of the bit in `*self` to write.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47195,"byte_end":47260,"line_start":138,"line_end":138,"column_start":2,"column_end":67}},{"value":"/ - `value`: The bit value to write into `*self` at `index`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47262,"byte_end":47324,"line_start":139,"line_end":139,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47326,"byte_end":47329,"line_start":140,"line_end":140,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47331,"byte_end":47344,"line_start":141,"line_end":141,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47346,"byte_end":47349,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ The memory register at address `self` has the bit corresponding to the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47351,"byte_end":47425,"line_start":143,"line_end":143,"column_start":2,"column_end":76}},{"value":"/ `index` cursor under the `O` order written with the new `value`, and all","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47427,"byte_end":47503,"line_start":144,"line_end":144,"column_start":2,"column_end":78}},{"value":"/ other bits are unchanged.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47505,"byte_end":47534,"line_start":145,"line_end":145,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48337,"byte_end":48348,"line_start":177,"line_end":177,"column_start":5,"column_end":16},"name":"get_writers","qualname":"::access::BitAccess::get_writers","value":"pub fn get_writers(bool) -> for<'a>fn(: &'a Self, : BitMask<Self::Item>)","parent":{"krate":0,"index":49},"children":[],"decl_id":null,"docs":" Gets the function that writes `value` into all bits under a mask.","sig":null,"attributes":[{"value":"/ Gets the function that writes `value` into all bits under a mask.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47833,"byte_end":47902,"line_start":162,"line_end":162,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47904,"byte_end":47907,"line_start":163,"line_end":163,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47909,"byte_end":47925,"line_start":164,"line_end":164,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47927,"byte_end":47930,"line_start":165,"line_end":165,"column_start":2,"column_end":5}},{"value":"/ - `value`: The bit that will be directly written by the returned","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47932,"byte_end":48000,"line_start":166,"line_end":166,"column_start":2,"column_end":70}},{"value":"/   function.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48002,"byte_end":48017,"line_start":167,"line_end":167,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48019,"byte_end":48022,"line_start":168,"line_end":168,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48024,"byte_end":48037,"line_start":169,"line_end":169,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48039,"byte_end":48042,"line_start":170,"line_end":170,"column_start":2,"column_end":5}},{"value":"/ A function which, when applied to a reference and a mask, will write","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48044,"byte_end":48116,"line_start":171,"line_end":171,"column_start":2,"column_end":74}},{"value":"/ `value` into memory. If `value` is `false`, then this produces","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48118,"byte_end":48184,"line_start":172,"line_end":172,"column_start":2,"column_end":68}},{"value":"/ [`clear_bits`]; if it is `true`, then this produces [`set_bits`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48186,"byte_end":48255,"line_start":173,"line_end":173,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48257,"byte_end":48260,"line_start":174,"line_end":174,"column_start":2,"column_end":5}},{"value":"/ [`clear_bits`]: Self::clear_bits","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48262,"byte_end":48298,"line_start":175,"line_end":175,"column_start":2,"column_end":38}},{"value":"/ [`set_bits`]: Self::set_bits","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48300,"byte_end":48332,"line_start":176,"line_end":176,"column_start":2,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":59},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48913,"byte_end":48920,"line_start":201,"line_end":201,"column_start":11,"column_end":18},"name":"BitSafe","qualname":"::access::BitSafe","value":"BitSafe","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63}],"decl_id":null,"docs":" Restricts memory modification to only exclusive references.","sig":null,"attributes":[{"value":"* Restricts memory modification to only exclusive references.\n\nThe shared-mutability types do not permit locking their references to prevent\nwriting through them when inappropriate. Implementors of this trait are able to\nview aliased memory and handle other references writing to it, even though they\nthemselves may be forbidden from doing so.\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48553,"byte_end":48902,"line_start":194,"line_end":200,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":60},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49104,"byte_end":49107,"line_start":206,"line_end":206,"column_start":7,"column_end":10},"name":"Mem","qualname":"::access::BitSafe::Mem","value":"type Mem: BitRegister;","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" The register type being guarded against shared mutation.","sig":null,"attributes":[{"value":"/ The register type being guarded against shared mutation.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48924,"byte_end":48984,"line_start":202,"line_end":202,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48986,"byte_end":48989,"line_start":203,"line_end":203,"column_start":2,"column_end":5}},{"value":"/ This is only present as an extra proof that the type graph all uses the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48991,"byte_end":49066,"line_start":204,"line_end":204,"column_start":2,"column_end":77}},{"value":"/ same underlying integers.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49068,"byte_end":49097,"line_start":205,"line_end":205,"column_start":2,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":61},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49341,"byte_end":49344,"line_start":212,"line_end":212,"column_start":7,"column_end":10},"name":"Rad","qualname":"::access::BitSafe::Rad","value":"type Rad: Radium<Item = Self::Mem>;","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" The accessor type being prevented from mutating while shared.","sig":null,"attributes":[{"value":"/ The accessor type being prevented from mutating while shared.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49124,"byte_end":49189,"line_start":208,"line_end":208,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49191,"byte_end":49194,"line_start":209,"line_end":209,"column_start":2,"column_end":5}},{"value":"/ This is exposed as an associated type so that `BitStore` can name it","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49196,"byte_end":49268,"line_start":210,"line_end":210,"column_start":2,"column_end":74}},{"value":"/ without having to re-select it based on crate configuration.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49270,"byte_end":49334,"line_start":211,"line_end":211,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49477,"byte_end":49481,"line_start":216,"line_end":216,"column_start":5,"column_end":9},"name":"load","qualname":"::access::BitSafe::load","value":"pub fn load(&Self) -> Self::Mem","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Reads the value out of memory only if a shared reference to the location\n can be produced.\n","sig":null,"attributes":[{"value":"/ Reads the value out of memory only if a shared reference to the location","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49374,"byte_end":49450,"line_start":214,"line_end":214,"column_start":2,"column_end":78}},{"value":"/ can be produced.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49452,"byte_end":49472,"line_start":215,"line_end":215,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49609,"byte_end":49614,"line_start":220,"line_end":220,"column_start":5,"column_end":10},"name":"store","qualname":"::access::BitSafe::store","value":"pub fn store(&mut Self, Self::Mem)","parent":{"krate":0,"index":59},"children":[],"decl_id":null,"docs":" Writes a value into memory only if an exclusive reference to the\n location can be produced.\n","sig":null,"attributes":[{"value":"/ Writes a value into memory only if an exclusive reference to the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49505,"byte_end":49573,"line_start":218,"line_end":218,"column_start":2,"column_end":70}},{"value":"/ location can be produced.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49575,"byte_end":49604,"line_start":219,"line_end":219,"column_start":2,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":4908},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":51149,"byte_end":51158,"line_start":277,"line_end":277,"column_start":8,"column_end":17},"name":"BitSafeU8","qualname":"::access::BitSafeU8","value":"BitSafeU8 {  }","parent":null,"children":[{"krate":0,"index":4909}],"decl_id":null,"docs":" A wrapper over a shared-mutable type that forbids writing to the\n location through its own reference. Other references to the location\n may still write to it, and reads from this reference will be aware\n of this possibility.","sig":null,"attributes":[{"value":"/ A wrapper over a shared-mutable type that forbids writing to the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49724,"byte_end":49792,"line_start":225,"line_end":225,"column_start":3,"column_end":71}},{"value":"/ location through its own reference. Other references to the location","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49795,"byte_end":49867,"line_start":226,"line_end":226,"column_start":3,"column_end":75}},{"value":"/ may still write to it, and reads from this reference will be aware","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49870,"byte_end":49940,"line_start":227,"line_end":227,"column_start":3,"column_end":73}},{"value":"/ of this possibility.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49943,"byte_end":49967,"line_start":228,"line_end":228,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49970,"byte_end":49973,"line_start":229,"line_end":229,"column_start":3,"column_end":6}},{"value":"/ This is necessary in order to enforce [`bitvec`]’s memory model,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49976,"byte_end":50046,"line_start":230,"line_end":230,"column_start":3,"column_end":71}},{"value":"/ which disallows shared mutation to individual bits. [`BitSlice`]s","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50049,"byte_end":50118,"line_start":231,"line_end":231,"column_start":3,"column_end":72}},{"value":"/ may produce memory views that use this type in order to ensure that","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50121,"byte_end":50192,"line_start":232,"line_end":232,"column_start":3,"column_end":74}},{"value":"/ handles that lack write permission to an area may not write to it,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50195,"byte_end":50265,"line_start":233,"line_end":233,"column_start":3,"column_end":73}},{"value":"/ even if other handles may.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50268,"byte_end":50298,"line_start":234,"line_end":234,"column_start":3,"column_end":33}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50301,"byte_end":50304,"line_start":235,"line_end":235,"column_start":3,"column_end":6}},{"value":"/ Under the `\"atomic\"` feature, this uses [`radium`]’s best-effort","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50307,"byte_end":50377,"line_start":236,"line_end":236,"column_start":3,"column_end":71}},{"value":"/ atomic alias; when this feature is disabled, then it uses a [`Cell`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50380,"byte_end":50452,"line_start":237,"line_end":237,"column_start":3,"column_end":75}},{"value":"/ directly.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50455,"byte_end":50468,"line_start":238,"line_end":238,"column_start":3,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50471,"byte_end":50474,"line_start":239,"line_end":239,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50477,"byte_end":50517,"line_start":240,"line_end":240,"column_start":3,"column_end":43}},{"value":"/ [`Cell`]: core::cell::Cell","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50520,"byte_end":50550,"line_start":241,"line_end":241,"column_start":3,"column_end":33}},{"value":"/ [`radium`]: radium::types","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50553,"byte_end":50582,"line_start":242,"line_end":242,"column_start":3,"column_end":32}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50604,"byte_end":50624,"line_start":244,"line_end":244,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":4912},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":51195,"byte_end":51205,"line_start":278,"line_end":278,"column_start":9,"column_end":19},"name":"BitSafeU16","qualname":"::access::BitSafeU16","value":"BitSafeU16 {  }","parent":null,"children":[{"krate":0,"index":4913}],"decl_id":null,"docs":" A wrapper over a shared-mutable type that forbids writing to the\n location through its own reference. Other references to the location\n may still write to it, and reads from this reference will be aware\n of this possibility.","sig":null,"attributes":[{"value":"/ A wrapper over a shared-mutable type that forbids writing to the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49724,"byte_end":49792,"line_start":225,"line_end":225,"column_start":3,"column_end":71}},{"value":"/ location through its own reference. Other references to the location","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49795,"byte_end":49867,"line_start":226,"line_end":226,"column_start":3,"column_end":75}},{"value":"/ may still write to it, and reads from this reference will be aware","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49870,"byte_end":49940,"line_start":227,"line_end":227,"column_start":3,"column_end":73}},{"value":"/ of this possibility.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49943,"byte_end":49967,"line_start":228,"line_end":228,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49970,"byte_end":49973,"line_start":229,"line_end":229,"column_start":3,"column_end":6}},{"value":"/ This is necessary in order to enforce [`bitvec`]’s memory model,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49976,"byte_end":50046,"line_start":230,"line_end":230,"column_start":3,"column_end":71}},{"value":"/ which disallows shared mutation to individual bits. [`BitSlice`]s","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50049,"byte_end":50118,"line_start":231,"line_end":231,"column_start":3,"column_end":72}},{"value":"/ may produce memory views that use this type in order to ensure that","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50121,"byte_end":50192,"line_start":232,"line_end":232,"column_start":3,"column_end":74}},{"value":"/ handles that lack write permission to an area may not write to it,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50195,"byte_end":50265,"line_start":233,"line_end":233,"column_start":3,"column_end":73}},{"value":"/ even if other handles may.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50268,"byte_end":50298,"line_start":234,"line_end":234,"column_start":3,"column_end":33}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50301,"byte_end":50304,"line_start":235,"line_end":235,"column_start":3,"column_end":6}},{"value":"/ Under the `\"atomic\"` feature, this uses [`radium`]’s best-effort","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50307,"byte_end":50377,"line_start":236,"line_end":236,"column_start":3,"column_end":71}},{"value":"/ atomic alias; when this feature is disabled, then it uses a [`Cell`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50380,"byte_end":50452,"line_start":237,"line_end":237,"column_start":3,"column_end":75}},{"value":"/ directly.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50455,"byte_end":50468,"line_start":238,"line_end":238,"column_start":3,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50471,"byte_end":50474,"line_start":239,"line_end":239,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50477,"byte_end":50517,"line_start":240,"line_end":240,"column_start":3,"column_end":43}},{"value":"/ [`Cell`]: core::cell::Cell","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50520,"byte_end":50550,"line_start":241,"line_end":241,"column_start":3,"column_end":33}},{"value":"/ [`radium`]: radium::types","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50553,"byte_end":50582,"line_start":242,"line_end":242,"column_start":3,"column_end":32}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50604,"byte_end":50624,"line_start":244,"line_end":244,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":4916},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":51243,"byte_end":51253,"line_start":279,"line_end":279,"column_start":9,"column_end":19},"name":"BitSafeU32","qualname":"::access::BitSafeU32","value":"BitSafeU32 {  }","parent":null,"children":[{"krate":0,"index":4917}],"decl_id":null,"docs":" A wrapper over a shared-mutable type that forbids writing to the\n location through its own reference. Other references to the location\n may still write to it, and reads from this reference will be aware\n of this possibility.","sig":null,"attributes":[{"value":"/ A wrapper over a shared-mutable type that forbids writing to the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49724,"byte_end":49792,"line_start":225,"line_end":225,"column_start":3,"column_end":71}},{"value":"/ location through its own reference. Other references to the location","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49795,"byte_end":49867,"line_start":226,"line_end":226,"column_start":3,"column_end":75}},{"value":"/ may still write to it, and reads from this reference will be aware","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49870,"byte_end":49940,"line_start":227,"line_end":227,"column_start":3,"column_end":73}},{"value":"/ of this possibility.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49943,"byte_end":49967,"line_start":228,"line_end":228,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49970,"byte_end":49973,"line_start":229,"line_end":229,"column_start":3,"column_end":6}},{"value":"/ This is necessary in order to enforce [`bitvec`]’s memory model,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49976,"byte_end":50046,"line_start":230,"line_end":230,"column_start":3,"column_end":71}},{"value":"/ which disallows shared mutation to individual bits. [`BitSlice`]s","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50049,"byte_end":50118,"line_start":231,"line_end":231,"column_start":3,"column_end":72}},{"value":"/ may produce memory views that use this type in order to ensure that","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50121,"byte_end":50192,"line_start":232,"line_end":232,"column_start":3,"column_end":74}},{"value":"/ handles that lack write permission to an area may not write to it,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50195,"byte_end":50265,"line_start":233,"line_end":233,"column_start":3,"column_end":73}},{"value":"/ even if other handles may.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50268,"byte_end":50298,"line_start":234,"line_end":234,"column_start":3,"column_end":33}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50301,"byte_end":50304,"line_start":235,"line_end":235,"column_start":3,"column_end":6}},{"value":"/ Under the `\"atomic\"` feature, this uses [`radium`]’s best-effort","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50307,"byte_end":50377,"line_start":236,"line_end":236,"column_start":3,"column_end":71}},{"value":"/ atomic alias; when this feature is disabled, then it uses a [`Cell`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50380,"byte_end":50452,"line_start":237,"line_end":237,"column_start":3,"column_end":75}},{"value":"/ directly.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50455,"byte_end":50468,"line_start":238,"line_end":238,"column_start":3,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50471,"byte_end":50474,"line_start":239,"line_end":239,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50477,"byte_end":50517,"line_start":240,"line_end":240,"column_start":3,"column_end":43}},{"value":"/ [`Cell`]: core::cell::Cell","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50520,"byte_end":50550,"line_start":241,"line_end":241,"column_start":3,"column_end":33}},{"value":"/ [`radium`]: radium::types","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50553,"byte_end":50582,"line_start":242,"line_end":242,"column_start":3,"column_end":32}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50604,"byte_end":50624,"line_start":244,"line_end":244,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":4925},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":51335,"byte_end":51345,"line_start":283,"line_end":283,"column_start":14,"column_end":24},"name":"BitSafeU64","qualname":"::access::BitSafeU64","value":"BitSafeU64 {  }","parent":null,"children":[{"krate":0,"index":4926}],"decl_id":null,"docs":" A wrapper over a shared-mutable type that forbids writing to the\n location through its own reference. Other references to the location\n may still write to it, and reads from this reference will be aware\n of this possibility.","sig":null,"attributes":[{"value":"/ A wrapper over a shared-mutable type that forbids writing to the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49724,"byte_end":49792,"line_start":225,"line_end":225,"column_start":3,"column_end":71}},{"value":"/ location through its own reference. Other references to the location","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49795,"byte_end":49867,"line_start":226,"line_end":226,"column_start":3,"column_end":75}},{"value":"/ may still write to it, and reads from this reference will be aware","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49870,"byte_end":49940,"line_start":227,"line_end":227,"column_start":3,"column_end":73}},{"value":"/ of this possibility.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49943,"byte_end":49967,"line_start":228,"line_end":228,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49970,"byte_end":49973,"line_start":229,"line_end":229,"column_start":3,"column_end":6}},{"value":"/ This is necessary in order to enforce [`bitvec`]’s memory model,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49976,"byte_end":50046,"line_start":230,"line_end":230,"column_start":3,"column_end":71}},{"value":"/ which disallows shared mutation to individual bits. [`BitSlice`]s","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50049,"byte_end":50118,"line_start":231,"line_end":231,"column_start":3,"column_end":72}},{"value":"/ may produce memory views that use this type in order to ensure that","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50121,"byte_end":50192,"line_start":232,"line_end":232,"column_start":3,"column_end":74}},{"value":"/ handles that lack write permission to an area may not write to it,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50195,"byte_end":50265,"line_start":233,"line_end":233,"column_start":3,"column_end":73}},{"value":"/ even if other handles may.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50268,"byte_end":50298,"line_start":234,"line_end":234,"column_start":3,"column_end":33}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50301,"byte_end":50304,"line_start":235,"line_end":235,"column_start":3,"column_end":6}},{"value":"/ Under the `\"atomic\"` feature, this uses [`radium`]’s best-effort","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50307,"byte_end":50377,"line_start":236,"line_end":236,"column_start":3,"column_end":71}},{"value":"/ atomic alias; when this feature is disabled, then it uses a [`Cell`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50380,"byte_end":50452,"line_start":237,"line_end":237,"column_start":3,"column_end":75}},{"value":"/ directly.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50455,"byte_end":50468,"line_start":238,"line_end":238,"column_start":3,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50471,"byte_end":50474,"line_start":239,"line_end":239,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50477,"byte_end":50517,"line_start":240,"line_end":240,"column_start":3,"column_end":43}},{"value":"/ [`Cell`]: core::cell::Cell","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50520,"byte_end":50550,"line_start":241,"line_end":241,"column_start":3,"column_end":33}},{"value":"/ [`radium`]: radium::types","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50553,"byte_end":50582,"line_start":242,"line_end":242,"column_start":3,"column_end":32}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50604,"byte_end":50624,"line_start":244,"line_end":244,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":4934},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":51392,"byte_end":51404,"line_start":285,"line_end":285,"column_start":16,"column_end":28},"name":"BitSafeUsize","qualname":"::access::BitSafeUsize","value":"BitSafeUsize {  }","parent":null,"children":[{"krate":0,"index":4935}],"decl_id":null,"docs":" A wrapper over a shared-mutable type that forbids writing to the\n location through its own reference. Other references to the location\n may still write to it, and reads from this reference will be aware\n of this possibility.","sig":null,"attributes":[{"value":"/ A wrapper over a shared-mutable type that forbids writing to the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49724,"byte_end":49792,"line_start":225,"line_end":225,"column_start":3,"column_end":71}},{"value":"/ location through its own reference. Other references to the location","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49795,"byte_end":49867,"line_start":226,"line_end":226,"column_start":3,"column_end":75}},{"value":"/ may still write to it, and reads from this reference will be aware","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49870,"byte_end":49940,"line_start":227,"line_end":227,"column_start":3,"column_end":73}},{"value":"/ of this possibility.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49943,"byte_end":49967,"line_start":228,"line_end":228,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49970,"byte_end":49973,"line_start":229,"line_end":229,"column_start":3,"column_end":6}},{"value":"/ This is necessary in order to enforce [`bitvec`]’s memory model,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49976,"byte_end":50046,"line_start":230,"line_end":230,"column_start":3,"column_end":71}},{"value":"/ which disallows shared mutation to individual bits. [`BitSlice`]s","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50049,"byte_end":50118,"line_start":231,"line_end":231,"column_start":3,"column_end":72}},{"value":"/ may produce memory views that use this type in order to ensure that","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50121,"byte_end":50192,"line_start":232,"line_end":232,"column_start":3,"column_end":74}},{"value":"/ handles that lack write permission to an area may not write to it,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50195,"byte_end":50265,"line_start":233,"line_end":233,"column_start":3,"column_end":73}},{"value":"/ even if other handles may.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50268,"byte_end":50298,"line_start":234,"line_end":234,"column_start":3,"column_end":33}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50301,"byte_end":50304,"line_start":235,"line_end":235,"column_start":3,"column_end":6}},{"value":"/ Under the `\"atomic\"` feature, this uses [`radium`]’s best-effort","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50307,"byte_end":50377,"line_start":236,"line_end":236,"column_start":3,"column_end":71}},{"value":"/ atomic alias; when this feature is disabled, then it uses a [`Cell`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50380,"byte_end":50452,"line_start":237,"line_end":237,"column_start":3,"column_end":75}},{"value":"/ directly.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50455,"byte_end":50468,"line_start":238,"line_end":238,"column_start":3,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50471,"byte_end":50474,"line_start":239,"line_end":239,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50477,"byte_end":50517,"line_start":240,"line_end":240,"column_start":3,"column_end":43}},{"value":"/ [`Cell`]: core::cell::Cell","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50520,"byte_end":50550,"line_start":241,"line_end":241,"column_start":3,"column_end":33}},{"value":"/ [`radium`]: radium::types","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50553,"byte_end":50582,"line_start":242,"line_end":242,"column_start":3,"column_end":32}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50604,"byte_end":50624,"line_start":244,"line_end":244,"column_start":3,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":65},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"array","qualname":"::array","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":90},{"krate":0,"index":96},{"krate":0,"index":110},{"krate":0,"index":188},{"krate":0,"index":297},{"krate":0,"index":513}],"decl_id":null,"docs":" A statically-allocated, fixed-size, buffer containing a [`BitSlice`] region.","sig":null,"attributes":[{"value":"* A statically-allocated, fixed-size, buffer containing a [`BitSlice`] region.\n\nYou can read the language’s [array fundamental documentation][std] here.\n\nThis module defines the [`BitArray`] immediate type, and its associated support\ncode.\n\n[`BitArray`] is equivalent to `[bool; N]`, in its operation and in its\nrelationship to the [`BitSlice`] type. It has little behavior or properties in\nits own right, and serves solely as a type capable of being used in immediate\nvalue position, and delegates to `BitSlice` for all actual work.\n\n[`BitArray`]: crate::array::BitArray\n[`BitSlice`]: crate::slice::BitSlice\n[std]: https://doc.rust-lang.org/stable/std/primitive.array.html\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":53539,"byte_end":54220,"line_start":1,"line_end":16,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":90},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57908,"byte_end":57916,"line_start":149,"line_end":149,"column_start":12,"column_end":20},"name":"BitArray","qualname":"::array::BitArray","value":"BitArray {  }","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":95}],"decl_id":null,"docs":" An array of individual bits, able to be held by value on the stack.","sig":null,"attributes":[{"value":"* An array of individual bits, able to be held by value on the stack.\n\nThis type is generic over all [`Sized`] implementors of the [`BitView`] trait.\nDue to limitations in the Rust language’s const-generics implementation (it is\nboth unstable and incomplete), this must take an array type parameter directly,\nrather than register type and bit-count integer parameters. This makes it less\nconvenient to use than C++’s [`std::bitset<N>`] array type. The [`bitarr!`]\nmacro is capable of constructing both values and specific types of `BitArray`,\nand this macro should be preferred for most use.\n\nThe advantage of using this wrapper is that it implements [`Deref`]/[`Mut`] to\n[`BitSlice`], as well as implementing all of `BitSlice`s traits by forwarding to\nthe `BitSlice` view of its contained data. This allows it to have `BitSlice`\nbehavior by itself, without requiring explicit [`.as_bitslice()`] calls in user\ncode.\n\n# Limitations\n\nThis does not track start or end indices of its [`BitSlice`] view, and so that\nview will always fully span the buffer. You cannot produce, for example, an\narray of twelve bits.\n\n# Type Parameters\n\n- `O`: The ordering of bits within memory registers.\n- `V`: Some buffer which can be used as the basis for a [`BitSlice`] view. This\n  will usually be an array of `[T: BitRegister; N]`.\n\n# Examples\n\nThis type is useful for marking that some value is always to be used as a\n[`BitSlice`].\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":55053,"byte_end":56478,"line_start":63,"line_end":95,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56479,"byte_end":56482,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56483,"byte_end":56494,"line_start":97,"line_end":97,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56495,"byte_end":56522,"line_start":98,"line_end":98,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56523,"byte_end":56526,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ struct HasBitfields {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56527,"byte_end":56552,"line_start":100,"line_end":100,"column_start":1,"column_end":26}},{"value":"/   header: u32,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56553,"byte_end":56571,"line_start":101,"line_end":101,"column_start":1,"column_end":19}},{"value":"/   // creates a type declaration.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56572,"byte_end":56608,"line_start":102,"line_end":102,"column_start":1,"column_end":37}},{"value":"/   fields: bitarr!(for 20, in Msb0, u8),","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56609,"byte_end":56652,"line_start":103,"line_end":103,"column_start":1,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56653,"byte_end":56658,"line_start":104,"line_end":104,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56659,"byte_end":56662,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ impl HasBitfields {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56663,"byte_end":56686,"line_start":106,"line_end":106,"column_start":1,"column_end":24}},{"value":"/   pub fn new() -> Self {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56687,"byte_end":56715,"line_start":107,"line_end":107,"column_start":1,"column_end":29}},{"value":"/     Self {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56716,"byte_end":56730,"line_start":108,"line_end":108,"column_start":1,"column_end":15}},{"value":"/       header: 0,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56731,"byte_end":56751,"line_start":109,"line_end":109,"column_start":1,"column_end":21}},{"value":"/       // creates a value object.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56752,"byte_end":56788,"line_start":110,"line_end":110,"column_start":1,"column_end":37}},{"value":"/       // the type paramaters must be repeated.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56789,"byte_end":56839,"line_start":111,"line_end":111,"column_start":1,"column_end":51}},{"value":"/       fields: bitarr![Msb0, u8; 0; 20],","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56840,"byte_end":56883,"line_start":112,"line_end":112,"column_start":1,"column_end":44}},{"value":"/     }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56884,"byte_end":56893,"line_start":113,"line_end":113,"column_start":1,"column_end":10}},{"value":"/   }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56894,"byte_end":56901,"line_start":114,"line_end":114,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56902,"byte_end":56905,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/   /// Access a bit region directly","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56906,"byte_end":56944,"line_start":116,"line_end":116,"column_start":1,"column_end":39}},{"value":"/   pub fn get_subfield(&self) -> &BitSlice<Msb0, u8> {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56945,"byte_end":57002,"line_start":117,"line_end":117,"column_start":1,"column_end":58}},{"value":"/     &self.fields[.. 4]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57003,"byte_end":57029,"line_start":118,"line_end":118,"column_start":1,"column_end":27}},{"value":"/   }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57030,"byte_end":57037,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57038,"byte_end":57041,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/   /// Read a 12-bit value out of a region","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57042,"byte_end":57087,"line_start":121,"line_end":121,"column_start":1,"column_end":46}},{"value":"/   pub fn read_value(&self) -> u16 {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57088,"byte_end":57127,"line_start":122,"line_end":122,"column_start":1,"column_end":40}},{"value":"/     self.fields[4 .. 16].load()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57128,"byte_end":57163,"line_start":123,"line_end":123,"column_start":1,"column_end":36}},{"value":"/   }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57164,"byte_end":57171,"line_start":124,"line_end":124,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57172,"byte_end":57175,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/   /// Write a 12-bit value into a region","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57176,"byte_end":57220,"line_start":126,"line_end":126,"column_start":1,"column_end":45}},{"value":"/   pub fn set_value(&mut self, value: u16) {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57221,"byte_end":57268,"line_start":127,"line_end":127,"column_start":1,"column_end":48}},{"value":"/     self.fields[4 .. 16].store(value);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57269,"byte_end":57311,"line_start":128,"line_end":128,"column_start":1,"column_end":43}},{"value":"/   }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57312,"byte_end":57319,"line_start":129,"line_end":129,"column_start":1,"column_end":8}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57320,"byte_end":57325,"line_start":130,"line_end":130,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57326,"byte_end":57333,"line_start":131,"line_end":131,"column_start":1,"column_end":8}},{"value":"*\n# Eventual Obsolescence\n\nWhen const-generics stabilize, this will be modified to have a signature more\nlike `BitArray<O, T, const N: usize>([T; elts::<T>(N)]);`, to mirror the\nbehavior of ordinary arrays `[T; N]` as they stand today.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`BitView`]: crate::view::BitView\n[`Deref`]: core::ops::Deref\n[`Mut`]: core::ops::DerefMut\n[`Sized`]: core::marker::Sized\n[`bitarr!`]: macro@crate::bitarr\n[`std::bitset<N>`]: https://en.cppreference.com/w/cpp/utility/bitset\n[`.as_bitslice()`]: Self::as_bitslice\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57334,"byte_end":57875,"line_start":132,"line_end":147,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57876,"byte_end":57896,"line_start":148,"line_end":148,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58248,"byte_end":58254,"line_start":167,"line_end":167,"column_start":9,"column_end":15},"name":"zeroed","qualname":"<BitArray<O, V>>::zeroed","value":"pub fn zeroed() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `BitArray` with its memory set to zero.\n","sig":null,"attributes":[{"value":"/ Constructs a new `BitArray` with its memory set to zero.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58168,"byte_end":58228,"line_start":165,"line_end":165,"column_start":2,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58230,"byte_end":58239,"line_start":166,"line_end":166,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58616,"byte_end":58619,"line_start":186,"line_end":186,"column_start":9,"column_end":12},"name":"new","qualname":"<BitArray<O, V>>::new","value":"pub fn new(V) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a buffer in a `BitArray`.","sig":null,"attributes":[{"value":"/ Wraps a buffer in a `BitArray`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58364,"byte_end":58399,"line_start":174,"line_end":174,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58401,"byte_end":58404,"line_start":175,"line_end":175,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58406,"byte_end":58420,"line_start":176,"line_end":176,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58422,"byte_end":58425,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58427,"byte_end":58438,"line_start":178,"line_end":178,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58440,"byte_end":58467,"line_start":179,"line_end":179,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58469,"byte_end":58472,"line_start":180,"line_end":180,"column_start":2,"column_end":5}},{"value":"/ let data = [0u8; 2];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58474,"byte_end":58498,"line_start":181,"line_end":181,"column_start":2,"column_end":26}},{"value":"/ let bits: BitArray<Msb0, _> = BitArray::new(data);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58500,"byte_end":58554,"line_start":182,"line_end":182,"column_start":2,"column_end":56}},{"value":"/ assert_eq!(bits.len(), 16);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58556,"byte_end":58587,"line_start":183,"line_end":183,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58589,"byte_end":58596,"line_start":184,"line_end":184,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58598,"byte_end":58607,"line_start":185,"line_end":185,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58988,"byte_end":58993,"line_start":205,"line_end":205,"column_start":9,"column_end":14},"name":"value","qualname":"<BitArray<O, V>>::value","value":"pub fn value(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Removes the `BitArray` wrapper, leaving the contained buffer.","sig":null,"attributes":[{"value":"/ Removes the `BitArray` wrapper, leaving the contained buffer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58688,"byte_end":58753,"line_start":193,"line_end":193,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58755,"byte_end":58758,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58760,"byte_end":58774,"line_start":195,"line_end":195,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58776,"byte_end":58779,"line_start":196,"line_end":196,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58781,"byte_end":58792,"line_start":197,"line_end":197,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58794,"byte_end":58821,"line_start":198,"line_end":198,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58823,"byte_end":58826,"line_start":199,"line_end":199,"column_start":2,"column_end":5}},{"value":"/ let bitarr = bitarr![Lsb0, usize; 0; 30];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58828,"byte_end":58873,"line_start":200,"line_end":200,"column_start":2,"column_end":47}},{"value":"/ let native: [usize; 1] = bitarr.value();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58875,"byte_end":58919,"line_start":201,"line_end":201,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58921,"byte_end":58928,"line_start":202,"line_end":202,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58930,"byte_end":58947,"line_start":203,"line_end":203,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58949,"byte_end":58979,"line_start":204,"line_end":204,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59169,"byte_end":59180,"line_start":214,"line_end":214,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<BitArray<O, V>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a [`BitSlice`].","sig":null,"attributes":[{"value":"/ Views the array as a [`BitSlice`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59024,"byte_end":59062,"line_start":209,"line_end":209,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59064,"byte_end":59067,"line_start":210,"line_end":210,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59069,"byte_end":59109,"line_start":211,"line_end":211,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59111,"byte_end":59128,"line_start":212,"line_end":212,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59130,"byte_end":59160,"line_start":213,"line_end":213,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59403,"byte_end":59418,"line_start":223,"line_end":223,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<BitArray<O, V>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a mutable [`BitSlice`].","sig":null,"attributes":[{"value":"/ Views the array as a mutable [`BitSlice`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59250,"byte_end":59296,"line_start":218,"line_end":218,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59298,"byte_end":59301,"line_start":219,"line_end":219,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59303,"byte_end":59343,"line_start":220,"line_end":220,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59345,"byte_end":59362,"line_start":221,"line_end":221,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59364,"byte_end":59394,"line_start":222,"line_end":222,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59586,"byte_end":59598,"line_start":229,"line_end":229,"column_start":9,"column_end":21},"name":"as_raw_slice","qualname":"<BitArray<O, V>>::as_raw_slice","value":"pub fn as_raw_slice(&Self) -> &[V::Store]","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a slice of its underlying memory registers.\n","sig":null,"attributes":[{"value":"/ Views the array as a slice of its underlying memory registers.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59500,"byte_end":59566,"line_start":227,"line_end":227,"column_start":2,"column_end":68}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59568,"byte_end":59577,"line_start":228,"line_end":228,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59836,"byte_end":59852,"line_start":240,"line_end":240,"column_start":9,"column_end":25},"name":"as_mut_raw_slice","qualname":"<BitArray<O, V>>::as_mut_raw_slice","value":"pub fn as_mut_raw_slice(&mut Self) -> &mut [V::Store]","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a mutable slice of its underlying memory registers.\n","sig":null,"attributes":[{"value":"/ Views the array as a mutable slice of its underlying memory registers.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59742,"byte_end":59816,"line_start":238,"line_end":238,"column_start":2,"column_end":76}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59818,"byte_end":59827,"line_start":239,"line_end":239,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60135,"byte_end":60143,"line_start":253,"line_end":253,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<BitArray<O, V>>::as_slice","value":"pub fn as_slice(&Self) -> &[V::Store]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60024,"byte_end":60041,"line_start":250,"line_end":250,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60043,"byte_end":60073,"line_start":251,"line_end":251,"column_start":2,"column_end":32}},{"value":"deprecated = \"This is renamed to `as_raw_slice`\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60075,"byte_end":60126,"line_start":252,"line_end":252,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60326,"byte_end":60338,"line_start":261,"line_end":261,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<BitArray<O, V>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut [V::Store]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60211,"byte_end":60228,"line_start":258,"line_end":258,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60230,"byte_end":60260,"line_start":259,"line_end":259,"column_start":2,"column_end":32}},{"value":"deprecated = \"This is renamed to `as_mut_raw_slice`\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60262,"byte_end":60317,"line_start":260,"line_end":260,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60492,"byte_end":60501,"line_start":268,"line_end":268,"column_start":9,"column_end":18},"name":"as_buffer","qualname":"<BitArray<O, V>>::as_buffer","value":"pub fn as_buffer(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Views the interior buffer.\n","sig":null,"attributes":[{"value":"/ Views the interior buffer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60402,"byte_end":60432,"line_start":265,"line_end":265,"column_start":2,"column_end":32}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60434,"byte_end":60451,"line_start":266,"line_end":266,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60453,"byte_end":60483,"line_start":267,"line_end":267,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60633,"byte_end":60646,"line_start":275,"line_end":275,"column_start":9,"column_end":22},"name":"as_mut_buffer","qualname":"<BitArray<O, V>>::as_mut_buffer","value":"pub fn as_mut_buffer(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Mutably views the interior buffer.\n","sig":null,"attributes":[{"value":"/ Mutably views the interior buffer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60535,"byte_end":60573,"line_start":272,"line_end":272,"column_start":2,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60575,"byte_end":60592,"line_start":273,"line_end":273,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60594,"byte_end":60624,"line_start":274,"line_end":274,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":4938},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":61481,"byte_end":61489,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::array::iter::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":4941},{"krate":0,"index":4942}],"decl_id":null,"docs":" A by-value [bit-array] iterator.","sig":null,"attributes":[{"value":"* A by-value [bit-array] iterator.\n\n# Original\n\n[`array::IntoIter`](core::array::IntoIter)\n\n# API Differences\n\nThe standard-library iterator is still unstable, as it depends on\nconst-generics. The [`BitView`] trait provides a rough simulacrum of\nconst-generic arrays until this feature stabilizes for use outside the standard\nlibraries.\n\n[bit-array]: crate::array::BitArray\n[`BitView`]: crate::view::BitView\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":61039,"byte_end":61452,"line_start":24,"line_end":39,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62257,"byte_end":62268,"line_start":81,"line_end":81,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<IntoIter<O, V>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":" Returns an immutable slice of all bits that have not been yielded yet.","sig":null,"attributes":[{"value":"/ Returns an immutable slice of all bits that have not been yielded yet.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62076,"byte_end":62150,"line_start":75,"line_end":75,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62152,"byte_end":62155,"line_start":76,"line_end":76,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62157,"byte_end":62171,"line_start":77,"line_end":77,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62173,"byte_end":62176,"line_start":78,"line_end":78,"column_start":2,"column_end":5}},{"value":"/ [`IntoIter::as_slice`](core::array::IntoIter::as_slice)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62178,"byte_end":62237,"line_start":79,"line_end":79,"column_start":2,"column_end":61}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62239,"byte_end":62248,"line_start":80,"line_end":80,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62521,"byte_end":62529,"line_start":89,"line_end":89,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<IntoIter<O, V>>::as_slice","value":"pub fn as_slice(&Self) -> &BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62397,"byte_end":62414,"line_start":86,"line_end":86,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62416,"byte_end":62446,"line_start":87,"line_end":87,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_bitslice` to view the underlying slice\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62448,"byte_end":62512,"line_start":88,"line_end":88,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62777,"byte_end":62792,"line_start":99,"line_end":99,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<IntoIter<O, V>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable slice of all bits that have not been yielded yet.","sig":null,"attributes":[{"value":"/ Returns a mutable slice of all bits that have not been yielded yet.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62591,"byte_end":62662,"line_start":93,"line_end":93,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62664,"byte_end":62667,"line_start":94,"line_end":94,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62669,"byte_end":62683,"line_start":95,"line_end":95,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62685,"byte_end":62688,"line_start":96,"line_end":96,"column_start":2,"column_end":5}},{"value":"/ [`IntoIter::as_mut_slice`](core::array::IntoIter::as_mut_slice)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62690,"byte_end":62757,"line_start":97,"line_end":97,"column_start":2,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62759,"byte_end":62768,"line_start":98,"line_end":98,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":63080,"byte_end":63092,"line_start":111,"line_end":111,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<IntoIter<O, V>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62952,"byte_end":62969,"line_start":108,"line_end":108,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62971,"byte_end":63001,"line_start":109,"line_end":109,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_mut_bitslice` to view the underlying slice\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":63003,"byte_end":63071,"line_start":110,"line_end":110,"column_start":2,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":4947},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":75172,"byte_end":75192,"line_start":404,"line_end":404,"column_start":12,"column_end":32},"name":"TryFromBitSliceError","qualname":"::array::traits::TryFromBitSliceError","value":"TryFromBitSliceError {  }","parent":null,"children":[{"krate":0,"index":4951}],"decl_id":null,"docs":" The error type returned when a conversion from a [`BitSlice`] to a\n[`BitArray`] fails.","sig":null,"attributes":[{"value":"* The error type returned when a conversion from a [`BitSlice`] to a\n[`BitArray`] fails.\n\n[`BitArray`]: crate::array::BitArray\n[`BitSlice`]: crate::slice::BitSlice\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":74915,"byte_end":75084,"line_start":396,"line_end":401,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":75085,"byte_end":75105,"line_start":402,"line_end":402,"column_start":1,"column_end":21}}]},{"kind":"Mod","id":{"krate":0,"index":550},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"domain","qualname":"::domain","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","parent":null,"children":[{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":556},{"krate":0,"index":559},{"krate":0,"index":562},{"krate":0,"index":565},{"krate":0,"index":568},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":576},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":582},{"krate":0,"index":585},{"krate":0,"index":588},{"krate":0,"index":591},{"krate":0,"index":594},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":601},{"krate":0,"index":604},{"krate":0,"index":607},{"krate":0,"index":5003},{"krate":0,"index":5015},{"krate":0,"index":4990},{"krate":0,"index":5033},{"krate":0,"index":5045},{"krate":0,"index":5020},{"krate":0,"index":608},{"krate":0,"index":612},{"krate":0,"index":615},{"krate":0,"index":5063},{"krate":0,"index":5074},{"krate":0,"index":5050},{"krate":0,"index":5091},{"krate":0,"index":5102},{"krate":0,"index":5078},{"krate":0,"index":616},{"krate":0,"index":619},{"krate":0,"index":627},{"krate":0,"index":634},{"krate":0,"index":637},{"krate":0,"index":639},{"krate":0,"index":641},{"krate":0,"index":5106},{"krate":0,"index":5109},{"krate":0,"index":5112},{"krate":0,"index":5115}],"decl_id":null,"docs":" Representations of the [`BitSlice`] region memory model.","sig":null,"attributes":[{"value":"* Representations of the [`BitSlice`] region memory model.\n\nThis module allows any [`BitSlice`] region to be decomposed into domains that\nrestricts [`T::Alias`] markers to only the edge elements that may require them.\n\nSpecifically, any given [`BitSlice`] region is one of:\n\n- touches only interior indices of one element\n- touches at least one edge index of any number of elements (including zero)\n\nIn the latter case, any elements *completely* spanned by the [`BitSlice`] handle\nare known to not have any other write-capable handles to them, and in the case\nof an `&mut BitSlice` handle specifically, no other views at all. As such, the\ndomain view of this memory is able to remove the aliasing marker type and permit\ndirect memory access to the underlying buffer for the duration of its existence.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`T::Alias`]: crate::store::BitStore::Alias\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":79073,"byte_end":79961,"line_start":1,"line_end":19,"column_start":1,"column_end":4}}]},{"kind":"Enum","id":{"krate":0,"index":5003},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89168,"byte_end":89177,"line_start":355,"line_end":355,"column_start":13,"column_end":22},"name":"BitDomain","qualname":"::domain::BitDomain","value":"pub enum BitDomain<'a, O, T> where O: BitOrder, T: BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        body: &'a BitSlice<O, T>,\n        tail: BitTail<T::Mem>,\n    },\n    Region {\n        head: &'a BitSlice<O, T>,\n        body: &'a BitSlice<O, T::Unalias>,\n        tail: &'a BitSlice<O, T>,\n    },\n}","parent":null,"children":[{"krate":0,"index":5007},{"krate":0,"index":5011}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n [`BitSlice`].","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80337,"byte_end":80398,"line_start":54,"line_end":54,"column_start":3,"column_end":64}},{"value":"/ [`BitSlice`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80401,"byte_end":80418,"line_start":55,"line_end":55,"column_start":3,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80421,"byte_end":80424,"line_start":56,"line_end":56,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`] regions can be described in terms of edge and center","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80427,"byte_end":80496,"line_start":57,"line_end":57,"column_start":3,"column_end":72}},{"value":"/ partitions, where the edge partitions must retain the aliasing","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80499,"byte_end":80565,"line_start":58,"line_end":58,"column_start":3,"column_end":69}},{"value":"/ status of the source `BitSlice` handle, and the center partition is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80568,"byte_end":80639,"line_start":59,"line_end":59,"column_start":3,"column_end":74}},{"value":"/ known to be completely unaliased by any other view. This property","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80642,"byte_end":80711,"line_start":60,"line_end":60,"column_start":3,"column_end":72}},{"value":"/ allows any `BitSlice` handle to be decomposed into smaller regions,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80714,"byte_end":80785,"line_start":61,"line_end":61,"column_start":3,"column_end":74}},{"value":"/ and safely remove any aliasing markers from the center partition","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80788,"byte_end":80856,"line_start":62,"line_end":62,"column_start":3,"column_end":71}},{"value":"/ that no longer requires such safeguarding.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80859,"byte_end":80905,"line_start":63,"line_end":63,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80908,"byte_end":80911,"line_start":64,"line_end":64,"column_start":3,"column_end":6}},{"value":"/ This enum acts like the `.split*` methods in that it only subdivides","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80914,"byte_end":80986,"line_start":65,"line_end":65,"column_start":3,"column_end":75}},{"value":"/ the source [`BitSlice`] into smaller `BitSlice`s, and makes","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80989,"byte_end":81052,"line_start":66,"line_end":66,"column_start":3,"column_end":66}},{"value":"/ appropriate modifications to the aliasing markers.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81055,"byte_end":81109,"line_start":67,"line_end":67,"column_start":3,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81112,"byte_end":81115,"line_start":68,"line_end":68,"column_start":3,"column_end":6}},{"value":"/ It does not add any aliasing markers: if the slice is marked as","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81118,"byte_end":81185,"line_start":69,"line_end":69,"column_start":3,"column_end":70}},{"value":"/ aliased, then the edge partitions will retain that marker, and if it","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81188,"byte_end":81260,"line_start":70,"line_end":70,"column_start":3,"column_end":75}},{"value":"/ is not, then the edge partitions do not need it.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81263,"byte_end":81315,"line_start":71,"line_end":71,"column_start":3,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81318,"byte_end":81321,"line_start":72,"line_end":72,"column_start":3,"column_end":6}},{"value":"/ This does not provide references to the underlying memory buffer. If","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81324,"byte_end":81396,"line_start":73,"line_end":73,"column_start":3,"column_end":75}},{"value":"/ you need such direct access, use the [`Domain`] or [`DomainMut`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81399,"byte_end":81467,"line_start":74,"line_end":74,"column_start":3,"column_end":71}},{"value":"/ enums.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81470,"byte_end":81480,"line_start":75,"line_end":75,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81483,"byte_end":81486,"line_start":76,"line_end":76,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81489,"byte_end":81504,"line_start":77,"line_end":77,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81507,"byte_end":81510,"line_start":78,"line_end":78,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81513,"byte_end":81569,"line_start":79,"line_end":79,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81572,"byte_end":81575,"line_start":80,"line_end":80,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81578,"byte_end":81599,"line_start":81,"line_end":81,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81602,"byte_end":81605,"line_start":82,"line_end":82,"column_start":3,"column_end":6}},{"value":"/ - `O`: The ordering type of the source [`BitSlice`] handle.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81608,"byte_end":81671,"line_start":83,"line_end":83,"column_start":3,"column_end":66}},{"value":"/ - `T`: The register type of the source [`BitSlice`] handle,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81674,"byte_end":81737,"line_start":84,"line_end":84,"column_start":3,"column_end":66}},{"value":"/   including any aliasing markers.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81740,"byte_end":81777,"line_start":85,"line_end":85,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81780,"byte_end":81783,"line_start":86,"line_end":86,"column_start":3,"column_end":6}},{"value":"/ # Aliasing Awareness","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81786,"byte_end":81810,"line_start":87,"line_end":87,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81813,"byte_end":81816,"line_start":88,"line_end":88,"column_start":3,"column_end":6}},{"value":"/ This enum does not grant access to memory outside the scope of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81819,"byte_end":81889,"line_start":89,"line_end":89,"column_start":3,"column_end":73}},{"value":"/ original [`BitSlice`] handle, and so does not need to modfiy any","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81892,"byte_end":81960,"line_start":90,"line_end":90,"column_start":3,"column_end":71}},{"value":"/ aliasing conditions.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81963,"byte_end":81987,"line_start":91,"line_end":91,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81990,"byte_end":81993,"line_start":92,"line_end":92,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81996,"byte_end":82036,"line_start":93,"line_end":93,"column_start":3,"column_end":43}},{"value":"/ [`Domain`]: crate::domain::Domain","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":82039,"byte_end":82076,"line_start":94,"line_end":94,"column_start":3,"column_end":40}},{"value":"/ [`DomainMut`]: crate::domain::DomainMut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":82079,"byte_end":82122,"line_start":95,"line_end":95,"column_start":3,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":5033},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89192,"byte_end":89204,"line_start":356,"line_end":356,"column_start":13,"column_end":25},"name":"BitDomainMut","qualname":"::domain::BitDomainMut","value":"pub enum BitDomainMut<'a, O, T> where O: BitOrder, T: BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        body: &'a mut BitSlice<O, T>,\n        tail: BitTail<T::Mem>,\n    },\n    Region {\n        head: &'a mut BitSlice<O, T>,\n        body: &'a mut BitSlice<O, T::Unalias>,\n        tail: &'a mut BitSlice<O, T>,\n    },\n}","parent":null,"children":[{"krate":0,"index":5037},{"krate":0,"index":5041}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n [`BitSlice`].","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80337,"byte_end":80398,"line_start":54,"line_end":54,"column_start":3,"column_end":64}},{"value":"/ [`BitSlice`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80401,"byte_end":80418,"line_start":55,"line_end":55,"column_start":3,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80421,"byte_end":80424,"line_start":56,"line_end":56,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`] regions can be described in terms of edge and center","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80427,"byte_end":80496,"line_start":57,"line_end":57,"column_start":3,"column_end":72}},{"value":"/ partitions, where the edge partitions must retain the aliasing","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80499,"byte_end":80565,"line_start":58,"line_end":58,"column_start":3,"column_end":69}},{"value":"/ status of the source `BitSlice` handle, and the center partition is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80568,"byte_end":80639,"line_start":59,"line_end":59,"column_start":3,"column_end":74}},{"value":"/ known to be completely unaliased by any other view. This property","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80642,"byte_end":80711,"line_start":60,"line_end":60,"column_start":3,"column_end":72}},{"value":"/ allows any `BitSlice` handle to be decomposed into smaller regions,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80714,"byte_end":80785,"line_start":61,"line_end":61,"column_start":3,"column_end":74}},{"value":"/ and safely remove any aliasing markers from the center partition","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80788,"byte_end":80856,"line_start":62,"line_end":62,"column_start":3,"column_end":71}},{"value":"/ that no longer requires such safeguarding.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80859,"byte_end":80905,"line_start":63,"line_end":63,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80908,"byte_end":80911,"line_start":64,"line_end":64,"column_start":3,"column_end":6}},{"value":"/ This enum acts like the `.split*` methods in that it only subdivides","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80914,"byte_end":80986,"line_start":65,"line_end":65,"column_start":3,"column_end":75}},{"value":"/ the source [`BitSlice`] into smaller `BitSlice`s, and makes","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80989,"byte_end":81052,"line_start":66,"line_end":66,"column_start":3,"column_end":66}},{"value":"/ appropriate modifications to the aliasing markers.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81055,"byte_end":81109,"line_start":67,"line_end":67,"column_start":3,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81112,"byte_end":81115,"line_start":68,"line_end":68,"column_start":3,"column_end":6}},{"value":"/ It does not add any aliasing markers: if the slice is marked as","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81118,"byte_end":81185,"line_start":69,"line_end":69,"column_start":3,"column_end":70}},{"value":"/ aliased, then the edge partitions will retain that marker, and if it","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81188,"byte_end":81260,"line_start":70,"line_end":70,"column_start":3,"column_end":75}},{"value":"/ is not, then the edge partitions do not need it.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81263,"byte_end":81315,"line_start":71,"line_end":71,"column_start":3,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81318,"byte_end":81321,"line_start":72,"line_end":72,"column_start":3,"column_end":6}},{"value":"/ This does not provide references to the underlying memory buffer. If","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81324,"byte_end":81396,"line_start":73,"line_end":73,"column_start":3,"column_end":75}},{"value":"/ you need such direct access, use the [`Domain`] or [`DomainMut`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81399,"byte_end":81467,"line_start":74,"line_end":74,"column_start":3,"column_end":71}},{"value":"/ enums.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81470,"byte_end":81480,"line_start":75,"line_end":75,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81483,"byte_end":81486,"line_start":76,"line_end":76,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81489,"byte_end":81504,"line_start":77,"line_end":77,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81507,"byte_end":81510,"line_start":78,"line_end":78,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81513,"byte_end":81569,"line_start":79,"line_end":79,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81572,"byte_end":81575,"line_start":80,"line_end":80,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81578,"byte_end":81599,"line_start":81,"line_end":81,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81602,"byte_end":81605,"line_start":82,"line_end":82,"column_start":3,"column_end":6}},{"value":"/ - `O`: The ordering type of the source [`BitSlice`] handle.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81608,"byte_end":81671,"line_start":83,"line_end":83,"column_start":3,"column_end":66}},{"value":"/ - `T`: The register type of the source [`BitSlice`] handle,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81674,"byte_end":81737,"line_start":84,"line_end":84,"column_start":3,"column_end":66}},{"value":"/   including any aliasing markers.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81740,"byte_end":81777,"line_start":85,"line_end":85,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81780,"byte_end":81783,"line_start":86,"line_end":86,"column_start":3,"column_end":6}},{"value":"/ # Aliasing Awareness","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81786,"byte_end":81810,"line_start":87,"line_end":87,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81813,"byte_end":81816,"line_start":88,"line_end":88,"column_start":3,"column_end":6}},{"value":"/ This enum does not grant access to memory outside the scope of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81819,"byte_end":81889,"line_start":89,"line_end":89,"column_start":3,"column_end":73}},{"value":"/ original [`BitSlice`] handle, and so does not need to modfiy any","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81892,"byte_end":81960,"line_start":90,"line_end":90,"column_start":3,"column_end":71}},{"value":"/ aliasing conditions.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81963,"byte_end":81987,"line_start":91,"line_end":91,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81990,"byte_end":81993,"line_start":92,"line_end":92,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81996,"byte_end":82036,"line_start":93,"line_end":93,"column_start":3,"column_end":43}},{"value":"/ [`Domain`]: crate::domain::Domain","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":82039,"byte_end":82076,"line_start":94,"line_end":94,"column_start":3,"column_end":40}},{"value":"/ [`DomainMut`]: crate::domain::DomainMut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":82079,"byte_end":82122,"line_start":95,"line_end":95,"column_start":3,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":5063},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":97329,"byte_end":97335,"line_start":634,"line_end":634,"column_start":9,"column_end":15},"name":"Domain","qualname":"::domain::Domain","value":"pub enum Domain<'a, T> where T: BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        elem: &'a T,\n        tail: BitTail<T::Mem>,\n    },\n    Region {\n        head: Option<(BitIdx<T::Mem>, &'a T)>,\n        body: &'a [T::Unalias],\n        tail: Option<(&'a T, BitTail<T::Mem>)>,\n    },\n}","parent":null,"children":[{"krate":0,"index":5066},{"krate":0,"index":5070}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n [`BitSlice`].","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89519,"byte_end":89580,"line_start":378,"line_end":378,"column_start":3,"column_end":64}},{"value":"/ [`BitSlice`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89583,"byte_end":89600,"line_start":379,"line_end":379,"column_start":3,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89603,"byte_end":89606,"line_start":380,"line_end":380,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`] regions can be described in terms of edge and center","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89609,"byte_end":89678,"line_start":381,"line_end":381,"column_start":3,"column_end":72}},{"value":"/ partitions, where the edge partitions must retain the aliasing","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89681,"byte_end":89747,"line_start":382,"line_end":382,"column_start":3,"column_end":69}},{"value":"/ status of the source `BitSlice` handle, and the center partition is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89750,"byte_end":89821,"line_start":383,"line_end":383,"column_start":3,"column_end":74}},{"value":"/ known to be completely unaliased by any other view. This property","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89824,"byte_end":89893,"line_start":384,"line_end":384,"column_start":3,"column_end":72}},{"value":"/ allows any `BitSlice` handle to be decomposed into smaller regions,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89896,"byte_end":89967,"line_start":385,"line_end":385,"column_start":3,"column_end":74}},{"value":"/ and safely remove any aliasing markers from the center partition","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89970,"byte_end":90038,"line_start":386,"line_end":386,"column_start":3,"column_end":71}},{"value":"/ that no longer requires such safeguarding.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90041,"byte_end":90087,"line_start":387,"line_end":387,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90090,"byte_end":90093,"line_start":388,"line_end":388,"column_start":3,"column_end":6}},{"value":"/ This enum splits the underlying element slice `[T]` into the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90096,"byte_end":90160,"line_start":389,"line_end":389,"column_start":3,"column_end":67}},{"value":"/ maybe-aliased edge elements and known-unaliased center elements. If","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90163,"byte_end":90234,"line_start":390,"line_end":390,"column_start":3,"column_end":74}},{"value":"/ you do not need to work with the memory elements directly, and only","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90237,"byte_end":90308,"line_start":391,"line_end":391,"column_start":3,"column_end":74}},{"value":"/ need to firmly specify the access behavior of the [`BitSlice`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90311,"byte_end":90377,"line_start":392,"line_end":392,"column_start":3,"column_end":69}},{"value":"/ handle, use the [`BitDomain`] and [`BitDomainMut`] enums.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90380,"byte_end":90441,"line_start":393,"line_end":393,"column_start":3,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90444,"byte_end":90447,"line_start":394,"line_end":394,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90450,"byte_end":90465,"line_start":395,"line_end":395,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90468,"byte_end":90471,"line_start":396,"line_end":396,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90474,"byte_end":90530,"line_start":397,"line_end":397,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90533,"byte_end":90536,"line_start":398,"line_end":398,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90539,"byte_end":90560,"line_start":399,"line_end":399,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90563,"byte_end":90566,"line_start":400,"line_end":400,"column_start":3,"column_end":6}},{"value":"/ - `T`: The register type of the source [`BitSlice`] handle,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90569,"byte_end":90632,"line_start":401,"line_end":401,"column_start":3,"column_end":66}},{"value":"/   including any aliasing markers.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90635,"byte_end":90672,"line_start":402,"line_end":402,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90675,"byte_end":90678,"line_start":403,"line_end":403,"column_start":3,"column_end":6}},{"value":"/ # Mutability","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90681,"byte_end":90697,"line_start":404,"line_end":404,"column_start":3,"column_end":19}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90700,"byte_end":90703,"line_start":405,"line_end":405,"column_start":3,"column_end":6}},{"value":"/ The immutable view produces [`T::Alias`] references, which permit","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90706,"byte_end":90775,"line_start":406,"line_end":406,"column_start":3,"column_end":72}},{"value":"/ foreign writes to the referent location but disallow writes through","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90778,"byte_end":90849,"line_start":407,"line_end":407,"column_start":3,"column_end":74}},{"value":"/ itself. The mutable view produces [`T::Access`] references, because","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90852,"byte_end":90923,"line_start":408,"line_end":408,"column_start":3,"column_end":74}},{"value":"/ `&mut _` references can only ever be produced when no other aliasing","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90926,"byte_end":90998,"line_start":409,"line_end":409,"column_start":3,"column_end":75}},{"value":"/ handle exists. The write permissions must be weakened from","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91001,"byte_end":91063,"line_start":410,"line_end":410,"column_start":3,"column_end":65}},{"value":"/ `&mut T::Alias` to `&T::Access` in order to satisfy the Rust memory","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91066,"byte_end":91137,"line_start":411,"line_end":411,"column_start":3,"column_end":74}},{"value":"/ rules.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91140,"byte_end":91150,"line_start":412,"line_end":412,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91153,"byte_end":91156,"line_start":413,"line_end":413,"column_start":3,"column_end":6}},{"value":"/ The edge references do not forbid modifying bits outside of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91159,"byte_end":91226,"line_start":414,"line_end":414,"column_start":3,"column_end":70}},{"value":"/ source [`BitSlice`] domain, and writes out of bounds will be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91229,"byte_end":91293,"line_start":415,"line_end":415,"column_start":3,"column_end":67}},{"value":"/ correctly handled by any other handles capable of viewing those","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91296,"byte_end":91363,"line_start":416,"line_end":416,"column_start":3,"column_end":70}},{"value":"/ elements. Doing so is still *incorrect*, though defined, and you are","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91366,"byte_end":91438,"line_start":417,"line_end":417,"column_start":3,"column_end":75}},{"value":"/ responsible for writing only within bounds when using `DomainMut`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91441,"byte_end":91511,"line_start":418,"line_end":418,"column_start":3,"column_end":73}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91514,"byte_end":91517,"line_start":419,"line_end":419,"column_start":3,"column_end":6}},{"value":"/ [`BitDomain`]: crate::domain::BitDomain","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91520,"byte_end":91563,"line_start":420,"line_end":420,"column_start":3,"column_end":46}},{"value":"/ [`BitDomainMut`]: crate::domain::BitDomainMut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91566,"byte_end":91615,"line_start":421,"line_end":421,"column_start":3,"column_end":52}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91618,"byte_end":91658,"line_start":422,"line_end":422,"column_start":3,"column_end":43}},{"value":"/ [`T::Access`]: crate::store::BitStore::Access","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91661,"byte_end":91710,"line_start":423,"line_end":423,"column_start":3,"column_end":52}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91713,"byte_end":91760,"line_start":424,"line_end":424,"column_start":3,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":5091},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":97346,"byte_end":97355,"line_start":635,"line_end":635,"column_start":9,"column_end":18},"name":"DomainMut","qualname":"::domain::DomainMut","value":"pub enum DomainMut<'a, T> where T: BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        elem: &'a T::Access,\n        tail: BitTail<T::Mem>,\n    },\n    Region {\n        head: Option<(BitIdx<T::Mem>, &'a T::Access)>,\n        body: &'a mut [T::Unalias],\n        tail: Option<(&'a T::Access, BitTail<T::Mem>)>,\n    },\n}","parent":null,"children":[{"krate":0,"index":5094},{"krate":0,"index":5098}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n [`BitSlice`].","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89519,"byte_end":89580,"line_start":378,"line_end":378,"column_start":3,"column_end":64}},{"value":"/ [`BitSlice`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89583,"byte_end":89600,"line_start":379,"line_end":379,"column_start":3,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89603,"byte_end":89606,"line_start":380,"line_end":380,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`] regions can be described in terms of edge and center","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89609,"byte_end":89678,"line_start":381,"line_end":381,"column_start":3,"column_end":72}},{"value":"/ partitions, where the edge partitions must retain the aliasing","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89681,"byte_end":89747,"line_start":382,"line_end":382,"column_start":3,"column_end":69}},{"value":"/ status of the source `BitSlice` handle, and the center partition is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89750,"byte_end":89821,"line_start":383,"line_end":383,"column_start":3,"column_end":74}},{"value":"/ known to be completely unaliased by any other view. This property","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89824,"byte_end":89893,"line_start":384,"line_end":384,"column_start":3,"column_end":72}},{"value":"/ allows any `BitSlice` handle to be decomposed into smaller regions,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89896,"byte_end":89967,"line_start":385,"line_end":385,"column_start":3,"column_end":74}},{"value":"/ and safely remove any aliasing markers from the center partition","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89970,"byte_end":90038,"line_start":386,"line_end":386,"column_start":3,"column_end":71}},{"value":"/ that no longer requires such safeguarding.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90041,"byte_end":90087,"line_start":387,"line_end":387,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90090,"byte_end":90093,"line_start":388,"line_end":388,"column_start":3,"column_end":6}},{"value":"/ This enum splits the underlying element slice `[T]` into the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90096,"byte_end":90160,"line_start":389,"line_end":389,"column_start":3,"column_end":67}},{"value":"/ maybe-aliased edge elements and known-unaliased center elements. If","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90163,"byte_end":90234,"line_start":390,"line_end":390,"column_start":3,"column_end":74}},{"value":"/ you do not need to work with the memory elements directly, and only","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90237,"byte_end":90308,"line_start":391,"line_end":391,"column_start":3,"column_end":74}},{"value":"/ need to firmly specify the access behavior of the [`BitSlice`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90311,"byte_end":90377,"line_start":392,"line_end":392,"column_start":3,"column_end":69}},{"value":"/ handle, use the [`BitDomain`] and [`BitDomainMut`] enums.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90380,"byte_end":90441,"line_start":393,"line_end":393,"column_start":3,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90444,"byte_end":90447,"line_start":394,"line_end":394,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90450,"byte_end":90465,"line_start":395,"line_end":395,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90468,"byte_end":90471,"line_start":396,"line_end":396,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90474,"byte_end":90530,"line_start":397,"line_end":397,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90533,"byte_end":90536,"line_start":398,"line_end":398,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90539,"byte_end":90560,"line_start":399,"line_end":399,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90563,"byte_end":90566,"line_start":400,"line_end":400,"column_start":3,"column_end":6}},{"value":"/ - `T`: The register type of the source [`BitSlice`] handle,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90569,"byte_end":90632,"line_start":401,"line_end":401,"column_start":3,"column_end":66}},{"value":"/   including any aliasing markers.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90635,"byte_end":90672,"line_start":402,"line_end":402,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90675,"byte_end":90678,"line_start":403,"line_end":403,"column_start":3,"column_end":6}},{"value":"/ # Mutability","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90681,"byte_end":90697,"line_start":404,"line_end":404,"column_start":3,"column_end":19}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90700,"byte_end":90703,"line_start":405,"line_end":405,"column_start":3,"column_end":6}},{"value":"/ The immutable view produces [`T::Alias`] references, which permit","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90706,"byte_end":90775,"line_start":406,"line_end":406,"column_start":3,"column_end":72}},{"value":"/ foreign writes to the referent location but disallow writes through","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90778,"byte_end":90849,"line_start":407,"line_end":407,"column_start":3,"column_end":74}},{"value":"/ itself. The mutable view produces [`T::Access`] references, because","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90852,"byte_end":90923,"line_start":408,"line_end":408,"column_start":3,"column_end":74}},{"value":"/ `&mut _` references can only ever be produced when no other aliasing","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90926,"byte_end":90998,"line_start":409,"line_end":409,"column_start":3,"column_end":75}},{"value":"/ handle exists. The write permissions must be weakened from","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91001,"byte_end":91063,"line_start":410,"line_end":410,"column_start":3,"column_end":65}},{"value":"/ `&mut T::Alias` to `&T::Access` in order to satisfy the Rust memory","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91066,"byte_end":91137,"line_start":411,"line_end":411,"column_start":3,"column_end":74}},{"value":"/ rules.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91140,"byte_end":91150,"line_start":412,"line_end":412,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91153,"byte_end":91156,"line_start":413,"line_end":413,"column_start":3,"column_end":6}},{"value":"/ The edge references do not forbid modifying bits outside of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91159,"byte_end":91226,"line_start":414,"line_end":414,"column_start":3,"column_end":70}},{"value":"/ source [`BitSlice`] domain, and writes out of bounds will be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91229,"byte_end":91293,"line_start":415,"line_end":415,"column_start":3,"column_end":67}},{"value":"/ correctly handled by any other handles capable of viewing those","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91296,"byte_end":91363,"line_start":416,"line_end":416,"column_start":3,"column_end":70}},{"value":"/ elements. Doing so is still *incorrect*, though defined, and you are","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91366,"byte_end":91438,"line_start":417,"line_end":417,"column_start":3,"column_end":75}},{"value":"/ responsible for writing only within bounds when using `DomainMut`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91441,"byte_end":91511,"line_start":418,"line_end":418,"column_start":3,"column_end":73}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91514,"byte_end":91517,"line_start":419,"line_end":419,"column_start":3,"column_end":6}},{"value":"/ [`BitDomain`]: crate::domain::BitDomain","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91520,"byte_end":91563,"line_start":420,"line_end":420,"column_start":3,"column_end":46}},{"value":"/ [`BitDomainMut`]: crate::domain::BitDomainMut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91566,"byte_end":91615,"line_start":421,"line_end":421,"column_start":3,"column_end":52}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91618,"byte_end":91658,"line_start":422,"line_end":422,"column_start":3,"column_end":43}},{"value":"/ [`T::Access`]: crate::store::BitStore::Access","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91661,"byte_end":91710,"line_start":423,"line_end":423,"column_start":3,"column_end":52}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91713,"byte_end":91760,"line_start":424,"line_end":424,"column_start":3,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":642},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"field","qualname":"::field","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","parent":null,"children":[{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":647},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":654},{"krate":0,"index":657},{"krate":0,"index":660},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":673},{"krate":0,"index":676},{"krate":0,"index":679},{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":686},{"krate":0,"index":689},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":696},{"krate":0,"index":699},{"krate":0,"index":712},{"krate":0,"index":722},{"krate":0,"index":732},{"krate":0,"index":743},{"krate":0,"index":754},{"krate":0,"index":765},{"krate":0,"index":767},{"krate":0,"index":772},{"krate":0,"index":777},{"krate":0,"index":780},{"krate":0,"index":783}],"decl_id":null,"docs":" Batched load/store access to bitfields.","sig":null,"attributes":[{"value":"* Batched load/store access to bitfields.\n\nThis module provides load/store access to bitfield regions that emulates the\nordinary memory bus. This functionality enables any [`BitSlice`] span to be used\nas a memory region, and provides the basis of a library-level analogue to the\nbitfield language feature found in C and C++. Additionally, orderings that have\ncontiguous positions can transfer more than one bit in an operation, allowing a\nperformance acceleration over sequential bit-by-bit traversal.\n\nThe [`BitField`] trait is open for implementation. Rust’s implementation rules\ncurrently disallow a crate to implement a foreign trait on a foreign type, even\nwhen parameterized over a local type. If you need such a `BitField`\nimplementation with a new `BitOrder` type, please file an issue.\n\n# Batched Behavior\n\nThe first purpose of [`BitField`] is to provide access to [`BitSlice`] regions\nas if they were an ordinary memory location. However, this can be done through\nthe `BitSlice` sequential API. The second purpose of this trait is to accelerate\nsuch access by using the parallel memory bus to transfer more than one bit at a\ntime when the region permits it. As such, implementors should provide a transfer\nbehavior based on shift/mask operations wherever possible, for as wide a span in\na memory element as possible.\n\n# Register Bit Order Preservation\n\nAs a default assumption, each element of the underlying memory region used to\nstore part of a value should not reörder the bit-pattern of that value. While\nthe [`BitOrder`] argument is used to determine which segments of the memory\nregister are live for the purposes of this transfer, it should not be used to\nmap each individual bit of the transferred value to a corresponding bit of the\nstorage element. As an example, the [`Lsb0`] and [`Msb0`] implementations both\nstore the value `12u8` in memory as a four-bit span with its two\nmore-significant bits set and its two less-significant bits cleared; the\ndifference is only in *which* bits of an element are used to store the span.\n\n# Endianness\n\nThe `_le` and `_be` methods of [`BitField`] refer to the order in which\nsuccessive `T` elements of a storage region are assigned numeric significance\nduring a transfer. Within any particular `T` element, the ordering of its memory\nis not governed by the `BitField` trait.\n\nThe provided [`BitOrder`] implementors [`Lsb0`] and [`Msb0`] use the local\nmachine’s byte ordering, and do not reörder bytes during transfer.\n\n## `_le` Methods\n\nWhen storing a value `M` into a sequence of memory elements `T`, [`store_le`]\nbreaks `M` into chunks from the least significant edge. The least significant\nchunk is placed in the lowest-addressed element `T`, then the next more\nsignificant chunk is placed in the successive address, until the most\nsignificant chunk of the value `M` is placed in the highest address of a\nlocation `T`.\n\nWhen loading a value `M` out of a sequence of memory elements `T`, [`load_le`]\nuses the same chunking behavior: the lowest-addressed `T` contains the least\nsignificant chunk of the returned `M`, then each successive address contains a\nmore significant chunk, until the highest address contains the most significant.\n\nThe [`BitOrder`] implementation governs *where* in each `T` location a fragment\nof `M` is stored.\n\nLet us store 8 bits into memory, over an element boundary, using both [`Lsb0`]\nand [`Msb0`] orderings:\n\n```rust\nuse bitvec::prelude::*;\n\nlet val: u8 = 0b11010_011;\n//              STUVW XYZ\nlet mut store = [0u8; 2];\n\nstore.view_bits_mut::<Lsb0>()\n  [5 .. 13]\n  .store_le(val);\nassert_eq!(\n  store,\n  [0b011_00000, 0b000_11010],\n//   XYZ               STUVW\n# \"[{:08b}, {:08b}]\",\n# store[0],\n# store[1],\n);\nstore = [0u8; 2];\n\nstore.view_bits_mut::<Msb0>()\n  [5 .. 13]\n  .store_le(val);\nassert_eq!(\n  store,\n  [0b00000_011, 0b11010_000],\n//         XYZ    STUVW\n# \"[{:08b}, {:08b}]\",\n# store[0],\n# store[1],\n);\n```\n\nIn both cases, the lower three bits of `val` were placed into the element at the\nlower memory address. The choice of [`Lsb0`] vs [`Msb0`] changed *which* three\nbits in the element were considered to be indexed by `5 .. 8`, but [`store_le`]\nalways placed the least three bits of `val`, *in ordinary register order*, into\nelement `[0]`. Similarly, the higher five bits of `val` were placed into element\n`[1]`; `Lsb0` and `Msb0` selected *which* five bits in the element were indexed\nby `8 .. 13`, and the bits retained their register order.\n\n## `_be` Methods\n\nWhen storing a value `M` into a sequence of memory elements `T`, [`store_be`]\nbreaks `M` into chunks from the most significant edge. The most significant\nchunk is placed in the lowest-addressed element `T`, then the next less\nsignificant chunk is placed in the successive address, until the least\nsignificant chunk of the value `M` is placed in the highest address of a\nlocation `T`.\n\nWhen loading a value `M` out of a sequence of memory elements `T`, [`load_be`]\nuses the same chunking behavior: the lowest-addressed `T` contains the most\nsignificant chunk of the returned `M`, then each successive address contains a\nless significant chunk, until the highest address contains the least\nsignificant.\n\nThe [`BitOrder`] implementation governs *where* in each `T` location a fragment\nof `M` is stored.\n\nLet us store 8 bits into memory, over an element boundary, using both [`Lsb0`]\nand [`Msb0`] orderings:\n\n```rust\nuse bitvec::prelude::*;\n\nlet val: u8 = 0b110_10011;\n//              STU VWXYZ\nlet mut store = [0u8; 2];\n\nstore.view_bits_mut::<Lsb0>()\n  [5 .. 13]\n  .store_be(val);\nassert_eq!(\n  store,\n  [0b110_00000, 0b000_10011],\n//   STU              VWXYZ\n# \"[{:08b}, {:08b}]\",\n# store[0],\n# store[1],\n);\nstore = [0u8; 2];\n\nstore.view_bits_mut::<Msb0>()\n  [5 .. 13]\n  .store_be(val);\nassert_eq!(\n  store,\n  [0b00000_110, 0b10011_000],\n//         STU    VWXYZ\n# \"[{:08b}, {:08b}]\",\n# store[0],\n# store[1],\n);\n```\n\nIn both cases, the higher three bits of `val` were placed into the element at\nthe lower memory address. The choice of [`Lsb0`] vs [`Msb0`] changed *which*\nthree bits in the element were considered to be indexed by `5 .. 8`, but\n[`store_be`] always placed the greatest three bits of `val`, *in ordinary*\n*register order*, into element `[0]`. Similarly, the lower five bits of `val`\nwere placed into element `[1]`; `Lsb0` and `Msb0` selected *which* five bits in\nthe element were indexed by `8 .. 13`, and the bits retained their register\norder.\n\n# `M` and `T` Relationships\n\n`BitField` permits any type of (unsigned) integer `M` to be stored into or\nloaded from a bit-slice region with any storage type `T`. While the examples\nused `u8` for both, for brevity of writing out values, `BitField` will still\noperate correctly for any other combination of types.\n\n`Bitfield` implementations use the processor’s own concept of integer registers\nto operate. As such, the byte-wise memory access patterns for types wider than\n`u8` depends on your processor’s byte-endianness, as well as which `BitField`\nmethod and which `BitOrder` implementation you are using.\n\n`BitField` only operates within processor registers; traffic of `T` elements\nbetween the memory bank and the processor register is controlled entirely by the\nprocessor.\n\nIf you do not want to introduce the processor’s byte-endianness as a variable\nthat affects the in-memory representation of stored integers, stick to\n`BitSlice<_, u8>` as the bit-field driver. `BitSlice<Msb0, u8>` will fill memory\nin a way that matches a debugger or other memory inspections.\n\n[`BitField`]: crate::field::BitField\n[`BitOrder`]: crate::order::BitOrder\n[`BitSlice`]: crate::slice::BitSlice\n[`Lsb0`]: crate::order::Lsb0\n[`Msb0`]: crate::order::Msb0\n[`load_be`]: crate::field::BitField::load_be\n[`load_le`]: crate::field::BitField::load_le\n[`store_be`]: crate::field::BitField::store_be\n[`store_le`]: crate::field::BitField::store_le\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":99828,"byte_end":107698,"line_start":1,"line_end":201,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":699},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110025,"byte_end":110033,"line_start":282,"line_end":282,"column_start":11,"column_end":19},"name":"BitField","qualname":"::field::BitField","value":"BitField","parent":null,"children":[{"krate":0,"index":700},{"krate":0,"index":702},{"krate":0,"index":704},{"krate":0,"index":706},{"krate":0,"index":708},{"krate":0,"index":710}],"decl_id":null,"docs":" Performs C-style bitfield access through a [`BitSlice`].","sig":null,"attributes":[{"value":"* Performs C-style bitfield access through a [`BitSlice`].\n\nThis trait transfers data between a [`BitSlice`] region and a local integer. The\ntrait functions always place the live bits of the value against the least\nsignificant bit edge of the local integer (the return value of the load methods,\nand the argument value of the store methods).\n\nMethods should be called as `bits[start .. end].load_or_store()`, where the\nrange subslice selects no more than the [`M::BITS`] element width.\n\n# Target-Specific Behavior\n\nWhen you are using this trait to manage memory that never leaves your machine,\nyou can use the [`load`] and [`store`] methods. However, if you are using this\ntrait to operate on a de/serialization buffer, where the exact bit pattern in\nmemory is important to your work and/or you need to be aware of the processor\nbyte endianness, you must not use these methods.\n\nInstead, use [`load_le`], [`load_be`], [`store_le`], or[`store_be`] directly.\n\nThe un-suffixed methods choose their implementation based on the target\nprocessor byte endianness; the suffixed methods have a consistent and fixed\nbehavior.\n\n# Element- and Bit- Ordering Combinations\n\nThe `_le` and `_be` method suffices refer to the significance of successive\nelements `T` in memory, while the `BitOrder` trait refers to the order that bits\nwithin a single element `T` are traversed. The `BitField` methods and the\n`BitOrder` implementors are ***not*** related.\n\nWhen a load or store operation is contained in only one memory element, then the\n`_le` and `_be` methods have the same behavior. They differ when the operation\nmust touch more than one element.\n\nThe module documentation contains a more detailed explanation, and examples, for\nthis behavior.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`M::BITS`]: crate::mem::BitMemory::BITS\n[`load`]: Self::load\n[`load_be`]: Self::load_be\n[`load_le`]: Self::load_le\n[`store`]: Self::store\n[`store_be`]: Self::store_be\n[`store_le`]: Self::store_le\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":108044,"byte_end":110014,"line_start":235,"line_end":281,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111454,"byte_end":111458,"line_start":322,"line_end":322,"column_start":5,"column_end":9},"name":"load","qualname":"::field::BitField::load","value":"pub fn load<M>(&Self) -> M where M: BitMemory","parent":{"krate":0,"index":699},"children":[],"decl_id":null,"docs":" Loads the bits in the `self` region into a local value.","sig":null,"attributes":[{"value":"/ Loads the bits in the `self` region into a local value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110037,"byte_end":110096,"line_start":283,"line_end":283,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110098,"byte_end":110101,"line_start":284,"line_end":284,"column_start":2,"column_end":5}},{"value":"/ This can load into any of the unsigned integers which implement","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110103,"byte_end":110170,"line_start":285,"line_end":285,"column_start":2,"column_end":69}},{"value":"/ [`BitMemory`]. Any further transformation must be done by the user.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110172,"byte_end":110243,"line_start":286,"line_end":286,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110245,"byte_end":110248,"line_start":287,"line_end":287,"column_start":2,"column_end":5}},{"value":"/ # Target-Specific Behavior","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110250,"byte_end":110280,"line_start":288,"line_end":288,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110282,"byte_end":110285,"line_start":289,"line_end":289,"column_start":2,"column_end":5}},{"value":"/ **THIS FUNCTION CHANGES BEHAVIOR FOR DIFFERENT TARGETS.**","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110287,"byte_end":110348,"line_start":290,"line_end":290,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110350,"byte_end":110353,"line_start":291,"line_end":291,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function calls [`load_le`] on","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110355,"byte_end":110423,"line_start":292,"line_end":292,"column_start":2,"column_end":70}},{"value":"/ little-endian byte-ordered CPUs, and [`load_be`] on big-endian","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110425,"byte_end":110491,"line_start":293,"line_end":293,"column_start":2,"column_end":68}},{"value":"/ byte-ordered CPUs.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110493,"byte_end":110515,"line_start":294,"line_end":294,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110517,"byte_end":110520,"line_start":295,"line_end":295,"column_start":2,"column_end":5}},{"value":"/ If you are using this function from a region that crosses multiple","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110522,"byte_end":110592,"line_start":296,"line_end":296,"column_start":2,"column_end":72}},{"value":"/ elements in memory, be aware that it will behave differently on","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110594,"byte_end":110661,"line_start":297,"line_end":297,"column_start":2,"column_end":69}},{"value":"/ big-endian and little-endian target architectures.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110663,"byte_end":110717,"line_start":298,"line_end":298,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110719,"byte_end":110722,"line_start":299,"line_end":299,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110724,"byte_end":110740,"line_start":300,"line_end":300,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110742,"byte_end":110745,"line_start":301,"line_end":301,"column_start":2,"column_end":5}},{"value":"/ - `&self`: A read reference to some bits in memory. This slice must be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110747,"byte_end":110821,"line_start":302,"line_end":302,"column_start":2,"column_end":76}},{"value":"/   trimmed to have a width no more than the [`M::BITS`] width of the type","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110823,"byte_end":110899,"line_start":303,"line_end":303,"column_start":2,"column_end":78}},{"value":"/   being loaded. This can be accomplished with range indexing on a larger","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110901,"byte_end":110977,"line_start":304,"line_end":304,"column_start":2,"column_end":78}},{"value":"/   slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110979,"byte_end":110991,"line_start":305,"line_end":305,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110993,"byte_end":110996,"line_start":306,"line_end":306,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110998,"byte_end":111011,"line_start":307,"line_end":307,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111013,"byte_end":111016,"line_start":308,"line_end":308,"column_start":2,"column_end":5}},{"value":"/ A value `M` whose least [`self.len()`] significant bits are filled with","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111018,"byte_end":111093,"line_start":309,"line_end":309,"column_start":2,"column_end":77}},{"value":"/ the bits of `self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111095,"byte_end":111118,"line_start":310,"line_end":310,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111120,"byte_end":111123,"line_start":311,"line_end":311,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111125,"byte_end":111137,"line_start":312,"line_end":312,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111139,"byte_end":111142,"line_start":313,"line_end":313,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111144,"byte_end":111218,"line_start":314,"line_end":314,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111220,"byte_end":111243,"line_start":315,"line_end":315,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111245,"byte_end":111248,"line_start":316,"line_end":316,"column_start":2,"column_end":5}},{"value":"/ [`BitMemory`]: crate::mem::BitMemory","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111250,"byte_end":111290,"line_start":317,"line_end":317,"column_start":2,"column_end":42}},{"value":"/ [`M::BITS`]: crate::mem::BitMemory::BITS","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111292,"byte_end":111336,"line_start":318,"line_end":318,"column_start":2,"column_end":46}},{"value":"/ [`load_be`]: Self::load_be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111338,"byte_end":111368,"line_start":319,"line_end":319,"column_start":2,"column_end":32}},{"value":"/ [`load_le`]: Self::load_le","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111370,"byte_end":111400,"line_start":320,"line_end":320,"column_start":2,"column_end":32}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111402,"byte_end":111449,"line_start":321,"line_end":321,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113180,"byte_end":113185,"line_start":372,"line_end":372,"column_start":5,"column_end":10},"name":"store","qualname":"::field::BitField::store","value":"pub fn store<M>(&mut Self, M) where M: BitMemory","parent":{"krate":0,"index":699},"children":[],"decl_id":null,"docs":" Stores a sequence of bits from the user into the domain of `self`.","sig":null,"attributes":[{"value":"/ Stores a sequence of bits from the user into the domain of `self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111629,"byte_end":111699,"line_start":331,"line_end":331,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111701,"byte_end":111704,"line_start":332,"line_end":332,"column_start":2,"column_end":5}},{"value":"/ This can store any of the unsigned integers which implement","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111706,"byte_end":111769,"line_start":333,"line_end":333,"column_start":2,"column_end":65}},{"value":"/ [`BitMemory`]. Any other types must first be transformed by the user.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111771,"byte_end":111844,"line_start":334,"line_end":334,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111846,"byte_end":111849,"line_start":335,"line_end":335,"column_start":2,"column_end":5}},{"value":"/ # Target-Specific Behavior","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111851,"byte_end":111881,"line_start":336,"line_end":336,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111883,"byte_end":111886,"line_start":337,"line_end":337,"column_start":2,"column_end":5}},{"value":"/ **THIS FUNCTION CHANGES BEHAVIOR FOR DIFFERENT TARGETS.**","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111888,"byte_end":111949,"line_start":338,"line_end":338,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111951,"byte_end":111954,"line_start":339,"line_end":339,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function calls [`store_le`] on","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111956,"byte_end":112025,"line_start":340,"line_end":340,"column_start":2,"column_end":71}},{"value":"/ little-endian byte-ordered CPUs, and [`store_be`] on big-endian","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112027,"byte_end":112094,"line_start":341,"line_end":341,"column_start":2,"column_end":69}},{"value":"/ byte-ordered CPUs.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112096,"byte_end":112118,"line_start":342,"line_end":342,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112120,"byte_end":112123,"line_start":343,"line_end":343,"column_start":2,"column_end":5}},{"value":"/ If you are using this function to store into a region that crosses","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112125,"byte_end":112195,"line_start":344,"line_end":344,"column_start":2,"column_end":72}},{"value":"/ multiple elements in memory, be aware that it will behave differently on","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112197,"byte_end":112273,"line_start":345,"line_end":345,"column_start":2,"column_end":78}},{"value":"/ big-endian and little-endian target architectures.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112275,"byte_end":112329,"line_start":346,"line_end":346,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112331,"byte_end":112334,"line_start":347,"line_end":347,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112336,"byte_end":112352,"line_start":348,"line_end":348,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112354,"byte_end":112357,"line_start":349,"line_end":349,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: A write reference to some bits in memory. This slice must","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112359,"byte_end":112435,"line_start":350,"line_end":350,"column_start":2,"column_end":78}},{"value":"/   be trimmed to have a width no more than the [`M::BITS`] width of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112437,"byte_end":112511,"line_start":351,"line_end":351,"column_start":2,"column_end":76}},{"value":"/   type being stored. This can be accomplished with range indexing on a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112513,"byte_end":112587,"line_start":352,"line_end":352,"column_start":2,"column_end":76}},{"value":"/   larger slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112589,"byte_end":112608,"line_start":353,"line_end":353,"column_start":2,"column_end":21}},{"value":"/ - `value`: A value, whose [`self.len()`] least significant bits will be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112610,"byte_end":112685,"line_start":354,"line_end":354,"column_start":2,"column_end":77}},{"value":"/   stored into `self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112687,"byte_end":112712,"line_start":355,"line_end":355,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112714,"byte_end":112717,"line_start":356,"line_end":356,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112719,"byte_end":112733,"line_start":357,"line_end":357,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112735,"byte_end":112738,"line_start":358,"line_end":358,"column_start":2,"column_end":5}},{"value":"/ The [`self.len()`] least significant bits of `value` are written into","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112740,"byte_end":112813,"line_start":359,"line_end":359,"column_start":2,"column_end":75}},{"value":"/ the domain of `self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112815,"byte_end":112840,"line_start":360,"line_end":360,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112842,"byte_end":112845,"line_start":361,"line_end":361,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112847,"byte_end":112859,"line_start":362,"line_end":362,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112861,"byte_end":112864,"line_start":363,"line_end":363,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112866,"byte_end":112940,"line_start":364,"line_end":364,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112942,"byte_end":112965,"line_start":365,"line_end":365,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112967,"byte_end":112970,"line_start":366,"line_end":366,"column_start":2,"column_end":5}},{"value":"/ [`BitMemory`]: crate::mem::BitMemory","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112972,"byte_end":113012,"line_start":367,"line_end":367,"column_start":2,"column_end":42}},{"value":"/ [`M::BITS`]: crate::mem::BitMemory::BITS","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113014,"byte_end":113058,"line_start":368,"line_end":368,"column_start":2,"column_end":46}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113060,"byte_end":113107,"line_start":369,"line_end":369,"column_start":2,"column_end":49}},{"value":"/ [`store_be`]: Self::store_be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113109,"byte_end":113141,"line_start":370,"line_end":370,"column_start":2,"column_end":34}},{"value":"/ [`store_le`]: Self::store_le","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113143,"byte_end":113175,"line_start":371,"line_end":371,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115938,"byte_end":115945,"line_start":461,"line_end":461,"column_start":5,"column_end":12},"name":"load_le","qualname":"::field::BitField::load_le","value":"pub fn load_le<M>(&Self) -> M where M: BitMemory","parent":{"krate":0,"index":699},"children":[],"decl_id":null,"docs":" Loads from `self`, using little-endian element `T` ordering.","sig":null,"attributes":[{"value":"/ Loads from `self`, using little-endian element `T` ordering.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113353,"byte_end":113417,"line_start":381,"line_end":381,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113419,"byte_end":113422,"line_start":382,"line_end":382,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its least","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113424,"byte_end":113494,"line_start":383,"line_end":383,"column_start":2,"column_end":72}},{"value":"/ significant chunk in the low memory address, and its most significant","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113496,"byte_end":113569,"line_start":384,"line_end":384,"column_start":2,"column_end":75}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113571,"byte_end":113646,"line_start":385,"line_end":385,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113648,"byte_end":113710,"line_start":386,"line_end":386,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113712,"byte_end":113715,"line_start":387,"line_end":387,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113717,"byte_end":113733,"line_start":388,"line_end":388,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113735,"byte_end":113738,"line_start":389,"line_end":389,"column_start":2,"column_end":5}},{"value":"/ - `&self`: A read reference to some bits in memory. This slice must be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113740,"byte_end":113814,"line_start":390,"line_end":390,"column_start":2,"column_end":76}},{"value":"/   trimmed to have a width no more than the [`M::BITS`] width of the type","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113816,"byte_end":113892,"line_start":391,"line_end":391,"column_start":2,"column_end":78}},{"value":"/   being loaded. This can be accomplished with range indexing on a larger","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113894,"byte_end":113970,"line_start":392,"line_end":392,"column_start":2,"column_end":78}},{"value":"/   slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113972,"byte_end":113984,"line_start":393,"line_end":393,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113986,"byte_end":113989,"line_start":394,"line_end":394,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113991,"byte_end":114004,"line_start":395,"line_end":395,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114006,"byte_end":114009,"line_start":396,"line_end":396,"column_start":2,"column_end":5}},{"value":"/ A value `M` whose least [`self.len()`] significant bits are filled with","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114011,"byte_end":114086,"line_start":397,"line_end":397,"column_start":2,"column_end":77}},{"value":"/ the bits of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114088,"byte_end":114159,"line_start":398,"line_end":398,"column_start":2,"column_end":73}},{"value":"/ lowest-address `T` is interpreted as containing the least significant","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114161,"byte_end":114234,"line_start":399,"line_end":399,"column_start":2,"column_end":75}},{"value":"/ bits of the return value `M`, and the highest-address `T` is interpreted","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114236,"byte_end":114312,"line_start":400,"line_end":400,"column_start":2,"column_end":78}},{"value":"/ as containing its most significant bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114314,"byte_end":114358,"line_start":401,"line_end":401,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114360,"byte_end":114363,"line_start":402,"line_end":402,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114365,"byte_end":114377,"line_start":403,"line_end":403,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114379,"byte_end":114382,"line_start":404,"line_end":404,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114384,"byte_end":114458,"line_start":405,"line_end":405,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114460,"byte_end":114483,"line_start":406,"line_end":406,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114485,"byte_end":114488,"line_start":407,"line_end":407,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114490,"byte_end":114504,"line_start":408,"line_end":408,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114506,"byte_end":114509,"line_start":409,"line_end":409,"column_start":2,"column_end":5}},{"value":"/ This example shows how a value is segmented across multiple storage","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114511,"byte_end":114582,"line_start":410,"line_end":410,"column_start":2,"column_end":73}},{"value":"/ elements:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114584,"byte_end":114597,"line_start":411,"line_end":411,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114599,"byte_end":114602,"line_start":412,"line_end":412,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114604,"byte_end":114615,"line_start":413,"line_end":413,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114617,"byte_end":114644,"line_start":414,"line_end":414,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114646,"byte_end":114649,"line_start":415,"line_end":415,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u8; 3];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114651,"byte_end":114679,"line_start":416,"line_end":416,"column_start":2,"column_end":30}},{"value":"/ data.view_bits_mut::<Msb0>()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114681,"byte_end":114713,"line_start":417,"line_end":417,"column_start":2,"column_end":34}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114715,"byte_end":114730,"line_start":418,"line_end":418,"column_start":2,"column_end":17}},{"value":"/   .store_le(0b0000_1_1011_1000_110u16);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114732,"byte_end":114775,"line_start":419,"line_end":419,"column_start":2,"column_end":45}},{"value":"/ //                 O PQRS TUVW XYZ","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114777,"byte_end":114815,"line_start":420,"line_end":420,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114817,"byte_end":114820,"line_start":421,"line_end":421,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, [","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114822,"byte_end":114844,"line_start":422,"line_end":422,"column_start":2,"column_end":24}},{"value":"/   0b00000_110, 0b1011_1000, 0b1_0000000","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114846,"byte_end":114889,"line_start":423,"line_end":423,"column_start":2,"column_end":45}},{"value":"/ //        XYZ    PQRS TUVW    O","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114891,"byte_end":114926,"line_start":424,"line_end":424,"column_start":2,"column_end":37}},{"value":"/ ]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114928,"byte_end":114935,"line_start":425,"line_end":425,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114937,"byte_end":114940,"line_start":426,"line_end":426,"column_start":2,"column_end":5}},{"value":"/ let val = data.view_bits::<Msb0>()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114942,"byte_end":114980,"line_start":427,"line_end":427,"column_start":2,"column_end":40}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114982,"byte_end":114997,"line_start":428,"line_end":428,"column_start":2,"column_end":17}},{"value":"/   .load_le::<u16>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114999,"byte_end":115023,"line_start":429,"line_end":429,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115025,"byte_end":115040,"line_start":430,"line_end":430,"column_start":2,"column_end":17}},{"value":"/   val,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115042,"byte_end":115052,"line_start":431,"line_end":431,"column_start":2,"column_end":12}},{"value":"/   0b0000_1_1011_1000_110,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115054,"byte_end":115083,"line_start":432,"line_end":432,"column_start":2,"column_end":31}},{"value":"/ //       O PQRS TUVW XYZ","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115085,"byte_end":115113,"line_start":433,"line_end":433,"column_start":2,"column_end":30}},{"value":"/ );","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115115,"byte_end":115121,"line_start":434,"line_end":434,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115123,"byte_end":115130,"line_start":435,"line_end":435,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115132,"byte_end":115135,"line_start":436,"line_end":436,"column_start":2,"column_end":5}},{"value":"/ And this example shows how the same memory region will be read by","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115137,"byte_end":115206,"line_start":437,"line_end":437,"column_start":2,"column_end":71}},{"value":"/ different `BitOrder` implementors:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115208,"byte_end":115246,"line_start":438,"line_end":438,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115248,"byte_end":115251,"line_start":439,"line_end":439,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115253,"byte_end":115264,"line_start":440,"line_end":440,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115266,"byte_end":115293,"line_start":441,"line_end":441,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115295,"byte_end":115298,"line_start":442,"line_end":442,"column_start":2,"column_end":5}},{"value":"/ // Bit pos:   14                                     19  16","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115300,"byte_end":115363,"line_start":443,"line_end":443,"column_start":2,"column_end":65}},{"value":"/ // Lsb0:     ─┤                                       ├──┤","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115365,"byte_end":115439,"line_start":444,"line_end":444,"column_start":2,"column_end":64}},{"value":"/ let arr = [0b0100_0000_0000_0011u16, 0b0001_0000_0000_1110u16];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115441,"byte_end":115508,"line_start":445,"line_end":445,"column_start":2,"column_end":69}},{"value":"/ // Msb0:                      ├─       ├──┤","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115510,"byte_end":115569,"line_start":446,"line_end":446,"column_start":2,"column_end":49}},{"value":"/ // Bit pos:                  14       16  19","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115571,"byte_end":115619,"line_start":447,"line_end":447,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115621,"byte_end":115624,"line_start":448,"line_end":448,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115626,"byte_end":115641,"line_start":449,"line_end":449,"column_start":2,"column_end":17}},{"value":"/   arr.view_bits::<Lsb0>()[14 .. 20].load_le::<u8>(),","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115643,"byte_end":115699,"line_start":450,"line_end":450,"column_start":2,"column_end":58}},{"value":"/   0b111001,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115701,"byte_end":115716,"line_start":451,"line_end":451,"column_start":2,"column_end":17}},{"value":"/ );","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115718,"byte_end":115724,"line_start":452,"line_end":452,"column_start":2,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115726,"byte_end":115741,"line_start":453,"line_end":453,"column_start":2,"column_end":17}},{"value":"/   arr.view_bits::<Msb0>()[14 .. 20].load_le::<u8>(),","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115743,"byte_end":115799,"line_start":454,"line_end":454,"column_start":2,"column_end":58}},{"value":"/   0b000111,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115801,"byte_end":115816,"line_start":455,"line_end":455,"column_start":2,"column_end":17}},{"value":"/ );","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115818,"byte_end":115824,"line_start":456,"line_end":456,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115826,"byte_end":115833,"line_start":457,"line_end":457,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115835,"byte_end":115838,"line_start":458,"line_end":458,"column_start":2,"column_end":5}},{"value":"/ [`M::BITS`]: crate::mem::BitMemory::BITS","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115840,"byte_end":115884,"line_start":459,"line_end":459,"column_start":2,"column_end":46}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115886,"byte_end":115933,"line_start":460,"line_end":460,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118594,"byte_end":118601,"line_start":545,"line_end":545,"column_start":5,"column_end":12},"name":"load_be","qualname":"::field::BitField::load_be","value":"pub fn load_be<M>(&Self) -> M where M: BitMemory","parent":{"krate":0,"index":699},"children":[],"decl_id":null,"docs":" Loads from `self`, using big-endian element `T` ordering.","sig":null,"attributes":[{"value":"/ Loads from `self`, using big-endian element `T` ordering.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115984,"byte_end":116045,"line_start":464,"line_end":464,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116047,"byte_end":116050,"line_start":465,"line_end":465,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its most","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116052,"byte_end":116121,"line_start":466,"line_end":466,"column_start":2,"column_end":71}},{"value":"/ significant chunk in the low memory address, and its least significant","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116123,"byte_end":116197,"line_start":467,"line_end":467,"column_start":2,"column_end":76}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116199,"byte_end":116274,"line_start":468,"line_end":468,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116276,"byte_end":116338,"line_start":469,"line_end":469,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116340,"byte_end":116343,"line_start":470,"line_end":470,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116345,"byte_end":116361,"line_start":471,"line_end":471,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116363,"byte_end":116366,"line_start":472,"line_end":472,"column_start":2,"column_end":5}},{"value":"/ - `&self`: A read reference to some bits in memory. This slice must be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116368,"byte_end":116442,"line_start":473,"line_end":473,"column_start":2,"column_end":76}},{"value":"/   trimmed to have a width no more than the [`M::BITS`] width of the type","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116444,"byte_end":116520,"line_start":474,"line_end":474,"column_start":2,"column_end":78}},{"value":"/   being loaded. This can be accomplished with range indexing on a larger","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116522,"byte_end":116598,"line_start":475,"line_end":475,"column_start":2,"column_end":78}},{"value":"/   slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116600,"byte_end":116612,"line_start":476,"line_end":476,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116614,"byte_end":116617,"line_start":477,"line_end":477,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116619,"byte_end":116632,"line_start":478,"line_end":478,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116634,"byte_end":116637,"line_start":479,"line_end":479,"column_start":2,"column_end":5}},{"value":"/ A value `M` whose least [`self.len()`] significant bits are filled with","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116639,"byte_end":116714,"line_start":480,"line_end":480,"column_start":2,"column_end":77}},{"value":"/ the bits of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116716,"byte_end":116787,"line_start":481,"line_end":481,"column_start":2,"column_end":73}},{"value":"/ lowest-address `T` is interpreted as containing the most significant","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116789,"byte_end":116861,"line_start":482,"line_end":482,"column_start":2,"column_end":74}},{"value":"/ bits of the return value `M`, and the highest-address `T` is interpreted","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116863,"byte_end":116939,"line_start":483,"line_end":483,"column_start":2,"column_end":78}},{"value":"/ as containing its least significant bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116941,"byte_end":116986,"line_start":484,"line_end":484,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116988,"byte_end":116991,"line_start":485,"line_end":485,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116993,"byte_end":117005,"line_start":486,"line_end":486,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117007,"byte_end":117010,"line_start":487,"line_end":487,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117012,"byte_end":117086,"line_start":488,"line_end":488,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117088,"byte_end":117111,"line_start":489,"line_end":489,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117113,"byte_end":117116,"line_start":490,"line_end":490,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117118,"byte_end":117132,"line_start":491,"line_end":491,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117134,"byte_end":117137,"line_start":492,"line_end":492,"column_start":2,"column_end":5}},{"value":"/ This example shows how a value is segmented across multiple storage","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117139,"byte_end":117210,"line_start":493,"line_end":493,"column_start":2,"column_end":73}},{"value":"/ elements:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117212,"byte_end":117225,"line_start":494,"line_end":494,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117227,"byte_end":117230,"line_start":495,"line_end":495,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117232,"byte_end":117243,"line_start":496,"line_end":496,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117245,"byte_end":117272,"line_start":497,"line_end":497,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117274,"byte_end":117277,"line_start":498,"line_end":498,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u8; 3];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117279,"byte_end":117307,"line_start":499,"line_end":499,"column_start":2,"column_end":30}},{"value":"/ data.view_bits_mut::<Msb0>()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117309,"byte_end":117341,"line_start":500,"line_end":500,"column_start":2,"column_end":34}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117343,"byte_end":117358,"line_start":501,"line_end":501,"column_start":2,"column_end":17}},{"value":"/   .store_be(0b0000_110_1000_1011_1u16);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117360,"byte_end":117403,"line_start":502,"line_end":502,"column_start":2,"column_end":45}},{"value":"/ //                 OPQ RSTU VWXY Z","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117405,"byte_end":117443,"line_start":503,"line_end":503,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117445,"byte_end":117448,"line_start":504,"line_end":504,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, [","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117450,"byte_end":117472,"line_start":505,"line_end":505,"column_start":2,"column_end":24}},{"value":"/   0b00000_110, 0b1000_1011, 0b1_0000000","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117474,"byte_end":117517,"line_start":506,"line_end":506,"column_start":2,"column_end":45}},{"value":"/ //        OPQ    RSTU VWXY    Z","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117519,"byte_end":117554,"line_start":507,"line_end":507,"column_start":2,"column_end":37}},{"value":"/ ]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117556,"byte_end":117563,"line_start":508,"line_end":508,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117565,"byte_end":117568,"line_start":509,"line_end":509,"column_start":2,"column_end":5}},{"value":"/ let val = data.view_bits::<Msb0>()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117570,"byte_end":117608,"line_start":510,"line_end":510,"column_start":2,"column_end":40}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117610,"byte_end":117625,"line_start":511,"line_end":511,"column_start":2,"column_end":17}},{"value":"/   .load_be::<u16>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117627,"byte_end":117651,"line_start":512,"line_end":512,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117653,"byte_end":117668,"line_start":513,"line_end":513,"column_start":2,"column_end":17}},{"value":"/   val,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117670,"byte_end":117680,"line_start":514,"line_end":514,"column_start":2,"column_end":12}},{"value":"/   0b0000_110_1000_1011_1,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117682,"byte_end":117711,"line_start":515,"line_end":515,"column_start":2,"column_end":31}},{"value":"/ //       OPQ RSTU VWXY Z","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117713,"byte_end":117741,"line_start":516,"line_end":516,"column_start":2,"column_end":30}},{"value":"/ # \"{:012b}\",","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117743,"byte_end":117759,"line_start":517,"line_end":517,"column_start":2,"column_end":18}},{"value":"/ # val,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117761,"byte_end":117771,"line_start":518,"line_end":518,"column_start":2,"column_end":12}},{"value":"/ );","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117773,"byte_end":117779,"line_start":519,"line_end":519,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117781,"byte_end":117788,"line_start":520,"line_end":520,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117790,"byte_end":117793,"line_start":521,"line_end":521,"column_start":2,"column_end":5}},{"value":"/ And this example shows how the same memory region will be read by","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117795,"byte_end":117864,"line_start":522,"line_end":522,"column_start":2,"column_end":71}},{"value":"/ different `BitOrder` implementations:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117866,"byte_end":117907,"line_start":523,"line_end":523,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117909,"byte_end":117912,"line_start":524,"line_end":524,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117914,"byte_end":117925,"line_start":525,"line_end":525,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117927,"byte_end":117954,"line_start":526,"line_end":526,"column_start":2,"column_end":29}},{"value":"/ // Bit pos:   14                                     19  16","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117956,"byte_end":118019,"line_start":527,"line_end":527,"column_start":2,"column_end":65}},{"value":"/ // Lsb0:     ─┤                                       ├──┤","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118021,"byte_end":118095,"line_start":528,"line_end":528,"column_start":2,"column_end":64}},{"value":"/ let arr = [0b0100_0000_0000_0011u16, 0b0001_0000_0000_1110u16];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118097,"byte_end":118164,"line_start":529,"line_end":529,"column_start":2,"column_end":69}},{"value":"/ // Msb0:                      ├─       ├──┤","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118166,"byte_end":118225,"line_start":530,"line_end":530,"column_start":2,"column_end":49}},{"value":"/ // Bit pos:                  14       15  19","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118227,"byte_end":118275,"line_start":531,"line_end":531,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118277,"byte_end":118280,"line_start":532,"line_end":532,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118282,"byte_end":118297,"line_start":533,"line_end":533,"column_start":2,"column_end":17}},{"value":"/   arr.view_bits::<Lsb0>()[14 .. 20].load_be::<u8>(),","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118299,"byte_end":118355,"line_start":534,"line_end":534,"column_start":2,"column_end":58}},{"value":"/   0b011110,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118357,"byte_end":118372,"line_start":535,"line_end":535,"column_start":2,"column_end":17}},{"value":"/ );","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118374,"byte_end":118380,"line_start":536,"line_end":536,"column_start":2,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118382,"byte_end":118397,"line_start":537,"line_end":537,"column_start":2,"column_end":17}},{"value":"/   arr.view_bits::<Msb0>()[14 .. 20].load_be::<u8>(),","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118399,"byte_end":118455,"line_start":538,"line_end":538,"column_start":2,"column_end":58}},{"value":"/   0b110001,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118457,"byte_end":118472,"line_start":539,"line_end":539,"column_start":2,"column_end":17}},{"value":"/ );","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118474,"byte_end":118480,"line_start":540,"line_end":540,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118482,"byte_end":118489,"line_start":541,"line_end":541,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118491,"byte_end":118494,"line_start":542,"line_end":542,"column_start":2,"column_end":5}},{"value":"/ [`M::BITS`]: crate::mem::BitMemory::BITS","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118496,"byte_end":118540,"line_start":543,"line_end":543,"column_start":2,"column_end":46}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118542,"byte_end":118589,"line_start":544,"line_end":544,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121519,"byte_end":121527,"line_start":629,"line_end":629,"column_start":5,"column_end":13},"name":"store_le","qualname":"::field::BitField::store_le","value":"pub fn store_le<M>(&mut Self, M) where M: BitMemory","parent":{"krate":0,"index":699},"children":[],"decl_id":null,"docs":" Stores into `self`, using little-endian element ordering.","sig":null,"attributes":[{"value":"/ Stores into `self`, using little-endian element ordering.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118640,"byte_end":118701,"line_start":548,"line_end":548,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118703,"byte_end":118706,"line_start":549,"line_end":549,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its least","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118708,"byte_end":118778,"line_start":550,"line_end":550,"column_start":2,"column_end":72}},{"value":"/ significant chunk in the low memory address, and its most significant","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118780,"byte_end":118853,"line_start":551,"line_end":551,"column_start":2,"column_end":75}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118855,"byte_end":118930,"line_start":552,"line_end":552,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118932,"byte_end":118994,"line_start":553,"line_end":553,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118996,"byte_end":118999,"line_start":554,"line_end":554,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119001,"byte_end":119017,"line_start":555,"line_end":555,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119019,"byte_end":119022,"line_start":556,"line_end":556,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: A write reference to some bits in memory. This slice must","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119024,"byte_end":119100,"line_start":557,"line_end":557,"column_start":2,"column_end":78}},{"value":"/   be trimmed to have a width no more than the [`M::BITS`] width of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119102,"byte_end":119176,"line_start":558,"line_end":558,"column_start":2,"column_end":76}},{"value":"/   type being stored. This can be accomplished with range indexing on a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119178,"byte_end":119252,"line_start":559,"line_end":559,"column_start":2,"column_end":76}},{"value":"/   larger slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119254,"byte_end":119273,"line_start":560,"line_end":560,"column_start":2,"column_end":21}},{"value":"/ - `value`: A value, whose [`self.len()`] least significant bits will be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119275,"byte_end":119350,"line_start":561,"line_end":561,"column_start":2,"column_end":77}},{"value":"/   stored into `self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119352,"byte_end":119377,"line_start":562,"line_end":562,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119379,"byte_end":119382,"line_start":563,"line_end":563,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119384,"byte_end":119398,"line_start":564,"line_end":564,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119400,"byte_end":119403,"line_start":565,"line_end":565,"column_start":2,"column_end":5}},{"value":"/ The [`self.len()`] least significant bits of `value` are written into","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119405,"byte_end":119478,"line_start":566,"line_end":566,"column_start":2,"column_end":75}},{"value":"/ the domain of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119480,"byte_end":119553,"line_start":567,"line_end":567,"column_start":2,"column_end":75}},{"value":"/ lowest-address `T` is interpreted as containing the least significant","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119555,"byte_end":119628,"line_start":568,"line_end":568,"column_start":2,"column_end":75}},{"value":"/ bits of the `M` return value, and the highest-address `T` is interpreted","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119630,"byte_end":119706,"line_start":569,"line_end":569,"column_start":2,"column_end":78}},{"value":"/ as containing its most significant bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119708,"byte_end":119752,"line_start":570,"line_end":570,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119754,"byte_end":119757,"line_start":571,"line_end":571,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119759,"byte_end":119771,"line_start":572,"line_end":572,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119773,"byte_end":119776,"line_start":573,"line_end":573,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119778,"byte_end":119852,"line_start":574,"line_end":574,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119854,"byte_end":119877,"line_start":575,"line_end":575,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119879,"byte_end":119882,"line_start":576,"line_end":576,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119884,"byte_end":119898,"line_start":577,"line_end":577,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119900,"byte_end":119903,"line_start":578,"line_end":578,"column_start":2,"column_end":5}},{"value":"/ This example shows how a value is segmented across multiple storage","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119905,"byte_end":119976,"line_start":579,"line_end":579,"column_start":2,"column_end":73}},{"value":"/ elements:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119978,"byte_end":119991,"line_start":580,"line_end":580,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119993,"byte_end":119996,"line_start":581,"line_end":581,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119998,"byte_end":120009,"line_start":582,"line_end":582,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120011,"byte_end":120038,"line_start":583,"line_end":583,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120040,"byte_end":120043,"line_start":584,"line_end":584,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u8; 3];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120045,"byte_end":120073,"line_start":585,"line_end":585,"column_start":2,"column_end":30}},{"value":"/ data.view_bits_mut::<Lsb0>()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120075,"byte_end":120107,"line_start":586,"line_end":586,"column_start":2,"column_end":34}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120109,"byte_end":120124,"line_start":587,"line_end":587,"column_start":2,"column_end":17}},{"value":"/   .store_le(0b0000_1_1011_1000_110u16);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120126,"byte_end":120169,"line_start":588,"line_end":588,"column_start":2,"column_end":45}},{"value":"/ //                 O PQRS TUVW XYZ","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120171,"byte_end":120209,"line_start":589,"line_end":589,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120211,"byte_end":120214,"line_start":590,"line_end":590,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, [","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120216,"byte_end":120238,"line_start":591,"line_end":591,"column_start":2,"column_end":24}},{"value":"/   0b110_00000, 0b1011_1000, 0b0000000_1","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120240,"byte_end":120283,"line_start":592,"line_end":592,"column_start":2,"column_end":45}},{"value":"/ //  XYZ          PQRS TUVW            O","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120285,"byte_end":120328,"line_start":593,"line_end":593,"column_start":2,"column_end":45}},{"value":"/ ]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120330,"byte_end":120337,"line_start":594,"line_end":594,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120339,"byte_end":120342,"line_start":595,"line_end":595,"column_start":2,"column_end":5}},{"value":"/ let val = data.view_bits::<Lsb0>()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120344,"byte_end":120382,"line_start":596,"line_end":596,"column_start":2,"column_end":40}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120384,"byte_end":120399,"line_start":597,"line_end":597,"column_start":2,"column_end":17}},{"value":"/   .load_le::<u16>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120401,"byte_end":120425,"line_start":598,"line_end":598,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120427,"byte_end":120442,"line_start":599,"line_end":599,"column_start":2,"column_end":17}},{"value":"/   val,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120444,"byte_end":120454,"line_start":600,"line_end":600,"column_start":2,"column_end":12}},{"value":"/   0b0000_1_1011_1000_110u16,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120456,"byte_end":120488,"line_start":601,"line_end":601,"column_start":2,"column_end":34}},{"value":"/ //       O PQRS TUVW XYZ","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120490,"byte_end":120518,"line_start":602,"line_end":602,"column_start":2,"column_end":30}},{"value":"/ );","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120520,"byte_end":120526,"line_start":603,"line_end":603,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120528,"byte_end":120535,"line_start":604,"line_end":604,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120537,"byte_end":120540,"line_start":605,"line_end":605,"column_start":2,"column_end":5}},{"value":"/ And this example shows how the same memory region is written by","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120542,"byte_end":120609,"line_start":606,"line_end":606,"column_start":2,"column_end":69}},{"value":"/ different `BitOrder` implementations:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120611,"byte_end":120652,"line_start":607,"line_end":607,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120654,"byte_end":120657,"line_start":608,"line_end":608,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120659,"byte_end":120670,"line_start":609,"line_end":609,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120672,"byte_end":120699,"line_start":610,"line_end":610,"column_start":2,"column_end":29}},{"value":"/ let mut lsb0 = bitarr![Lsb0, u16; 0; 32];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120701,"byte_end":120746,"line_start":611,"line_end":611,"column_start":2,"column_end":47}},{"value":"/ let mut msb0 = bitarr![Msb0, u16; 0; 32];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120748,"byte_end":120793,"line_start":612,"line_end":612,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120795,"byte_end":120798,"line_start":613,"line_end":613,"column_start":2,"column_end":5}},{"value":"/ // Bit pos:        14                                     19  16","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120800,"byte_end":120868,"line_start":614,"line_end":614,"column_start":2,"column_end":70}},{"value":"/ // Lsb0:          ─┤                                       ├──┤","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120870,"byte_end":120949,"line_start":615,"line_end":615,"column_start":2,"column_end":69}},{"value":"/ let exp_lsb0 = [0b0100_0000_0000_0000u16, 0b0000_0000_0000_1110u16];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120951,"byte_end":121023,"line_start":616,"line_end":616,"column_start":2,"column_end":74}},{"value":"/ let exp_msb0 = [0b0000_0000_0000_0011u16, 0b0001_0000_0000_0000u16];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121025,"byte_end":121097,"line_start":617,"line_end":617,"column_start":2,"column_end":74}},{"value":"/ // Msb0:                           ├─       ├──┤","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121099,"byte_end":121163,"line_start":618,"line_end":618,"column_start":2,"column_end":54}},{"value":"/ // Bit pos:                       14       15  19","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121165,"byte_end":121218,"line_start":619,"line_end":619,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121220,"byte_end":121223,"line_start":620,"line_end":620,"column_start":2,"column_end":5}},{"value":"/ lsb0[14 ..= 19].store_le(0b111001u8);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121225,"byte_end":121266,"line_start":621,"line_end":621,"column_start":2,"column_end":43}},{"value":"/ msb0[14 ..= 19].store_le(0b000111u8);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121268,"byte_end":121309,"line_start":622,"line_end":622,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(lsb0.as_raw_slice(), exp_lsb0);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121311,"byte_end":121357,"line_start":623,"line_end":623,"column_start":2,"column_end":48}},{"value":"/ assert_eq!(msb0.as_raw_slice(), exp_msb0);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121359,"byte_end":121405,"line_start":624,"line_end":624,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121407,"byte_end":121414,"line_start":625,"line_end":625,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121416,"byte_end":121419,"line_start":626,"line_end":626,"column_start":2,"column_end":5}},{"value":"/ [`M::BITS`]: crate::mem::BitMemory::BITS","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121421,"byte_end":121465,"line_start":627,"line_end":627,"column_start":2,"column_end":46}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121467,"byte_end":121514,"line_start":628,"line_end":628,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124451,"byte_end":124459,"line_start":713,"line_end":713,"column_start":5,"column_end":13},"name":"store_be","qualname":"::field::BitField::store_be","value":"pub fn store_be<M>(&mut Self, M) where M: BitMemory","parent":{"krate":0,"index":699},"children":[],"decl_id":null,"docs":" Stores into `self`, using big-endian element ordering.","sig":null,"attributes":[{"value":"/ Stores into `self`, using big-endian element ordering.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121575,"byte_end":121633,"line_start":632,"line_end":632,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121635,"byte_end":121638,"line_start":633,"line_end":633,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its most","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121640,"byte_end":121709,"line_start":634,"line_end":634,"column_start":2,"column_end":71}},{"value":"/ significant chunk in the low memory address, and its least significant","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121711,"byte_end":121785,"line_start":635,"line_end":635,"column_start":2,"column_end":76}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121787,"byte_end":121862,"line_start":636,"line_end":636,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121864,"byte_end":121926,"line_start":637,"line_end":637,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121928,"byte_end":121931,"line_start":638,"line_end":638,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121933,"byte_end":121949,"line_start":639,"line_end":639,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121951,"byte_end":121954,"line_start":640,"line_end":640,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: A write reference to some bits in memory. This slice must","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121956,"byte_end":122032,"line_start":641,"line_end":641,"column_start":2,"column_end":78}},{"value":"/   be trimmed to have a width no more than the [`M::BITS`] width of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122034,"byte_end":122108,"line_start":642,"line_end":642,"column_start":2,"column_end":76}},{"value":"/   type being stored. This can be accomplished with range indexing on a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122110,"byte_end":122184,"line_start":643,"line_end":643,"column_start":2,"column_end":76}},{"value":"/   larger slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122186,"byte_end":122205,"line_start":644,"line_end":644,"column_start":2,"column_end":21}},{"value":"/ - `value`: A value, whose [`self.len()`] least significant bits will be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122207,"byte_end":122282,"line_start":645,"line_end":645,"column_start":2,"column_end":77}},{"value":"/   stored into `self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122284,"byte_end":122309,"line_start":646,"line_end":646,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122311,"byte_end":122314,"line_start":647,"line_end":647,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122316,"byte_end":122330,"line_start":648,"line_end":648,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122332,"byte_end":122335,"line_start":649,"line_end":649,"column_start":2,"column_end":5}},{"value":"/ The [`self.len()`] least significant bits of `value` are written into","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122337,"byte_end":122410,"line_start":650,"line_end":650,"column_start":2,"column_end":75}},{"value":"/ the domain of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122412,"byte_end":122485,"line_start":651,"line_end":651,"column_start":2,"column_end":75}},{"value":"/ lowest-address `T` is interpreted as containing the most significant","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122487,"byte_end":122559,"line_start":652,"line_end":652,"column_start":2,"column_end":74}},{"value":"/ bits of the `M` return value, and the highest-address `T` is interpreted","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122561,"byte_end":122637,"line_start":653,"line_end":653,"column_start":2,"column_end":78}},{"value":"/ as containing its least significant bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122639,"byte_end":122684,"line_start":654,"line_end":654,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122686,"byte_end":122689,"line_start":655,"line_end":655,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122691,"byte_end":122703,"line_start":656,"line_end":656,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122705,"byte_end":122708,"line_start":657,"line_end":657,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122710,"byte_end":122784,"line_start":658,"line_end":658,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122786,"byte_end":122809,"line_start":659,"line_end":659,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122811,"byte_end":122814,"line_start":660,"line_end":660,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122816,"byte_end":122830,"line_start":661,"line_end":661,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122832,"byte_end":122835,"line_start":662,"line_end":662,"column_start":2,"column_end":5}},{"value":"/ This example shows how a value is segmented across multiple storage","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122837,"byte_end":122908,"line_start":663,"line_end":663,"column_start":2,"column_end":73}},{"value":"/ elements:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122910,"byte_end":122923,"line_start":664,"line_end":664,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122925,"byte_end":122928,"line_start":665,"line_end":665,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122930,"byte_end":122941,"line_start":666,"line_end":666,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122943,"byte_end":122970,"line_start":667,"line_end":667,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122972,"byte_end":122975,"line_start":668,"line_end":668,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u8; 3];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122977,"byte_end":123005,"line_start":669,"line_end":669,"column_start":2,"column_end":30}},{"value":"/ data.view_bits_mut::<Lsb0>()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123007,"byte_end":123039,"line_start":670,"line_end":670,"column_start":2,"column_end":34}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123041,"byte_end":123056,"line_start":671,"line_end":671,"column_start":2,"column_end":17}},{"value":"/   .store_be(0b0000_110_1000_1011_1u16);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123058,"byte_end":123101,"line_start":672,"line_end":672,"column_start":2,"column_end":45}},{"value":"/ //                 OPQ RSTU VWXY Z","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123103,"byte_end":123141,"line_start":673,"line_end":673,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123143,"byte_end":123146,"line_start":674,"line_end":674,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, [","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123148,"byte_end":123170,"line_start":675,"line_end":675,"column_start":2,"column_end":24}},{"value":"/   0b110_00000, 0b1000_1011, 0b0000000_1","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123172,"byte_end":123215,"line_start":676,"line_end":676,"column_start":2,"column_end":45}},{"value":"/ //  OPQ          RSTU VWXY            Z","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123217,"byte_end":123260,"line_start":677,"line_end":677,"column_start":2,"column_end":45}},{"value":"/ ]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123262,"byte_end":123269,"line_start":678,"line_end":678,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123271,"byte_end":123274,"line_start":679,"line_end":679,"column_start":2,"column_end":5}},{"value":"/ let val = data.view_bits::<Lsb0>()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123276,"byte_end":123314,"line_start":680,"line_end":680,"column_start":2,"column_end":40}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123316,"byte_end":123331,"line_start":681,"line_end":681,"column_start":2,"column_end":17}},{"value":"/   .load_be::<u16>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123333,"byte_end":123357,"line_start":682,"line_end":682,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123359,"byte_end":123374,"line_start":683,"line_end":683,"column_start":2,"column_end":17}},{"value":"/   val,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123376,"byte_end":123386,"line_start":684,"line_end":684,"column_start":2,"column_end":12}},{"value":"/   0b0000_110_1000_1011_1u16,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123388,"byte_end":123420,"line_start":685,"line_end":685,"column_start":2,"column_end":34}},{"value":"/ //       OPQ RSTU VWXY Z","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123422,"byte_end":123450,"line_start":686,"line_end":686,"column_start":2,"column_end":30}},{"value":"/ );","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123452,"byte_end":123458,"line_start":687,"line_end":687,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123460,"byte_end":123467,"line_start":688,"line_end":688,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123469,"byte_end":123472,"line_start":689,"line_end":689,"column_start":2,"column_end":5}},{"value":"/ And this example shows how the same memory region is written by","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123474,"byte_end":123541,"line_start":690,"line_end":690,"column_start":2,"column_end":69}},{"value":"/ different `BitOrder` implementations:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123543,"byte_end":123584,"line_start":691,"line_end":691,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123586,"byte_end":123589,"line_start":692,"line_end":692,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123591,"byte_end":123602,"line_start":693,"line_end":693,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123604,"byte_end":123631,"line_start":694,"line_end":694,"column_start":2,"column_end":29}},{"value":"/ let mut lsb0 = bitarr![Lsb0, u16; 0; 32];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123633,"byte_end":123678,"line_start":695,"line_end":695,"column_start":2,"column_end":47}},{"value":"/ let mut msb0 = bitarr![Msb0, u16; 0; 32];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123680,"byte_end":123725,"line_start":696,"line_end":696,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123727,"byte_end":123730,"line_start":697,"line_end":697,"column_start":2,"column_end":5}},{"value":"/ // Bit pos:        14                                     19  16","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123732,"byte_end":123800,"line_start":698,"line_end":698,"column_start":2,"column_end":70}},{"value":"/ // Lsb0:          ─┤                                       ├──┤","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123802,"byte_end":123881,"line_start":699,"line_end":699,"column_start":2,"column_end":69}},{"value":"/ let exp_lsb0 = [0b0100_0000_0000_0000u16, 0b0000_0000_0000_1110u16];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123883,"byte_end":123955,"line_start":700,"line_end":700,"column_start":2,"column_end":74}},{"value":"/ let exp_msb0 = [0b0000_0000_0000_0011u16, 0b0001_0000_0000_0000u16];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123957,"byte_end":124029,"line_start":701,"line_end":701,"column_start":2,"column_end":74}},{"value":"/ // Msb0:                           ├─       ├──┤","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124031,"byte_end":124095,"line_start":702,"line_end":702,"column_start":2,"column_end":54}},{"value":"/ // Bit pos:                       14       15  19","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124097,"byte_end":124150,"line_start":703,"line_end":703,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124152,"byte_end":124155,"line_start":704,"line_end":704,"column_start":2,"column_end":5}},{"value":"/ lsb0[14 ..= 19].store_be(0b011110u8);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124157,"byte_end":124198,"line_start":705,"line_end":705,"column_start":2,"column_end":43}},{"value":"/ msb0[14 ..= 19].store_be(0b110001u8);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124200,"byte_end":124241,"line_start":706,"line_end":706,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(lsb0.as_raw_slice(), exp_lsb0);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124243,"byte_end":124289,"line_start":707,"line_end":707,"column_start":2,"column_end":48}},{"value":"/ assert_eq!(msb0.as_raw_slice(), exp_msb0);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124291,"byte_end":124337,"line_start":708,"line_end":708,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124339,"byte_end":124346,"line_start":709,"line_end":709,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124348,"byte_end":124351,"line_start":710,"line_end":710,"column_start":2,"column_end":5}},{"value":"/ [`M::BITS`]: crate::mem::BitMemory::BITS","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124353,"byte_end":124397,"line_start":711,"line_end":711,"column_start":2,"column_end":46}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124399,"byte_end":124446,"line_start":712,"line_end":712,"column_start":2,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":829},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"index","qualname":"::index","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","parent":null,"children":[{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":834},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":841},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":848},{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":854},{"krate":0,"index":857},{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":864},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":874},{"krate":0,"index":877},{"krate":0,"index":5118},{"krate":0,"index":5122},{"krate":0,"index":5125},{"krate":0,"index":5127},{"krate":0,"index":5130},{"krate":0,"index":5132},{"krate":0,"index":5135},{"krate":0,"index":5139},{"krate":0,"index":5142},{"krate":0,"index":5144},{"krate":0,"index":5148},{"krate":0,"index":880},{"krate":0,"index":904},{"krate":0,"index":908},{"krate":0,"index":911},{"krate":0,"index":914},{"krate":0,"index":5151},{"krate":0,"index":5155},{"krate":0,"index":5158},{"krate":0,"index":5160},{"krate":0,"index":5163},{"krate":0,"index":5165},{"krate":0,"index":5168},{"krate":0,"index":5172},{"krate":0,"index":5175},{"krate":0,"index":5177},{"krate":0,"index":5181},{"krate":0,"index":917},{"krate":0,"index":921},{"krate":0,"index":924},{"krate":0,"index":927},{"krate":0,"index":5184},{"krate":0,"index":5188},{"krate":0,"index":5191},{"krate":0,"index":5193},{"krate":0,"index":5196},{"krate":0,"index":5198},{"krate":0,"index":5201},{"krate":0,"index":5205},{"krate":0,"index":5208},{"krate":0,"index":5210},{"krate":0,"index":5214},{"krate":0,"index":929},{"krate":0,"index":940},{"krate":0,"index":943},{"krate":0,"index":946},{"krate":0,"index":5217},{"krate":0,"index":5221},{"krate":0,"index":5224},{"krate":0,"index":5226},{"krate":0,"index":5229},{"krate":0,"index":5231},{"krate":0,"index":5234},{"krate":0,"index":5238},{"krate":0,"index":5241},{"krate":0,"index":5243},{"krate":0,"index":5247},{"krate":0,"index":949},{"krate":0,"index":959},{"krate":0,"index":962},{"krate":0,"index":965},{"krate":0,"index":5250},{"krate":0,"index":5253},{"krate":0,"index":5256},{"krate":0,"index":5258},{"krate":0,"index":5261},{"krate":0,"index":5263},{"krate":0,"index":5266},{"krate":0,"index":5270},{"krate":0,"index":5273},{"krate":0,"index":5275},{"krate":0,"index":5279},{"krate":0,"index":968},{"krate":0,"index":976},{"krate":0,"index":979},{"krate":0,"index":982},{"krate":0,"index":5282},{"krate":0,"index":5285},{"krate":0,"index":5288},{"krate":0,"index":5290},{"krate":0,"index":5293},{"krate":0,"index":5295},{"krate":0,"index":5298},{"krate":0,"index":5302},{"krate":0,"index":5305},{"krate":0,"index":5307},{"krate":0,"index":5311},{"krate":0,"index":985},{"krate":0,"index":994},{"krate":0,"index":997},{"krate":0,"index":1000},{"krate":0,"index":1003},{"krate":0,"index":1007},{"krate":0,"index":1011},{"krate":0,"index":1015}],"decl_id":null,"docs":" Well-typed counters and register descriptors.","sig":null,"attributes":[{"value":"* Well-typed counters and register descriptors.\n\nThis module provides session types which encode a strict chain of modification\nto map semantic indices within a [`BitSlice`] to the electrical register values\nused to interact with the memory bus.\n\nThe main advantage of the types in this module is that they provide\nregister-dependent range requirements for counter values, making it impossible\nto have an index out of bounds for a register. They also create a sequence of\ntype transformations that assure the library about the continued validity of\neach value in its surrounding context.\n\nBy eliminating public constructors from arbitrary integers, [`bitvec`] can\nguarantee that only it can produce seed values, and only trusted functions can\ntransform their numeric values or types, until the program reaches the property\nthat it requires. This chain of assurance means that memory operations can be\nconfident in the correctness of their actions and effects.\n\n# Type Sequence\n\nThe library produces [`BitIdx`] values from region computation. These types\ncannot be publicly constructed, and are only ever the result of pointer\nanalysis. As such, they rely on correctness of the memory regions provided to\nlibrary entry points, and those entry points can leverage the Rust type system\nto ensure safety there.\n\n[`BitIdx`] is transformed to [`BitPos`] through the [`BitOrder`] trait. The\n[`order`] module provides verification functions that implementors can use to\ndemonstrate correctness. `BitPos` is the seed type that describes memory\noperations, and is used to create selection masks [`BitSel`] and [`BitMask`].\n\n[`BitIdx`]: crate::index::BitIdx\n[`BitMask`]: crate::index::BitMask\n[`BitOrder`]: crate::order::BitOrder\n[`BitPos`]: crate::index::BitPos\n[`BitSel`]: crate::index::BitSel\n[`BitSlice`]: crate::slice::BitSlice\n[`bitvec`]: crate\n[`order`]: crate::order\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156320,"byte_end":158189,"line_start":1,"line_end":40,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":5118},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159958,"byte_end":159964,"line_start":106,"line_end":106,"column_start":12,"column_end":18},"name":"BitIdx","qualname":"::index::BitIdx","value":"BitIdx {  }","parent":null,"children":[{"krate":0,"index":5120},{"krate":0,"index":5121}],"decl_id":null,"docs":" A semantic index counter within a register element `R`.","sig":null,"attributes":[{"value":"* A semantic index counter within a register element `R`.\n\nThis type is a counter in the ring `0 .. R::BITS`, and serves to mark a semantic\nindex within some register element. It is a virtual index, and is the stored\nvalue used in pointer encodings to track region start information.\n\nIt is translated to an electrical index through the [`BitOrder`] trait. This\nvirtual index is the only counter that can be used for address computation, and\nonce lowered to an electrical index through [`BitOrder::at`], the electrical\naddress can only be used for instruction selection.\n\n# Type Parameters\n\n- `R`: The register element that this index governs.\n\n# Validity\n\nValues of this type are **required** to be in the range `0 .. R::BITS`. Any\nvalue not less than [`R::BITS`] makes the program invalid, and will likely cause\neither a crash or incorrect memory access.\n\n# Construction\n\nThis type can never be constructed outside of the [`bitvec`] crate. It is passed\nin to [`BitOrder`] implementations, which may use it to construct electrical\nposition, selection, or mask values from it. All values of this type constructed\nby [`bitvec`] are known to be correct in their region; no other construction\nsite can be trusted.\n\n[`BitOrder`]: crate::order::BitOrder\n[`BitOrder::at`]: crate::order::BitOrder::at\n[`R::BITS`]: crate::mem::BitMemory::BITS\n[`bitvec`]: crate\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":158446,"byte_end":159804,"line_start":69,"line_end":102,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159856,"byte_end":159876,"line_start":104,"line_end":104,"column_start":1,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":882},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160247,"byte_end":160251,"line_start":119,"line_end":119,"column_start":12,"column_end":16},"name":"LAST","qualname":"::index::BitIdx::<R>::LAST","value":"Self","parent":{"krate":0,"index":880},"children":[],"decl_id":null,"docs":" The inclusive maximum index within an element `R`.\n","sig":null,"attributes":[{"value":"/ The inclusive maximum index within an element `R`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160181,"byte_end":160235,"line_start":118,"line_end":118,"column_start":2,"column_end":56}}]},{"kind":"Const","id":{"krate":0,"index":883},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160374,"byte_end":160378,"line_start":124,"line_end":124,"column_start":12,"column_end":16},"name":"ZERO","qualname":"::index::BitIdx::<R>::ZERO","value":"Self","parent":{"krate":0,"index":880},"children":[],"decl_id":null,"docs":" The inclusive minimum index within an element `R`.\n","sig":null,"attributes":[{"value":"/ The inclusive minimum index within an element `R`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160308,"byte_end":160362,"line_start":123,"line_end":123,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160905,"byte_end":160908,"line_start":143,"line_end":143,"column_start":9,"column_end":12},"name":"new","qualname":"<BitIdx<R>>::new","value":"pub fn new(u8) -> Result<Self, BitIdxError<R>>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as a known-good index into an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as a known-good index into an `R` register.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160430,"byte_end":160499,"line_start":129,"line_end":129,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160501,"byte_end":160504,"line_start":130,"line_end":130,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160506,"byte_end":160522,"line_start":131,"line_end":131,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160524,"byte_end":160527,"line_start":132,"line_end":132,"column_start":2,"column_end":5}},{"value":"/ - `value`: The counter value to mark as an index. This must be not less","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160529,"byte_end":160604,"line_start":133,"line_end":133,"column_start":2,"column_end":77}},{"value":"/   than [`Self::ZERO`] and not more than [`Self::LAST`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160606,"byte_end":160665,"line_start":134,"line_end":134,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160667,"byte_end":160670,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160672,"byte_end":160685,"line_start":136,"line_end":136,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160687,"byte_end":160690,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ This returns `value`, marked as either a valid or invalid index by","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160692,"byte_end":160762,"line_start":138,"line_end":138,"column_start":2,"column_end":72}},{"value":"/ whether or not it is within the valid range `0 .. R::BITS`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160764,"byte_end":160827,"line_start":139,"line_end":139,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160829,"byte_end":160832,"line_start":140,"line_end":140,"column_start":2,"column_end":5}},{"value":"/ [`Self::LAST`]: Self::LAST","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160834,"byte_end":160864,"line_start":141,"line_end":141,"column_start":2,"column_end":32}},{"value":"/ [`Self::ZERO`]: Self::ZERO","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160866,"byte_end":160896,"line_start":142,"line_end":142,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":885},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161652,"byte_end":161665,"line_start":169,"line_end":169,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitIdx<R>>::new_unchecked","value":"pub unsafe fn new_unchecked(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as an assumed-good index into an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as an assumed-good index into an `R` register.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161071,"byte_end":161143,"line_start":150,"line_end":150,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161145,"byte_end":161148,"line_start":151,"line_end":151,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161150,"byte_end":161166,"line_start":152,"line_end":152,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161168,"byte_end":161171,"line_start":153,"line_end":153,"column_start":2,"column_end":5}},{"value":"/ - `value`: The counter value to mark as an index. This must be not less","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161173,"byte_end":161248,"line_start":154,"line_end":154,"column_start":2,"column_end":77}},{"value":"/   than [`Self::ZERO`] and not more than [`Self::LAST`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161250,"byte_end":161309,"line_start":155,"line_end":155,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161311,"byte_end":161314,"line_start":156,"line_end":156,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161316,"byte_end":161329,"line_start":157,"line_end":157,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161331,"byte_end":161334,"line_start":158,"line_end":158,"column_start":2,"column_end":5}},{"value":"/ This returns `value`, marked as a valid index.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161336,"byte_end":161386,"line_start":159,"line_end":159,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161388,"byte_end":161391,"line_start":160,"line_end":160,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161393,"byte_end":161405,"line_start":161,"line_end":161,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161407,"byte_end":161410,"line_start":162,"line_end":162,"column_start":2,"column_end":5}},{"value":"/ If the `value` is outside the valid range, then the program is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161412,"byte_end":161478,"line_start":163,"line_end":163,"column_start":2,"column_end":68}},{"value":"/ incorrect. Debug builds will panic; release builds do not inspect the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161480,"byte_end":161553,"line_start":164,"line_end":164,"column_start":2,"column_end":75}},{"value":"/ `value`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161555,"byte_end":161567,"line_start":165,"line_end":165,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161569,"byte_end":161572,"line_start":166,"line_end":166,"column_start":2,"column_end":5}},{"value":"/ [`Self::LAST`]: Self::LAST","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161574,"byte_end":161604,"line_start":167,"line_end":167,"column_start":2,"column_end":32}},{"value":"/ [`Self::ZERO`]: Self::ZERO","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161606,"byte_end":161636,"line_start":168,"line_end":168,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162057,"byte_end":162061,"line_start":187,"line_end":187,"column_start":9,"column_end":13},"name":"cast","qualname":"<BitIdx<R>>::cast","value":"pub fn cast<S>(Self) -> Result<BitIdx<S>, BitIdxError<S>> where S: BitRegister","parent":null,"children":[],"decl_id":null,"docs":" Casts to a new index type.","sig":null,"attributes":[{"value":"/ Casts to a new index type.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161852,"byte_end":161882,"line_start":182,"line_end":182,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161884,"byte_end":161887,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ This will always succeed if `self.value()` is a valid index in the `S`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161889,"byte_end":161963,"line_start":184,"line_end":184,"column_start":2,"column_end":76}},{"value":"/ register; it will return an error if the `self` index is too wide for","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161965,"byte_end":162038,"line_start":185,"line_end":185,"column_start":2,"column_end":75}},{"value":"/ `S`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162040,"byte_end":162048,"line_start":186,"line_end":186,"column_start":2,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162266,"byte_end":162271,"line_start":194,"line_end":194,"column_start":9,"column_end":14},"name":"value","qualname":"<BitIdx<R>>::value","value":"pub fn value(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Removes the index wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the index wrapper, leaving the internal counter.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162165,"byte_end":162225,"line_start":192,"line_end":192,"column_start":2,"column_end":62}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162227,"byte_end":162257,"line_start":193,"line_end":193,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":889},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162587,"byte_end":162591,"line_start":208,"line_end":208,"column_start":9,"column_end":13},"name":"next","qualname":"<BitIdx<R>>::next","value":"pub fn next(Self) -> (Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Increments an index counter, wrapping at the back edge of the register.","sig":null,"attributes":[{"value":"/ Increments an index counter, wrapping at the back edge of the register.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162302,"byte_end":162377,"line_start":198,"line_end":198,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162379,"byte_end":162382,"line_start":199,"line_end":199,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162384,"byte_end":162400,"line_start":200,"line_end":200,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162402,"byte_end":162405,"line_start":201,"line_end":201,"column_start":2,"column_end":5}},{"value":"/ - `self`: The index to increment.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162407,"byte_end":162444,"line_start":202,"line_end":202,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162446,"byte_end":162449,"line_start":203,"line_end":203,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162451,"byte_end":162464,"line_start":204,"line_end":204,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162466,"byte_end":162469,"line_start":205,"line_end":205,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The next index after `self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162471,"byte_end":162511,"line_start":206,"line_end":206,"column_start":2,"column_end":42}},{"value":"/ - `.1`: Indicates that the new index is in the next register.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162513,"byte_end":162578,"line_start":207,"line_end":207,"column_start":2,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163022,"byte_end":163026,"line_start":226,"line_end":226,"column_start":9,"column_end":13},"name":"prev","qualname":"<BitIdx<R>>::prev","value":"pub fn prev(Self) -> (Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Decrements an index counter, wrapping at the front edge of the register.","sig":null,"attributes":[{"value":"/ Decrements an index counter, wrapping at the front edge of the register.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162727,"byte_end":162803,"line_start":216,"line_end":216,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162805,"byte_end":162808,"line_start":217,"line_end":217,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162810,"byte_end":162826,"line_start":218,"line_end":218,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162828,"byte_end":162831,"line_start":219,"line_end":219,"column_start":2,"column_end":5}},{"value":"/ - `self`: The index to decrement.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162833,"byte_end":162870,"line_start":220,"line_end":220,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162872,"byte_end":162875,"line_start":221,"line_end":221,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162877,"byte_end":162890,"line_start":222,"line_end":222,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162892,"byte_end":162895,"line_start":223,"line_end":223,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The previous index before `self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162897,"byte_end":162942,"line_start":224,"line_end":224,"column_start":2,"column_end":47}},{"value":"/ - `.1`: Indicates that the new index is in the previous register.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":162944,"byte_end":163013,"line_start":225,"line_end":225,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163456,"byte_end":163464,"line_start":241,"line_end":241,"column_start":9,"column_end":17},"name":"position","qualname":"<BitIdx<R>>::position","value":"pub fn position<O>(Self) -> BitPos<R> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit position corresponding to `self` under some ordering.","sig":null,"attributes":[{"value":"/ Computes the bit position corresponding to `self` under some ordering.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163172,"byte_end":163246,"line_start":234,"line_end":234,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163248,"byte_end":163251,"line_start":235,"line_end":235,"column_start":2,"column_end":5}},{"value":"/ This forwards to [`O::at::<R>`], which is the only public, safe,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163253,"byte_end":163321,"line_start":236,"line_end":236,"column_start":2,"column_end":70}},{"value":"/ constructor for a position counter.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163323,"byte_end":163362,"line_start":237,"line_end":237,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163364,"byte_end":163367,"line_start":238,"line_end":238,"column_start":2,"column_end":5}},{"value":"/ [`O::at::<R>`]: crate::order::BitOrder::at","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163369,"byte_end":163415,"line_start":239,"line_end":239,"column_start":2,"column_end":48}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163417,"byte_end":163447,"line_start":240,"line_end":240,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163822,"byte_end":163828,"line_start":253,"line_end":253,"column_start":9,"column_end":15},"name":"select","qualname":"<BitIdx<R>>::select","value":"pub fn select<O>(Self) -> BitSel<R> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector corresponding to `self` under an ordering.","sig":null,"attributes":[{"value":"/ Computes the bit selector corresponding to `self` under an ordering.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163532,"byte_end":163604,"line_start":246,"line_end":246,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163606,"byte_end":163609,"line_start":247,"line_end":247,"column_start":2,"column_end":5}},{"value":"/ This forwards to [`O::select::<R>`], which is the only public, safe,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163611,"byte_end":163683,"line_start":248,"line_end":248,"column_start":2,"column_end":74}},{"value":"/ constructor for a bit selector.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163685,"byte_end":163720,"line_start":249,"line_end":249,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163722,"byte_end":163725,"line_start":250,"line_end":250,"column_start":2,"column_end":5}},{"value":"/ [`O::select::<R>`]: crate::order::BitOrder::select","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163727,"byte_end":163781,"line_start":251,"line_end":251,"column_start":2,"column_end":56}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163783,"byte_end":163813,"line_start":252,"line_end":252,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164096,"byte_end":164100,"line_start":264,"line_end":264,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitIdx<R>>::mask","value":"pub fn mask<O>(Self) -> BitMask<R> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector for `self` as an accessor mask.","sig":null,"attributes":[{"value":"/ Computes the bit selector for `self` as an accessor mask.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163900,"byte_end":163961,"line_start":258,"line_end":258,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163963,"byte_end":163966,"line_start":259,"line_end":259,"column_start":2,"column_end":5}},{"value":"/ This is a type-cast over [`Self::select`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163968,"byte_end":164014,"line_start":260,"line_end":260,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164016,"byte_end":164019,"line_start":261,"line_end":261,"column_start":2,"column_end":5}},{"value":"/ [`Self::select`]: Self::select","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164021,"byte_end":164055,"line_start":262,"line_end":262,"column_start":2,"column_end":36}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164057,"byte_end":164087,"line_start":263,"line_end":263,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":165062,"byte_end":165067,"line_start":294,"line_end":294,"column_start":9,"column_end":14},"name":"range","qualname":"<BitIdx<R>>::range","value":"pub fn range(Self, BitTail<R>) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all indices between an inclusive start and exclusive end\n point.","sig":null,"attributes":[{"value":"/ Iterates over all indices between an inclusive start and exclusive end","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164178,"byte_end":164252,"line_start":269,"line_end":269,"column_start":2,"column_end":76}},{"value":"/ point.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164254,"byte_end":164264,"line_start":270,"line_end":270,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164266,"byte_end":164269,"line_start":271,"line_end":271,"column_start":2,"column_end":5}},{"value":"/ Because implementation details of the range type family, including the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164271,"byte_end":164345,"line_start":272,"line_end":272,"column_start":2,"column_end":76}},{"value":"/ [`RangeBounds`] trait, are not yet stable, and heterogenous ranges are","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164347,"byte_end":164421,"line_start":273,"line_end":273,"column_start":2,"column_end":76}},{"value":"/ not supported, this must be an opaque iterator rather than a direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164423,"byte_end":164494,"line_start":274,"line_end":274,"column_start":2,"column_end":73}},{"value":"/ [`Range<BitIdx<R>>`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164496,"byte_end":164521,"line_start":275,"line_end":275,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164523,"byte_end":164526,"line_start":276,"line_end":276,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164528,"byte_end":164544,"line_start":277,"line_end":277,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164546,"byte_end":164549,"line_start":278,"line_end":278,"column_start":2,"column_end":5}},{"value":"/ - `from`: The inclusive low bound of the range. This will be the first","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164551,"byte_end":164625,"line_start":279,"line_end":279,"column_start":2,"column_end":76}},{"value":"/   index produced by the iterator.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164627,"byte_end":164664,"line_start":280,"line_end":280,"column_start":2,"column_end":39}},{"value":"/ - `upto`: The exclusive high bound of the range. The iterator will halt","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164666,"byte_end":164741,"line_start":281,"line_end":281,"column_start":2,"column_end":77}},{"value":"/   before yielding an index of this value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164743,"byte_end":164788,"line_start":282,"line_end":282,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164790,"byte_end":164793,"line_start":283,"line_end":283,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164795,"byte_end":164808,"line_start":284,"line_end":284,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164810,"byte_end":164813,"line_start":285,"line_end":285,"column_start":2,"column_end":5}},{"value":"/ An opaque iterator that is equivalent to the range `from .. upto`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164815,"byte_end":164885,"line_start":286,"line_end":286,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164887,"byte_end":164890,"line_start":287,"line_end":287,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164892,"byte_end":164910,"line_start":288,"line_end":288,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164912,"byte_end":164915,"line_start":289,"line_end":289,"column_start":2,"column_end":5}},{"value":"/ `from` must be no greater than `upto`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164917,"byte_end":164959,"line_start":290,"line_end":290,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164961,"byte_end":164964,"line_start":291,"line_end":291,"column_start":2,"column_end":5}},{"value":"/ [`RangeBounds`]: core::ops::RangeBounds","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164966,"byte_end":165009,"line_start":292,"line_end":292,"column_start":2,"column_end":45}},{"value":"/ [`Range<BitIdx<R>>`]: core::ops::Range","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":165011,"byte_end":165053,"line_start":293,"line_end":293,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":165433,"byte_end":165442,"line_start":307,"line_end":307,"column_start":9,"column_end":18},"name":"range_all","qualname":"<BitIdx<R>>::range_all","value":"pub fn range_all() -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all possible index values.\n","sig":null,"attributes":[{"value":"/ Iterates over all possible index values.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":165380,"byte_end":165424,"line_start":306,"line_end":306,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":166455,"byte_end":166461,"line_start":335,"line_end":335,"column_start":9,"column_end":15},"name":"offset","qualname":"<BitIdx<R>>::offset","value":"pub fn offset(Self, isize) -> (isize, Self)","parent":null,"children":[],"decl_id":null,"docs":" Computes the jump distance for some number of bits away from a starting\n index.","sig":null,"attributes":[{"value":"/ Computes the jump distance for some number of bits away from a starting","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":165579,"byte_end":165654,"line_start":314,"line_end":314,"column_start":2,"column_end":77}},{"value":"/ index.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":165656,"byte_end":165666,"line_start":315,"line_end":315,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":165668,"byte_end":165671,"line_start":316,"line_end":316,"column_start":2,"column_end":5}},{"value":"/ This computes the number of elements by which to adjust a base pointer,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":165673,"byte_end":165748,"line_start":317,"line_end":317,"column_start":2,"column_end":77}},{"value":"/ and then the bit index of the destination bit in the new referent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":165750,"byte_end":165819,"line_start":318,"line_end":318,"column_start":2,"column_end":71}},{"value":"/ register element.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":165821,"byte_end":165842,"line_start":319,"line_end":319,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":165844,"byte_end":165847,"line_start":320,"line_end":320,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":165849,"byte_end":165865,"line_start":321,"line_end":321,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":165867,"byte_end":165870,"line_start":322,"line_end":322,"column_start":2,"column_end":5}},{"value":"/ - `self`: An index within some element, from which the offset is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":165872,"byte_end":165940,"line_start":323,"line_end":323,"column_start":2,"column_end":70}},{"value":"/   computed.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":165942,"byte_end":165957,"line_start":324,"line_end":324,"column_start":2,"column_end":17}},{"value":"/ - `by`: The distance by which to jump. Negative values move lower in the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":165959,"byte_end":166035,"line_start":325,"line_end":325,"column_start":2,"column_end":78}},{"value":"/   index and element-pointer space; positive values move higher.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":166037,"byte_end":166104,"line_start":326,"line_end":326,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":166106,"byte_end":166109,"line_start":327,"line_end":327,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":166111,"byte_end":166124,"line_start":328,"line_end":328,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":166126,"byte_end":166129,"line_start":329,"line_end":329,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The number of elements `R` by which to adjust a base pointer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":166131,"byte_end":166204,"line_start":330,"line_end":330,"column_start":2,"column_end":75}},{"value":"/   This value can be passed directly into [`ptr::offset`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":166206,"byte_end":166267,"line_start":331,"line_end":331,"column_start":2,"column_end":63}},{"value":"/ - `.1`: The index of the destination bit within the destination element.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":166269,"byte_end":166345,"line_start":332,"line_end":332,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":166347,"byte_end":166350,"line_start":333,"line_end":333,"column_start":2,"column_end":5}},{"value":"/ [`ptr::offset`]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.offset","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":166352,"byte_end":166446,"line_start":334,"line_end":334,"column_start":2,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":903},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":169309,"byte_end":169313,"line_start":409,"line_end":409,"column_start":9,"column_end":13},"name":"span","qualname":"<BitIdx<R>>::span","value":"pub fn span(Self, usize) -> (usize, BitTail<R>)","parent":null,"children":[],"decl_id":null,"docs":" Computes the span information for a region beginning at `self` for `len`\n bits.","sig":null,"attributes":[{"value":"/ Computes the span information for a region beginning at `self` for `len`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168479,"byte_end":168555,"line_start":387,"line_end":387,"column_start":2,"column_end":78}},{"value":"/ bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168557,"byte_end":168566,"line_start":388,"line_end":388,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168568,"byte_end":168571,"line_start":389,"line_end":389,"column_start":2,"column_end":5}},{"value":"/ The span information is the number of elements in the region that hold","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168573,"byte_end":168647,"line_start":390,"line_end":390,"column_start":2,"column_end":76}},{"value":"/ live bits, and the position of the tail marker after the live bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168649,"byte_end":168720,"line_start":391,"line_end":391,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168722,"byte_end":168725,"line_start":392,"line_end":392,"column_start":2,"column_end":5}},{"value":"/ This forwards to [`BitTail::span`], as the computation is identical for","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168727,"byte_end":168802,"line_start":393,"line_end":393,"column_start":2,"column_end":77}},{"value":"/ the two types. Beginning a span at any `Idx` is equivalent to beginning","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168804,"byte_end":168879,"line_start":394,"line_end":394,"column_start":2,"column_end":77}},{"value":"/ it at the tail of a previous span.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168881,"byte_end":168919,"line_start":395,"line_end":395,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168921,"byte_end":168924,"line_start":396,"line_end":396,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168926,"byte_end":168942,"line_start":397,"line_end":397,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168944,"byte_end":168947,"line_start":398,"line_end":398,"column_start":2,"column_end":5}},{"value":"/ - `self`: The start bit of the span.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168949,"byte_end":168989,"line_start":399,"line_end":399,"column_start":2,"column_end":42}},{"value":"/ - `len`: The number of bits in the span.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168991,"byte_end":169035,"line_start":400,"line_end":400,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":169037,"byte_end":169040,"line_start":401,"line_end":401,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":169042,"byte_end":169055,"line_start":402,"line_end":402,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":169057,"byte_end":169060,"line_start":403,"line_end":403,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The number of elements, starting in the element that contains","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":169062,"byte_end":169135,"line_start":404,"line_end":404,"column_start":2,"column_end":75}},{"value":"/   `self`, that contain live bits of the span.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":169137,"byte_end":169186,"line_start":405,"line_end":405,"column_start":2,"column_end":51}},{"value":"/ - `.1`: The tail counter of the span’s end point.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":169188,"byte_end":169243,"line_start":406,"line_end":406,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":169245,"byte_end":169248,"line_start":407,"line_end":407,"column_start":2,"column_end":5}},{"value":"/ [`BitTail::span`]: crate::index::BitTail::span","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":169250,"byte_end":169300,"line_start":408,"line_end":408,"column_start":2,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":5151},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170278,"byte_end":170289,"line_start":453,"line_end":453,"column_start":12,"column_end":23},"name":"BitIdxError","qualname":"::index::BitIdxError","value":"BitIdxError {  }","parent":null,"children":[{"krate":0,"index":5153},{"krate":0,"index":5154}],"decl_id":null,"docs":" Marks an index that is invalid for a register type.\n","sig":null,"attributes":[{"value":"/ Marks an index that is invalid for a register type.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170120,"byte_end":170175,"line_start":450,"line_end":450,"column_start":1,"column_end":56}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170176,"byte_end":170196,"line_start":451,"line_end":451,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":171222,"byte_end":171227,"line_start":496,"line_end":496,"column_start":9,"column_end":14},"name":"value","qualname":"<BitIdxError<R>>::value","value":"pub fn value(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Removes the error wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the error wrapper, leaving the internal counter.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":171121,"byte_end":171181,"line_start":494,"line_end":494,"column_start":2,"column_end":62}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":171183,"byte_end":171213,"line_start":495,"line_end":495,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":5184},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":173243,"byte_end":173250,"line_start":565,"line_end":565,"column_start":12,"column_end":19},"name":"BitTail","qualname":"::index::BitTail","value":"BitTail {  }","parent":null,"children":[{"krate":0,"index":5186},{"krate":0,"index":5187}],"decl_id":null,"docs":" A semantic index counter within *or one bit past the end of* a register\nelement `R`.","sig":null,"attributes":[{"value":"* A semantic index counter within *or one bit past the end of* a register\nelement `R`.\n\nThis type is a counter in the ring `0 ..= R::BITS`, and serves to mark a\nsemantic index of a dead bit *after* a live region. As such, following in the\nC++ and LLVM memory model of first-live/first-dead region descriptiors, it marks\nan endpoint outside some bit-region, and may be used to compute the startpoint\nof a bit-region immediately succeeding, but not overlapping, the source.\n\nAs a dead-bit index, this *cannot* be used for indexing into a register. It is\nused only in abstract region computation.\n\nThis type is necessary in order to preserve the distinction between a dead\nmemory address that is *not* part of a buffer and a live memory address that is\nwithin a region. [`BitIdx`] is insufficient to this task, and causes buffer\nmanagement errors when used in its stead.\n\n# Type Parameters\n\n- `R`: The register element that this end index governs.\n\n# Validity\n\nValues of this type are **required** to be in the range `0 ..= R::BITS`. Any\nvalue greater than [`R::BITS`] makes the program invalid, and will likely cause\neither a crash or incorrect memory access.\n\n# Construction\n\nThis type can only be publicly constructed through [`BitIdx::span`].\n\n[`BitIdx`]: crate::index::BitIdx\n[`R::BITS`]: crate::mem::BitMemory::BITS\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":171816,"byte_end":173140,"line_start":529,"line_end":562,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":173141,"byte_end":173161,"line_start":563,"line_end":563,"column_start":1,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":931},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":173545,"byte_end":173549,"line_start":579,"line_end":579,"column_start":12,"column_end":16},"name":"LAST","qualname":"::index::BitTail::<R>::LAST","value":"Self","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" The inclusive maximum tail within an element `R`.\n","sig":null,"attributes":[{"value":"/ The inclusive maximum tail within an element `R`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":173480,"byte_end":173533,"line_start":578,"line_end":578,"column_start":2,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":932},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":173671,"byte_end":173675,"line_start":584,"line_end":584,"column_start":12,"column_end":16},"name":"ZERO","qualname":"::index::BitTail::<R>::ZERO","value":"Self","parent":{"krate":0,"index":929},"children":[],"decl_id":null,"docs":" The inclusive minimum tail within an element `R`.\n","sig":null,"attributes":[{"value":"/ The inclusive minimum tail within an element `R`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":173606,"byte_end":173659,"line_start":583,"line_end":583,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":933},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":174170,"byte_end":174173,"line_start":603,"line_end":603,"column_start":9,"column_end":12},"name":"new","qualname":"<BitTail<R>>::new","value":"pub fn new(u8) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as a known-good tail of an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as a known-good tail of an `R` register.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":173727,"byte_end":173793,"line_start":589,"line_end":589,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":173795,"byte_end":173798,"line_start":590,"line_end":590,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":173800,"byte_end":173816,"line_start":591,"line_end":591,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":173818,"byte_end":173821,"line_start":592,"line_end":592,"column_start":2,"column_end":5}},{"value":"/ - `value`: The counter value to mark as a tail. This must be not less","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":173823,"byte_end":173896,"line_start":593,"line_end":593,"column_start":2,"column_end":75}},{"value":"/   than [`Self::ZERO`] and not more than [`Self::LAST`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":173898,"byte_end":173957,"line_start":594,"line_end":594,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":173959,"byte_end":173962,"line_start":595,"line_end":595,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":173964,"byte_end":173977,"line_start":596,"line_end":596,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":173979,"byte_end":173982,"line_start":597,"line_end":597,"column_start":2,"column_end":5}},{"value":"/ This returns `Some(value)` when it is in the valid range `0 .. R::BITS`,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":173984,"byte_end":174060,"line_start":598,"line_end":598,"column_start":2,"column_end":78}},{"value":"/ and `None` when it is not.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":174062,"byte_end":174092,"line_start":599,"line_end":599,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":174094,"byte_end":174097,"line_start":600,"line_end":600,"column_start":2,"column_end":5}},{"value":"/ [`Self::LAST`]: Self::LAST","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":174099,"byte_end":174129,"line_start":601,"line_end":601,"column_start":2,"column_end":32}},{"value":"/ [`Self::ZERO`]: Self::ZERO","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":174131,"byte_end":174161,"line_start":602,"line_end":602,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175178,"byte_end":175183,"line_start":644,"line_end":644,"column_start":9,"column_end":14},"name":"value","qualname":"<BitTail<R>>::value","value":"pub fn value(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Removes the tail wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the tail wrapper, leaving the internal counter.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175078,"byte_end":175137,"line_start":642,"line_end":642,"column_start":2,"column_end":61}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175139,"byte_end":175169,"line_start":643,"line_end":643,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175907,"byte_end":175917,"line_start":667,"line_end":667,"column_start":9,"column_end":19},"name":"range_from","qualname":"<BitTail<R>>::range_from","value":"pub fn range_from(BitIdx<R>) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all tail indices at and after an inclusive starting point.","sig":null,"attributes":[{"value":"/ Iterates over all tail indices at and after an inclusive starting point.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175214,"byte_end":175290,"line_start":648,"line_end":648,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175292,"byte_end":175295,"line_start":649,"line_end":649,"column_start":2,"column_end":5}},{"value":"/ Because implementation details of the range type family, including the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175297,"byte_end":175371,"line_start":650,"line_end":650,"column_start":2,"column_end":76}},{"value":"/ [`RangeBounds`] trait, are not yet stable, and heterogenous ranges are","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175373,"byte_end":175447,"line_start":651,"line_end":651,"column_start":2,"column_end":76}},{"value":"/ not yet supported, this must be an opaque iterator rather than a direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175449,"byte_end":175524,"line_start":652,"line_end":652,"column_start":2,"column_end":77}},{"value":"/ [`Range<BitTail<R>>`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175526,"byte_end":175552,"line_start":653,"line_end":653,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175554,"byte_end":175557,"line_start":654,"line_end":654,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175559,"byte_end":175575,"line_start":655,"line_end":655,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175577,"byte_end":175580,"line_start":656,"line_end":656,"column_start":2,"column_end":5}},{"value":"/ - `from`: The inclusive low bound of the range. This will be the first","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175582,"byte_end":175656,"line_start":657,"line_end":657,"column_start":2,"column_end":76}},{"value":"/   tail produced by the iterator.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175658,"byte_end":175694,"line_start":658,"line_end":658,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175696,"byte_end":175699,"line_start":659,"line_end":659,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175701,"byte_end":175714,"line_start":660,"line_end":660,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175716,"byte_end":175719,"line_start":661,"line_end":661,"column_start":2,"column_end":5}},{"value":"/ An opaque iterator that is equivalent to the range `from ..=","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175721,"byte_end":175785,"line_start":662,"line_end":662,"column_start":2,"column_end":66}},{"value":"/ Self::LAST`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175787,"byte_end":175803,"line_start":663,"line_end":663,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175805,"byte_end":175808,"line_start":664,"line_end":664,"column_start":2,"column_end":5}},{"value":"/ [`RangeBounds`]: core::ops::RangeBounds","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175810,"byte_end":175853,"line_start":665,"line_end":665,"column_start":2,"column_end":45}},{"value":"/ [`Range<BitTail<R>>`]: core::ops::Range","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175855,"byte_end":175898,"line_start":666,"line_end":666,"column_start":2,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":5217},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179490,"byte_end":179496,"line_start":788,"line_end":788,"column_start":12,"column_end":18},"name":"BitPos","qualname":"::index::BitPos","value":"BitPos {  }","parent":null,"children":[{"krate":0,"index":5219},{"krate":0,"index":5220}],"decl_id":null,"docs":" An electrical position counter within a register element `R`.","sig":null,"attributes":[{"value":"* An electrical position counter within a register element `R`.\n\nThis type is a counter in the ring `0 .. R::BITS`, and serves to mark an\nelectrical address of a real bit. It is the shift distance in the expression\n`1 << n`. It is only produced by applying a [`BitOrder::at`] transformation to\nsome [`BitIdx`] produced by this library.\n\n# Type Parameters\n\n- `R`: The register element that this position governs.\n\n# Validity\n\nValues of this type are **required** to be in the range `0 .. R::BITS`. Any\nvalue not less than [`R::BITS`] makes the program invalid, and will likely cause\na crash. In addition, [`BitOrder::at`] has a list of requirements that its\nimplementations must uphold in order to make construction of this type\nsemantically correct in a program.\n\n# Construction\n\nThis type is publicly constructible. [`bitvec`] will only request its creation\nby calling [`BitOrder::at`], and has no sites that can publicly accept untrusted\nvalues.\n\n[`BitIdx`]: crate::index::BitIdx\n[`BitOrder::at`]: crate::order::BitOrder::at\n[`R::BITS`]: crate::mem::BitMemory::BITS\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":178263,"byte_end":179336,"line_start":756,"line_end":784,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179388,"byte_end":179408,"line_start":786,"line_end":786,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":951},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180075,"byte_end":180078,"line_start":812,"line_end":812,"column_start":9,"column_end":12},"name":"new","qualname":"<BitPos<R>>::new","value":"pub fn new(u8) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as a known-good position within an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as a known-good position within an `R` register.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179723,"byte_end":179797,"line_start":801,"line_end":801,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179799,"byte_end":179802,"line_start":802,"line_end":802,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179804,"byte_end":179820,"line_start":803,"line_end":803,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179822,"byte_end":179825,"line_start":804,"line_end":804,"column_start":2,"column_end":5}},{"value":"/ - `value`: The counter value to mark as a position. This must be in the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179827,"byte_end":179902,"line_start":805,"line_end":805,"column_start":2,"column_end":77}},{"value":"/   range `0 .. R::BITS`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179904,"byte_end":179931,"line_start":806,"line_end":806,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179933,"byte_end":179936,"line_start":807,"line_end":807,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179938,"byte_end":179951,"line_start":808,"line_end":808,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179953,"byte_end":179956,"line_start":809,"line_end":809,"column_start":2,"column_end":5}},{"value":"/ This returns `Some(value)` when it is in the valid range `0 .. R::BITS`,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179958,"byte_end":180034,"line_start":810,"line_end":810,"column_start":2,"column_end":78}},{"value":"/ and `None` when it is not.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180036,"byte_end":180066,"line_start":811,"line_end":811,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180696,"byte_end":180709,"line_start":836,"line_end":836,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitPos<R>>::new_unchecked","value":"pub unsafe fn new_unchecked(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as an assumed-good position within an `R`\n register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as an assumed-good position within an `R`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180203,"byte_end":180270,"line_start":819,"line_end":819,"column_start":2,"column_end":69}},{"value":"/ register.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180272,"byte_end":180285,"line_start":820,"line_end":820,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180287,"byte_end":180290,"line_start":821,"line_end":821,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180292,"byte_end":180308,"line_start":822,"line_end":822,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180310,"byte_end":180313,"line_start":823,"line_end":823,"column_start":2,"column_end":5}},{"value":"/ - `value`: The counter value to mark as a position. This must be in the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180315,"byte_end":180390,"line_start":824,"line_end":824,"column_start":2,"column_end":77}},{"value":"/   range `0 .. R::BITS`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180392,"byte_end":180419,"line_start":825,"line_end":825,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180421,"byte_end":180424,"line_start":826,"line_end":826,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180426,"byte_end":180439,"line_start":827,"line_end":827,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180441,"byte_end":180444,"line_start":828,"line_end":828,"column_start":2,"column_end":5}},{"value":"/ This returns `value`, marked as a valid position.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180446,"byte_end":180499,"line_start":829,"line_end":829,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180501,"byte_end":180504,"line_start":830,"line_end":830,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180506,"byte_end":180518,"line_start":831,"line_end":831,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180520,"byte_end":180523,"line_start":832,"line_end":832,"column_start":2,"column_end":5}},{"value":"/ If the `value` is outside the valid range, then the program is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180525,"byte_end":180591,"line_start":833,"line_end":833,"column_start":2,"column_end":68}},{"value":"/ incorrect. Debug builds will panic; release builds do not inspect the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180593,"byte_end":180666,"line_start":834,"line_end":834,"column_start":2,"column_end":75}},{"value":"/ `value`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180668,"byte_end":180680,"line_start":835,"line_end":835,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":953},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181003,"byte_end":181008,"line_start":851,"line_end":851,"column_start":9,"column_end":14},"name":"value","qualname":"<BitPos<R>>::value","value":"pub fn value(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Removes the position wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the position wrapper, leaving the internal counter.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180899,"byte_end":180962,"line_start":849,"line_end":849,"column_start":2,"column_end":65}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180964,"byte_end":180994,"line_start":850,"line_end":850,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181144,"byte_end":181150,"line_start":858,"line_end":858,"column_start":9,"column_end":15},"name":"select","qualname":"<BitPos<R>>::select","value":"pub fn select(Self) -> BitSel<R>","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector corresponding to `self`.","sig":null,"attributes":[{"value":"/ Computes the bit selector corresponding to `self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181039,"byte_end":181093,"line_start":855,"line_end":855,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181095,"byte_end":181098,"line_start":856,"line_end":856,"column_start":2,"column_end":5}},{"value":"/ This is always `1 << self.pos`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181100,"byte_end":181135,"line_start":857,"line_end":857,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":955},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181428,"byte_end":181432,"line_start":868,"line_end":868,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitPos<R>>::mask","value":"pub fn mask(Self) -> BitMask<R>","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector for `self` as an accessor mask.","sig":null,"attributes":[{"value":"/ Computes the bit selector for `self` as an accessor mask.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181232,"byte_end":181293,"line_start":862,"line_end":862,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181295,"byte_end":181298,"line_start":863,"line_end":863,"column_start":2,"column_end":5}},{"value":"/ This is a type-cast over [`Self::select`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181300,"byte_end":181346,"line_start":864,"line_end":864,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181348,"byte_end":181351,"line_start":865,"line_end":865,"column_start":2,"column_end":5}},{"value":"/ [`Self::select`]: Self::select","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181353,"byte_end":181387,"line_start":866,"line_end":866,"column_start":2,"column_end":36}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181389,"byte_end":181419,"line_start":867,"line_end":867,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":5250},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183357,"byte_end":183363,"line_start":941,"line_end":941,"column_start":12,"column_end":18},"name":"BitSel","qualname":"::index::BitSel","value":"BitSel {  }","parent":null,"children":[{"krate":0,"index":5252}],"decl_id":null,"docs":" A one-hot selection mask for a register element `R`.","sig":null,"attributes":[{"value":"* A one-hot selection mask for a register element `R`.\n\nThis type selects exactly one bit in a register. It is used to apply test and\nwrite operations into memory.\n\n# Type Parameters\n\n- `R`: The register element this selector governs.\n\n# Validity\n\nValues of this type are required to have exactly one bit set high, and all\nothers set low.\n\n# Construction\n\nThis type is only constructed from the [`BitPos::select`] and\n[`BitOrder::select`] functions. It is always equivalent to\n`1 << BitPos::unwrap`.\n\nThe chain of custody, from known-good [`BitIdx`] values, through proven-good\n[`BitOrder`] implementations, into [`BitPos`] and then `BitSel`, proves that\nvalues of this type are always correct to apply to underlying memory.\n\n[`BitIdx`]: crate::index::BitIdx\n[`BitOrder`]: crate::order::BitOrder\n[`BitOrder::select`]: crate::order::BitOrder::select\n[`BitPos`]: crate::index::BitPos\n[`BitPos::select`]: crate::index::BitPos::select\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182267,"byte_end":183203,"line_start":908,"line_end":937,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183255,"byte_end":183275,"line_start":939,"line_end":939,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183973,"byte_end":183976,"line_start":965,"line_end":965,"column_start":9,"column_end":12},"name":"new","qualname":"<BitSel<R>>::new","value":"pub fn new(R) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as a known-good selection of an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as a known-good selection of an `R` register.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183476,"byte_end":183547,"line_start":951,"line_end":951,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183549,"byte_end":183552,"line_start":952,"line_end":952,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183554,"byte_end":183570,"line_start":953,"line_end":953,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183572,"byte_end":183575,"line_start":954,"line_end":954,"column_start":2,"column_end":5}},{"value":"/ - `value`: A one-hot selection mask of a bit in an `R` register.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183577,"byte_end":183645,"line_start":955,"line_end":955,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183647,"byte_end":183650,"line_start":956,"line_end":956,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183652,"byte_end":183665,"line_start":957,"line_end":957,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183667,"byte_end":183670,"line_start":958,"line_end":958,"column_start":2,"column_end":5}},{"value":"/ If `value` is a power of two (exactly one bit set high and all others","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183672,"byte_end":183745,"line_start":959,"line_end":959,"column_start":2,"column_end":75}},{"value":"/ set low), it returns `Some` of a `BitSel` wrapping the `value`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183747,"byte_end":183814,"line_start":960,"line_end":960,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183816,"byte_end":183819,"line_start":961,"line_end":961,"column_start":2,"column_end":5}},{"value":"/ [`BitOrder::at`]: crate:order::BitOrder::at","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183821,"byte_end":183868,"line_start":962,"line_end":962,"column_start":2,"column_end":49}},{"value":"/ [`BitOrder::select`]: crate::order::BitOrder::select","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183870,"byte_end":183926,"line_start":963,"line_end":963,"column_start":2,"column_end":58}},{"value":"/ [`BitPos`]: crate::index::BitPos","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183928,"byte_end":183964,"line_start":964,"line_end":964,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":971},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184745,"byte_end":184758,"line_start":992,"line_end":992,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitSel<R>>::new_unchecked","value":"pub unsafe fn new_unchecked(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as an assumed-good selection of an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as an assumed-good selection of an `R` register.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184107,"byte_end":184181,"line_start":972,"line_end":972,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184183,"byte_end":184186,"line_start":973,"line_end":973,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184188,"byte_end":184204,"line_start":974,"line_end":974,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184206,"byte_end":184209,"line_start":975,"line_end":975,"column_start":2,"column_end":5}},{"value":"/ - `value`: A one-hot selection mask of a bit in an `R` register.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184211,"byte_end":184279,"line_start":976,"line_end":976,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184281,"byte_end":184284,"line_start":977,"line_end":977,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184286,"byte_end":184299,"line_start":978,"line_end":978,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184301,"byte_end":184304,"line_start":979,"line_end":979,"column_start":2,"column_end":5}},{"value":"/ `value` wrapped in a `BitSel`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184306,"byte_end":184340,"line_start":980,"line_end":980,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184342,"byte_end":184345,"line_start":981,"line_end":981,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184347,"byte_end":184359,"line_start":982,"line_end":982,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184361,"byte_end":184364,"line_start":983,"line_end":983,"column_start":2,"column_end":5}},{"value":"/ `value` **must** be a power of two: one bit set high and all others set","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184366,"byte_end":184441,"line_start":984,"line_end":984,"column_start":2,"column_end":77}},{"value":"/ low. In debug builds, invalid `value`s cause a panic; release builds do","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184443,"byte_end":184518,"line_start":985,"line_end":985,"column_start":2,"column_end":77}},{"value":"/ not check the input.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184520,"byte_end":184544,"line_start":986,"line_end":986,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184546,"byte_end":184549,"line_start":987,"line_end":987,"column_start":2,"column_end":5}},{"value":"/ This function must only be called in a [`BitOrder::select`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184551,"byte_end":184614,"line_start":988,"line_end":988,"column_start":2,"column_end":65}},{"value":"/ implementation that is verified to be correct.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184616,"byte_end":184666,"line_start":989,"line_end":989,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184668,"byte_end":184671,"line_start":990,"line_end":990,"column_start":2,"column_end":5}},{"value":"/ [`BitOrder::select`]: crate::order::BitOrder::select","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184673,"byte_end":184729,"line_start":991,"line_end":991,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":185059,"byte_end":185064,"line_start":1004,"line_end":1004,"column_start":9,"column_end":14},"name":"value","qualname":"<BitSel<R>>::value","value":"pub fn value(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Removes the selector wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the selector wrapper, leaving the internal counter.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184955,"byte_end":185018,"line_start":1002,"line_end":1002,"column_start":2,"column_end":65}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":185020,"byte_end":185050,"line_start":1003,"line_end":1003,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":973},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":185210,"byte_end":185214,"line_start":1011,"line_end":1011,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitSel<R>>::mask","value":"pub fn mask(Self) -> BitMask<R>","parent":null,"children":[],"decl_id":null,"docs":" Computes a bit-mask for `self`. This is a type-cast.\n","sig":null,"attributes":[{"value":"/ Computes a bit-mask for `self`. This is a type-cast.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":185094,"byte_end":185150,"line_start":1008,"line_end":1008,"column_start":2,"column_end":58}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":185152,"byte_end":185169,"line_start":1009,"line_end":1009,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":185171,"byte_end":185201,"line_start":1010,"line_end":1010,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":185323,"byte_end":185332,"line_start":1016,"line_end":1016,"column_start":9,"column_end":18},"name":"range_all","qualname":"<BitSel<R>>::range_all","value":"pub fn range_all() -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all possible selector values.\n","sig":null,"attributes":[{"value":"/ Iterates over all possible selector values.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":185267,"byte_end":185314,"line_start":1015,"line_end":1015,"column_start":2,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":5282},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":186689,"byte_end":186696,"line_start":1071,"line_end":1071,"column_start":12,"column_end":19},"name":"BitMask","qualname":"::index::BitMask","value":"BitMask {  }","parent":null,"children":[{"krate":0,"index":5284}],"decl_id":null,"docs":" A multi-bit selection mask for a register `R`.","sig":null,"attributes":[{"value":"* A multi-bit selection mask for a register `R`.\n\nUnlike [`BitSel`], which enforces a strict one-hot mask encoding, this mask type\npermits any number of bits to be set or unset. This is used to accumulate\nselections for a batched operation on a register.\n\n# Type Parameters\n\n- `R`: The register element that this masks.\n\n# Construction\n\nThis can only be constructed by combining [`BitSel`] selection mask produced\nthrough the [`BitIdx`] and [`BitOrder`] chain of custody.\n\n[`BitIdx`]: crate::index::BitIdx\n[`BitOrder`]: crate::order::BitOrder\n[`BitSel`]: crate::index::BitSel\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":186005,"byte_end":186586,"line_start":1050,"line_end":1068,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":186587,"byte_end":186607,"line_start":1069,"line_end":1069,"column_start":1,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":987},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":186852,"byte_end":186855,"line_start":1082,"line_end":1082,"column_start":12,"column_end":15},"name":"ALL","qualname":"::index::BitMask::<R>::ALL","value":"Self","parent":{"krate":0,"index":985},"children":[],"decl_id":null,"docs":" A full mask.\n","sig":null,"attributes":[{"value":"/ A full mask.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":186824,"byte_end":186840,"line_start":1081,"line_end":1081,"column_start":2,"column_end":18}}]},{"kind":"Const","id":{"krate":0,"index":988},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":186918,"byte_end":186922,"line_start":1084,"line_end":1084,"column_start":12,"column_end":16},"name":"ZERO","qualname":"::index::BitMask::<R>::ZERO","value":"Self","parent":{"krate":0,"index":985},"children":[],"decl_id":null,"docs":" An empty mask.\n","sig":null,"attributes":[{"value":"/ An empty mask.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":186888,"byte_end":186906,"line_start":1083,"line_end":1083,"column_start":2,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":989},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187661,"byte_end":187664,"line_start":1109,"line_end":1109,"column_start":9,"column_end":12},"name":"new","qualname":"<BitMask<R>>::new","value":"pub fn new(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps any `R` value as a bit-mask.","sig":null,"attributes":[{"value":"/ Wraps any `R` value as a bit-mask.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":186957,"byte_end":186995,"line_start":1086,"line_end":1086,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":186997,"byte_end":187000,"line_start":1087,"line_end":1087,"column_start":2,"column_end":5}},{"value":"/ This constructor is provided to explicitly declare that an operation is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187002,"byte_end":187077,"line_start":1088,"line_end":1088,"column_start":2,"column_end":77}},{"value":"/ discarding the numeric value of an integer and instead using it only as","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187079,"byte_end":187154,"line_start":1089,"line_end":1089,"column_start":2,"column_end":77}},{"value":"/ a bit-mask.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187156,"byte_end":187171,"line_start":1090,"line_end":1090,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187173,"byte_end":187176,"line_start":1091,"line_end":1091,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187178,"byte_end":187194,"line_start":1092,"line_end":1092,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187196,"byte_end":187199,"line_start":1093,"line_end":1093,"column_start":2,"column_end":5}},{"value":"/ - `value`: Some integer to use as a bit-mask.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187201,"byte_end":187250,"line_start":1094,"line_end":1094,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187252,"byte_end":187255,"line_start":1095,"line_end":1095,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187257,"byte_end":187270,"line_start":1096,"line_end":1096,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187272,"byte_end":187275,"line_start":1097,"line_end":1097,"column_start":2,"column_end":5}},{"value":"/ The `value` wrapped as a bit-mask, with its numeric context discarded.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187277,"byte_end":187351,"line_start":1098,"line_end":1098,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187353,"byte_end":187356,"line_start":1099,"line_end":1099,"column_start":2,"column_end":5}},{"value":"/ Prefer accumulating [`BitSel`] values using the `Sum` implementation.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187358,"byte_end":187431,"line_start":1100,"line_end":1100,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187433,"byte_end":187436,"line_start":1101,"line_end":1101,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187438,"byte_end":187450,"line_start":1102,"line_end":1102,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187452,"byte_end":187455,"line_start":1103,"line_end":1103,"column_start":2,"column_end":5}},{"value":"/ The `value` must be computed from a set of valid bit positions in the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187457,"byte_end":187530,"line_start":1104,"line_end":1104,"column_start":2,"column_end":75}},{"value":"/ caller’s context.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187532,"byte_end":187555,"line_start":1105,"line_end":1105,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187557,"byte_end":187560,"line_start":1106,"line_end":1106,"column_start":2,"column_end":5}},{"value":"/ [`BitOrder::mask`]: crate::order::BitOrder::mask","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187562,"byte_end":187614,"line_start":1107,"line_end":1107,"column_start":2,"column_end":54}},{"value":"/ [`BitSel`]: crate::index::BitSel","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187616,"byte_end":187652,"line_start":1108,"line_end":1108,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":990},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187811,"byte_end":187816,"line_start":1115,"line_end":1115,"column_start":9,"column_end":14},"name":"value","qualname":"<BitMask<R>>::value","value":"pub fn value(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Removes the mask wrapper, leaving the internal value.\n","sig":null,"attributes":[{"value":"/ Removes the mask wrapper, leaving the internal value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187713,"byte_end":187770,"line_start":1113,"line_end":1113,"column_start":2,"column_end":59}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187772,"byte_end":187802,"line_start":1114,"line_end":1114,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":991},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188082,"byte_end":188086,"line_start":1129,"line_end":1129,"column_start":9,"column_end":13},"name":"test","qualname":"<BitMask<R>>::test","value":"pub fn test(&Self, BitSel<R>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the mask contains a given selector bit.","sig":null,"attributes":[{"value":"/ Tests whether the mask contains a given selector bit.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187847,"byte_end":187904,"line_start":1119,"line_end":1119,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187906,"byte_end":187909,"line_start":1120,"line_end":1120,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187911,"byte_end":187927,"line_start":1121,"line_end":1121,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187929,"byte_end":187932,"line_start":1122,"line_end":1122,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187934,"byte_end":187947,"line_start":1123,"line_end":1123,"column_start":2,"column_end":15}},{"value":"/ - `sel`: Some single selection bit to test in `self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":187949,"byte_end":188006,"line_start":1124,"line_end":1124,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188008,"byte_end":188011,"line_start":1125,"line_end":1125,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188013,"byte_end":188026,"line_start":1126,"line_end":1126,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188028,"byte_end":188031,"line_start":1127,"line_end":1127,"column_start":2,"column_end":5}},{"value":"/ Whether `self` is set high at `sel`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188033,"byte_end":188073,"line_start":1128,"line_end":1128,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":992},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188380,"byte_end":188386,"line_start":1143,"line_end":1143,"column_start":9,"column_end":15},"name":"insert","qualname":"<BitMask<R>>::insert","value":"pub fn insert(&mut Self, BitSel<R>)","parent":null,"children":[],"decl_id":null,"docs":" Inserts a selector bit into an existing mask.","sig":null,"attributes":[{"value":"/ Inserts a selector bit into an existing mask.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188158,"byte_end":188207,"line_start":1133,"line_end":1133,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188209,"byte_end":188212,"line_start":1134,"line_end":1134,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188214,"byte_end":188230,"line_start":1135,"line_end":1135,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188232,"byte_end":188235,"line_start":1136,"line_end":1136,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188237,"byte_end":188254,"line_start":1137,"line_end":1137,"column_start":2,"column_end":19}},{"value":"/ - `sel`: A selector bit to set in `self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188256,"byte_end":188301,"line_start":1138,"line_end":1138,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188303,"byte_end":188306,"line_start":1139,"line_end":1139,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188308,"byte_end":188321,"line_start":1140,"line_end":1140,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188323,"byte_end":188326,"line_start":1141,"line_end":1141,"column_start":2,"column_end":5}},{"value":"/ The bit at `sel` is set high in `self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188328,"byte_end":188371,"line_start":1142,"line_end":1142,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":993},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188664,"byte_end":188671,"line_start":1157,"line_end":1157,"column_start":9,"column_end":16},"name":"combine","qualname":"<BitMask<R>>::combine","value":"pub fn combine(Self, BitSel<R>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mask with a selector bit activated.","sig":null,"attributes":[{"value":"/ Creates a new mask with a selector bit activated.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188445,"byte_end":188498,"line_start":1147,"line_end":1147,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188500,"byte_end":188503,"line_start":1148,"line_end":1148,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188505,"byte_end":188521,"line_start":1149,"line_end":1149,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188523,"byte_end":188526,"line_start":1150,"line_end":1150,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188528,"byte_end":188540,"line_start":1151,"line_end":1151,"column_start":2,"column_end":14}},{"value":"/ - `sel`: A selector bit to set in `self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188542,"byte_end":188586,"line_start":1152,"line_end":1152,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188588,"byte_end":188591,"line_start":1153,"line_end":1153,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188593,"byte_end":188606,"line_start":1154,"line_end":1154,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188608,"byte_end":188611,"line_start":1155,"line_end":1155,"column_start":2,"column_end":5}},{"value":"/ A copy of `self`, with `sel` set high.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188613,"byte_end":188655,"line_start":1156,"line_end":1156,"column_start":2,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":1019},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mem","qualname":"::mem","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","parent":null,"children":[{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1026},{"krate":0,"index":1029},{"krate":0,"index":1033},{"krate":0,"index":1036},{"krate":0,"index":5314},{"krate":0,"index":5315},{"krate":0,"index":5316},{"krate":0,"index":5317},{"krate":0,"index":5318},{"krate":0,"index":5319},{"krate":0,"index":5320},{"krate":0,"index":5321},{"krate":0,"index":5322},{"krate":0,"index":5323},{"krate":0,"index":5324},{"krate":0,"index":5325},{"krate":0,"index":1037},{"krate":0,"index":5326},{"krate":0,"index":5329},{"krate":0,"index":5332},{"krate":0,"index":1038},{"krate":0,"index":5335},{"krate":0,"index":1041},{"krate":0,"index":1043},{"krate":0,"index":1045},{"krate":0,"index":1048}],"decl_id":null,"docs":" Memory element descriptions.","sig":null,"attributes":[{"value":"* Memory element descriptions.\n\nThis module describes memory integers and processor registers used to hold and\nmanipulate [`bitvec`] data buffers.\n\nThe [`BitMemory`] trait adds descriptive information to the unsigned integers\navailable in the language.\n\nThe [`BitRegister`] trait marks the unsigned integers that correspond to\nprocessor registers, and can therefore be used for buffer control. The integers\nthat are `BitMemory` but not `BitRegister` can be composed out of register\nvalues, but are unable to be used in buffer type parameters.\n\n[`BitMemory`]: crate::mem::BitMemory\n[`BitRegister`]: crate::mem::BitRegister\n[`bitvec`]: crate\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":199514,"byte_end":200159,"line_start":1,"line_end":17,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":1029},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":200664,"byte_end":200673,"line_start":34,"line_end":34,"column_start":11,"column_end":20},"name":"BitMemory","qualname":"::mem::BitMemory","value":"BitMemory: IsUnsigned + seal::Sealed","parent":null,"children":[{"krate":0,"index":1030},{"krate":0,"index":1031},{"krate":0,"index":1032}],"decl_id":null,"docs":" Description of an integer memory element.","sig":null,"attributes":[{"value":"* Description of an integer memory element.\n\nThis trait provides information used to describe integer-typed regions of memory\nand enables other parts of the project to adequately describe the memory bus.\nThis trait has **no** bearing on the processor instructions or registers used to\ninteract with memory. It solely describes integers that can exist on a system.\n\nThis trait cannot be implemented outside this crate.\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":200230,"byte_end":200653,"line_start":25,"line_end":33,"column_start":1,"column_end":4}}]},{"kind":"Const","id":{"krate":0,"index":1030},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":201027,"byte_end":201031,"line_start":44,"line_end":44,"column_start":8,"column_end":12},"name":"BITS","qualname":"::mem::BitMemory::BITS","value":"u8","parent":{"krate":0,"index":1029},"children":[],"decl_id":null,"docs":" The bit width of the integer.","sig":null,"attributes":[{"value":"/ The bit width of the integer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":200704,"byte_end":200737,"line_start":35,"line_end":35,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":200739,"byte_end":200742,"line_start":36,"line_end":36,"column_start":2,"column_end":5}},{"value":"/ [`mem::size_of`] returns the size in bytes, and bytes are always eight","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":200744,"byte_end":200818,"line_start":37,"line_end":37,"column_start":2,"column_end":76}},{"value":"/ bits wide on architectures that Rust targets.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":200820,"byte_end":200869,"line_start":38,"line_end":38,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":200871,"byte_end":200874,"line_start":39,"line_end":39,"column_start":2,"column_end":5}},{"value":"/ Issue #76904 will place this constant on the fundamental integers","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":200876,"byte_end":200945,"line_start":40,"line_end":40,"column_start":2,"column_end":71}},{"value":"/ directly, as a `u32`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":200947,"byte_end":200972,"line_start":41,"line_end":41,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":200974,"byte_end":200977,"line_start":42,"line_end":42,"column_start":2,"column_end":5}},{"value":"/ [`mem::size_of`]: core::mem::size_of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":200979,"byte_end":201019,"line_start":43,"line_end":43,"column_start":2,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":1031},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":201157,"byte_end":201161,"line_start":47,"line_end":47,"column_start":8,"column_end":12},"name":"INDX","qualname":"::mem::BitMemory::INDX","value":"u8","parent":{"krate":0,"index":1029},"children":[],"decl_id":null,"docs":" The number of bits required to store an index in the range `0 .. BITS`.\n","sig":null,"attributes":[{"value":"/ The number of bits required to store an index in the range `0 .. BITS`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":201074,"byte_end":201149,"line_start":46,"line_end":46,"column_start":2,"column_end":77}}]},{"kind":"Const","id":{"krate":0,"index":1032},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":201363,"byte_end":201367,"line_start":51,"line_end":51,"column_start":8,"column_end":12},"name":"MASK","qualname":"::mem::BitMemory::MASK","value":"u8","parent":{"krate":0,"index":1029},"children":[],"decl_id":null,"docs":" A mask over all bits that can be used as an index within the element.\n This is the value with the least significant `INDX`-many bits set high.\n","sig":null,"attributes":[{"value":"/ A mask over all bits that can be used as an index within the element.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":201205,"byte_end":201278,"line_start":49,"line_end":49,"column_start":2,"column_end":75}},{"value":"/ This is the value with the least significant `INDX`-many bits set high.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":201280,"byte_end":201355,"line_start":50,"line_end":50,"column_start":2,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":1033},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":201692,"byte_end":201703,"line_start":61,"line_end":61,"column_start":11,"column_end":22},"name":"BitRegister","qualname":"::mem::BitRegister","value":"BitRegister: BitMemory + BitOps","parent":null,"children":[{"krate":0,"index":1034},{"krate":0,"index":1035}],"decl_id":null,"docs":" Description of a processor register.","sig":null,"attributes":[{"value":"* Description of a processor register.\n\nThis trait provides information used to describe processor registers. It only\nneeds to contain constant values for `1` and `!0`; the rest of its information\nis contained in the presence or absence of its implementation on particular\nintegers.\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":201393,"byte_end":201681,"line_start":54,"line_end":60,"column_start":1,"column_end":4}}]},{"kind":"Const","id":{"krate":0,"index":1034},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":201755,"byte_end":201758,"line_start":63,"line_end":63,"column_start":8,"column_end":11},"name":"ONE","qualname":"::mem::BitRegister::ONE","value":"Self","parent":{"krate":0,"index":1033},"children":[],"decl_id":null,"docs":" The literal `1`.\n","sig":null,"attributes":[{"value":"/ The literal `1`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":201727,"byte_end":201747,"line_start":62,"line_end":62,"column_start":2,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":1035},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":201796,"byte_end":201799,"line_start":65,"line_end":65,"column_start":8,"column_end":11},"name":"ALL","qualname":"::mem::BitRegister::ALL","value":"Self","parent":{"krate":0,"index":1033},"children":[],"decl_id":null,"docs":" The literal `!0`.\n","sig":null,"attributes":[{"value":"/ The literal `!0`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":201767,"byte_end":201788,"line_start":64,"line_end":64,"column_start":2,"column_end":23}}]},{"kind":"Function","id":{"krate":0,"index":1041},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":202830,"byte_end":202834,"line_start":115,"line_end":115,"column_start":14,"column_end":18},"name":"elts","qualname":"::mem::elts","value":"pub const fn elts<T>(usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes the number of elements required to store some number of bits.","sig":null,"attributes":[{"value":"* Computes the number of elements required to store some number of bits.\n\n# Parameters\n\n- `bits`: The number of bits to store in a `[T]` array.\n\n# Returns\n\nThe number of elements `T` required to store `bits`.\n\nAs this is a const function, when `bits` is a constant expression, this can be\nused to compute the size of an array type `[T; elts(bits)]`.\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":202446,"byte_end":202801,"line_start":101,"line_end":113,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":1049},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":204110,"byte_end":204116,"line_start":165,"line_end":165,"column_start":12,"column_end":18},"name":"Sealed","qualname":"::mem::seal::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1051},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":205241,"byte_end":205251,"line_start":8,"line_end":8,"column_start":11,"column_end":21},"name":"Mutability","qualname":"::mutability::Mutability","value":"Mutability: 'static + seal::Sealed","parent":null,"children":[],"decl_id":null,"docs":" A marker trait for distinguishing `*const` vs `*mut` when working with\n structs, rather than raw pointers.\n","sig":null,"attributes":[{"value":"/ A marker trait for distinguishing `*const` vs `*mut` when working with","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":205117,"byte_end":205191,"line_start":6,"line_end":6,"column_start":1,"column_end":75}},{"value":"/ structs, rather than raw pointers.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":205192,"byte_end":205230,"line_start":7,"line_end":7,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":5338},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":205379,"byte_end":205384,"line_start":12,"line_end":12,"column_start":12,"column_end":17},"name":"Const","qualname":"::mutability::Const","value":"","parent":null,"children":[],"decl_id":null,"docs":" An immutable pointer.\n","sig":null,"attributes":[{"value":"/ An immutable pointer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":205280,"byte_end":205305,"line_start":10,"line_end":10,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":5355},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":205702,"byte_end":205705,"line_start":24,"line_end":24,"column_start":12,"column_end":15},"name":"Mut","qualname":"::mutability::Mut","value":"","parent":null,"children":[],"decl_id":null,"docs":" A mutable pointer. Contexts with a `Mutable` may lower to `Immutable`, then\n re-raise to `Mutable`; contexts with `Immutable` may not raise to `Mutable`\n on their own.\n","sig":null,"attributes":[{"value":"/ A mutable pointer. Contexts with a `Mutable` may lower to `Immutable`, then","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":205451,"byte_end":205530,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ re-raise to `Mutable`; contexts with `Immutable` may not raise to `Mutable`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":205531,"byte_end":205610,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ on their own.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":205611,"byte_end":205628,"line_start":22,"line_end":22,"column_start":1,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":1057},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":205821,"byte_end":205827,"line_start":35,"line_end":35,"column_start":12,"column_end":18},"name":"Sealed","qualname":"::mutability::seal::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1058},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"order","qualname":"::order","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","parent":null,"children":[{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1064},{"krate":0,"index":1067},{"krate":0,"index":1070},{"krate":0,"index":1073},{"krate":0,"index":1076},{"krate":0,"index":1079},{"krate":0,"index":5372},{"krate":0,"index":5374},{"krate":0,"index":5376},{"krate":0,"index":5377},{"krate":0,"index":5379},{"krate":0,"index":5381},{"krate":0,"index":5382},{"krate":0,"index":5384},{"krate":0,"index":5387},{"krate":0,"index":5389},{"krate":0,"index":5390},{"krate":0,"index":5392},{"krate":0,"index":1088},{"krate":0,"index":5394},{"krate":0,"index":5396},{"krate":0,"index":5398},{"krate":0,"index":5399},{"krate":0,"index":5401},{"krate":0,"index":5403},{"krate":0,"index":5404},{"krate":0,"index":5406},{"krate":0,"index":5409},{"krate":0,"index":5411},{"krate":0,"index":5412},{"krate":0,"index":5414},{"krate":0,"index":1097},{"krate":0,"index":1106},{"krate":0,"index":1107},{"krate":0,"index":1109},{"krate":0,"index":1111}],"decl_id":null,"docs":" Ordering of bits within register elements.","sig":null,"attributes":[{"value":"* Ordering of bits within register elements.\n\n[`bitvec`] data structures are parametric over any ordering of bits within a\nregister type. The [`BitOrder`] trait translates a cursor position (indicated by\nthe [`BitIdx`] type) to an electrical position (indicated by the [`BitPos`]\ntype) within that register, thereby defining the order of traversal over a\nregister.\n\nImplementors of [`BitOrder`] are required to satisfy a set of requirements on\ntheir transform function, and must have identical behavior to the\ndefault-provided trait functions if they choose to override them for\nperformance. These can all be proven by use of the [`verify`] or\n[`verify_for_type`] functions in the implementor’s test suite.\n\n[`BitOrder`] is a stateless trait, and implementors should be zero-sized types.\n\n[`BitIdx`]: crate::index::BitIdx\n[`BitOrder`]: crate::order::BitOrder\n[`BitPos`]: crate::index::BitPos\n[`bitvec`]: crate\n[`verify`]: crate::order::verify\n[`verify_for_type`]: crate::order::verify_for_type\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205834,"byte_end":206835,"line_start":1,"line_end":23,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":1079},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209190,"byte_end":209198,"line_start":105,"line_end":105,"column_start":18,"column_end":26},"name":"BitOrder","qualname":"::order::BitOrder","value":"BitOrder: 'static","parent":null,"children":[{"krate":0,"index":1080},{"krate":0,"index":1082},{"krate":0,"index":1084}],"decl_id":null,"docs":" An ordering over a register.","sig":null,"attributes":[{"value":"* An ordering over a register.\n\n# Usage\n\n[`bitvec`] structures store and operate on semantic index counters, not\nelectrical bit positions. The [`BitOrder::at`] function takes a semantic\nordering, [`BitIdx`], and produces a corresponding electrical position,\n[`BitPos`].\n\n# Safety\n\nIf your implementation violates any of the requirements on these functions, then\nthe program will become incorrect, and have unspecified behavior. The best-case\noutcome is that operations relying on your implementation will crash the\nprogram; the worst-case is that memory access will silently become corrupt.\n\nYou are responsible for adhering to the requirements of these functions. There\nare verification functions that you can use in your test suite; however, it is\nnot yet possible to prove correctness at compile-time.\n\nThis is an `unsafe trait` to implement because you are responsible for upholding\nthe stated requirements.\n\nThe implementations of `BitOrder` are trusted to drive safe code, and once data\nleaves a `BitOrder` implementation, it is considered safe to use as the basis\nfor interaction with memory.\n\n# Verification\n\nThe [`verify`] and [`verify_for_type`] functions are available for your test\nsuites. They ensure that a `BitOrder` implementation satisfies the requirements\nwhen invoked for a given register type.\n\n# Examples\n\nImplementations are not required to remain contiguous over a register. This\nexample swizzles the high and low halves of each byte, but any translation is\nvalid as long as it satisfies the strict one-to-one requirement of\nindex-to-position.\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":206939,"byte_end":208511,"line_start":36,"line_end":75,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208512,"byte_end":208515,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208516,"byte_end":208527,"line_start":77,"line_end":77,"column_start":1,"column_end":12}},{"value":"/ use bitvec::{","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208528,"byte_end":208545,"line_start":78,"line_end":78,"column_start":1,"column_end":18}},{"value":"/   prelude::BitOrder,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208546,"byte_end":208570,"line_start":79,"line_end":79,"column_start":1,"column_end":25}},{"value":"/   // Additional symbols:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208571,"byte_end":208599,"line_start":80,"line_end":80,"column_start":1,"column_end":29}},{"value":"/   index::{BitIdx, BitPos},","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208600,"byte_end":208630,"line_start":81,"line_end":81,"column_start":1,"column_end":31}},{"value":"/   mem::BitRegister,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208631,"byte_end":208654,"line_start":82,"line_end":82,"column_start":1,"column_end":24}},{"value":"/ };","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208655,"byte_end":208661,"line_start":83,"line_end":83,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208662,"byte_end":208665,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ pub struct HiLo;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208666,"byte_end":208686,"line_start":85,"line_end":85,"column_start":1,"column_end":21}},{"value":"/ unsafe impl BitOrder for HiLo {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208687,"byte_end":208722,"line_start":86,"line_end":86,"column_start":1,"column_end":36}},{"value":"/   fn at<R: BitRegister>(idx: BitIdx<R>) -> BitPos<R> {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208723,"byte_end":208781,"line_start":87,"line_end":87,"column_start":1,"column_end":59}},{"value":"/     BitPos::new(idx.value() ^ 4).unwrap()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208782,"byte_end":208827,"line_start":88,"line_end":88,"column_start":1,"column_end":46}},{"value":"/   }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208828,"byte_end":208835,"line_start":89,"line_end":89,"column_start":1,"column_end":8}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208836,"byte_end":208841,"line_start":90,"line_end":90,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208842,"byte_end":208845,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ #[test]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208846,"byte_end":208857,"line_start":92,"line_end":92,"column_start":1,"column_end":12}},{"value":"/ #[cfg(test)]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208858,"byte_end":208874,"line_start":93,"line_end":93,"column_start":1,"column_end":17}},{"value":"/ fn prove_hilo() {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208875,"byte_end":208896,"line_start":94,"line_end":94,"column_start":1,"column_end":22}},{"value":"/   bitvec::order::verify::<HiLo>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208897,"byte_end":208935,"line_start":95,"line_end":95,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208936,"byte_end":208941,"line_start":96,"line_end":96,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208942,"byte_end":208949,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208950,"byte_end":208953,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ [`BitIdx`]: crate::index::BitIdx","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208954,"byte_end":208990,"line_start":99,"line_end":99,"column_start":1,"column_end":37}},{"value":"/ [`BitOrder::at`]: Self::at","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208991,"byte_end":209021,"line_start":100,"line_end":100,"column_start":1,"column_end":31}},{"value":"/ [`BitPos`]: crate::index::BitPos","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209022,"byte_end":209058,"line_start":101,"line_end":101,"column_start":1,"column_end":37}},{"value":"/ [`bitvec`]: crate","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209059,"byte_end":209080,"line_start":102,"line_end":102,"column_start":1,"column_end":22}},{"value":"/ [`verify`]: crate::order::verify","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209081,"byte_end":209117,"line_start":103,"line_end":103,"column_start":1,"column_end":37}},{"value":"/ [`verify_for_type`]: crate::order::verify_for_type","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209118,"byte_end":209172,"line_start":104,"line_end":104,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":211582,"byte_end":211584,"line_start":169,"line_end":169,"column_start":5,"column_end":7},"name":"at","qualname":"::order::BitOrder::at","value":"pub fn at<R>(BitIdx<R>) -> BitPos<R> where R: BitRegister","parent":{"krate":0,"index":1079},"children":[],"decl_id":null,"docs":" Converts a semantic bit index into an electrical bit position.","sig":null,"attributes":[{"value":"/ Converts a semantic bit index into an electrical bit position.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209211,"byte_end":209277,"line_start":106,"line_end":106,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209279,"byte_end":209282,"line_start":107,"line_end":107,"column_start":2,"column_end":5}},{"value":"/ This function is the basis of the trait, and must adhere to a number of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209284,"byte_end":209359,"line_start":108,"line_end":108,"column_start":2,"column_end":77}},{"value":"/ requirements in order for an implementation to be correct.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209361,"byte_end":209423,"line_start":109,"line_end":109,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209425,"byte_end":209428,"line_start":110,"line_end":110,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209430,"byte_end":209451,"line_start":111,"line_end":111,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209453,"byte_end":209456,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ - `R`: The register type that the index and position govern.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209458,"byte_end":209522,"line_start":113,"line_end":113,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209524,"byte_end":209527,"line_start":114,"line_end":114,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209529,"byte_end":209545,"line_start":115,"line_end":115,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209547,"byte_end":209550,"line_start":116,"line_end":116,"column_start":2,"column_end":5}},{"value":"/ - `index`: The semantic index of a bit within a register `R`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209552,"byte_end":209617,"line_start":117,"line_end":117,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209619,"byte_end":209622,"line_start":118,"line_end":118,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209624,"byte_end":209637,"line_start":119,"line_end":119,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209639,"byte_end":209642,"line_start":120,"line_end":120,"column_start":2,"column_end":5}},{"value":"/ The electrical position of the indexed bit within the register `R`. See","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209644,"byte_end":209719,"line_start":121,"line_end":121,"column_start":2,"column_end":77}},{"value":"/ the [`BitPos`] documentation for what electrical positions are","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209721,"byte_end":209787,"line_start":122,"line_end":122,"column_start":2,"column_end":68}},{"value":"/ considered to mean.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209789,"byte_end":209812,"line_start":123,"line_end":123,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209814,"byte_end":209817,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209819,"byte_end":209837,"line_start":125,"line_end":125,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209839,"byte_end":209842,"line_start":126,"line_end":126,"column_start":2,"column_end":5}},{"value":"/ This function must satisfy the following requirements for all possible","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209844,"byte_end":209918,"line_start":127,"line_end":127,"column_start":2,"column_end":76}},{"value":"/ input and output values, for all possible `R` type parameters:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209920,"byte_end":209986,"line_start":128,"line_end":128,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209988,"byte_end":209991,"line_start":129,"line_end":129,"column_start":2,"column_end":5}},{"value":"/ ## Totality","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209993,"byte_end":210008,"line_start":130,"line_end":130,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210010,"byte_end":210013,"line_start":131,"line_end":131,"column_start":2,"column_end":5}},{"value":"/ This function must be able to accept every input in the range","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210015,"byte_end":210080,"line_start":132,"line_end":132,"column_start":2,"column_end":67}},{"value":"/ [`BitIdx::ZERO`] to [`BitIdx::LAST`], and produce a value in the same","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210082,"byte_end":210155,"line_start":133,"line_end":133,"column_start":2,"column_end":75}},{"value":"/ range as a [`BitPos`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210157,"byte_end":210183,"line_start":134,"line_end":134,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210185,"byte_end":210188,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ ## Bijection","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210190,"byte_end":210206,"line_start":136,"line_end":136,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210208,"byte_end":210211,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ There must be an exactly one-to-one correspondence between input value","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210213,"byte_end":210287,"line_start":138,"line_end":138,"column_start":2,"column_end":76}},{"value":"/ and output value. No input index may choose its output from a set of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210289,"byte_end":210361,"line_start":139,"line_end":139,"column_start":2,"column_end":74}},{"value":"/ more than one position, and no output position may be produced by more","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210363,"byte_end":210437,"line_start":140,"line_end":140,"column_start":2,"column_end":76}},{"value":"/ than one input index.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210439,"byte_end":210464,"line_start":141,"line_end":141,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210466,"byte_end":210469,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ ## Purity","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210471,"byte_end":210484,"line_start":143,"line_end":143,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210486,"byte_end":210489,"line_start":144,"line_end":144,"column_start":2,"column_end":5}},{"value":"/ The translation from index to position must be consistent for the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210491,"byte_end":210560,"line_start":145,"line_end":145,"column_start":2,"column_end":71}},{"value":"/ lifetime of *at least* all data structures in the program. This function","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210562,"byte_end":210638,"line_start":146,"line_end":146,"column_start":2,"column_end":78}},{"value":"/ *may* refer to global state, but that state **must** be immutable while","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210640,"byte_end":210715,"line_start":147,"line_end":147,"column_start":2,"column_end":77}},{"value":"/ any [`bitvec`] data structures exist, and must not be used to violate","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210717,"byte_end":210790,"line_start":148,"line_end":148,"column_start":2,"column_end":75}},{"value":"/ the totality or bijection requirements.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210792,"byte_end":210835,"line_start":149,"line_end":149,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210837,"byte_end":210840,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ ## Output Validity","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210842,"byte_end":210864,"line_start":151,"line_end":151,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210866,"byte_end":210869,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ The produced [`BitPos`] must be within the valid range of that type.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210871,"byte_end":210943,"line_start":153,"line_end":153,"column_start":2,"column_end":74}},{"value":"/ Call sites of this function will not take any steps to constrain or","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210945,"byte_end":211016,"line_start":154,"line_end":154,"column_start":2,"column_end":73}},{"value":"/ check the return value. If you use `unsafe` code to produce an invalid","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":211018,"byte_end":211092,"line_start":155,"line_end":155,"column_start":2,"column_end":76}},{"value":"/ `BitPos`, the program is incorrect, and will likely crash.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":211094,"byte_end":211156,"line_start":156,"line_end":156,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":211158,"byte_end":211161,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":211163,"byte_end":211174,"line_start":158,"line_end":158,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":211176,"byte_end":211179,"line_start":159,"line_end":159,"column_start":2,"column_end":5}},{"value":"/ This function is only ever called with input values in the valid","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":211181,"byte_end":211249,"line_start":160,"line_end":160,"column_start":2,"column_end":70}},{"value":"/ [`BitIdx`] range. Implementors are not required to consider any values","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":211251,"byte_end":211325,"line_start":161,"line_end":161,"column_start":2,"column_end":76}},{"value":"/ outside this range in their function body.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":211327,"byte_end":211373,"line_start":162,"line_end":162,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":211375,"byte_end":211378,"line_start":163,"line_end":163,"column_start":2,"column_end":5}},{"value":"/ [`BitIdx`]: crate::index::BitIdx","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":211380,"byte_end":211416,"line_start":164,"line_end":164,"column_start":2,"column_end":38}},{"value":"/ [`BitIdx::LAST`]: crate::index::BitIdx::LAST","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":211418,"byte_end":211466,"line_start":165,"line_end":165,"column_start":2,"column_end":50}},{"value":"/ [`BitIdx::ZERO`]: crate::index::BitIdx::ZERO","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":211468,"byte_end":211516,"line_start":166,"line_end":166,"column_start":2,"column_end":50}},{"value":"/ [`BitPos`]: crate::index::BitPos","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":211518,"byte_end":211554,"line_start":167,"line_end":167,"column_start":2,"column_end":38}},{"value":"/ [`bitvec`]: crate","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":211556,"byte_end":211577,"line_start":168,"line_end":168,"column_start":2,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212938,"byte_end":212944,"line_start":206,"line_end":206,"column_start":5,"column_end":11},"name":"select","qualname":"::order::BitOrder::select","value":"pub fn select<R>(BitIdx<R>) -> BitSel<R> where R: BitRegister","parent":{"krate":0,"index":1079},"children":[],"decl_id":null,"docs":" Converts a semantic bit index into a one-hot selector mask.","sig":null,"attributes":[{"value":"/ Converts a semantic bit index into a one-hot selector mask.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":211644,"byte_end":211707,"line_start":172,"line_end":172,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":211709,"byte_end":211712,"line_start":173,"line_end":173,"column_start":2,"column_end":5}},{"value":"/ This is an optional function; a default implementation is provided for","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":211714,"byte_end":211788,"line_start":174,"line_end":174,"column_start":2,"column_end":76}},{"value":"/ you. If you choose to override it, your implementation **must** retain","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":211790,"byte_end":211864,"line_start":175,"line_end":175,"column_start":2,"column_end":76}},{"value":"/ the behavior of the default implementation.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":211866,"byte_end":211913,"line_start":176,"line_end":176,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":211915,"byte_end":211918,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ The default implementation calls [`Self::at`] to convert the index into","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":211920,"byte_end":211995,"line_start":178,"line_end":178,"column_start":2,"column_end":77}},{"value":"/ a position, then turns that position into a selector mask with the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":211997,"byte_end":212067,"line_start":179,"line_end":179,"column_start":2,"column_end":72}},{"value":"/ expression `1 << pos`. `BitOrder` implementations may choose to provide","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212069,"byte_end":212144,"line_start":180,"line_end":180,"column_start":2,"column_end":77}},{"value":"/ a faster mask production here, as long as they match this behavior.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212146,"byte_end":212217,"line_start":181,"line_end":181,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212219,"byte_end":212222,"line_start":182,"line_end":182,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212224,"byte_end":212245,"line_start":183,"line_end":183,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212247,"byte_end":212250,"line_start":184,"line_end":184,"column_start":2,"column_end":5}},{"value":"/ - `R`: The register type that the index and selector govern.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212252,"byte_end":212316,"line_start":185,"line_end":185,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212318,"byte_end":212321,"line_start":186,"line_end":186,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212323,"byte_end":212339,"line_start":187,"line_end":187,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212341,"byte_end":212344,"line_start":188,"line_end":188,"column_start":2,"column_end":5}},{"value":"/ - `index`: The semantic index of a bit within a register `R`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212346,"byte_end":212411,"line_start":189,"line_end":189,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212413,"byte_end":212416,"line_start":190,"line_end":190,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212418,"byte_end":212431,"line_start":191,"line_end":191,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212433,"byte_end":212436,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ A one-hot selector mask for the bit indicated by the index value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212438,"byte_end":212507,"line_start":193,"line_end":193,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212509,"byte_end":212512,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212514,"byte_end":212532,"line_start":195,"line_end":195,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212534,"byte_end":212537,"line_start":196,"line_end":196,"column_start":2,"column_end":5}},{"value":"/ A one-hot encoding means that there is exactly one bit set in the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212539,"byte_end":212608,"line_start":197,"line_end":197,"column_start":2,"column_end":71}},{"value":"/ produced value. It must be equivalent to `1 << Self::at::<R>(index)`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212610,"byte_end":212683,"line_start":198,"line_end":198,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212685,"byte_end":212688,"line_start":199,"line_end":199,"column_start":2,"column_end":5}},{"value":"/ As with `at`, this function must produce a unique mapping from each","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212690,"byte_end":212761,"line_start":200,"line_end":200,"column_start":2,"column_end":73}},{"value":"/ legal index in the [`BitIdx`] domain to a one-hot value of `R`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212763,"byte_end":212830,"line_start":201,"line_end":201,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212832,"byte_end":212835,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ [`BitIdx`]: crate::index::BitIdx","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212837,"byte_end":212873,"line_start":203,"line_end":203,"column_start":2,"column_end":38}},{"value":"/ [`Self::at`]: Self::at","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212875,"byte_end":212901,"line_start":204,"line_end":204,"column_start":2,"column_end":28}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212903,"byte_end":212933,"line_start":205,"line_end":205,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213973,"byte_end":213977,"line_start":243,"line_end":243,"column_start":5,"column_end":9},"name":"mask","qualname":"::order::BitOrder::mask","value":"pub fn mask<R, impl Into<Option<BitIdx<R>>>: Into<Option<BitIdx<R>>>,\n            impl Into<Option<BitTail<R>>>: Into<Option<BitTail<R>>>>(impl Into<Option<BitIdx<R>>>,\n                                                                     impl Into<Option<BitTail<R>>>)\n-> BitMask<R> where R: BitRegister","parent":{"krate":0,"index":1079},"children":[],"decl_id":null,"docs":" Constructs a multiple-bit selector mask for batched operations on a\n register `R`.","sig":null,"attributes":[{"value":"/ Constructs a multiple-bit selector mask for batched operations on a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213040,"byte_end":213111,"line_start":211,"line_end":211,"column_start":2,"column_end":73}},{"value":"/ register `R`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213113,"byte_end":213130,"line_start":212,"line_end":212,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213132,"byte_end":213135,"line_start":213,"line_end":213,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function traverses the index range,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213137,"byte_end":213211,"line_start":214,"line_end":214,"column_start":2,"column_end":76}},{"value":"/ converting each index into a single-bit selector with [`Self::select`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213213,"byte_end":213287,"line_start":215,"line_end":215,"column_start":2,"column_end":76}},{"value":"/ and accumulating into a combined register value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213289,"byte_end":213341,"line_start":216,"line_end":216,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213343,"byte_end":213346,"line_start":217,"line_end":217,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213348,"byte_end":213369,"line_start":218,"line_end":218,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213371,"byte_end":213374,"line_start":219,"line_end":219,"column_start":2,"column_end":5}},{"value":"/ - `R`: The register type for which the mask is built.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213376,"byte_end":213433,"line_start":220,"line_end":220,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213435,"byte_end":213438,"line_start":221,"line_end":221,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213440,"byte_end":213456,"line_start":222,"line_end":222,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213458,"byte_end":213461,"line_start":223,"line_end":223,"column_start":2,"column_end":5}},{"value":"/ - `from`: The inclusive starting index for the mask.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213463,"byte_end":213519,"line_start":224,"line_end":224,"column_start":2,"column_end":58}},{"value":"/ - `upto`: The exclusive ending index for the mask.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213521,"byte_end":213575,"line_start":225,"line_end":225,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213577,"byte_end":213580,"line_start":226,"line_end":226,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213582,"byte_end":213595,"line_start":227,"line_end":227,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213597,"byte_end":213600,"line_start":228,"line_end":228,"column_start":2,"column_end":5}},{"value":"/ A bit-mask with all bits corresponding to the input index range set high","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213602,"byte_end":213678,"line_start":229,"line_end":229,"column_start":2,"column_end":78}},{"value":"/ and all others set low.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213680,"byte_end":213707,"line_start":230,"line_end":230,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213709,"byte_end":213712,"line_start":231,"line_end":231,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213714,"byte_end":213732,"line_start":232,"line_end":232,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213734,"byte_end":213737,"line_start":233,"line_end":233,"column_start":2,"column_end":5}},{"value":"/ This function must always be equivalent to this expression:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213739,"byte_end":213802,"line_start":234,"line_end":234,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213804,"byte_end":213807,"line_start":235,"line_end":235,"column_start":2,"column_end":5}},{"value":"/ ```rust,ignore","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213809,"byte_end":213827,"line_start":236,"line_end":236,"column_start":2,"column_end":20}},{"value":"/ (from .. upto)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213829,"byte_end":213847,"line_start":237,"line_end":237,"column_start":2,"column_end":20}},{"value":"/   .map(Self::select::<R>)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213849,"byte_end":213878,"line_start":238,"line_end":238,"column_start":2,"column_end":31}},{"value":"/   .fold(0, |mask, sel| mask | sel)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213880,"byte_end":213918,"line_start":239,"line_end":239,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213920,"byte_end":213927,"line_start":240,"line_end":240,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213929,"byte_end":213932,"line_start":241,"line_end":241,"column_start":2,"column_end":5}},{"value":"/ [`Self::select`]: Self::select","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213934,"byte_end":213968,"line_start":242,"line_end":242,"column_start":2,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":5372},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":214568,"byte_end":214572,"line_start":262,"line_end":262,"column_start":12,"column_end":16},"name":"Lsb0","qualname":"::order::Lsb0","value":"","parent":null,"children":[],"decl_id":null,"docs":" Traverses a register from the least significant bit to the most significant.\n","sig":null,"attributes":[{"value":"/ Traverses a register from the least significant bit to the most significant.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":214399,"byte_end":214479,"line_start":260,"line_end":260,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":5394},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":215779,"byte_end":215783,"line_start":305,"line_end":305,"column_start":12,"column_end":16},"name":"Msb0","qualname":"::order::Msb0","value":"","parent":null,"children":[],"decl_id":null,"docs":" Traverses a register from the most significant bit to the least significant.\n","sig":null,"attributes":[{"value":"/ Traverses a register from the most significant bit to the least significant.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":215610,"byte_end":215690,"line_start":303,"line_end":303,"column_start":1,"column_end":81}}]},{"kind":"Function","id":{"krate":0,"index":1109},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":218516,"byte_end":218522,"line_start":401,"line_end":401,"column_start":8,"column_end":14},"name":"verify","qualname":"::order::verify","value":"pub fn verify<O>(bool) where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Verifies a [`BitOrder`] implementation’s adherence to the stated rules.","sig":null,"attributes":[{"value":"* Verifies a [`BitOrder`] implementation’s adherence to the stated rules.\n\nThis function checks some [`BitOrder`] implementation’s behavior on each of the\n[`BitRegister`] types it must handle, and reports any violation of the rules\nthat it detects.\n\n# Type Parameters\n\n- `O`: The [`BitOrder`] implementation to test.\n\n# Parameters\n\n- `verbose`: Sets whether the test should print diagnostic information to\n  `stdout`.\n\n# Panics\n\nThis panics if it detects any violation of the [`BitOrder`] implementation rules\nfor `O`.\n\n[`BitOrder`]: crate::order::BitOrder\n[`BitRegister`]: crate::mem::BitRegister\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":217901,"byte_end":218508,"line_start":378,"line_end":400,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":1111},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":219660,"byte_end":219675,"line_start":439,"line_end":439,"column_start":8,"column_end":23},"name":"verify_for_type","qualname":"::order::verify_for_type","value":"pub fn verify_for_type<O, R>(bool) where O: BitOrder, R: BitRegister","parent":null,"children":[],"decl_id":null,"docs":" Verifies a [`BitOrder`] implementation’s adherence to the stated rules, for\none register type.","sig":null,"attributes":[{"value":"* Verifies a [`BitOrder`] implementation’s adherence to the stated rules, for\none register type.\n\nThis function checks some [`BitOrder`] implementation against only one of the\n[`BitRegister`] types that it will encounter. This is useful if you are\nimplementing an ordering that only needs to be concerned with a subset of the\ntypes, and you know that you will never use it with the types it does not\nsupport.\n\n# Type Parameters\n\n- `O`: The [`BitOrder`] implementation to test.\n- `R`: The [`BitRegister`] type for which to test `O`.\n\n# Parameters\n\n- `verbose`: Sets whether the test should print diagnostic information to\n  `stdout`.\n\n# Panics\n\nThis panics if it detects any violation of the [`BitOrder`] implementation rules\nfor the combination of input types and index values.\n\n[`BitOrder`]: crate::order::BitOrder\n[`BitRegister`]: crate::mem::BitRegister\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":218788,"byte_end":219652,"line_start":412,"line_end":438,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":1117},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","parent":null,"children":[{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1122},{"krate":0,"index":1125},{"krate":0,"index":1128},{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1135},{"krate":0,"index":1136},{"krate":0,"index":1138},{"krate":0,"index":1139},{"krate":0,"index":1141},{"krate":0,"index":1142},{"krate":0,"index":1144},{"krate":0,"index":1145},{"krate":0,"index":1148},{"krate":0,"index":1151},{"krate":0,"index":1154},{"krate":0,"index":1157},{"krate":0,"index":1160},{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1167},{"krate":0,"index":1170},{"krate":0,"index":1173}],"decl_id":null,"docs":" [`bitvec`] symbol export.","sig":null,"attributes":[{"value":"* [`bitvec`] symbol export.\n\nThis module collects the general public API into a single spot for inclusion, as\n`use bitvec::prelude::*;`, without polluting the root namespace of the crate.\n\n[`bitvec`]: crate\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":223083,"byte_end":223295,"line_start":1,"line_end":7,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":1176},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ptr","qualname":"::ptr","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","parent":null,"children":[{"krate":0,"index":1177},{"krate":0,"index":1178},{"krate":0,"index":1181},{"krate":0,"index":1184},{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1191},{"krate":0,"index":1194},{"krate":0,"index":1351},{"krate":0,"index":1545},{"krate":0,"index":1697},{"krate":0,"index":1961},{"krate":0,"index":2158},{"krate":0,"index":2161},{"krate":0,"index":2162},{"krate":0,"index":2163},{"krate":0,"index":2164},{"krate":0,"index":2166},{"krate":0,"index":2167},{"krate":0,"index":2169},{"krate":0,"index":2170},{"krate":0,"index":2171},{"krate":0,"index":2174},{"krate":0,"index":2177},{"krate":0,"index":2180},{"krate":0,"index":2183},{"krate":0,"index":2184},{"krate":0,"index":2187},{"krate":0,"index":2190},{"krate":0,"index":2193},{"krate":0,"index":2198},{"krate":0,"index":2203},{"krate":0,"index":2207},{"krate":0,"index":2211},{"krate":0,"index":2214},{"krate":0,"index":2217},{"krate":0,"index":2220},{"krate":0,"index":2223},{"krate":0,"index":2226},{"krate":0,"index":2231},{"krate":0,"index":2236},{"krate":0,"index":2239}],"decl_id":null,"docs":" Mirror of the [`core::ptr`] module and `bitvec`-specific pointer structures.","sig":null,"attributes":[{"value":"* Mirror of the [`core::ptr`] module and `bitvec`-specific pointer structures.\n\n# Types\n\nAs `bitvec` is not the standard library, it does not have the freedom to use\nlanguage builtins such as actual pointers. Instead, `bitvec` uses its own\nanalagous structures:\n\n- [`BitPtr<M, O, T>`]: This represents a pointer to a single bit, and is vaguely\n  similar to `*const bool`, `*mut bool`, and `NonNull<bool>`. It consists of a\n  (non-null, well-aligned) pointer to a `T` memory element and a bit-index\n  within that element. It uses the `O` ordering implementation to access the\n  selected bit, and uses `M` to determine whether it has write permissions to\n  the location.\n- [`BitPtrRange<M, O, T>`]: This is equivalent to `Range<BitPtr<M, O, T>>`. It\n  exists because [`Range`] has some associated types that are still unstable to\n  implement for its type parameters. It is also smaller than the `Range` would\n  be, because it can take advantage of layout optimizations.\n- [`BitRef<M, O, T>`]: This is a proxy reference type, equivalent to the C++\n  [`bitset<N>::reference`]. It implements `Deref` and, if `M` is `Mut`,\n  `DerefMut` to bool, so that it can be read from and written to as if it were\n  an `&bool` or `&mut bool`. It is **not** a referent type, and cannot be used\n  in APIs that expect actual references. It is implemented under the hood as a\n  `BitPtr` with a `bool` cached in one of the padding bytes.\n- `BitSpan<M, O, T>`: This is a crate-internal type that encodes a `BitPtr` and\n  a length counter into a two-word structure that can be transmuted into\n  `*BitSlice<O, T>`. This type enforces the non-null/well-aligned rule, and is\n  the source of the limitation that `bitvec` region types can only address ⅛ of\n  a `usize`, rather than the ½ limitation of the standard library collections.\n\n  This type is not public API; it will only ever appear in its transmuted form,\n  `*BitSlice<O, T>`. Users are **not permitted** to use any of the [`core::ptr`]\n  or [`pointer`] functions to view or modify `*BitSlice` pointers, or their\n  referent locations, in any way.\n\n# Safety\n\nThe functions in this module take `bitvec` equivalents to raw pointers as their\narguments and read from or write to them. For this to be safe, these pointers\nmust be *valid*. Whether a pointer is valid depends on the operation it is used\nfor (reading or writing), and the extent of the memory that is accessed (i.e.\nhow many bits are read/written in and how many underlying memory elements are\naccessed). Most functions use [`BitPtr`] to access only a single bit, in which\ncase the documentation omits the size and implicitly assumes it to be one bit in\none `T` element.\n\nThe Rust rules about pointer validity are always in effect; `bitvec` refines\nthem to a bit-precision granularity, but must still respect the byte-level and\nelement-level rules.\n\n# Crate-Specific Restrictions\n\n`bitvec` uses an internal encoding scheme to make bit-region pointers fit into a\nstandard Rust slice pointer. This encoding requires that the base element\naddress of a bit-pointer be *non-null* and *well-aligned* for all pointers that\nare used in the encoding scheme.\n\nThe `bitvec` structure used to emulate a pointer to a single bit is larger than\none processor word, and thus cannot be encoded to fit in a `*const Bit`. To ease\ninternal complexity, these restrictions are universal in `bitvec`: the crate as\na whole refuses to operate on null pointers, or pointers that are not aligned to\ntheir referent type, even if your usage never touches the span encoding.\n\nAs such, the pointer types in this module can essentially only be sourced from\nreferences, not from arbitrary address values. While this module attempts to\nrely on actual Rust references as much as possible, and instead use only the\nordinary [`core::ptr`] and [`pointer`] functions. This is not always possible;\nin particular, Rust does not offer stable atomic intrinsics, and instead only\nallows them to be used on references.\n\n[`BitPtr`]: crate::ptr::BitPtr\n[`BitPtr<M, O, T>`]: crate::ptr::BitPtr\n[`BitPtrRange<M, O, T>`]: crate::ptr::BitPtrRange\n[`BitRef<M, O, T>`]: crate::ptr::BitRef\n[`BitSpan<M, O, T>`]: crate::ptr::BitSpan\n[`Range`]: core::ops::Range\n[`bitset<N>::reference`]: https://en.cppreference.com/w/cpp/utility/bitset/reference\n[`core::ptr`]: core::ptr\n[`pointer`]: https://doc.rust-lang.org/std/primitive.pointer.html\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223619,"byte_end":227998,"line_start":1,"line_end":80,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1265},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":245665,"byte_end":245672,"line_start":54,"line_end":54,"column_start":12,"column_end":19},"name":"Address","qualname":"::ptr::address::Address","value":"Address {  }","parent":null,"children":[{"krate":0,"index":1268},{"krate":0,"index":1269}],"decl_id":null,"docs":" A non-null, well-aligned, `BitStore` element address.","sig":null,"attributes":[{"value":"* A non-null, well-aligned, `BitStore` element address.\n\nThis adds non-null and well-aligned requirements to memory addresses so that the\ncrate can rely on these invariants throughout its implementation. The type is\npublic API, but opaque, and only constructible through conversions of pointer\nand reference values.\n\n# Type Parameters\n\n- `M`: The mutability permissions of the source pointer.\n- `T`: The referent type of the source pointer.\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":245186,"byte_end":245632,"line_start":41,"line_end":52,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":245633,"byte_end":245653,"line_start":53,"line_end":53,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":248716,"byte_end":248724,"line_start":181,"line_end":181,"column_start":9,"column_end":17},"name":"to_const","qualname":"<Address<M, T>>::to_const","value":"pub fn to_const(Self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Gets the address as a read-only pointer.\n","sig":null,"attributes":[{"value":"/ Gets the address as a read-only pointer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":248644,"byte_end":248688,"line_start":179,"line_end":179,"column_start":2,"column_end":46}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":248690,"byte_end":248707,"line_start":180,"line_end":180,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1288},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":249454,"byte_end":249460,"line_start":212,"line_end":212,"column_start":9,"column_end":15},"name":"to_mut","qualname":"<Address<Mut, T>>::to_mut","value":"pub fn to_mut(Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Gets the address as a write-capable pointer.\n","sig":null,"attributes":[{"value":"/ Gets the address as a write-capable pointer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":249329,"byte_end":249377,"line_start":209,"line_end":209,"column_start":2,"column_end":50}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":249379,"byte_end":249396,"line_start":210,"line_end":210,"column_start":2,"column_end":19}},{"value":"allow(clippy :: clippy :: wrong_self_convention)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":249398,"byte_end":249445,"line_start":211,"line_end":211,"column_start":2,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5418},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":252707,"byte_end":252711,"line_start":387,"line_end":387,"column_start":2,"column_end":6},"name":"Null","qualname":"::ptr::address::AddressError::Null","value":"AddressError::Null","parent":{"krate":0,"index":5416},"children":[],"decl_id":null,"docs":" `Address` cannot use the null pointer.\n","sig":null,"attributes":[{"value":"/ `Address` cannot use the null pointer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":252663,"byte_end":252705,"line_start":386,"line_end":386,"column_start":2,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5420},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":252777,"byte_end":252787,"line_start":389,"line_end":389,"column_start":2,"column_end":12},"name":"Misaligned","qualname":"::ptr::address::AddressError::Misaligned","value":"AddressError::Misaligned(*const T)","parent":{"krate":0,"index":5416},"children":[],"decl_id":null,"docs":" `Address` cannot be misaligned for the referent type `T`.\n","sig":null,"attributes":[{"value":"/ `Address` cannot be misaligned for the referent type `T`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":252714,"byte_end":252775,"line_start":388,"line_end":388,"column_start":2,"column_end":63}}]},{"kind":"Enum","id":{"krate":0,"index":5416},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":252626,"byte_end":252638,"line_start":383,"line_end":383,"column_start":10,"column_end":22},"name":"AddressError","qualname":"::ptr::address::AddressError","value":"pub enum AddressError<T> where T: BitStore { Null, Misaligned(*const T), }","parent":null,"children":[{"krate":0,"index":5418},{"krate":0,"index":5420}],"decl_id":null,"docs":" An error produced when consuming `BitStore` memory addresses.\n","sig":null,"attributes":[{"value":"/ An error produced when consuming `BitStore` memory addresses.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":252483,"byte_end":252548,"line_start":381,"line_end":381,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1425},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":256506,"byte_end":256512,"line_start":112,"line_end":112,"column_start":12,"column_end":18},"name":"BitRef","qualname":"::ptr::proxy::BitRef","value":"BitRef {  }","parent":null,"children":[{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1432},{"krate":0,"index":1434}],"decl_id":null,"docs":" A proxy reference, equivalent to C++ [`std::bitset<N>::reference`].","sig":null,"attributes":[{"value":"* A proxy reference, equivalent to C++ [`std::bitset<N>::reference`].\n\nThis type wraps a `BitPtr` and caches a `bool` in a padding byte. It is then\nable to freely produce references to the cached bool, and commits the cache back\nto the referent bit location on `drop`.\n\n# Lifetimes\n\n- `'a`: The lifetime of the source `&'a mut BitSlice` that created the `BitRef`.\n\n# Type Parameters\n\n- `M`: The write permission of the reference. When this is `Const`, the\n  `DerefMut` implementation is removed, forbidding the proxy from writing back\n  to memory.\n- `O`: The ordering used to address a bit in memory.\n- `T`: The storage type containing the referent bit.\n\n# Quirks\n\nBecause this type has both a lifetime and a destructor, it can introduce an\nuncommon error condition in Rust. When an expression that produces this type is\nin the final expression of a block, including if that expression is used as a\ncondition in a `match`, `if let`, or `if`, then the compiler will attempt to\nextend the drop scope of this type to the outside of the block. This causes a\nlifetime mismatch error if the source region from which this proxy is produced\ngoes out of scope at the end of the block.\n\nIf you get a compiler error that this type causes something to be dropped while\nborrowed, you can end the borrow by putting any expression-ending syntax element\nafter the offending expression that produces this type, including a semicolon or\nan item definition.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet bits = bits![mut 0; 2];\n\nlet (left, right) = bits.split_at_mut(1);\nlet mut first = left.get_mut(0).unwrap();\nlet second = right.get_mut(0).unwrap();\n\n// Referential behavior\n*first = true;\n// Direct write\nsecond.set(true);\n\ndrop(first); // it’s not a reference!\nassert_eq!(bits, bits![1; 2]);\n```\n\n[`std::bitset<N>::reference`]: https://en.cppreference.com/w/cpp/utility/bitset/reference\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":254329,"byte_end":256213,"line_start":50,"line_end":104,"column_start":1,"column_end":4}},{"value":"repr(C, align(8))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":256382,"byte_end":256399,"line_start":107,"line_end":107,"column_start":41,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1439},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257424,"byte_end":257435,"line_start":152,"line_end":152,"column_start":16,"column_end":27},"name":"from_bitptr","qualname":"<BitRef>::from_bitptr","value":"pub unsafe fn from_bitptr(BitPtr<M, O, T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a bit-pointer into a proxy bit-reference.","sig":null,"attributes":[{"value":"/ Converts a bit-pointer into a proxy bit-reference.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":256965,"byte_end":257019,"line_start":134,"line_end":134,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257021,"byte_end":257024,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ The conversion reads from the pointer, then stores the `bool` in a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257026,"byte_end":257096,"line_start":136,"line_end":136,"column_start":2,"column_end":72}},{"value":"/ padding byte.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257098,"byte_end":257115,"line_start":137,"line_end":137,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257117,"byte_end":257120,"line_start":138,"line_end":138,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257122,"byte_end":257138,"line_start":139,"line_end":139,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257140,"byte_end":257143,"line_start":140,"line_end":140,"column_start":2,"column_end":5}},{"value":"/ - `bitptr`: A bit-pointer to turn into a bit-reference.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257145,"byte_end":257204,"line_start":141,"line_end":141,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257206,"byte_end":257209,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257211,"byte_end":257224,"line_start":143,"line_end":143,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257226,"byte_end":257229,"line_start":144,"line_end":144,"column_start":2,"column_end":5}},{"value":"/ A bit-reference pointing at `bitptr`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257231,"byte_end":257272,"line_start":145,"line_end":145,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257274,"byte_end":257277,"line_start":146,"line_end":146,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257279,"byte_end":257291,"line_start":147,"line_end":147,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257293,"byte_end":257296,"line_start":148,"line_end":148,"column_start":2,"column_end":5}},{"value":"/ The `bitptr` must address a location that is valid for reads and, if `M`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257298,"byte_end":257374,"line_start":149,"line_end":149,"column_start":2,"column_end":78}},{"value":"/ is `Mut`, writes.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257376,"byte_end":257397,"line_start":150,"line_end":150,"column_start":2,"column_end":23}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257399,"byte_end":257408,"line_start":151,"line_end":151,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1443},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258343,"byte_end":258354,"line_start":190,"line_end":190,"column_start":9,"column_end":20},"name":"into_bitptr","qualname":"<BitRef>::into_bitptr","value":"pub fn into_bitptr(Self) -> BitPtr<M, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Decays the bit-reference to an ordinary bit-pointer.","sig":null,"attributes":[{"value":"/ Decays the bit-reference to an ordinary bit-pointer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257981,"byte_end":258037,"line_start":177,"line_end":177,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258039,"byte_end":258042,"line_start":178,"line_end":178,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258044,"byte_end":258060,"line_start":179,"line_end":179,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258062,"byte_end":258065,"line_start":180,"line_end":180,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258067,"byte_end":258079,"line_start":181,"line_end":181,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258081,"byte_end":258084,"line_start":182,"line_end":182,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258086,"byte_end":258099,"line_start":183,"line_end":183,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258101,"byte_end":258104,"line_start":184,"line_end":184,"column_start":2,"column_end":5}},{"value":"/ The interior bit-pointer, without the associated cache. If this was a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258106,"byte_end":258179,"line_start":185,"line_end":185,"column_start":2,"column_end":75}},{"value":"/ write-capable pointer, then the cached bit is committed to memory before","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258181,"byte_end":258257,"line_start":186,"line_end":186,"column_start":2,"column_end":78}},{"value":"/ this method returns.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258259,"byte_end":258283,"line_start":187,"line_end":187,"column_start":2,"column_end":26}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258285,"byte_end":258302,"line_start":188,"line_end":188,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258304,"byte_end":258334,"line_start":189,"line_end":189,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1447},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258670,"byte_end":258677,"line_start":207,"line_end":207,"column_start":9,"column_end":16},"name":"replace","qualname":"<BitRef>::replace","value":"pub fn replace(&mut Self, bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Moves `src` into the referenced bit, returning the previous value.","sig":null,"attributes":[{"value":"/ Moves `src` into the referenced bit, returning the previous value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258472,"byte_end":258542,"line_start":200,"line_end":200,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258544,"byte_end":258547,"line_start":201,"line_end":201,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258549,"byte_end":258563,"line_start":202,"line_end":202,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258565,"byte_end":258568,"line_start":203,"line_end":203,"column_start":2,"column_end":5}},{"value":"/ [`mem::replace`](core::mem::replace)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258570,"byte_end":258610,"line_start":204,"line_end":204,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258612,"byte_end":258629,"line_start":205,"line_end":205,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258631,"byte_end":258661,"line_start":206,"line_end":206,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1448},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258960,"byte_end":258964,"line_start":219,"line_end":219,"column_start":9,"column_end":13},"name":"swap","qualname":"<BitRef>::swap","value":"pub fn swap<O2, T2>(&mut Self, &mut BitRef<, Mut, O2, T2>) where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Swaps the values at two mutable locations, without deïnitializing either\n one.","sig":null,"attributes":[{"value":"/ Swaps the values at two mutable locations, without deïnitializing either","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258751,"byte_end":258828,"line_start":211,"line_end":211,"column_start":2,"column_end":78}},{"value":"/ one.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258830,"byte_end":258838,"line_start":212,"line_end":212,"column_start":2,"column_end":10}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258840,"byte_end":258843,"line_start":213,"line_end":213,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258845,"byte_end":258859,"line_start":214,"line_end":214,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258861,"byte_end":258864,"line_start":215,"line_end":215,"column_start":2,"column_end":5}},{"value":"/ [`mem::swap`](core::mem::swap)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258866,"byte_end":258900,"line_start":216,"line_end":216,"column_start":2,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258902,"byte_end":258919,"line_start":217,"line_end":217,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258921,"byte_end":258951,"line_start":218,"line_end":218,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1451},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":259757,"byte_end":259760,"line_start":242,"line_end":242,"column_start":9,"column_end":12},"name":"set","qualname":"<BitRef>::set","value":"pub fn set(Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a bit into the proxied location without an intermediate copy.","sig":null,"attributes":[{"value":"/ Writes a bit into the proxied location without an intermediate copy.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":259109,"byte_end":259181,"line_start":227,"line_end":227,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":259183,"byte_end":259186,"line_start":228,"line_end":228,"column_start":2,"column_end":5}},{"value":"/ This function writes `value` directly into the proxied location, and","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":259188,"byte_end":259260,"line_start":229,"line_end":229,"column_start":2,"column_end":74}},{"value":"/ does not store `value` in the proxy’s internal cache. This should be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":259262,"byte_end":259336,"line_start":230,"line_end":230,"column_start":2,"column_end":74}},{"value":"/ equivalent to the behavior seen when using ordinary [`DerefMut`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":259338,"byte_end":259406,"line_start":231,"line_end":231,"column_start":2,"column_end":70}},{"value":"/ proxying, but the latter depends on compiler optimization.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":259408,"byte_end":259470,"line_start":232,"line_end":232,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":259472,"byte_end":259475,"line_start":233,"line_end":233,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":259477,"byte_end":259493,"line_start":234,"line_end":234,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":259495,"byte_end":259498,"line_start":235,"line_end":235,"column_start":2,"column_end":5}},{"value":"/ - `self`: This destroys the proxy, as it becomes invalid when writing","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":259500,"byte_end":259573,"line_start":236,"line_end":236,"column_start":2,"column_end":75}},{"value":"/   directly to the location without updating the cache.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":259575,"byte_end":259633,"line_start":237,"line_end":237,"column_start":2,"column_end":60}},{"value":"/ - `value`: The new bit to write into the proxied slot.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":259635,"byte_end":259693,"line_start":238,"line_end":238,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":259695,"byte_end":259698,"line_start":239,"line_end":239,"column_start":2,"column_end":5}},{"value":"/ [`DerefMut`]: core::ops::DerefMut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":259700,"byte_end":259737,"line_start":240,"line_end":240,"column_start":2,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":259739,"byte_end":259748,"line_start":241,"line_end":241,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1604},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268066,"byte_end":268077,"line_start":67,"line_end":67,"column_start":12,"column_end":23},"name":"BitPtrRange","qualname":"::ptr::range::BitPtrRange","value":"BitPtrRange { start, end }","parent":null,"children":[{"krate":0,"index":1608},{"krate":0,"index":1609}],"decl_id":null,"docs":" Equivalent to `Range<BitPtr<M, O, T>>`.","sig":null,"attributes":[{"value":"* Equivalent to `Range<BitPtr<M, O, T>>`.\n\nAs with `Range`, this is a half-open set: the starting pointer is included in\nthe set of live addresses, while the ending pointer is one-past-the-end of live\naddresses, and is not usable.\n\nThis structure exists because `Range` does not permit foreign implementations of\nits internal traits.\n\n# Original\n\n[`Range<*bool>`](core::ops::Range)\n\n# API Differences\n\nThis cannot be constructed directly from the `..` syntax, though a `From`\nimplementation is provided.\n\n# Type Parameters\n\n- `M`: The write permissions of the pointers this range produces.\n- `O`: The bit-ordering within a storage element used to access bits.\n- `T`: The storage element type containing the referent bits.\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":267046,"byte_end":267773,"line_start":36,"line_end":59,"column_start":1,"column_end":4}},{"value":"repr(C, align(8))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":267942,"byte_end":267959,"line_start":62,"line_end":62,"column_start":41,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":1608},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268206,"byte_end":268211,"line_start":74,"line_end":74,"column_start":6,"column_end":11},"name":"start","qualname":"::ptr::range::BitPtrRange::start","value":"ptr::single::BitPtr<M, O, T>","parent":{"krate":0,"index":1604},"children":[],"decl_id":null,"docs":" The lower bound of the range (inclusive).\n","sig":null,"attributes":[{"value":"/ The lower bound of the range (inclusive).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268155,"byte_end":268200,"line_start":73,"line_end":73,"column_start":2,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":1609},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268283,"byte_end":268286,"line_start":76,"line_end":76,"column_start":6,"column_end":9},"name":"end","qualname":"::ptr::range::BitPtrRange::end","value":"ptr::single::BitPtr<M, O, T>","parent":{"krate":0,"index":1604},"children":[],"decl_id":null,"docs":" The higher bound of the range (exclusive).\n","sig":null,"attributes":[{"value":"/ The higher bound of the range (exclusive).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268231,"byte_end":268277,"line_start":75,"line_end":75,"column_start":2,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":1614},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268490,"byte_end":268495,"line_start":87,"line_end":87,"column_start":12,"column_end":17},"name":"EMPTY","qualname":"::ptr::range::BitPtrRange::<M, O, T>::EMPTY","value":"Self","parent":{"krate":0,"index":1610},"children":[],"decl_id":null,"docs":" The canonical empty range. All ranges with zero length are equally\n empty.\n","sig":null,"attributes":[{"value":"/ The canonical empty range. All ranges with zero length are equally","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268396,"byte_end":268466,"line_start":85,"line_end":85,"column_start":2,"column_end":72}},{"value":"/ empty.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268468,"byte_end":268478,"line_start":86,"line_end":86,"column_start":2,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1615},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268685,"byte_end":268694,"line_start":95,"line_end":95,"column_start":9,"column_end":18},"name":"raw_parts","qualname":"<BitPtrRange<M, O, T>>::raw_parts","value":"pub fn raw_parts(&Self) -> (BitPtr<M, O, T>, BitPtr<M, O, T>)","parent":null,"children":[],"decl_id":null,"docs":" Destructures the range back into its start and end pointers.\n","sig":null,"attributes":[{"value":"/ Destructures the range back into its start and end pointers.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268569,"byte_end":268633,"line_start":92,"line_end":92,"column_start":2,"column_end":66}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268635,"byte_end":268644,"line_start":93,"line_end":93,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268646,"byte_end":268676,"line_start":94,"line_end":94,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1616},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268951,"byte_end":268961,"line_start":103,"line_end":103,"column_start":9,"column_end":19},"name":"into_range","qualname":"<BitPtrRange<M, O, T>>::into_range","value":"pub fn into_range(Self) -> Range<BitPtr<M, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Converts the structure into an actual `Range`. The `Range` will have\n limited functionality compared to `self`.\n","sig":null,"attributes":[{"value":"/ Converts the structure into an actual `Range`. The `Range` will have","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268772,"byte_end":268844,"line_start":99,"line_end":99,"column_start":2,"column_end":74}},{"value":"/ limited functionality compared to `self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268846,"byte_end":268891,"line_start":100,"line_end":100,"column_start":2,"column_end":47}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268893,"byte_end":268910,"line_start":101,"line_end":101,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268912,"byte_end":268942,"line_start":102,"line_end":102,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1617},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269523,"byte_end":269531,"line_start":128,"line_end":128,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<BitPtrRange<M, O, T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if the range is empty (the distance between pointers is `0`).","sig":null,"attributes":[{"value":"/ Tests if the range is empty (the distance between pointers is `0`).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269026,"byte_end":269097,"line_start":107,"line_end":107,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269099,"byte_end":269102,"line_start":108,"line_end":108,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269104,"byte_end":269118,"line_start":109,"line_end":109,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269120,"byte_end":269123,"line_start":110,"line_end":110,"column_start":2,"column_end":5}},{"value":"/ [`Range::is_empty`](core::ops::Range::is_empty)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269125,"byte_end":269176,"line_start":111,"line_end":111,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269178,"byte_end":269181,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269183,"byte_end":269197,"line_start":113,"line_end":113,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269199,"byte_end":269202,"line_start":114,"line_end":114,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269204,"byte_end":269215,"line_start":115,"line_end":115,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269217,"byte_end":269244,"line_start":116,"line_end":116,"column_start":2,"column_end":29}},{"value":"/ use bitvec::ptr::BitPtrRange;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269246,"byte_end":269279,"line_start":117,"line_end":117,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269281,"byte_end":269284,"line_start":118,"line_end":118,"column_start":2,"column_end":5}},{"value":"/ let data = 0u8;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269286,"byte_end":269305,"line_start":119,"line_end":119,"column_start":2,"column_end":21}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269307,"byte_end":269359,"line_start":120,"line_end":120,"column_start":2,"column_end":54}},{"value":"/ let mut range = unsafe { ptr.range(1) };","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269361,"byte_end":269405,"line_start":121,"line_end":121,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269407,"byte_end":269410,"line_start":122,"line_end":122,"column_start":2,"column_end":5}},{"value":"/ assert!(!range.is_empty());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269412,"byte_end":269443,"line_start":123,"line_end":123,"column_start":2,"column_end":33}},{"value":"/ range.next();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269445,"byte_end":269462,"line_start":124,"line_end":124,"column_start":2,"column_end":19}},{"value":"/ assert!(range.is_empty());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269464,"byte_end":269494,"line_start":125,"line_end":125,"column_start":2,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269496,"byte_end":269503,"line_start":126,"line_end":126,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269505,"byte_end":269514,"line_start":127,"line_end":127,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1618},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270902,"byte_end":270910,"line_start":175,"line_end":175,"column_start":9,"column_end":17},"name":"contains","qualname":"<BitPtrRange<M, O, T>>::contains","value":"pub fn contains<M2, T2>(&Self, &BitPtr<M2, O, T2>) -> bool where\nM2: Mutability, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the `pointer` is contained in the range.","sig":null,"attributes":[{"value":"/ Returns `true` if the `pointer` is contained in the range.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269579,"byte_end":269641,"line_start":132,"line_end":132,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269643,"byte_end":269646,"line_start":133,"line_end":133,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269648,"byte_end":269662,"line_start":134,"line_end":134,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269664,"byte_end":269667,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ [`Range::contains`](core::ops::Range::contains)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269669,"byte_end":269720,"line_start":136,"line_end":136,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269722,"byte_end":269725,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269727,"byte_end":269748,"line_start":138,"line_end":138,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269750,"byte_end":269753,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ The candidate pointer may differ in mutability permissions and exact","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269755,"byte_end":269827,"line_start":140,"line_end":140,"column_start":2,"column_end":74}},{"value":"/ storage type.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269829,"byte_end":269846,"line_start":141,"line_end":141,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269848,"byte_end":269851,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ If `T2::Mem` is not `T::Mem`, then this always returns `false`. If `T2`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269853,"byte_end":269928,"line_start":143,"line_end":143,"column_start":2,"column_end":77}},{"value":"/ and `T` have the same memory type, but different alias permissions, then","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269930,"byte_end":270006,"line_start":144,"line_end":144,"column_start":2,"column_end":78}},{"value":"/ the comparison can continue.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270008,"byte_end":270040,"line_start":145,"line_end":145,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270042,"byte_end":270045,"line_start":146,"line_end":146,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270047,"byte_end":270061,"line_start":147,"line_end":147,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270063,"byte_end":270066,"line_start":148,"line_end":148,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270068,"byte_end":270079,"line_start":149,"line_end":149,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270081,"byte_end":270108,"line_start":150,"line_end":150,"column_start":2,"column_end":29}},{"value":"/ use bitvec::ptr::BitPtrRange;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270110,"byte_end":270143,"line_start":151,"line_end":151,"column_start":2,"column_end":35}},{"value":"/ use core::cell::Cell;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270145,"byte_end":270170,"line_start":152,"line_end":152,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270172,"byte_end":270175,"line_start":153,"line_end":153,"column_start":2,"column_end":5}},{"value":"/ let data = 0u16;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270177,"byte_end":270197,"line_start":154,"line_end":154,"column_start":2,"column_end":22}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270199,"byte_end":270251,"line_start":155,"line_end":155,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270253,"byte_end":270256,"line_start":156,"line_end":156,"column_start":2,"column_end":5}},{"value":"/ let mut range = unsafe { ptr.range(16) };","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270258,"byte_end":270303,"line_start":157,"line_end":157,"column_start":2,"column_end":47}},{"value":"/ // Reduce the range contents.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270305,"byte_end":270338,"line_start":158,"line_end":158,"column_start":2,"column_end":35}},{"value":"/ range.nth(2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270340,"byte_end":270357,"line_start":159,"line_end":159,"column_start":2,"column_end":19}},{"value":"/ range.nth_back(2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270359,"byte_end":270381,"line_start":160,"line_end":160,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270383,"byte_end":270386,"line_start":161,"line_end":161,"column_start":2,"column_end":5}},{"value":"/ // The start pointer is now excluded, but the interior remains.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270388,"byte_end":270455,"line_start":162,"line_end":162,"column_start":2,"column_end":69}},{"value":"/ assert!(!range.contains(&ptr));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270457,"byte_end":270492,"line_start":163,"line_end":163,"column_start":2,"column_end":37}},{"value":"/ assert!(range.contains(&unsafe { ptr.add(8) }));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270494,"byte_end":270546,"line_start":164,"line_end":164,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270548,"byte_end":270551,"line_start":165,"line_end":165,"column_start":2,"column_end":5}},{"value":"/ // Different base types are always excluded.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270553,"byte_end":270601,"line_start":166,"line_end":166,"column_start":2,"column_end":50}},{"value":"/ let casted = ptr.cast::<u8>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270603,"byte_end":270637,"line_start":167,"line_end":167,"column_start":2,"column_end":36}},{"value":"/ assert!(!range.contains(&unsafe { casted.add(8) }));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270639,"byte_end":270695,"line_start":168,"line_end":168,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270697,"byte_end":270700,"line_start":169,"line_end":169,"column_start":2,"column_end":5}},{"value":"/ // Casting to a different alias model with the same width is valid.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270702,"byte_end":270773,"line_start":170,"line_end":170,"column_start":2,"column_end":73}},{"value":"/ let casted = ptr.cast::<Cell<u16>>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270775,"byte_end":270816,"line_start":171,"line_end":171,"column_start":2,"column_end":43}},{"value":"/ assert!(range.contains(&unsafe { casted.add(8) }));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270818,"byte_end":270873,"line_start":172,"line_end":172,"column_start":2,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270875,"byte_end":270882,"line_start":173,"line_end":173,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270884,"byte_end":270893,"line_start":174,"line_end":174,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1804},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278501,"byte_end":278507,"line_start":106,"line_end":106,"column_start":12,"column_end":18},"name":"BitPtr","qualname":"::ptr::single::BitPtr","value":"BitPtr {  }","parent":null,"children":[{"krate":0,"index":1808},{"krate":0,"index":1809},{"krate":0,"index":1810}],"decl_id":null,"docs":" Pointer to an individual bit in a memory element. Analagous to `*bool`.","sig":null,"attributes":[{"value":"* Pointer to an individual bit in a memory element. Analagous to `*bool`.\n\n# Original\n\n[`*bool`](https://doc.rust-lang.org/std/primitive.pointer.html) and\n[`NonNull<bool>`](core::ptr::NonNull)\n\n# API Differences\n\nThis must be a structure, rather than a raw pointer, for two reasons:\n\n- It is larger than a raw pointer.\n- Raw pointers are not `#[fundamental]` and cannot have foreign implementations.\n\nAdditionally, rather than create two structures to map to `*const bool` and\n`*mut bool`, respectively, this takes mutability as a type parameter.\n\nBecause the encoded span pointer requires that memory addresses are well\naligned, this type also imposes the alignment requirement and refuses\nconstruction for misaligned element addresses. While this type is used in the\nAPI equivalent of ordinary raw pointers, it is restricted in value to only be\n*references* to memory elements.\n\n# ABI Differences\n\nThis has alignment `1`, rather than an alignment to the processor word. This is\nnecessary for some crate-internal optimizations.\n\n# Type Parameters\n\n- `M`: Marks whether the pointer permits mutation of memory through it.\n- `O`: The ordering of bits within a memory element.\n- `T`: A memory type used to select both the register size and the access\n  behavior when performing loads/stores.\n\n# Usage\n\nThis structure is used as the [`bitvec`] equivalent to `*bool`. It is used in\nall raw-pointer APIs, and provides behavior to emulate raw pointers. It cannot\nbe directly dereferenced, as it is not a pointer; it can only be transformed\nback into higher referential types, or used in [`bitvec::ptr`] free functions.\n\nThese pointers can never be null, or misaligned.\n\n[`bitvec`]: crate\n[`bitvec::ptr`]: crate::ptr\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":276756,"byte_end":278470,"line_start":58,"line_end":104,"column_start":1,"column_end":4}},{"value":"repr(C, packed)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278471,"byte_end":278489,"line_start":105,"line_end":105,"column_start":1,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":1815},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279010,"byte_end":279018,"line_start":128,"line_end":128,"column_start":12,"column_end":20},"name":"DANGLING","qualname":"::ptr::single::BitPtr::<M, O, T>::DANGLING","value":"Self","parent":{"krate":0,"index":1811},"children":[],"decl_id":null,"docs":" The dangling pointer. This selects the starting bit of the `T` dangling\n address.\n","sig":null,"attributes":[{"value":"/ The dangling pointer. This selects the starting bit of the `T` dangling","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278909,"byte_end":278984,"line_start":126,"line_end":126,"column_start":2,"column_end":77}},{"value":"/ address.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278986,"byte_end":278998,"line_start":127,"line_end":127,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1817},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280361,"byte_end":280368,"line_start":169,"line_end":169,"column_start":9,"column_end":16},"name":"try_new","qualname":"<BitPtr<M, O, T>>::try_new","value":"pub fn try_new<A>(A, u8) -> Result<Self, BitPtrError<T>> where\nA: TryInto<Address<M, T>>, BitPtrError<T>: From<A::Error>","parent":null,"children":[],"decl_id":null,"docs":" Tries to construct a `BitPtr` from a memory location and a bit index.","sig":null,"attributes":[{"value":"/ Tries to construct a `BitPtr` from a memory location and a bit index.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279521,"byte_end":279594,"line_start":145,"line_end":145,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279596,"byte_end":279599,"line_start":146,"line_end":146,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279601,"byte_end":279622,"line_start":147,"line_end":147,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279624,"byte_end":279627,"line_start":148,"line_end":148,"column_start":2,"column_end":5}},{"value":"/ - `A`: This accepts anything that may be used as a memory address.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279629,"byte_end":279699,"line_start":149,"line_end":149,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279701,"byte_end":279704,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279706,"byte_end":279722,"line_start":151,"line_end":151,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279724,"byte_end":279727,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ - `addr`: The memory address to use in the `BitPtr`. If this value","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279729,"byte_end":279799,"line_start":153,"line_end":153,"column_start":2,"column_end":72}},{"value":"/   violates the [`Address`] rules, then its conversion error will be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279801,"byte_end":279872,"line_start":154,"line_end":154,"column_start":2,"column_end":73}},{"value":"/   returned.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279874,"byte_end":279889,"line_start":155,"line_end":155,"column_start":2,"column_end":17}},{"value":"/ - `head`: The index of the bit in `*addr` that this pointer selects. If","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279891,"byte_end":279966,"line_start":156,"line_end":156,"column_start":2,"column_end":77}},{"value":"/   this value violates the [`BitIdx`] rules, then its conversion error","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279968,"byte_end":280041,"line_start":157,"line_end":157,"column_start":2,"column_end":75}},{"value":"/   will be returned.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280043,"byte_end":280066,"line_start":158,"line_end":158,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280068,"byte_end":280071,"line_start":159,"line_end":159,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280073,"byte_end":280086,"line_start":160,"line_end":160,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280088,"byte_end":280091,"line_start":161,"line_end":161,"column_start":2,"column_end":5}},{"value":"/ A new `BitPtr`, selecting the memory location `addr` and the bit `head`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280093,"byte_end":280169,"line_start":162,"line_end":162,"column_start":2,"column_end":78}},{"value":"/ If either `addr` or `head` are invalid values, then this propagates","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280171,"byte_end":280242,"line_start":163,"line_end":163,"column_start":2,"column_end":73}},{"value":"/ their error.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280244,"byte_end":280260,"line_start":164,"line_end":164,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280262,"byte_end":280265,"line_start":165,"line_end":165,"column_start":2,"column_end":5}},{"value":"/ [`Address`]: crate::ptr::Address","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280267,"byte_end":280303,"line_start":166,"line_end":166,"column_start":2,"column_end":38}},{"value":"/ [`BitIdx`]: crate::index::BitIdx","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280305,"byte_end":280341,"line_start":167,"line_end":167,"column_start":2,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280343,"byte_end":280352,"line_start":168,"line_end":168,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1819},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281059,"byte_end":281062,"line_start":193,"line_end":193,"column_start":9,"column_end":12},"name":"new","qualname":"<BitPtr<M, O, T>>::new","value":"pub fn new(Address<M, T>, BitIdx<T::Mem>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` from a memory location and a bit index.","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` from a memory location and a bit index.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280555,"byte_end":280620,"line_start":177,"line_end":177,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280622,"byte_end":280625,"line_start":178,"line_end":178,"column_start":2,"column_end":5}},{"value":"/ Since this requires that the address and bit index are already","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280627,"byte_end":280693,"line_start":179,"line_end":179,"column_start":2,"column_end":68}},{"value":"/ well-formed, it can assemble the `BitPtr` without inspecting their","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280695,"byte_end":280765,"line_start":180,"line_end":180,"column_start":2,"column_end":72}},{"value":"/ values.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280767,"byte_end":280778,"line_start":181,"line_end":181,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280780,"byte_end":280783,"line_start":182,"line_end":182,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280785,"byte_end":280801,"line_start":183,"line_end":183,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280803,"byte_end":280806,"line_start":184,"line_end":184,"column_start":2,"column_end":5}},{"value":"/ - `addr`: A well-formed memory address of `T`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280808,"byte_end":280858,"line_start":185,"line_end":185,"column_start":2,"column_end":52}},{"value":"/ - `head`: A well-formed bit index within `T`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280860,"byte_end":280909,"line_start":186,"line_end":186,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280911,"byte_end":280914,"line_start":187,"line_end":187,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280916,"byte_end":280929,"line_start":188,"line_end":188,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280931,"byte_end":280934,"line_start":189,"line_end":189,"column_start":2,"column_end":5}},{"value":"/ A `BitPtr` selecting the `head` bit in the location `addr`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280936,"byte_end":280999,"line_start":190,"line_end":190,"column_start":2,"column_end":65}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281001,"byte_end":281018,"line_start":191,"line_end":191,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281020,"byte_end":281050,"line_start":192,"line_end":192,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1820},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281494,"byte_end":281503,"line_start":213,"line_end":213,"column_start":9,"column_end":18},"name":"raw_parts","qualname":"<BitPtr<M, O, T>>::raw_parts","value":"pub fn raw_parts(Self) -> (Address<M, T>, BitIdx<T::Mem>)","parent":null,"children":[],"decl_id":null,"docs":" Decomposes the pointer into its element address and bit index.","sig":null,"attributes":[{"value":"/ Decomposes the pointer into its element address and bit index.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281174,"byte_end":281240,"line_start":201,"line_end":201,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281242,"byte_end":281245,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281247,"byte_end":281263,"line_start":203,"line_end":203,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281265,"byte_end":281268,"line_start":204,"line_end":204,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281270,"byte_end":281282,"line_start":205,"line_end":205,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281284,"byte_end":281287,"line_start":206,"line_end":206,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281289,"byte_end":281302,"line_start":207,"line_end":207,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281304,"byte_end":281307,"line_start":208,"line_end":208,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The memory address in which the referent bit is located.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281309,"byte_end":281377,"line_start":209,"line_end":209,"column_start":2,"column_end":70}},{"value":"/ - `.1`: The index of the referent bit within `*.0`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281379,"byte_end":281434,"line_start":210,"line_end":210,"column_start":2,"column_end":57}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281436,"byte_end":281453,"line_start":211,"line_end":211,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281455,"byte_end":281485,"line_start":212,"line_end":212,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1823},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283836,"byte_end":283841,"line_start":288,"line_end":288,"column_start":16,"column_end":21},"name":"range","qualname":"<BitPtr<M, O, T>>::range","value":"pub unsafe fn range(Self, usize) -> BitPtrRange<M, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Produces a pointer range starting at `self` and running for `count`\n bits.","sig":null,"attributes":[{"value":"/ Produces a pointer range starting at `self` and running for `count`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283120,"byte_end":283191,"line_start":264,"line_end":264,"column_start":2,"column_end":73}},{"value":"/ bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283193,"byte_end":283202,"line_start":265,"line_end":265,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283204,"byte_end":283207,"line_start":266,"line_end":266,"column_start":2,"column_end":5}},{"value":"/ This calls `self.add(count)`, then bundles the resulting pointer as the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283209,"byte_end":283284,"line_start":267,"line_end":267,"column_start":2,"column_end":77}},{"value":"/ high end of the produced range.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283286,"byte_end":283321,"line_start":268,"line_end":268,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283323,"byte_end":283326,"line_start":269,"line_end":269,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283328,"byte_end":283344,"line_start":270,"line_end":270,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283346,"byte_end":283349,"line_start":271,"line_end":271,"column_start":2,"column_end":5}},{"value":"/ - `self`: The starting pointer of the produced range.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283351,"byte_end":283408,"line_start":272,"line_end":272,"column_start":2,"column_end":59}},{"value":"/ - `count`: The number of bits that the produced range includes.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283410,"byte_end":283477,"line_start":273,"line_end":273,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283479,"byte_end":283482,"line_start":274,"line_end":274,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283484,"byte_end":283497,"line_start":275,"line_end":275,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283499,"byte_end":283502,"line_start":276,"line_end":276,"column_start":2,"column_end":5}},{"value":"/ A half-open range of pointers, beginning at (and including) `self`,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283504,"byte_end":283575,"line_start":277,"line_end":277,"column_start":2,"column_end":73}},{"value":"/ running for `count` bits, and ending at (and excluding)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283577,"byte_end":283636,"line_start":278,"line_end":278,"column_start":2,"column_end":61}},{"value":"/ `self.add(count)`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283638,"byte_end":283660,"line_start":279,"line_end":279,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283662,"byte_end":283665,"line_start":280,"line_end":280,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283667,"byte_end":283679,"line_start":281,"line_end":281,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283681,"byte_end":283684,"line_start":282,"line_end":282,"column_start":2,"column_end":5}},{"value":"/ `count` cannot violate the constraints in [`add`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283686,"byte_end":283740,"line_start":283,"line_end":283,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283742,"byte_end":283745,"line_start":284,"line_end":284,"column_start":2,"column_end":5}},{"value":"/ [`add`]: Self::add","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283747,"byte_end":283769,"line_start":285,"line_end":285,"column_start":2,"column_end":24}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283771,"byte_end":283788,"line_start":286,"line_end":286,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283790,"byte_end":283820,"line_start":287,"line_end":287,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1824},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284146,"byte_end":284157,"line_start":302,"line_end":302,"column_start":16,"column_end":27},"name":"into_bitref","qualname":"<BitPtr<M, O, T>>::into_bitref","value":"pub unsafe fn into_bitref<'a>(Self) -> BitRef","parent":null,"children":[],"decl_id":null,"docs":" Converts a bit-pointer into a proxy bit-reference.","sig":null,"attributes":[{"value":"/ Converts a bit-pointer into a proxy bit-reference.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283954,"byte_end":284008,"line_start":295,"line_end":295,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284010,"byte_end":284013,"line_start":296,"line_end":296,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284015,"byte_end":284027,"line_start":297,"line_end":297,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284029,"byte_end":284032,"line_start":298,"line_end":298,"column_start":2,"column_end":5}},{"value":"/ The pointer must be valid to dereference.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284034,"byte_end":284079,"line_start":299,"line_end":299,"column_start":2,"column_end":47}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284081,"byte_end":284098,"line_start":300,"line_end":300,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284100,"byte_end":284130,"line_start":301,"line_end":301,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1826},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284335,"byte_end":284340,"line_start":309,"line_end":309,"column_start":9,"column_end":14},"name":"immut","qualname":"<BitPtr<M, O, T>>::immut","value":"pub fn immut(Self) -> BitPtr<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Removes write permissions from a bit-pointer.\n","sig":null,"attributes":[{"value":"/ Removes write permissions from a bit-pointer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284226,"byte_end":284275,"line_start":306,"line_end":306,"column_start":2,"column_end":51}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284277,"byte_end":284294,"line_start":307,"line_end":307,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284296,"byte_end":284326,"line_start":308,"line_end":308,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1827},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284683,"byte_end":284693,"line_start":325,"line_end":325,"column_start":16,"column_end":26},"name":"assert_mut","qualname":"<BitPtr<M, O, T>>::assert_mut","value":"pub unsafe fn assert_mut(Self) -> BitPtr<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Adds write permissions to a bit-pointer.","sig":null,"attributes":[{"value":"/ Adds write permissions to a bit-pointer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284484,"byte_end":284528,"line_start":318,"line_end":318,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284530,"byte_end":284533,"line_start":319,"line_end":319,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284535,"byte_end":284547,"line_start":320,"line_end":320,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284549,"byte_end":284552,"line_start":321,"line_end":321,"column_start":2,"column_end":5}},{"value":"/ This pointer must have been derived from a `*mut` pointer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284554,"byte_end":284616,"line_start":322,"line_end":322,"column_start":2,"column_end":64}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284618,"byte_end":284635,"line_start":323,"line_end":323,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284637,"byte_end":284667,"line_start":324,"line_end":324,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1828},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285279,"byte_end":285286,"line_start":347,"line_end":347,"column_start":9,"column_end":16},"name":"is_null","qualname":"<BitPtr<M, O, T>>::is_null","value":"pub fn is_null(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if a bit-pointer is the null value.","sig":null,"attributes":[{"value":"/ Tests if a bit-pointer is the null value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284869,"byte_end":284914,"line_start":336,"line_end":336,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284916,"byte_end":284919,"line_start":337,"line_end":337,"column_start":2,"column_end":5}},{"value":"/ This is always false, as `BitPtr` is a `NonNull` internally. Use","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284921,"byte_end":284989,"line_start":338,"line_end":338,"column_start":2,"column_end":70}},{"value":"/ `Option<BitPtr>` to express the potential for a null pointer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284991,"byte_end":285056,"line_start":339,"line_end":339,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285058,"byte_end":285061,"line_start":340,"line_end":340,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285063,"byte_end":285077,"line_start":341,"line_end":341,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285079,"byte_end":285082,"line_start":342,"line_end":342,"column_start":2,"column_end":5}},{"value":"/ [`pointer::is_null`](https://doc.rust-lang.org/std/primitive.pointer.html#method.is_null)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285084,"byte_end":285177,"line_start":343,"line_end":343,"column_start":2,"column_end":95}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285179,"byte_end":285196,"line_start":344,"line_end":344,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285198,"byte_end":285228,"line_start":345,"line_end":345,"column_start":2,"column_end":32}},{"value":"deprecated = \"`BitPtr` is never null\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285230,"byte_end":285270,"line_start":346,"line_end":346,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1829},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285913,"byte_end":285917,"line_start":366,"line_end":366,"column_start":9,"column_end":13},"name":"cast","qualname":"<BitPtr<M, O, T>>::cast","value":"pub fn cast<U>(Self) -> BitPtr<M, O, U> where U: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Casts to a bit-pointer of another storage type, preserving the\n bit-ordering and mutability permissions.","sig":null,"attributes":[{"value":"/ Casts to a bit-pointer of another storage type, preserving the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285316,"byte_end":285382,"line_start":351,"line_end":351,"column_start":2,"column_end":68}},{"value":"/ bit-ordering and mutability permissions.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285384,"byte_end":285428,"line_start":352,"line_end":352,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285430,"byte_end":285433,"line_start":353,"line_end":353,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285435,"byte_end":285449,"line_start":354,"line_end":354,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285451,"byte_end":285454,"line_start":355,"line_end":355,"column_start":2,"column_end":5}},{"value":"/ [`pointer::cast`](https://doc.rust-lang.org/std/primitive.pointer.html#method.cast)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285456,"byte_end":285543,"line_start":356,"line_end":356,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285545,"byte_end":285548,"line_start":357,"line_end":357,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285550,"byte_end":285564,"line_start":358,"line_end":358,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285566,"byte_end":285569,"line_start":359,"line_end":359,"column_start":2,"column_end":5}},{"value":"/ This is not a free typecast! It encodes the pointer as a crate-internal","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285571,"byte_end":285646,"line_start":360,"line_end":360,"column_start":2,"column_end":77}},{"value":"/ span descriptor, casts the span descriptor to the `U` storage element","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285648,"byte_end":285721,"line_start":361,"line_end":361,"column_start":2,"column_end":75}},{"value":"/ parameter, then decodes the result. This preserves general correctness,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285723,"byte_end":285798,"line_start":362,"line_end":362,"column_start":2,"column_end":77}},{"value":"/ but will likely change both the virtual and physical bits addressed by","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285800,"byte_end":285874,"line_start":363,"line_end":363,"column_start":2,"column_end":76}},{"value":"/ this pointer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285876,"byte_end":285893,"line_start":364,"line_end":364,"column_start":2,"column_end":19}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285895,"byte_end":285904,"line_start":365,"line_end":365,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1831},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287319,"byte_end":287325,"line_start":411,"line_end":411,"column_start":16,"column_end":22},"name":"as_ref","qualname":"<BitPtr<M, O, T>>::as_ref","value":"pub unsafe fn as_ref<'a>(Self) -> Option<BitRef>","parent":null,"children":[],"decl_id":null,"docs":" Produces a proxy reference to the referent bit.","sig":null,"attributes":[{"value":"/ Produces a proxy reference to the referent bit.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286084,"byte_end":286135,"line_start":373,"line_end":373,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286137,"byte_end":286140,"line_start":374,"line_end":374,"column_start":2,"column_end":5}},{"value":"/ Because `BitPtr` is a non-null, well-aligned, pointer, this never","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286142,"byte_end":286211,"line_start":375,"line_end":375,"column_start":2,"column_end":71}},{"value":"/ returns `None`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286213,"byte_end":286232,"line_start":376,"line_end":376,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286234,"byte_end":286237,"line_start":377,"line_end":377,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286239,"byte_end":286253,"line_start":378,"line_end":378,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286255,"byte_end":286258,"line_start":379,"line_end":379,"column_start":2,"column_end":5}},{"value":"/ [`pointer::as_ref`](https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286260,"byte_end":286351,"line_start":380,"line_end":380,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286353,"byte_end":286356,"line_start":381,"line_end":381,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286358,"byte_end":286379,"line_start":382,"line_end":382,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286381,"byte_end":286384,"line_start":383,"line_end":383,"column_start":2,"column_end":5}},{"value":"/ This produces a proxy type rather than a true reference. The proxy","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286386,"byte_end":286456,"line_start":384,"line_end":384,"column_start":2,"column_end":72}},{"value":"/ implements `Deref<Target = bool>`, and can be converted to `&bool` with","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286458,"byte_end":286533,"line_start":385,"line_end":385,"column_start":2,"column_end":77}},{"value":"/ `&*`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286535,"byte_end":286544,"line_start":386,"line_end":386,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286546,"byte_end":286549,"line_start":387,"line_end":387,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286551,"byte_end":286563,"line_start":388,"line_end":388,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286565,"byte_end":286568,"line_start":389,"line_end":389,"column_start":2,"column_end":5}},{"value":"/ Since `BitPtr` does not permit null or misaligned pointers, this method","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286570,"byte_end":286645,"line_start":390,"line_end":390,"column_start":2,"column_end":77}},{"value":"/ will always dereference the pointer and you must ensure the following","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286647,"byte_end":286720,"line_start":391,"line_end":391,"column_start":2,"column_end":75}},{"value":"/ conditions are met:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286722,"byte_end":286745,"line_start":392,"line_end":392,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286747,"byte_end":286750,"line_start":393,"line_end":393,"column_start":2,"column_end":5}},{"value":"/ - the pointer must be dereferencable as defined in the standard library","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286752,"byte_end":286827,"line_start":394,"line_end":394,"column_start":2,"column_end":77}},{"value":"/   documentation","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286829,"byte_end":286848,"line_start":395,"line_end":395,"column_start":2,"column_end":21}},{"value":"/ - the pointer must point to an initialized instance of `T`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286850,"byte_end":286912,"line_start":396,"line_end":396,"column_start":2,"column_end":64}},{"value":"/ - you must ensure that no other pointer will race to modify the referent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286914,"byte_end":286990,"line_start":397,"line_end":397,"column_start":2,"column_end":78}},{"value":"/   location while this call is reading from memory to produce the proxy","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286992,"byte_end":287066,"line_start":398,"line_end":398,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287068,"byte_end":287071,"line_start":399,"line_end":399,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287073,"byte_end":287087,"line_start":400,"line_end":400,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287089,"byte_end":287092,"line_start":401,"line_end":401,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287094,"byte_end":287105,"line_start":402,"line_end":402,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287107,"byte_end":287134,"line_start":403,"line_end":403,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287136,"byte_end":287139,"line_start":404,"line_end":404,"column_start":2,"column_end":5}},{"value":"/ let data = 1u8;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287141,"byte_end":287160,"line_start":405,"line_end":405,"column_start":2,"column_end":21}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287162,"byte_end":287214,"line_start":406,"line_end":406,"column_start":2,"column_end":54}},{"value":"/ let val = unsafe { ptr.as_ref() }.unwrap();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287216,"byte_end":287263,"line_start":407,"line_end":407,"column_start":2,"column_end":49}},{"value":"/ assert!(*val);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287265,"byte_end":287283,"line_start":408,"line_end":408,"column_start":2,"column_end":20}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287285,"byte_end":287292,"line_start":409,"line_end":409,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287294,"byte_end":287303,"line_start":410,"line_end":410,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1833},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289031,"byte_end":289037,"line_start":460,"line_end":460,"column_start":16,"column_end":22},"name":"offset","qualname":"<BitPtr<M, O, T>>::offset","value":"pub unsafe fn offset(Self, isize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer.","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287420,"byte_end":287461,"line_start":415,"line_end":415,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287463,"byte_end":287466,"line_start":416,"line_end":416,"column_start":2,"column_end":5}},{"value":"/ `count` is in units of bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287468,"byte_end":287500,"line_start":417,"line_end":417,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287502,"byte_end":287505,"line_start":418,"line_end":418,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287507,"byte_end":287521,"line_start":419,"line_end":419,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287523,"byte_end":287526,"line_start":420,"line_end":420,"column_start":2,"column_end":5}},{"value":"/ [`pointer::offset`](https://doc.rust-lang.org/std/primitive.pointer.html#method.offset)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287528,"byte_end":287619,"line_start":421,"line_end":421,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287621,"byte_end":287624,"line_start":422,"line_end":422,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287626,"byte_end":287638,"line_start":423,"line_end":423,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287640,"byte_end":287643,"line_start":424,"line_end":424,"column_start":2,"column_end":5}},{"value":"/ If any of the following conditions are violated, the result is Undefined","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287645,"byte_end":287721,"line_start":425,"line_end":425,"column_start":2,"column_end":78}},{"value":"/ Behavior:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287723,"byte_end":287736,"line_start":426,"line_end":426,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287738,"byte_end":287741,"line_start":427,"line_end":427,"column_start":2,"column_end":5}},{"value":"/ - Both the starting and resulting pointer must be either in bounds or","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287743,"byte_end":287816,"line_start":428,"line_end":428,"column_start":2,"column_end":75}},{"value":"/   one byte past the end of the same allocated object. Note that in Rust,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287818,"byte_end":287894,"line_start":429,"line_end":429,"column_start":2,"column_end":78}},{"value":"/   every (stack-allocated) variable is considered a separate allocated","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287896,"byte_end":287969,"line_start":430,"line_end":430,"column_start":2,"column_end":75}},{"value":"/   object.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287971,"byte_end":287984,"line_start":431,"line_end":431,"column_start":2,"column_end":15}},{"value":"/ - The computed offset, **in bytes**, cannot overflow an `isize`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287986,"byte_end":288054,"line_start":432,"line_end":432,"column_start":2,"column_end":70}},{"value":"/ - The offset being in bounds cannot rely on “wrapping around” the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288056,"byte_end":288129,"line_start":433,"line_end":433,"column_start":2,"column_end":71}},{"value":"/   address space. That is, the infinite-precision sum, **in bytes** must","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288131,"byte_end":288206,"line_start":434,"line_end":434,"column_start":2,"column_end":77}},{"value":"/   fit in a `usize`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288208,"byte_end":288231,"line_start":435,"line_end":435,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288233,"byte_end":288236,"line_start":436,"line_end":436,"column_start":2,"column_end":5}},{"value":"/ These pointers are almost always derived from [`BitSlice`] regions,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288238,"byte_end":288309,"line_start":437,"line_end":437,"column_start":2,"column_end":73}},{"value":"/ which have an encoding limitation that the high three bits of the length","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288311,"byte_end":288387,"line_start":438,"line_end":438,"column_start":2,"column_end":78}},{"value":"/ counter are zero, so `bitvec` pointers are even less likely than","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288389,"byte_end":288457,"line_start":439,"line_end":439,"column_start":2,"column_end":70}},{"value":"/ ordinary pointers to run afoul of these limitations.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288459,"byte_end":288515,"line_start":440,"line_end":440,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288517,"byte_end":288520,"line_start":441,"line_end":441,"column_start":2,"column_end":5}},{"value":"/ Use [`wrapping_offset`] if you expect to risk hitting the high edge of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288522,"byte_end":288596,"line_start":442,"line_end":442,"column_start":2,"column_end":76}},{"value":"/ the address space.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288598,"byte_end":288620,"line_start":443,"line_end":443,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288622,"byte_end":288625,"line_start":444,"line_end":444,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288627,"byte_end":288641,"line_start":445,"line_end":445,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288643,"byte_end":288646,"line_start":446,"line_end":446,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288648,"byte_end":288659,"line_start":447,"line_end":447,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288661,"byte_end":288688,"line_start":448,"line_end":448,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288690,"byte_end":288693,"line_start":449,"line_end":449,"column_start":2,"column_end":5}},{"value":"/ let data = 5u8;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288695,"byte_end":288714,"line_start":450,"line_end":450,"column_start":2,"column_end":21}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288716,"byte_end":288768,"line_start":451,"line_end":451,"column_start":2,"column_end":54}},{"value":"/ assert!(unsafe { ptr.read() });","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288770,"byte_end":288805,"line_start":452,"line_end":452,"column_start":2,"column_end":37}},{"value":"/ assert!(!unsafe { ptr.offset(1).read() });","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288807,"byte_end":288853,"line_start":453,"line_end":453,"column_start":2,"column_end":48}},{"value":"/ assert!(unsafe { ptr.offset(2).read() });","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288855,"byte_end":288900,"line_start":454,"line_end":454,"column_start":2,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288902,"byte_end":288909,"line_start":455,"line_end":455,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288911,"byte_end":288914,"line_start":456,"line_end":456,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288916,"byte_end":288956,"line_start":457,"line_end":457,"column_start":2,"column_end":42}},{"value":"/ [`wrapping_offset`]: Self::wrapping_offset","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288958,"byte_end":289004,"line_start":458,"line_end":458,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289006,"byte_end":289015,"line_start":459,"line_end":459,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1834},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291090,"byte_end":291105,"line_start":516,"line_end":516,"column_start":9,"column_end":24},"name":"wrapping_offset","qualname":"<BitPtr<M, O, T>>::wrapping_offset","value":"pub fn wrapping_offset(Self, isize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer using wrapping arithmetic.","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer using wrapping arithmetic.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289161,"byte_end":289228,"line_start":465,"line_end":465,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289230,"byte_end":289233,"line_start":466,"line_end":466,"column_start":2,"column_end":5}},{"value":"/ `count` is in units of bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289235,"byte_end":289267,"line_start":467,"line_end":467,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289269,"byte_end":289272,"line_start":468,"line_end":468,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289274,"byte_end":289288,"line_start":469,"line_end":469,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289290,"byte_end":289293,"line_start":470,"line_end":470,"column_start":2,"column_end":5}},{"value":"/ [`pointer::wrapping_offset`](https://doc.rust/lang.org/std/primitive.pointer.html#method.wrapping_offset)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289295,"byte_end":289404,"line_start":471,"line_end":471,"column_start":2,"column_end":111}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289406,"byte_end":289409,"line_start":472,"line_end":472,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289411,"byte_end":289423,"line_start":473,"line_end":473,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289425,"byte_end":289428,"line_start":474,"line_end":474,"column_start":2,"column_end":5}},{"value":"/ The resulting pointer does not need to be in bounds, but it is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289430,"byte_end":289496,"line_start":475,"line_end":475,"column_start":2,"column_end":68}},{"value":"/ potentially hazardous to dereference.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289498,"byte_end":289539,"line_start":476,"line_end":476,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289541,"byte_end":289544,"line_start":477,"line_end":477,"column_start":2,"column_end":5}},{"value":"/ In particular, the resulting pointer remains attached to the same","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289546,"byte_end":289615,"line_start":478,"line_end":478,"column_start":2,"column_end":71}},{"value":"/ allocated object that `self` points to. It may *not* be used to access a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289617,"byte_end":289693,"line_start":479,"line_end":479,"column_start":2,"column_end":78}},{"value":"/ different allocated object. Note that in Rust, every (stack-allocated)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289695,"byte_end":289769,"line_start":480,"line_end":480,"column_start":2,"column_end":76}},{"value":"/ variable is considered a separate allocated object.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289771,"byte_end":289826,"line_start":481,"line_end":481,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289828,"byte_end":289831,"line_start":482,"line_end":482,"column_start":2,"column_end":5}},{"value":"/ In other words, `x.wrapping_offset((y as usize).wrapping_sub(x as","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289833,"byte_end":289902,"line_start":483,"line_end":483,"column_start":2,"column_end":71}},{"value":"/ usize)` is not the same as `y`, and dereferencing it is undefined","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289904,"byte_end":289973,"line_start":484,"line_end":484,"column_start":2,"column_end":71}},{"value":"/ behavior unless `x` and `y` point into the same allocated object.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289975,"byte_end":290044,"line_start":485,"line_end":485,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290046,"byte_end":290049,"line_start":486,"line_end":486,"column_start":2,"column_end":5}},{"value":"/ Compared to [`offset`], this method basically delays the requirement of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290051,"byte_end":290126,"line_start":487,"line_end":487,"column_start":2,"column_end":77}},{"value":"/ staying within the same allocated object: [`offset`] is immediate","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290128,"byte_end":290197,"line_start":488,"line_end":488,"column_start":2,"column_end":71}},{"value":"/ Undefined Behavior when crossing object boundaries; `wrapping_offset`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290199,"byte_end":290272,"line_start":489,"line_end":489,"column_start":2,"column_end":75}},{"value":"/ produces a pointer but still leads to Undefined Behavior if that pointer","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290274,"byte_end":290350,"line_start":490,"line_end":490,"column_start":2,"column_end":78}},{"value":"/ is dereferenced. [`offset`] can be optimized better and is thus","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290352,"byte_end":290419,"line_start":491,"line_end":491,"column_start":2,"column_end":69}},{"value":"/ preferable in performance-sensitive code.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290421,"byte_end":290466,"line_start":492,"line_end":492,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290468,"byte_end":290471,"line_start":493,"line_end":493,"column_start":2,"column_end":5}},{"value":"/ If you need to cross object boundaries, destructure this pointer into","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290473,"byte_end":290546,"line_start":494,"line_end":494,"column_start":2,"column_end":75}},{"value":"/ its base address and bit index, cast the base address to an integer, and","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290548,"byte_end":290624,"line_start":495,"line_end":495,"column_start":2,"column_end":78}},{"value":"/ do the arithmetic in the purely integer space.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290626,"byte_end":290676,"line_start":496,"line_end":496,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290678,"byte_end":290681,"line_start":497,"line_end":497,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290683,"byte_end":290697,"line_start":498,"line_end":498,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290699,"byte_end":290702,"line_start":499,"line_end":499,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290704,"byte_end":290715,"line_start":500,"line_end":500,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290717,"byte_end":290744,"line_start":501,"line_end":501,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290746,"byte_end":290749,"line_start":502,"line_end":502,"column_start":2,"column_end":5}},{"value":"/ let data = 0u8;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290751,"byte_end":290770,"line_start":503,"line_end":503,"column_start":2,"column_end":21}},{"value":"/ let mut ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290772,"byte_end":290828,"line_start":504,"line_end":504,"column_start":2,"column_end":58}},{"value":"/ let end = ptr.wrapping_offset(8);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290830,"byte_end":290867,"line_start":505,"line_end":505,"column_start":2,"column_end":39}},{"value":"/ while ptr < end {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290869,"byte_end":290890,"line_start":506,"line_end":506,"column_start":2,"column_end":23}},{"value":"/   # #[cfg(feature = \"std\")] {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290892,"byte_end":290925,"line_start":507,"line_end":507,"column_start":2,"column_end":35}},{"value":"/   println!(\"{}\", unsafe { ptr.read() });","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290927,"byte_end":290971,"line_start":508,"line_end":508,"column_start":2,"column_end":46}},{"value":"/   # }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290973,"byte_end":290982,"line_start":509,"line_end":509,"column_start":2,"column_end":11}},{"value":"/   ptr = ptr.wrapping_offset(3);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290984,"byte_end":291019,"line_start":510,"line_end":510,"column_start":2,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291021,"byte_end":291026,"line_start":511,"line_end":511,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291028,"byte_end":291035,"line_start":512,"line_end":512,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291037,"byte_end":291040,"line_start":513,"line_end":513,"column_start":2,"column_end":5}},{"value":"/ [`offset`]: Self::offset","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291042,"byte_end":291070,"line_start":514,"line_end":514,"column_start":2,"column_end":30}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291072,"byte_end":291081,"line_start":515,"line_end":515,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1835},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293696,"byte_end":293707,"line_start":597,"line_end":597,"column_start":16,"column_end":27},"name":"offset_from","qualname":"<BitPtr<M, O, T>>::offset_from","value":"pub unsafe fn offset_from(Self, Self) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Calculates the distance between two pointers. The returned value is in\n units of bits.","sig":null,"attributes":[{"value":"/ Calculates the distance between two pointers. The returned value is in","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291238,"byte_end":291312,"line_start":521,"line_end":521,"column_start":2,"column_end":76}},{"value":"/ units of bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291314,"byte_end":291332,"line_start":522,"line_end":522,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291334,"byte_end":291337,"line_start":523,"line_end":523,"column_start":2,"column_end":5}},{"value":"/ This function is the inverse of [`offset`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291339,"byte_end":291386,"line_start":524,"line_end":524,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291388,"byte_end":291391,"line_start":525,"line_end":525,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291393,"byte_end":291407,"line_start":526,"line_end":526,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291409,"byte_end":291412,"line_start":527,"line_end":527,"column_start":2,"column_end":5}},{"value":"/ [`pointer::offset`](https://doc.rust-lang.org/std/primitive.pointer.html#method.offset_from)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291414,"byte_end":291510,"line_start":528,"line_end":528,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291512,"byte_end":291515,"line_start":529,"line_end":529,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291517,"byte_end":291529,"line_start":530,"line_end":530,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291531,"byte_end":291534,"line_start":531,"line_end":531,"column_start":2,"column_end":5}},{"value":"/ If any of the following conditions are violated, the result is Undefined","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291536,"byte_end":291612,"line_start":532,"line_end":532,"column_start":2,"column_end":78}},{"value":"/ Behavior:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291614,"byte_end":291627,"line_start":533,"line_end":533,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291629,"byte_end":291632,"line_start":534,"line_end":534,"column_start":2,"column_end":5}},{"value":"/ - Both the starting and other pointer must be either in bounds or one","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291634,"byte_end":291707,"line_start":535,"line_end":535,"column_start":2,"column_end":75}},{"value":"/   byte past the end of the same allocated object. Note that in Rust,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291709,"byte_end":291781,"line_start":536,"line_end":536,"column_start":2,"column_end":74}},{"value":"/   every (stack-allocated) variable is considered a separate allocated","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291783,"byte_end":291856,"line_start":537,"line_end":537,"column_start":2,"column_end":75}},{"value":"/   object.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291858,"byte_end":291871,"line_start":538,"line_end":538,"column_start":2,"column_end":15}},{"value":"/ - Both pointers must be *derived from* a pointer to the same object.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291873,"byte_end":291945,"line_start":539,"line_end":539,"column_start":2,"column_end":74}},{"value":"/ - The distance between the pointers, **in bytes**, cannot overflow an","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291947,"byte_end":292020,"line_start":540,"line_end":540,"column_start":2,"column_end":75}},{"value":"/   `isize`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292022,"byte_end":292036,"line_start":541,"line_end":541,"column_start":2,"column_end":16}},{"value":"/ - The distance being in bounds cannot rely on “wrapping around” the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292038,"byte_end":292113,"line_start":542,"line_end":542,"column_start":2,"column_end":73}},{"value":"/   address space.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292115,"byte_end":292135,"line_start":543,"line_end":543,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292137,"byte_end":292140,"line_start":544,"line_end":544,"column_start":2,"column_end":5}},{"value":"/ These pointers are almost always derived from [`BitSlice`] regions,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292142,"byte_end":292213,"line_start":545,"line_end":545,"column_start":2,"column_end":73}},{"value":"/ which have an encoding limitation that the high three bits of the length","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292215,"byte_end":292291,"line_start":546,"line_end":546,"column_start":2,"column_end":78}},{"value":"/ counter are zero, so `bitvec` pointers are even less likely than","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292293,"byte_end":292361,"line_start":547,"line_end":547,"column_start":2,"column_end":70}},{"value":"/ ordinary pointers to run afoul of these limitations.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292363,"byte_end":292419,"line_start":548,"line_end":548,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292421,"byte_end":292424,"line_start":549,"line_end":549,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292426,"byte_end":292440,"line_start":550,"line_end":550,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292442,"byte_end":292445,"line_start":551,"line_end":551,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292447,"byte_end":292463,"line_start":552,"line_end":552,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292465,"byte_end":292468,"line_start":553,"line_end":553,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292470,"byte_end":292481,"line_start":554,"line_end":554,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292483,"byte_end":292510,"line_start":555,"line_end":555,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292512,"byte_end":292515,"line_start":556,"line_end":556,"column_start":2,"column_end":5}},{"value":"/ let data = 0u16;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292517,"byte_end":292537,"line_start":557,"line_end":557,"column_start":2,"column_end":22}},{"value":"/ let base = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292539,"byte_end":292592,"line_start":558,"line_end":558,"column_start":2,"column_end":55}},{"value":"/ let low = unsafe { base.add(5) };","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292594,"byte_end":292631,"line_start":559,"line_end":559,"column_start":2,"column_end":39}},{"value":"/ let high = unsafe { low.add(6) };","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292633,"byte_end":292670,"line_start":560,"line_end":560,"column_start":2,"column_end":39}},{"value":"/ unsafe {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292672,"byte_end":292684,"line_start":561,"line_end":561,"column_start":2,"column_end":14}},{"value":"/   assert_eq!(high.offset_from(low), 6);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292686,"byte_end":292729,"line_start":562,"line_end":562,"column_start":2,"column_end":45}},{"value":"/   assert_eq!(low.offset_from(high), -6);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292731,"byte_end":292775,"line_start":563,"line_end":563,"column_start":2,"column_end":46}},{"value":"/   assert_eq!(low.offset(6), high);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292777,"byte_end":292815,"line_start":564,"line_end":564,"column_start":2,"column_end":40}},{"value":"/   assert_eq!(high.offset(-6), low);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292817,"byte_end":292856,"line_start":565,"line_end":565,"column_start":2,"column_end":41}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292858,"byte_end":292863,"line_start":566,"line_end":566,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292865,"byte_end":292872,"line_start":567,"line_end":567,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292874,"byte_end":292877,"line_start":568,"line_end":568,"column_start":2,"column_end":5}},{"value":"/ *Incorrect* usage:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292879,"byte_end":292901,"line_start":569,"line_end":569,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292903,"byte_end":292906,"line_start":570,"line_end":570,"column_start":2,"column_end":5}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292908,"byte_end":292926,"line_start":571,"line_end":571,"column_start":2,"column_end":20}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292928,"byte_end":292955,"line_start":572,"line_end":572,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292957,"byte_end":292960,"line_start":573,"line_end":573,"column_start":2,"column_end":5}},{"value":"/ let a = 0u8;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292962,"byte_end":292978,"line_start":574,"line_end":574,"column_start":2,"column_end":18}},{"value":"/ let b = !0u8;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292980,"byte_end":292997,"line_start":575,"line_end":575,"column_start":2,"column_end":19}},{"value":"/ let a_ptr = BitPtr::<_, Lsb0, _>::from_ref(&a);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292999,"byte_end":293050,"line_start":576,"line_end":576,"column_start":2,"column_end":53}},{"value":"/ let b_ptr = BitPtr::<_, Lsb0, _>::from_ref(&b);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293052,"byte_end":293103,"line_start":577,"line_end":577,"column_start":2,"column_end":53}},{"value":"/ let diff = (b_ptr.pointer() as isize)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293105,"byte_end":293146,"line_start":578,"line_end":578,"column_start":2,"column_end":43}},{"value":"/   .wrapping_sub(a_ptr.pointer() as isize)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293148,"byte_end":293193,"line_start":579,"line_end":579,"column_start":2,"column_end":47}},{"value":"/   // Remember: raw pointers are byte-addressed,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293195,"byte_end":293246,"line_start":580,"line_end":580,"column_start":2,"column_end":53}},{"value":"/   // but these are bit-addressed.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293248,"byte_end":293285,"line_start":581,"line_end":581,"column_start":2,"column_end":39}},{"value":"/   .wrapping_mul(8);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293287,"byte_end":293310,"line_start":582,"line_end":582,"column_start":2,"column_end":25}},{"value":"/ // Create a pointer to `b`, derived from `a`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293312,"byte_end":293361,"line_start":583,"line_end":583,"column_start":2,"column_end":51}},{"value":"/ let b_ptr_2 = a_ptr.wrapping_offset(diff);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293363,"byte_end":293409,"line_start":584,"line_end":584,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293411,"byte_end":293414,"line_start":585,"line_end":585,"column_start":2,"column_end":5}},{"value":"/ // The pointers are *arithmetically* equal now","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293416,"byte_end":293466,"line_start":586,"line_end":586,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(b_ptr, b_ptr_2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293468,"byte_end":293499,"line_start":587,"line_end":587,"column_start":2,"column_end":33}},{"value":"/ // Undefined Behavior!","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293501,"byte_end":293527,"line_start":588,"line_end":588,"column_start":2,"column_end":28}},{"value":"/ unsafe {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293529,"byte_end":293541,"line_start":589,"line_end":589,"column_start":2,"column_end":14}},{"value":"/   b_ptr_2.offset_from(b_ptr);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293543,"byte_end":293576,"line_start":590,"line_end":590,"column_start":2,"column_end":35}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293578,"byte_end":293583,"line_start":591,"line_end":591,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293585,"byte_end":293592,"line_start":592,"line_end":592,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293594,"byte_end":293597,"line_start":593,"line_end":593,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293599,"byte_end":293639,"line_start":594,"line_end":594,"column_start":2,"column_end":42}},{"value":"/ [`offset`]: Self::offset","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293641,"byte_end":293669,"line_start":595,"line_end":595,"column_start":2,"column_end":30}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293671,"byte_end":293680,"line_start":596,"line_end":596,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1836},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294740,"byte_end":294743,"line_start":629,"line_end":629,"column_start":16,"column_end":19},"name":"add","qualname":"<BitPtr<M, O, T>>::add","value":"pub unsafe fn add(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer (convenience for `.offset(count as\n isize)`).","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer (convenience for `.offset(count as","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294351,"byte_end":294426,"line_start":613,"line_end":613,"column_start":2,"column_end":77}},{"value":"/ isize)`).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294428,"byte_end":294441,"line_start":614,"line_end":614,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294443,"byte_end":294446,"line_start":615,"line_end":615,"column_start":2,"column_end":5}},{"value":"/ `count` is in units of bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294448,"byte_end":294480,"line_start":616,"line_end":616,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294482,"byte_end":294485,"line_start":617,"line_end":617,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294487,"byte_end":294501,"line_start":618,"line_end":618,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294503,"byte_end":294506,"line_start":619,"line_end":619,"column_start":2,"column_end":5}},{"value":"/ [`pointer::add`](https://doc.rust-lang.org/std/primitive.pointer.html#method.add)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294508,"byte_end":294593,"line_start":620,"line_end":620,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294595,"byte_end":294598,"line_start":621,"line_end":621,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294600,"byte_end":294612,"line_start":622,"line_end":622,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294614,"byte_end":294617,"line_start":623,"line_end":623,"column_start":2,"column_end":5}},{"value":"/ See [`offset`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294619,"byte_end":294638,"line_start":624,"line_end":624,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294640,"byte_end":294643,"line_start":625,"line_end":625,"column_start":2,"column_end":5}},{"value":"/ [`offset`]: Self::offset","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294645,"byte_end":294673,"line_start":626,"line_end":626,"column_start":2,"column_end":30}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294675,"byte_end":294692,"line_start":627,"line_end":627,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294694,"byte_end":294724,"line_start":628,"line_end":628,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1837},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295175,"byte_end":295178,"line_start":648,"line_end":648,"column_start":16,"column_end":19},"name":"sub","qualname":"<BitPtr<M, O, T>>::sub","value":"pub unsafe fn sub(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer (convenience for `.offset((count as\n isize).wrapping_neg())`).","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer (convenience for `.offset((count as","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294809,"byte_end":294885,"line_start":633,"line_end":633,"column_start":2,"column_end":78}},{"value":"/ isize).wrapping_neg())`).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294887,"byte_end":294916,"line_start":634,"line_end":634,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294918,"byte_end":294921,"line_start":635,"line_end":635,"column_start":2,"column_end":5}},{"value":"/ `count` is in units of bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294923,"byte_end":294955,"line_start":636,"line_end":636,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294957,"byte_end":294960,"line_start":637,"line_end":637,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294962,"byte_end":294976,"line_start":638,"line_end":638,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294978,"byte_end":294981,"line_start":639,"line_end":639,"column_start":2,"column_end":5}},{"value":"/ [`pointer::sub`](https://doc.rust-lang.org/std/primitive.pointer.html#method.sub)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294983,"byte_end":295068,"line_start":640,"line_end":640,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295070,"byte_end":295073,"line_start":641,"line_end":641,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295075,"byte_end":295087,"line_start":642,"line_end":642,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295089,"byte_end":295092,"line_start":643,"line_end":643,"column_start":2,"column_end":5}},{"value":"/ See [`offset`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295094,"byte_end":295113,"line_start":644,"line_end":644,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295115,"byte_end":295118,"line_start":645,"line_end":645,"column_start":2,"column_end":5}},{"value":"/ [`offset`]: Self::offset","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295120,"byte_end":295148,"line_start":646,"line_end":646,"column_start":2,"column_end":30}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295150,"byte_end":295159,"line_start":647,"line_end":647,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1838},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295684,"byte_end":295696,"line_start":666,"line_end":666,"column_start":9,"column_end":21},"name":"wrapping_add","qualname":"<BitPtr<M, O, T>>::wrapping_add","value":"pub fn wrapping_add(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer using wrapping arithmetic\n (convenience for `.wrapping_offset(count as isize)`).","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer using wrapping arithmetic","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295261,"byte_end":295327,"line_start":652,"line_end":652,"column_start":2,"column_end":68}},{"value":"/ (convenience for `.wrapping_offset(count as isize)`).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295329,"byte_end":295386,"line_start":653,"line_end":653,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295388,"byte_end":295391,"line_start":654,"line_end":654,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295393,"byte_end":295407,"line_start":655,"line_end":655,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295409,"byte_end":295412,"line_start":656,"line_end":656,"column_start":2,"column_end":5}},{"value":"/ [`pointer::wrapping_add`](https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_add)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295414,"byte_end":295517,"line_start":657,"line_end":657,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295519,"byte_end":295522,"line_start":658,"line_end":658,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295524,"byte_end":295536,"line_start":659,"line_end":659,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295538,"byte_end":295541,"line_start":660,"line_end":660,"column_start":2,"column_end":5}},{"value":"/ See [`wrapping_offset`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295543,"byte_end":295571,"line_start":661,"line_end":661,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295573,"byte_end":295576,"line_start":662,"line_end":662,"column_start":2,"column_end":5}},{"value":"/ [`wrapping_offset`]: Self::wrapping_offset","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295578,"byte_end":295624,"line_start":663,"line_end":663,"column_start":2,"column_end":48}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295626,"byte_end":295643,"line_start":664,"line_end":664,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295645,"byte_end":295675,"line_start":665,"line_end":665,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1839},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296203,"byte_end":296215,"line_start":684,"line_end":684,"column_start":9,"column_end":21},"name":"wrapping_sub","qualname":"<BitPtr<M, O, T>>::wrapping_sub","value":"pub fn wrapping_sub(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer using wrapping arithmetic\n (convenience for `.wrapping_offset((count as isize).wrapping_neg())`).","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer using wrapping arithmetic","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295771,"byte_end":295837,"line_start":670,"line_end":670,"column_start":2,"column_end":68}},{"value":"/ (convenience for `.wrapping_offset((count as isize).wrapping_neg())`).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295839,"byte_end":295913,"line_start":671,"line_end":671,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295915,"byte_end":295918,"line_start":672,"line_end":672,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295920,"byte_end":295934,"line_start":673,"line_end":673,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295936,"byte_end":295939,"line_start":674,"line_end":674,"column_start":2,"column_end":5}},{"value":"/ [`pointer::wrapping_sub`](https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_sub)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295941,"byte_end":296044,"line_start":675,"line_end":675,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296046,"byte_end":296049,"line_start":676,"line_end":676,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296051,"byte_end":296063,"line_start":677,"line_end":677,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296065,"byte_end":296068,"line_start":678,"line_end":678,"column_start":2,"column_end":5}},{"value":"/ See [`wrapping_offset`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296070,"byte_end":296098,"line_start":679,"line_end":679,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296100,"byte_end":296103,"line_start":680,"line_end":680,"column_start":2,"column_end":5}},{"value":"/ [`wrapping_offset`]: Self::wrapping_offset","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296105,"byte_end":296151,"line_start":681,"line_end":681,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296153,"byte_end":296162,"line_start":682,"line_end":682,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296164,"byte_end":296194,"line_start":683,"line_end":683,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1840},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296603,"byte_end":296607,"line_start":700,"line_end":700,"column_start":16,"column_end":20},"name":"read","qualname":"<BitPtr<M, O, T>>::read","value":"pub unsafe fn read(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Reads the bit from `*self`.","sig":null,"attributes":[{"value":"/ Reads the bit from `*self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296307,"byte_end":296338,"line_start":688,"line_end":688,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296340,"byte_end":296343,"line_start":689,"line_end":689,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296345,"byte_end":296359,"line_start":690,"line_end":690,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296361,"byte_end":296364,"line_start":691,"line_end":691,"column_start":2,"column_end":5}},{"value":"/ [`pointer::read`](https://doc.rust-lang.org/std/primitive.pointer.html#method.read)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296366,"byte_end":296453,"line_start":692,"line_end":692,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296455,"byte_end":296458,"line_start":693,"line_end":693,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296460,"byte_end":296472,"line_start":694,"line_end":694,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296474,"byte_end":296477,"line_start":695,"line_end":695,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::read`] for safety concerns and examples.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296479,"byte_end":296534,"line_start":696,"line_end":696,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296536,"byte_end":296539,"line_start":697,"line_end":697,"column_start":2,"column_end":5}},{"value":"/ [`ptr::read`]: crate::ptr::read","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296541,"byte_end":296576,"line_start":698,"line_end":698,"column_start":2,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296578,"byte_end":296587,"line_start":699,"line_end":699,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1841},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297238,"byte_end":297251,"line_start":722,"line_end":722,"column_start":16,"column_end":29},"name":"read_volatile","qualname":"<BitPtr<M, O, T>>::read_volatile","value":"pub unsafe fn read_volatile(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Performs a volatile read of the bit from `self`.","sig":null,"attributes":[{"value":"/ Performs a volatile read of the bit from `self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296701,"byte_end":296753,"line_start":706,"line_end":706,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296755,"byte_end":296758,"line_start":707,"line_end":707,"column_start":2,"column_end":5}},{"value":"/ Volatile operations are intended to act on I/O memory, and are","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296760,"byte_end":296826,"line_start":708,"line_end":708,"column_start":2,"column_end":68}},{"value":"/ guaranteed to not be elided or reördered by the compiler across other","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296828,"byte_end":296902,"line_start":709,"line_end":709,"column_start":2,"column_end":75}},{"value":"/ volatile operations.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296904,"byte_end":296928,"line_start":710,"line_end":710,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296930,"byte_end":296933,"line_start":711,"line_end":711,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296935,"byte_end":296949,"line_start":712,"line_end":712,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296951,"byte_end":296954,"line_start":713,"line_end":713,"column_start":2,"column_end":5}},{"value":"/ [`pointer::read_volatile`](https://doc.rust-lang.org/std/primitive.pointer.html#method.read_volatile)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296956,"byte_end":297061,"line_start":714,"line_end":714,"column_start":2,"column_end":107}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297063,"byte_end":297066,"line_start":715,"line_end":715,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297068,"byte_end":297080,"line_start":716,"line_end":716,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297082,"byte_end":297085,"line_start":717,"line_end":717,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::read_volatile`] for safety concerns and examples.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297087,"byte_end":297151,"line_start":718,"line_end":718,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297153,"byte_end":297156,"line_start":719,"line_end":719,"column_start":2,"column_end":5}},{"value":"/ [`ptr::read_volatile`]: crate::ptr::read_volatile","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297158,"byte_end":297211,"line_start":720,"line_end":720,"column_start":2,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297213,"byte_end":297222,"line_start":721,"line_end":721,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1842},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297767,"byte_end":297774,"line_start":741,"line_end":741,"column_start":16,"column_end":23},"name":"copy_to","qualname":"<BitPtr<M, O, T>>::copy_to","value":"pub unsafe fn copy_to<O2, T2>(Self, BitPtr<Mut, O2, T2>, usize) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `self` to `dest`. The source and destination\n may overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `self` to `dest`. The source and destination","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297336,"byte_end":297409,"line_start":726,"line_end":726,"column_start":2,"column_end":75}},{"value":"/ may overlap.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297411,"byte_end":297427,"line_start":727,"line_end":727,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297429,"byte_end":297432,"line_start":728,"line_end":728,"column_start":2,"column_end":5}},{"value":"/ NOTE: this has the *same* argument order as [`ptr::copy`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297434,"byte_end":297496,"line_start":729,"line_end":729,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297498,"byte_end":297501,"line_start":730,"line_end":730,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297503,"byte_end":297517,"line_start":731,"line_end":731,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297519,"byte_end":297522,"line_start":732,"line_end":732,"column_start":2,"column_end":5}},{"value":"/ [`pointer::copy_to`](https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_to)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297524,"byte_end":297617,"line_start":733,"line_end":733,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297619,"byte_end":297622,"line_start":734,"line_end":734,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297624,"byte_end":297636,"line_start":735,"line_end":735,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297638,"byte_end":297641,"line_start":736,"line_end":736,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::copy`] for safety concerns and examples.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297643,"byte_end":297698,"line_start":737,"line_end":737,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297700,"byte_end":297703,"line_start":738,"line_end":738,"column_start":2,"column_end":5}},{"value":"/ [`ptr::copy`]: crate::ptr::copy","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297705,"byte_end":297740,"line_start":739,"line_end":739,"column_start":2,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297742,"byte_end":297751,"line_start":740,"line_end":740,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1845},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299058,"byte_end":299080,"line_start":788,"line_end":788,"column_start":16,"column_end":38},"name":"copy_to_nonoverlapping","qualname":"<BitPtr<M, O, T>>::copy_to_nonoverlapping","value":"pub unsafe fn copy_to_nonoverlapping<O2, T2>(Self, BitPtr<Mut, O2, T2>, usize)\nwhere O2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `self` to `dest`. The source and destination\n may *not* overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `self` to `dest`. The source and destination","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298526,"byte_end":298599,"line_start":772,"line_end":772,"column_start":2,"column_end":75}},{"value":"/ may *not* overlap.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298601,"byte_end":298623,"line_start":773,"line_end":773,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298625,"byte_end":298628,"line_start":774,"line_end":774,"column_start":2,"column_end":5}},{"value":"/ NOTE: this has the *same* argument order as","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298630,"byte_end":298677,"line_start":775,"line_end":775,"column_start":2,"column_end":49}},{"value":"/ [`ptr::copy_nonoverlapping`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298679,"byte_end":298712,"line_start":776,"line_end":776,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298714,"byte_end":298717,"line_start":777,"line_end":777,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298719,"byte_end":298733,"line_start":778,"line_end":778,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298735,"byte_end":298738,"line_start":779,"line_end":779,"column_start":2,"column_end":5}},{"value":"/ [`pointer::copy_to_nonoverlapping`](https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_to_nonoverlapping)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298740,"byte_end":298863,"line_start":780,"line_end":780,"column_start":2,"column_end":125}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298865,"byte_end":298868,"line_start":781,"line_end":781,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298870,"byte_end":298882,"line_start":782,"line_end":782,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298884,"byte_end":298887,"line_start":783,"line_end":783,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::copy_nonoverlapping`] for safety concerns and examples.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298889,"byte_end":298959,"line_start":784,"line_end":784,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298961,"byte_end":298964,"line_start":785,"line_end":785,"column_start":2,"column_end":5}},{"value":"/ [`ptr::copy_nonoverlapping`](crate::ptr::copy_nonoverlapping)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298966,"byte_end":299031,"line_start":786,"line_end":786,"column_start":2,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299033,"byte_end":299042,"line_start":787,"line_end":787,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1848},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301279,"byte_end":301291,"line_start":853,"line_end":853,"column_start":9,"column_end":21},"name":"align_offset","qualname":"<BitPtr<M, O, T>>::align_offset","value":"pub fn align_offset(Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes the offset (in bits) that needs to be applied to the pointer in\n order to make it aligned to `align`.","sig":null,"attributes":[{"value":"/ Computes the offset (in bits) that needs to be applied to the pointer in","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299285,"byte_end":299361,"line_start":801,"line_end":801,"column_start":2,"column_end":78}},{"value":"/ order to make it aligned to `align`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299363,"byte_end":299403,"line_start":802,"line_end":802,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299405,"byte_end":299408,"line_start":803,"line_end":803,"column_start":2,"column_end":5}},{"value":"/ “Alignment” here means that the pointer is selecting the start bit of a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299410,"byte_end":299489,"line_start":804,"line_end":804,"column_start":2,"column_end":77}},{"value":"/ memory location whose address satisfies the requested alignment.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299491,"byte_end":299559,"line_start":805,"line_end":805,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299561,"byte_end":299564,"line_start":806,"line_end":806,"column_start":2,"column_end":5}},{"value":"/ `align` is measured in **bytes**. If you wish to align your bit-pointer","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299566,"byte_end":299641,"line_start":807,"line_end":807,"column_start":2,"column_end":77}},{"value":"/ to a specific fraction (½, ¼, or ⅛ of one byte), please file an issue","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299643,"byte_end":299720,"line_start":808,"line_end":808,"column_start":2,"column_end":75}},{"value":"/ and this functionality will be added to [`BitIdx`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299722,"byte_end":299777,"line_start":809,"line_end":809,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299779,"byte_end":299782,"line_start":810,"line_end":810,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299784,"byte_end":299798,"line_start":811,"line_end":811,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299800,"byte_end":299803,"line_start":812,"line_end":812,"column_start":2,"column_end":5}},{"value":"/ [`pointer::align_offset`](https://doc.rust-lang.org/std/primitive.pointer.html#method.align_offset)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299805,"byte_end":299908,"line_start":813,"line_end":813,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299910,"byte_end":299913,"line_start":814,"line_end":814,"column_start":2,"column_end":5}},{"value":"/ If the base-element address of the pointer is already aligned to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299915,"byte_end":299983,"line_start":815,"line_end":815,"column_start":2,"column_end":70}},{"value":"/ `align`, then this will return the bit-offset required to select the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299985,"byte_end":300057,"line_start":816,"line_end":816,"column_start":2,"column_end":74}},{"value":"/ first bit of the successor element.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300059,"byte_end":300098,"line_start":817,"line_end":817,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300100,"byte_end":300103,"line_start":818,"line_end":818,"column_start":2,"column_end":5}},{"value":"/ If it is not possible to align the pointer, the implementation returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300105,"byte_end":300179,"line_start":819,"line_end":819,"column_start":2,"column_end":76}},{"value":"/ `usize::MAX`. It is permissible for the implementation to *always*","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300181,"byte_end":300251,"line_start":820,"line_end":820,"column_start":2,"column_end":72}},{"value":"/ return `usize::MAX`. Only your algorithm’s performance can depend on","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300253,"byte_end":300327,"line_start":821,"line_end":821,"column_start":2,"column_end":74}},{"value":"/ getting a usable offset here, not its correctness.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300329,"byte_end":300383,"line_start":822,"line_end":822,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300385,"byte_end":300388,"line_start":823,"line_end":823,"column_start":2,"column_end":5}},{"value":"/ The offset is expressed in number of bits, and not `T` elements or","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300390,"byte_end":300460,"line_start":824,"line_end":824,"column_start":2,"column_end":72}},{"value":"/ bytes. The value returned can be used with the [`wrapping_add`] method.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300462,"byte_end":300537,"line_start":825,"line_end":825,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300539,"byte_end":300542,"line_start":826,"line_end":826,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300544,"byte_end":300556,"line_start":827,"line_end":827,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300558,"byte_end":300561,"line_start":828,"line_end":828,"column_start":2,"column_end":5}},{"value":"/ There are no guarantees whatsoëver that offsetting the pointer will not","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300563,"byte_end":300639,"line_start":829,"line_end":829,"column_start":2,"column_end":77}},{"value":"/ overflow or go beyond the allocation that the pointer points into. It is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300641,"byte_end":300717,"line_start":830,"line_end":830,"column_start":2,"column_end":78}},{"value":"/ up to the caller to ensure that the returned offset is correct in all","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300719,"byte_end":300792,"line_start":831,"line_end":831,"column_start":2,"column_end":75}},{"value":"/ terms other than alignment.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300794,"byte_end":300825,"line_start":832,"line_end":832,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300827,"byte_end":300830,"line_start":833,"line_end":833,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300832,"byte_end":300844,"line_start":834,"line_end":834,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300846,"byte_end":300849,"line_start":835,"line_end":835,"column_start":2,"column_end":5}},{"value":"/ The function panics if `align` is not a power-of-two.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300851,"byte_end":300908,"line_start":836,"line_end":836,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300910,"byte_end":300913,"line_start":837,"line_end":837,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300915,"byte_end":300929,"line_start":838,"line_end":838,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300931,"byte_end":300934,"line_start":839,"line_end":839,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300936,"byte_end":300947,"line_start":840,"line_end":840,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300949,"byte_end":300976,"line_start":841,"line_end":841,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300978,"byte_end":300981,"line_start":842,"line_end":842,"column_start":2,"column_end":5}},{"value":"/ let data = [0u8; 3];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300983,"byte_end":301007,"line_start":843,"line_end":843,"column_start":2,"column_end":26}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_ref(&data[0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301009,"byte_end":301064,"line_start":844,"line_end":844,"column_start":2,"column_end":57}},{"value":"/ let ptr = unsafe { ptr.add(2) };","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301066,"byte_end":301102,"line_start":845,"line_end":845,"column_start":2,"column_end":38}},{"value":"/ let count = ptr.align_offset(2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301104,"byte_end":301140,"line_start":846,"line_end":846,"column_start":2,"column_end":38}},{"value":"/ assert!(count > 0);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301142,"byte_end":301165,"line_start":847,"line_end":847,"column_start":2,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301167,"byte_end":301174,"line_start":848,"line_end":848,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301176,"byte_end":301179,"line_start":849,"line_end":849,"column_start":2,"column_end":5}},{"value":"/ [`BitIdx`]: crate::index::BitIdx","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301181,"byte_end":301217,"line_start":850,"line_end":850,"column_start":2,"column_end":38}},{"value":"/ [`wrapping_add`]: Self::wrapping_add","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301219,"byte_end":301259,"line_start":851,"line_end":851,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301261,"byte_end":301270,"line_start":852,"line_end":852,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1852},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301924,"byte_end":301932,"line_start":882,"line_end":882,"column_start":9,"column_end":17},"name":"from_ref","qualname":"<BitPtr<Const, O, T>>::from_ref","value":"pub fn from_ref(&T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` from an element reference.","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` from an element reference.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301685,"byte_end":301737,"line_start":872,"line_end":872,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301739,"byte_end":301742,"line_start":873,"line_end":873,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301744,"byte_end":301760,"line_start":874,"line_end":874,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301762,"byte_end":301765,"line_start":875,"line_end":875,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A borrowed memory element.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301767,"byte_end":301807,"line_start":876,"line_end":876,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301809,"byte_end":301812,"line_start":877,"line_end":877,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301814,"byte_end":301827,"line_start":878,"line_end":878,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301829,"byte_end":301832,"line_start":879,"line_end":879,"column_start":2,"column_end":5}},{"value":"/ A read-only bit-pointer to the zeroth bit in the `*elem` location.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301834,"byte_end":301904,"line_start":880,"line_end":880,"column_start":2,"column_end":72}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301906,"byte_end":301915,"line_start":881,"line_end":881,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1853},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302319,"byte_end":302327,"line_start":898,"line_end":898,"column_start":9,"column_end":17},"name":"from_ptr","qualname":"<BitPtr<Const, O, T>>::from_ptr","value":"pub fn from_ptr(*const T) -> Result<Self, BitPtrError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to construct a `BitPtr` from an element location.","sig":null,"attributes":[{"value":"/ Attempts to construct a `BitPtr` from an element location.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301997,"byte_end":302059,"line_start":886,"line_end":886,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302061,"byte_end":302064,"line_start":887,"line_end":887,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302066,"byte_end":302082,"line_start":888,"line_end":888,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302084,"byte_end":302087,"line_start":889,"line_end":889,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A read-only element address.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302089,"byte_end":302131,"line_start":890,"line_end":890,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302133,"byte_end":302136,"line_start":891,"line_end":891,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302138,"byte_end":302151,"line_start":892,"line_end":892,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302153,"byte_end":302156,"line_start":893,"line_end":893,"column_start":2,"column_end":5}},{"value":"/ A read-only bit-pointer to the zeroth bit in the `*elem` location, if","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302158,"byte_end":302231,"line_start":894,"line_end":894,"column_start":2,"column_end":75}},{"value":"/ `elem` is well-formed.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302233,"byte_end":302259,"line_start":895,"line_end":895,"column_start":2,"column_end":28}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302261,"byte_end":302278,"line_start":896,"line_end":896,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302280,"byte_end":302310,"line_start":897,"line_end":897,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1854},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303267,"byte_end":303277,"line_start":926,"line_end":926,"column_start":9,"column_end":19},"name":"from_slice","qualname":"<BitPtr<Const, O, T>>::from_slice","value":"pub fn from_slice(&[T]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` from a slice reference.","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` from a slice reference.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302408,"byte_end":302457,"line_start":902,"line_end":902,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302459,"byte_end":302462,"line_start":903,"line_end":903,"column_start":2,"column_end":5}},{"value":"/ This differs from [`from_ref`] in that the returned pointer keeps its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302464,"byte_end":302537,"line_start":904,"line_end":904,"column_start":2,"column_end":75}},{"value":"/ provenance over the entire slice, whereas producing a pointer to the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302539,"byte_end":302611,"line_start":905,"line_end":905,"column_start":2,"column_end":74}},{"value":"/ base bit of a slice with `BitPtr::from_ref(&slice[0])` narrows its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302613,"byte_end":302683,"line_start":906,"line_end":906,"column_start":2,"column_end":72}},{"value":"/ provenance to only the `slice[0]` element, and calling [`add`] to leave","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302685,"byte_end":302760,"line_start":907,"line_end":907,"column_start":2,"column_end":77}},{"value":"/ that element, even remaining in the slice, may cause UB.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302762,"byte_end":302822,"line_start":908,"line_end":908,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302824,"byte_end":302827,"line_start":909,"line_end":909,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302829,"byte_end":302845,"line_start":910,"line_end":910,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302847,"byte_end":302850,"line_start":911,"line_end":911,"column_start":2,"column_end":5}},{"value":"/ - `slice`: An immutabily borrowed slice of memory.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302852,"byte_end":302906,"line_start":912,"line_end":912,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302908,"byte_end":302911,"line_start":913,"line_end":913,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302913,"byte_end":302926,"line_start":914,"line_end":914,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302928,"byte_end":302931,"line_start":915,"line_end":915,"column_start":2,"column_end":5}},{"value":"/ A read-only bit-pointer to the zeroth bit in the base location of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302933,"byte_end":303006,"line_start":916,"line_end":916,"column_start":2,"column_end":75}},{"value":"/ slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303008,"byte_end":303018,"line_start":917,"line_end":917,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303020,"byte_end":303023,"line_start":918,"line_end":918,"column_start":2,"column_end":5}},{"value":"/ This pointer has provenance over the entire `slice`, and may safely use","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303025,"byte_end":303100,"line_start":919,"line_end":919,"column_start":2,"column_end":77}},{"value":"/ [`add`] to traverse memory elements as long as it stays within the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303102,"byte_end":303172,"line_start":920,"line_end":920,"column_start":2,"column_end":72}},{"value":"/ slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303174,"byte_end":303184,"line_start":921,"line_end":921,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303186,"byte_end":303189,"line_start":922,"line_end":922,"column_start":2,"column_end":5}},{"value":"/ [`add`]: Self::add","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303191,"byte_end":303213,"line_start":923,"line_end":923,"column_start":2,"column_end":24}},{"value":"/ [`from_ref`]: Self::from_ref","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303215,"byte_end":303247,"line_start":924,"line_end":924,"column_start":2,"column_end":34}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303249,"byte_end":303258,"line_start":925,"line_end":925,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1855},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303537,"byte_end":303544,"line_start":937,"line_end":937,"column_start":9,"column_end":16},"name":"pointer","qualname":"<BitPtr<Const, O, T>>::pointer","value":"pub fn pointer(&Self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Gets the pointer to the base memory location containing the referent\n bit.\n","sig":null,"attributes":[{"value":"/ Gets the pointer to the base memory location containing the referent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303403,"byte_end":303475,"line_start":933,"line_end":933,"column_start":2,"column_end":74}},{"value":"/ bit.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303477,"byte_end":303485,"line_start":934,"line_end":934,"column_start":2,"column_end":10}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303487,"byte_end":303496,"line_start":935,"line_end":935,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303498,"byte_end":303528,"line_start":936,"line_end":936,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1859},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304367,"byte_end":304375,"line_start":968,"line_end":968,"column_start":9,"column_end":17},"name":"from_mut","qualname":"<BitPtr<Mut, O, T>>::from_mut","value":"pub fn from_mut(&mut T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` from an element reference.","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` from an element reference.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303667,"byte_end":303719,"line_start":947,"line_end":947,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303721,"byte_end":303724,"line_start":948,"line_end":948,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303726,"byte_end":303742,"line_start":949,"line_end":949,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303744,"byte_end":303747,"line_start":950,"line_end":950,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A mutably borrowed memory element.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303749,"byte_end":303797,"line_start":951,"line_end":951,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303799,"byte_end":303802,"line_start":952,"line_end":952,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303804,"byte_end":303817,"line_start":953,"line_end":953,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303819,"byte_end":303822,"line_start":954,"line_end":954,"column_start":2,"column_end":5}},{"value":"/ A write-capable bit-pointer to the zeroth bit in the `*elem` location.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303824,"byte_end":303898,"line_start":955,"line_end":955,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303900,"byte_end":303903,"line_start":956,"line_end":956,"column_start":2,"column_end":5}},{"value":"/ Note that even if `elem` is an address within a contiguous array or","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303905,"byte_end":303976,"line_start":957,"line_end":957,"column_start":2,"column_end":73}},{"value":"/ slice, the returned bit-pointer only has provenance for the `elem`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303978,"byte_end":304048,"line_start":958,"line_end":958,"column_start":2,"column_end":72}},{"value":"/ location, and no other.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304050,"byte_end":304077,"line_start":959,"line_end":959,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304079,"byte_end":304082,"line_start":960,"line_end":960,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304084,"byte_end":304096,"line_start":961,"line_end":961,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304098,"byte_end":304101,"line_start":962,"line_end":962,"column_start":2,"column_end":5}},{"value":"/ The exclusive borrow of `elem` is released after this function returns.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304103,"byte_end":304178,"line_start":963,"line_end":963,"column_start":2,"column_end":77}},{"value":"/ However, you must not use any other pointer than that returned by this","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304180,"byte_end":304254,"line_start":964,"line_end":964,"column_start":2,"column_end":76}},{"value":"/ function to view or modify `*elem`, unless the `T` type supports aliased","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304256,"byte_end":304332,"line_start":965,"line_end":965,"column_start":2,"column_end":78}},{"value":"/ mutation.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304334,"byte_end":304347,"line_start":966,"line_end":966,"column_start":2,"column_end":15}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304349,"byte_end":304358,"line_start":967,"line_end":967,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1860},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304774,"byte_end":304786,"line_start":984,"line_end":984,"column_start":9,"column_end":21},"name":"from_mut_ptr","qualname":"<BitPtr<Mut, O, T>>::from_mut_ptr","value":"pub fn from_mut_ptr(*mut T) -> Result<Self, BitPtrError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to construct a `BitPtr` from an element location.","sig":null,"attributes":[{"value":"/ Attempts to construct a `BitPtr` from an element location.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304444,"byte_end":304506,"line_start":972,"line_end":972,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304508,"byte_end":304511,"line_start":973,"line_end":973,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304513,"byte_end":304529,"line_start":974,"line_end":974,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304531,"byte_end":304534,"line_start":975,"line_end":975,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A write-capable element address.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304536,"byte_end":304582,"line_start":976,"line_end":976,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304584,"byte_end":304587,"line_start":977,"line_end":977,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304589,"byte_end":304602,"line_start":978,"line_end":978,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304604,"byte_end":304607,"line_start":979,"line_end":979,"column_start":2,"column_end":5}},{"value":"/ A write-capable bit-pointer to the zeroth bit in the `*elem` location,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304609,"byte_end":304683,"line_start":980,"line_end":980,"column_start":2,"column_end":76}},{"value":"/ if `elem` is well-formed.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304685,"byte_end":304714,"line_start":981,"line_end":981,"column_start":2,"column_end":31}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304716,"byte_end":304733,"line_start":982,"line_end":982,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304735,"byte_end":304765,"line_start":983,"line_end":983,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1861},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305729,"byte_end":305743,"line_start":1012,"line_end":1012,"column_start":9,"column_end":23},"name":"from_mut_slice","qualname":"<BitPtr<Mut, O, T>>::from_mut_slice","value":"pub fn from_mut_slice(&mut [T]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` from a slice reference.","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` from a slice reference.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304865,"byte_end":304914,"line_start":988,"line_end":988,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304916,"byte_end":304919,"line_start":989,"line_end":989,"column_start":2,"column_end":5}},{"value":"/ This differs from [`from_mut`] in that the returned pointer keeps its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304921,"byte_end":304994,"line_start":990,"line_end":990,"column_start":2,"column_end":75}},{"value":"/ provenance over the entire slice, whereas producing a pointer to the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304996,"byte_end":305068,"line_start":991,"line_end":991,"column_start":2,"column_end":74}},{"value":"/ base bit of a slice with `BitPtr::from_mut(&mut slice[0])` narrows its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305070,"byte_end":305144,"line_start":992,"line_end":992,"column_start":2,"column_end":76}},{"value":"/ provenance to only the `slice[0]` element, and calling [`add`] to leave","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305146,"byte_end":305221,"line_start":993,"line_end":993,"column_start":2,"column_end":77}},{"value":"/ that element, even remaining in the slice, may cause UB.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305223,"byte_end":305283,"line_start":994,"line_end":994,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305285,"byte_end":305288,"line_start":995,"line_end":995,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305290,"byte_end":305306,"line_start":996,"line_end":996,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305308,"byte_end":305311,"line_start":997,"line_end":997,"column_start":2,"column_end":5}},{"value":"/ - `slice`: A mutabily borrowed slice of memory.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305313,"byte_end":305364,"line_start":998,"line_end":998,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305366,"byte_end":305369,"line_start":999,"line_end":999,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305371,"byte_end":305384,"line_start":1000,"line_end":1000,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305386,"byte_end":305389,"line_start":1001,"line_end":1001,"column_start":2,"column_end":5}},{"value":"/ A write-capable bit-pointer to the zeroth bit in the base location of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305391,"byte_end":305464,"line_start":1002,"line_end":1002,"column_start":2,"column_end":75}},{"value":"/ the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305466,"byte_end":305480,"line_start":1003,"line_end":1003,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305482,"byte_end":305485,"line_start":1004,"line_end":1004,"column_start":2,"column_end":5}},{"value":"/ This pointer has provenance over the entire `slice`, and may safely use","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305487,"byte_end":305562,"line_start":1005,"line_end":1005,"column_start":2,"column_end":77}},{"value":"/ [`add`] to traverse memory elements as long as it stays within the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305564,"byte_end":305634,"line_start":1006,"line_end":1006,"column_start":2,"column_end":72}},{"value":"/ slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305636,"byte_end":305646,"line_start":1007,"line_end":1007,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305648,"byte_end":305651,"line_start":1008,"line_end":1008,"column_start":2,"column_end":5}},{"value":"/ [`add`]: Self::add","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305653,"byte_end":305675,"line_start":1009,"line_end":1009,"column_start":2,"column_end":24}},{"value":"/ [`from_mut`]: Self::from_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305677,"byte_end":305709,"line_start":1010,"line_end":1010,"column_start":2,"column_end":34}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305711,"byte_end":305720,"line_start":1011,"line_end":1011,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1862},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306011,"byte_end":306018,"line_start":1023,"line_end":1023,"column_start":9,"column_end":16},"name":"pointer","qualname":"<BitPtr<Mut, O, T>>::pointer","value":"pub fn pointer(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Gets the pointer to the base memory location containing the referent\n bit.\n","sig":null,"attributes":[{"value":"/ Gets the pointer to the base memory location containing the referent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305877,"byte_end":305949,"line_start":1019,"line_end":1019,"column_start":2,"column_end":74}},{"value":"/ bit.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305951,"byte_end":305959,"line_start":1020,"line_end":1020,"column_start":2,"column_end":10}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305961,"byte_end":305970,"line_start":1021,"line_end":1021,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305972,"byte_end":306002,"line_start":1022,"line_end":1022,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1863},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307733,"byte_end":307739,"line_start":1076,"line_end":1076,"column_start":16,"column_end":22},"name":"as_mut","qualname":"<BitPtr<Mut, O, T>>::as_mut","value":"pub unsafe fn as_mut<'a>(Self) -> Option<BitRef>","parent":null,"children":[],"decl_id":null,"docs":" Produces a proxy mutable reference to the referent bit.","sig":null,"attributes":[{"value":"/ Produces a proxy mutable reference to the referent bit.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306111,"byte_end":306170,"line_start":1029,"line_end":1029,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306172,"byte_end":306175,"line_start":1030,"line_end":1030,"column_start":2,"column_end":5}},{"value":"/ Because `BitPtr` is a non-null, well-aligned, pointer, this never","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306177,"byte_end":306246,"line_start":1031,"line_end":1031,"column_start":2,"column_end":71}},{"value":"/ returns `None`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306248,"byte_end":306267,"line_start":1032,"line_end":1032,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306269,"byte_end":306272,"line_start":1033,"line_end":1033,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306274,"byte_end":306288,"line_start":1034,"line_end":1034,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306290,"byte_end":306293,"line_start":1035,"line_end":1035,"column_start":2,"column_end":5}},{"value":"/ [`pointer::as_mut`](https://doc.rust-lang.org/std/primitive.pointer.html#method.as_mut)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306295,"byte_end":306386,"line_start":1036,"line_end":1036,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306388,"byte_end":306391,"line_start":1037,"line_end":1037,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306393,"byte_end":306414,"line_start":1038,"line_end":1038,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306416,"byte_end":306419,"line_start":1039,"line_end":1039,"column_start":2,"column_end":5}},{"value":"/ This produces a proxy type rather than a true reference. The proxy","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306421,"byte_end":306491,"line_start":1040,"line_end":1040,"column_start":2,"column_end":72}},{"value":"/ implements `DerefMut<Target = bool>`, and can be converted to `&mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306493,"byte_end":306564,"line_start":1041,"line_end":1041,"column_start":2,"column_end":73}},{"value":"/ bool` with `&mut *`. Writes to the proxy are not reflected in the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306566,"byte_end":306635,"line_start":1042,"line_end":1042,"column_start":2,"column_end":71}},{"value":"/ proxied location until the proxy is destroyed, either through `Drop` or","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306637,"byte_end":306712,"line_start":1043,"line_end":1043,"column_start":2,"column_end":77}},{"value":"/ with its [`set`] method.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306714,"byte_end":306742,"line_start":1044,"line_end":1044,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306744,"byte_end":306747,"line_start":1045,"line_end":1045,"column_start":2,"column_end":5}},{"value":"/ The proxy must be bound as `mut` in order to write through the binding.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306749,"byte_end":306824,"line_start":1046,"line_end":1046,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306826,"byte_end":306829,"line_start":1047,"line_end":1047,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306831,"byte_end":306843,"line_start":1048,"line_end":1048,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306845,"byte_end":306848,"line_start":1049,"line_end":1049,"column_start":2,"column_end":5}},{"value":"/ Since `BitPtr` does not permit null or misaligned pointers, this method","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306850,"byte_end":306925,"line_start":1050,"line_end":1050,"column_start":2,"column_end":77}},{"value":"/ will always dereference the pointer and you must ensure the following","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306927,"byte_end":307000,"line_start":1051,"line_end":1051,"column_start":2,"column_end":75}},{"value":"/ conditions are met:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307002,"byte_end":307025,"line_start":1052,"line_end":1052,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307027,"byte_end":307030,"line_start":1053,"line_end":1053,"column_start":2,"column_end":5}},{"value":"/ - the pointer must be dereferencable as defined in the standard library","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307032,"byte_end":307107,"line_start":1054,"line_end":1054,"column_start":2,"column_end":77}},{"value":"/   documentation","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307109,"byte_end":307128,"line_start":1055,"line_end":1055,"column_start":2,"column_end":21}},{"value":"/ - the pointer must point to an initialized instance of `T`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307130,"byte_end":307192,"line_start":1056,"line_end":1056,"column_start":2,"column_end":64}},{"value":"/ - you must ensure that no other pointer will race to modify the referent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307194,"byte_end":307270,"line_start":1057,"line_end":1057,"column_start":2,"column_end":78}},{"value":"/   location while this call is reading from memory to produce the proxy","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307272,"byte_end":307346,"line_start":1058,"line_end":1058,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307348,"byte_end":307351,"line_start":1059,"line_end":1059,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307353,"byte_end":307367,"line_start":1060,"line_end":1060,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307369,"byte_end":307372,"line_start":1061,"line_end":1061,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307374,"byte_end":307385,"line_start":1062,"line_end":1062,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307387,"byte_end":307414,"line_start":1063,"line_end":1063,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307416,"byte_end":307419,"line_start":1064,"line_end":1064,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307421,"byte_end":307444,"line_start":1065,"line_end":1065,"column_start":2,"column_end":25}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_mut(&mut data);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307446,"byte_end":307502,"line_start":1066,"line_end":1066,"column_start":2,"column_end":58}},{"value":"/ let mut val = unsafe { ptr.as_mut() }.unwrap();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307504,"byte_end":307555,"line_start":1067,"line_end":1067,"column_start":2,"column_end":53}},{"value":"/ assert!(!*val);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307557,"byte_end":307576,"line_start":1068,"line_end":1068,"column_start":2,"column_end":21}},{"value":"/ *val = true;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307578,"byte_end":307594,"line_start":1069,"line_end":1069,"column_start":2,"column_end":18}},{"value":"/ assert!(*val);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307596,"byte_end":307614,"line_start":1070,"line_end":1070,"column_start":2,"column_end":20}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307616,"byte_end":307623,"line_start":1071,"line_end":1071,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307625,"byte_end":307628,"line_start":1072,"line_end":1072,"column_start":2,"column_end":5}},{"value":"/ [`set`]: crate::ptr::BitRef::set","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307630,"byte_end":307666,"line_start":1073,"line_end":1073,"column_start":2,"column_end":38}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307668,"byte_end":307685,"line_start":1074,"line_end":1074,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307687,"byte_end":307717,"line_start":1075,"line_end":1075,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1865},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308302,"byte_end":308311,"line_start":1096,"line_end":1096,"column_start":16,"column_end":25},"name":"copy_from","qualname":"<BitPtr<Mut, O, T>>::copy_from","value":"pub unsafe fn copy_from<O2, T2>(Self, BitPtr<Const, O2, T2>, usize) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `src` to `self`. The source and destination may\n overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `src` to `self`. The source and destination may","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307824,"byte_end":307900,"line_start":1080,"line_end":1080,"column_start":2,"column_end":78}},{"value":"/ overlap.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307902,"byte_end":307914,"line_start":1081,"line_end":1081,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307916,"byte_end":307919,"line_start":1082,"line_end":1082,"column_start":2,"column_end":5}},{"value":"/ Note: this has the *opposite* argument order of [`ptr::copy`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307921,"byte_end":307987,"line_start":1083,"line_end":1083,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307989,"byte_end":307992,"line_start":1084,"line_end":1084,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307994,"byte_end":308008,"line_start":1085,"line_end":1085,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308010,"byte_end":308013,"line_start":1086,"line_end":1086,"column_start":2,"column_end":5}},{"value":"/ [`pointer::copy_from`](https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_from)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308015,"byte_end":308112,"line_start":1087,"line_end":1087,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308114,"byte_end":308117,"line_start":1088,"line_end":1088,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308119,"byte_end":308131,"line_start":1089,"line_end":1089,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308133,"byte_end":308136,"line_start":1090,"line_end":1090,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::copy`] for safety concerns and examples.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308138,"byte_end":308193,"line_start":1091,"line_end":1091,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308195,"byte_end":308198,"line_start":1092,"line_end":1092,"column_start":2,"column_end":5}},{"value":"/ [`ptr::copy`]: crate::ptr::copy","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308200,"byte_end":308235,"line_start":1093,"line_end":1093,"column_start":2,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308237,"byte_end":308254,"line_start":1094,"line_end":1094,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308256,"byte_end":308286,"line_start":1095,"line_end":1095,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1868},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309031,"byte_end":309055,"line_start":1124,"line_end":1124,"column_start":16,"column_end":40},"name":"copy_from_nonoverlapping","qualname":"<BitPtr<Mut, O, T>>::copy_from_nonoverlapping","value":"pub unsafe fn copy_from_nonoverlapping<O2,\n                                       T2>(Self, BitPtr<Const, O2, T2>, usize)\nwhere O2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `src` to `self`. The source and destination may\n *not* overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `src` to `self`. The source and destination may","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308452,"byte_end":308528,"line_start":1107,"line_end":1107,"column_start":2,"column_end":78}},{"value":"/ *not* overlap.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308530,"byte_end":308548,"line_start":1108,"line_end":1108,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308550,"byte_end":308553,"line_start":1109,"line_end":1109,"column_start":2,"column_end":5}},{"value":"/ NOTE: this has the *opposite* argument order of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308555,"byte_end":308606,"line_start":1110,"line_end":1110,"column_start":2,"column_end":53}},{"value":"/ [`ptr::copy_nonoverlapping`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308608,"byte_end":308641,"line_start":1111,"line_end":1111,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308643,"byte_end":308646,"line_start":1112,"line_end":1112,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308648,"byte_end":308662,"line_start":1113,"line_end":1113,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308664,"byte_end":308667,"line_start":1114,"line_end":1114,"column_start":2,"column_end":5}},{"value":"/ [`pointer::copy_from_nonoverlapping`](https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_from_nonoverlapping)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308669,"byte_end":308796,"line_start":1115,"line_end":1115,"column_start":2,"column_end":129}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308798,"byte_end":308801,"line_start":1116,"line_end":1116,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308803,"byte_end":308815,"line_start":1117,"line_end":1117,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308817,"byte_end":308820,"line_start":1118,"line_end":1118,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::copy_nonoverlapping`] for safety concerns and examples.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308822,"byte_end":308892,"line_start":1119,"line_end":1119,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308894,"byte_end":308897,"line_start":1120,"line_end":1120,"column_start":2,"column_end":5}},{"value":"/ [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308899,"byte_end":308964,"line_start":1121,"line_end":1121,"column_start":2,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308966,"byte_end":308983,"line_start":1122,"line_end":1122,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308985,"byte_end":309015,"line_start":1123,"line_end":1123,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1871},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309560,"byte_end":309565,"line_start":1146,"line_end":1146,"column_start":16,"column_end":21},"name":"write","qualname":"<BitPtr<Mut, O, T>>::write","value":"pub unsafe fn write(Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Overwrites a memory location with the given bit.","sig":null,"attributes":[{"value":"/ Overwrites a memory location with the given bit.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309211,"byte_end":309263,"line_start":1135,"line_end":1135,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309265,"byte_end":309268,"line_start":1136,"line_end":1136,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::write`] for safety concerns and examples.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309270,"byte_end":309326,"line_start":1137,"line_end":1137,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309328,"byte_end":309331,"line_start":1138,"line_end":1138,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309333,"byte_end":309347,"line_start":1139,"line_end":1139,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309349,"byte_end":309352,"line_start":1140,"line_end":1140,"column_start":2,"column_end":5}},{"value":"/ [`pointer::write`](https://doc.rust-lang.org/std/primitive.pointer.html#method.write)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309354,"byte_end":309443,"line_start":1141,"line_end":1141,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309445,"byte_end":309448,"line_start":1142,"line_end":1142,"column_start":2,"column_end":5}},{"value":"/ [`ptr::write`]: crate::ptr::write","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309450,"byte_end":309487,"line_start":1143,"line_end":1143,"column_start":2,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309489,"byte_end":309498,"line_start":1144,"line_end":1144,"column_start":2,"column_end":11}},{"value":"allow(clippy :: clippy :: missing_safety_doc)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309500,"byte_end":309544,"line_start":1145,"line_end":1145,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1872},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310555,"byte_end":310569,"line_start":1172,"line_end":1172,"column_start":16,"column_end":30},"name":"write_volatile","qualname":"<BitPtr<Mut, O, T>>::write_volatile","value":"pub unsafe fn write_volatile(Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Performs a volatile write of a memory location with the given bit.","sig":null,"attributes":[{"value":"/ Performs a volatile write of a memory location with the given bit.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309654,"byte_end":309724,"line_start":1150,"line_end":1150,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309726,"byte_end":309729,"line_start":1151,"line_end":1151,"column_start":2,"column_end":5}},{"value":"/ Because processors do not have single-bit write instructions, this must","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309731,"byte_end":309806,"line_start":1152,"line_end":1152,"column_start":2,"column_end":77}},{"value":"/ perform a volatile read of the location, perform the bit modification","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309808,"byte_end":309881,"line_start":1153,"line_end":1153,"column_start":2,"column_end":75}},{"value":"/ within the processor register, and then perform a volatile write back to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309883,"byte_end":309959,"line_start":1154,"line_end":1154,"column_start":2,"column_end":78}},{"value":"/ memory. These three steps are guaranteed to be sequential, but are not","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309961,"byte_end":310035,"line_start":1155,"line_end":1155,"column_start":2,"column_end":76}},{"value":"/ guaranteed to be atomic.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310037,"byte_end":310065,"line_start":1156,"line_end":1156,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310067,"byte_end":310070,"line_start":1157,"line_end":1157,"column_start":2,"column_end":5}},{"value":"/ Volatile operations are intended to act on I/O memory, and are","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310072,"byte_end":310138,"line_start":1158,"line_end":1158,"column_start":2,"column_end":68}},{"value":"/ guaranteed to not be elided or reördered by the compiler across other","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310140,"byte_end":310214,"line_start":1159,"line_end":1159,"column_start":2,"column_end":75}},{"value":"/ volatile operations.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310216,"byte_end":310240,"line_start":1160,"line_end":1160,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310242,"byte_end":310245,"line_start":1161,"line_end":1161,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310247,"byte_end":310261,"line_start":1162,"line_end":1162,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310263,"byte_end":310266,"line_start":1163,"line_end":1163,"column_start":2,"column_end":5}},{"value":"/ [`pointer::write_volatile`](https://doc.rust-lang.org/std/primitive.pointer.html#method.write_volatile)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310268,"byte_end":310375,"line_start":1164,"line_end":1164,"column_start":2,"column_end":109}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310377,"byte_end":310380,"line_start":1165,"line_end":1165,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310382,"byte_end":310394,"line_start":1166,"line_end":1166,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310396,"byte_end":310399,"line_start":1167,"line_end":1167,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::write_volatile`] for safety concerns and examples.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310401,"byte_end":310466,"line_start":1168,"line_end":1168,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310468,"byte_end":310471,"line_start":1169,"line_end":1169,"column_start":2,"column_end":5}},{"value":"/ [`ptr::write_volatile`]: crate::ptr::write_volatile","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310473,"byte_end":310528,"line_start":1170,"line_end":1170,"column_start":2,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310530,"byte_end":310539,"line_start":1171,"line_end":1171,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1873},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311150,"byte_end":311157,"line_start":1196,"line_end":1196,"column_start":16,"column_end":23},"name":"replace","qualname":"<BitPtr<Mut, O, T>>::replace","value":"pub unsafe fn replace(Self, bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Replaces the bit at `*self` with `src`, returning the old bit.","sig":null,"attributes":[{"value":"/ Replaces the bit at `*self` with `src`, returning the old bit.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310804,"byte_end":310870,"line_start":1184,"line_end":1184,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310872,"byte_end":310875,"line_start":1185,"line_end":1185,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310877,"byte_end":310891,"line_start":1186,"line_end":1186,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310893,"byte_end":310896,"line_start":1187,"line_end":1187,"column_start":2,"column_end":5}},{"value":"/ [`pointer::replace`](https://doc.rust-lang.org/std/primitive.pointer.html#method.replace)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310898,"byte_end":310991,"line_start":1188,"line_end":1188,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310993,"byte_end":310996,"line_start":1189,"line_end":1189,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310998,"byte_end":311010,"line_start":1190,"line_end":1190,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311012,"byte_end":311015,"line_start":1191,"line_end":1191,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::replace`] for safety concerns and examples.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311017,"byte_end":311075,"line_start":1192,"line_end":1192,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311077,"byte_end":311080,"line_start":1193,"line_end":1193,"column_start":2,"column_end":5}},{"value":"/ [`ptr::replace`]: crate::ptr::replace","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311082,"byte_end":311123,"line_start":1194,"line_end":1194,"column_start":2,"column_end":43}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311125,"byte_end":311134,"line_start":1195,"line_end":1195,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1874},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311567,"byte_end":311571,"line_start":1214,"line_end":1214,"column_start":16,"column_end":20},"name":"swap","qualname":"<BitPtr<Mut, O, T>>::swap","value":"pub unsafe fn swap<O2, T2>(Self, BitPtr<Mut, O2, T2>) where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Swaps the bits at two mutable locations. They may overlap.","sig":null,"attributes":[{"value":"/ Swaps the bits at two mutable locations. They may overlap.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311240,"byte_end":311302,"line_start":1202,"line_end":1202,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311304,"byte_end":311307,"line_start":1203,"line_end":1203,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311309,"byte_end":311323,"line_start":1204,"line_end":1204,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311325,"byte_end":311328,"line_start":1205,"line_end":1205,"column_start":2,"column_end":5}},{"value":"/ [`pointer::swap`](https://doc.rust-lang.org/std/primitive.pointer.html#method.swap)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311330,"byte_end":311417,"line_start":1206,"line_end":1206,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311419,"byte_end":311422,"line_start":1207,"line_end":1207,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311424,"byte_end":311436,"line_start":1208,"line_end":1208,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311438,"byte_end":311441,"line_start":1209,"line_end":1209,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::swap`] for safety concerns and examples.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311443,"byte_end":311498,"line_start":1210,"line_end":1210,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311500,"byte_end":311503,"line_start":1211,"line_end":1211,"column_start":2,"column_end":5}},{"value":"/ [`ptr::swap`]: crate::ptr::swap","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311505,"byte_end":311540,"line_start":1212,"line_end":1212,"column_start":2,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311542,"byte_end":311551,"line_start":1213,"line_end":1213,"column_start":2,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5454},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":315514,"byte_end":315528,"line_start":1423,"line_end":1423,"column_start":2,"column_end":16},"name":"InvalidAddress","qualname":"::ptr::single::BitPtrError::InvalidAddress","value":"BitPtrError::InvalidAddress(AddressError<T>)","parent":{"krate":0,"index":5452},"children":[],"decl_id":null,"docs":" The element address was somehow invalid.\n","sig":null,"attributes":[{"value":"/ The element address was somehow invalid.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":315468,"byte_end":315512,"line_start":1422,"line_end":1422,"column_start":2,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5457},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":315588,"byte_end":315600,"line_start":1425,"line_end":1425,"column_start":2,"column_end":14},"name":"InvalidIndex","qualname":"::ptr::single::BitPtrError::InvalidIndex","value":"BitPtrError::InvalidIndex(BitIdxError<T::Mem>)","parent":{"krate":0,"index":5452},"children":[],"decl_id":null,"docs":" The bit index was somehow invalid.\n","sig":null,"attributes":[{"value":"/ The bit index was somehow invalid.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":315548,"byte_end":315586,"line_start":1424,"line_end":1424,"column_start":2,"column_end":40}}]},{"kind":"Enum","id":{"krate":0,"index":5452},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":315432,"byte_end":315443,"line_start":1419,"line_end":1419,"column_start":10,"column_end":21},"name":"BitPtrError","qualname":"::ptr::single::BitPtrError","value":"pub enum BitPtrError<T> where T: BitStore {\n    InvalidAddress(AddressError<T>),\n    InvalidIndex(BitIdxError<T::Mem>),\n}","parent":null,"children":[{"krate":0,"index":5454},{"krate":0,"index":5457}],"decl_id":null,"docs":" Errors produced by invalid bit-pointer components.\n","sig":null,"attributes":[{"value":"/ Errors produced by invalid bit-pointer components.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":315300,"byte_end":315354,"line_start":1417,"line_end":1417,"column_start":1,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5491},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":349565,"byte_end":349578,"line_start":1072,"line_end":1072,"column_start":2,"column_end":15},"name":"InvalidBitptr","qualname":"::ptr::span::BitSpanError::InvalidBitptr","value":"BitSpanError::InvalidBitptr(BitPtrError<T>)","parent":{"krate":0,"index":5489},"children":[],"decl_id":null,"docs":" The base `BitPtr` is invalid.\n","sig":null,"attributes":[{"value":"/ The base `BitPtr` is invalid.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":349530,"byte_end":349563,"line_start":1071,"line_end":1071,"column_start":2,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5494},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":349643,"byte_end":349650,"line_start":1074,"line_end":1074,"column_start":2,"column_end":9},"name":"TooLong","qualname":"::ptr::span::BitSpanError::TooLong","value":"BitSpanError::TooLong(usize)","parent":{"krate":0,"index":5489},"children":[],"decl_id":null,"docs":" `BitSpan` domains have a length ceiling.\n","sig":null,"attributes":[{"value":"/ `BitSpan` domains have a length ceiling.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":349597,"byte_end":349641,"line_start":1073,"line_end":1073,"column_start":2,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":5497},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":349708,"byte_end":349715,"line_start":1076,"line_end":1076,"column_start":2,"column_end":9},"name":"TooHigh","qualname":"::ptr::span::BitSpanError::TooHigh","value":"BitSpanError::TooHigh(*const T)","parent":{"krate":0,"index":5489},"children":[],"decl_id":null,"docs":" `BitSpan` domains have an address ceiling.\n","sig":null,"attributes":[{"value":"/ `BitSpan` domains have an address ceiling.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":349660,"byte_end":349706,"line_start":1075,"line_end":1075,"column_start":2,"column_end":48}}]},{"kind":"Enum","id":{"krate":0,"index":5489},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":349493,"byte_end":349505,"line_start":1068,"line_end":1068,"column_start":10,"column_end":22},"name":"BitSpanError","qualname":"::ptr::span::BitSpanError","value":"pub enum BitSpanError<T> where T: BitStore {\n    InvalidBitptr(BitPtrError<T>),\n    TooLong(usize),\n    TooHigh(*const T),\n}","parent":null,"children":[{"krate":0,"index":5491},{"krate":0,"index":5494},{"krate":0,"index":5497}],"decl_id":null,"docs":" An error produced when creating `BitSpan` encoded references.\n","sig":null,"attributes":[{"value":"/ An error produced when creating `BitSpan` encoded references.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":349363,"byte_end":349428,"line_start":1066,"line_end":1066,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":2193},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230510,"byte_end":230514,"line_start":193,"line_end":193,"column_start":15,"column_end":19},"name":"copy","qualname":"::ptr::copy","value":"pub unsafe fn copy<O1, O2, T1,\n                   T2>(BitPtr<Const, O1, T1>, BitPtr<Mut, O2, T2>, usize)\nwhere O1: BitOrder, O2: BitOrder, T1: BitStore, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `src` to `dst`. The source and destination may\n overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `src` to `dst`. The source and destination may","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228435,"byte_end":228510,"line_start":121,"line_end":121,"column_start":1,"column_end":76}},{"value":"/ overlap.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228511,"byte_end":228523,"line_start":122,"line_end":122,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228524,"byte_end":228527,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ If the source and destination will *never* overlap, [`copy_nonoverlapping`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228528,"byte_end":228607,"line_start":124,"line_end":124,"column_start":1,"column_end":80}},{"value":"/ can be used instead.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228608,"byte_end":228632,"line_start":125,"line_end":125,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228633,"byte_end":228636,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ `copy` is semantically equivalent to C’s [`memmove`], but with the argument","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228637,"byte_end":228718,"line_start":127,"line_end":127,"column_start":1,"column_end":80}},{"value":"/ order swapped. Copying takes place as if the bits were copied from `src` to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228719,"byte_end":228798,"line_start":128,"line_end":128,"column_start":1,"column_end":80}},{"value":"/ a temporary array, then copied from the array into `dst`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228799,"byte_end":228860,"line_start":129,"line_end":129,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228861,"byte_end":228864,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228865,"byte_end":228879,"line_start":131,"line_end":131,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228880,"byte_end":228883,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ [`ptr::copy`](core::ptr::copy)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228884,"byte_end":228918,"line_start":133,"line_end":133,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228919,"byte_end":228922,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228923,"byte_end":228944,"line_start":135,"line_end":135,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228945,"byte_end":228948,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ The pointers may differ in bit-ordering or storage element types. `bitvec`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228949,"byte_end":229027,"line_start":137,"line_end":137,"column_start":1,"column_end":79}},{"value":"/ considers it Undefined Behavior for two pointer regions to overlap in memory","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229028,"byte_end":229108,"line_start":138,"line_end":138,"column_start":1,"column_end":81}},{"value":"/ if they have different bit-orderings, and so will only perform overlap","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229109,"byte_end":229183,"line_start":139,"line_end":139,"column_start":1,"column_end":75}},{"value":"/ detection when `O1` and `O2` match.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229184,"byte_end":229223,"line_start":140,"line_end":140,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229224,"byte_end":229227,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229228,"byte_end":229240,"line_start":142,"line_end":142,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229241,"byte_end":229244,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ Behavior is undefined if any of the following conditions are violated:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229245,"byte_end":229319,"line_start":144,"line_end":144,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229320,"byte_end":229323,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ - `src` must be [valid] for reads of `count` bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229324,"byte_end":229378,"line_start":146,"line_end":146,"column_start":1,"column_end":55}},{"value":"/ - `dst` must be [valid] for writes of `count` bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229379,"byte_end":229434,"line_start":147,"line_end":147,"column_start":1,"column_end":56}},{"value":"/ - `src` and `dst` must not overlap if they have different bit-ordering","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229435,"byte_end":229509,"line_start":148,"line_end":148,"column_start":1,"column_end":75}},{"value":"/   parameters.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229510,"byte_end":229527,"line_start":149,"line_end":149,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229528,"byte_end":229531,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ The type parameters `T1` and `T2` are permitted to differ.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229532,"byte_end":229594,"line_start":151,"line_end":151,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229595,"byte_end":229598,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229599,"byte_end":229613,"line_start":153,"line_end":153,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229614,"byte_end":229617,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229618,"byte_end":229634,"line_start":155,"line_end":155,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229635,"byte_end":229638,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229639,"byte_end":229650,"line_start":157,"line_end":157,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229651,"byte_end":229678,"line_start":158,"line_end":158,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229679,"byte_end":229682,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ let start = 0b1011u8;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229683,"byte_end":229708,"line_start":160,"line_end":160,"column_start":1,"column_end":26}},{"value":"/ let mut end = 0u16;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229709,"byte_end":229732,"line_start":161,"line_end":161,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229733,"byte_end":229736,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ unsafe {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229737,"byte_end":229749,"line_start":163,"line_end":163,"column_start":1,"column_end":13}},{"value":"/   bitvec::ptr::copy::<Lsb0, Msb0, _, _>(","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229750,"byte_end":229794,"line_start":164,"line_end":164,"column_start":1,"column_end":45}},{"value":"/     (&start).into(),","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229795,"byte_end":229819,"line_start":165,"line_end":165,"column_start":1,"column_end":25}},{"value":"/     (&mut end).into(),","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229820,"byte_end":229846,"line_start":166,"line_end":166,"column_start":1,"column_end":27}},{"value":"/     4,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229847,"byte_end":229857,"line_start":167,"line_end":167,"column_start":1,"column_end":11}},{"value":"/   );","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229858,"byte_end":229866,"line_start":168,"line_end":168,"column_start":1,"column_end":9}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229867,"byte_end":229872,"line_start":169,"line_end":169,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(end, 0b1101_0000__0000_0000);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229873,"byte_end":229917,"line_start":170,"line_end":170,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229918,"byte_end":229925,"line_start":171,"line_end":171,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229926,"byte_end":229929,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ Overlapping regions:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229930,"byte_end":229954,"line_start":173,"line_end":173,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229955,"byte_end":229958,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229959,"byte_end":229970,"line_start":175,"line_end":175,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229971,"byte_end":229998,"line_start":176,"line_end":176,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229999,"byte_end":230002,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ let mut x = 0b1111_0010u8;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230003,"byte_end":230033,"line_start":178,"line_end":178,"column_start":1,"column_end":31}},{"value":"/ let src = BitPtr::<_, Lsb0, _>::from_mut(&mut x);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230034,"byte_end":230087,"line_start":179,"line_end":179,"column_start":1,"column_end":54}},{"value":"/ let dst = unsafe { src.add(2) };","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230088,"byte_end":230124,"line_start":180,"line_end":180,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230125,"byte_end":230128,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ unsafe {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230129,"byte_end":230141,"line_start":182,"line_end":182,"column_start":1,"column_end":13}},{"value":"/   bitvec::ptr::copy(src.immut(), dst, 4);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230142,"byte_end":230187,"line_start":183,"line_end":183,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230188,"byte_end":230193,"line_start":184,"line_end":184,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(x, 0b1100_1010);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230194,"byte_end":230225,"line_start":185,"line_end":185,"column_start":1,"column_end":32}},{"value":"/ //                ^^ ^^ bottom nibble moved here","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230226,"byte_end":230278,"line_start":186,"line_end":186,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230279,"byte_end":230286,"line_start":187,"line_end":187,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230287,"byte_end":230290,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ [valid]: https://doc.rust-lang.org/std/ptr/index.html#safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230291,"byte_end":230355,"line_start":189,"line_end":189,"column_start":1,"column_end":65}},{"value":"/ [`copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230356,"byte_end":230416,"line_start":190,"line_end":190,"column_start":1,"column_end":61}},{"value":"/ [`memmove`]: https://en.cppreference.com/w/c/string/byte/memmove","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230417,"byte_end":230485,"line_start":191,"line_end":191,"column_start":1,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230486,"byte_end":230495,"line_start":192,"line_end":192,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2198},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":232073,"byte_end":232092,"line_start":254,"line_end":254,"column_start":15,"column_end":34},"name":"copy_nonoverlapping","qualname":"::ptr::copy_nonoverlapping","value":"pub unsafe fn copy_nonoverlapping<O1, O2, T1,\n                                  T2>(BitPtr<Const, O1, T1>,\n                                      BitPtr<Mut, O2, T2>, usize) where\nO1: BitOrder, O2: BitOrder, T1: BitStore, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `src` to `dst`. The source and destination must\n *not* overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `src` to `dst`. The source and destination must","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230702,"byte_end":230778,"line_start":206,"line_end":206,"column_start":1,"column_end":77}},{"value":"/ *not* overlap.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230779,"byte_end":230797,"line_start":207,"line_end":207,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230798,"byte_end":230801,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ For regions of memory which might overlap, use [`copy`] instead.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230802,"byte_end":230870,"line_start":209,"line_end":209,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230871,"byte_end":230874,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ `copy_nonoverlapping` is semantically equivalent to C’s [`memcpy`], but with","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230875,"byte_end":230957,"line_start":211,"line_end":211,"column_start":1,"column_end":81}},{"value":"/ the argument order swapped.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230958,"byte_end":230989,"line_start":212,"line_end":212,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230990,"byte_end":230993,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230994,"byte_end":231008,"line_start":214,"line_end":214,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231009,"byte_end":231012,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ [`ptr::copy_nonoverlapping`](core::ptr::copy_nonoverlapping)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231013,"byte_end":231077,"line_start":216,"line_end":216,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231078,"byte_end":231081,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231082,"byte_end":231103,"line_start":218,"line_end":218,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231104,"byte_end":231107,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ The pointers may differ in bit-ordering or storage element parameters.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231108,"byte_end":231182,"line_start":220,"line_end":220,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231183,"byte_end":231186,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231187,"byte_end":231199,"line_start":222,"line_end":222,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231200,"byte_end":231203,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ Behavior is undefined if any of the following conditions are violated:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231204,"byte_end":231278,"line_start":224,"line_end":224,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231279,"byte_end":231282,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ - `src` must be [valid] for reads of `count` bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231283,"byte_end":231337,"line_start":226,"line_end":226,"column_start":1,"column_end":55}},{"value":"/ - `dst` must be [valid] for writes of `count` bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231338,"byte_end":231393,"line_start":227,"line_end":227,"column_start":1,"column_end":56}},{"value":"/ - The region of memory beginning at `src` with a size of `count` bits must","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231394,"byte_end":231472,"line_start":228,"line_end":228,"column_start":1,"column_end":79}},{"value":"/   not overlap with the region of memory beginning at `dst` with the same","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231473,"byte_end":231549,"line_start":229,"line_end":229,"column_start":1,"column_end":77}},{"value":"/   size.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231550,"byte_end":231561,"line_start":230,"line_end":230,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231562,"byte_end":231565,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231566,"byte_end":231580,"line_start":232,"line_end":232,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231581,"byte_end":231584,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231585,"byte_end":231596,"line_start":234,"line_end":234,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231597,"byte_end":231624,"line_start":235,"line_end":235,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231625,"byte_end":231628,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ let mut data = 0b1011u8;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231629,"byte_end":231657,"line_start":237,"line_end":237,"column_start":1,"column_end":29}},{"value":"/ let ptr = BitPtr::<_, Msb0, _>::from_mut(&mut data);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231658,"byte_end":231714,"line_start":238,"line_end":238,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231715,"byte_end":231718,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ unsafe {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231719,"byte_end":231731,"line_start":240,"line_end":240,"column_start":1,"column_end":13}},{"value":"/   bitvec::ptr::copy_nonoverlapping(","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231732,"byte_end":231771,"line_start":241,"line_end":241,"column_start":1,"column_end":40}},{"value":"/     ptr.add(4).immut(),","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231772,"byte_end":231799,"line_start":242,"line_end":242,"column_start":1,"column_end":28}},{"value":"/     ptr,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231800,"byte_end":231812,"line_start":243,"line_end":243,"column_start":1,"column_end":13}},{"value":"/     4,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231813,"byte_end":231823,"line_start":244,"line_end":244,"column_start":1,"column_end":11}},{"value":"/   );","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231824,"byte_end":231832,"line_start":245,"line_end":245,"column_start":1,"column_end":9}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231833,"byte_end":231838,"line_start":246,"line_end":246,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(data, 0b1011_1011);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231839,"byte_end":231873,"line_start":247,"line_end":247,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231874,"byte_end":231881,"line_start":248,"line_end":248,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231882,"byte_end":231885,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ [valid]: https://doc.rust-lang.org/std/ptr/index.html#safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231886,"byte_end":231950,"line_start":250,"line_end":250,"column_start":1,"column_end":65}},{"value":"/ [`copy`]: crate::ptr::copy","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231951,"byte_end":231981,"line_start":251,"line_end":251,"column_start":1,"column_end":31}},{"value":"/ [`memcpy`]: https://en.cppreference.com/w/c/string/byte/memcpy","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231982,"byte_end":232048,"line_start":252,"line_end":252,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":232049,"byte_end":232058,"line_start":253,"line_end":253,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2203},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":233125,"byte_end":233127,"line_start":300,"line_end":300,"column_start":8,"column_end":10},"name":"eq","qualname":"::ptr::eq","value":"pub fn eq<O, T1, T2>(BitPtr<Const, O, T1>, BitPtr<Const, O, T2>) -> bool where\nO: BitOrder, T1: BitStore, T2: BitStore,\nBitPtr<Const, O, T1>: PartialEq<BitPtr<Const, O, T2>>","parent":null,"children":[],"decl_id":null,"docs":" Compares raw bit-pointers for equality.","sig":null,"attributes":[{"value":"* Compares raw bit-pointers for equality.\n\nThis is the same as using the `==` operator, but less generic: the arguments\nhave to be `BitPtr<Const, _, _>` bit-pointers, not anything that implements\n`PartialEq`.\n\n# Original\n\n[`ptr::eq`](core::ptr::eq)\n\n# API Differences\n\nThe two pointers can differ in their storage type parameters. `bitvec` defines\npointer equality only between pointers with the same underlying `BitStore::Mem`\nregister type.\n\nThis cannot compare span pointers. `*const BitSlice` can be used in the standard\nlibrary `ptr::eq` and does not need an override.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\nuse core::cell::Cell;\n\nlet data = 0u8;\nlet bare_ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);\nlet cell_ptr = bare_ptr.cast::<Cell<u8>>();\n\nassert!(bitvec::ptr::eq(bare_ptr, cell_ptr));\n```\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":232295,"byte_end":233107,"line_start":267,"line_end":298,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":233108,"byte_end":233117,"line_start":299,"line_end":299,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2207},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":233532,"byte_end":233536,"line_start":321,"line_end":321,"column_start":8,"column_end":12},"name":"hash","qualname":"::ptr::hash","value":"pub fn hash<O, T, S>(BitPtr<Const, O, T>, &mut S) where O: BitOrder,\nT: BitStore, S: Hasher","parent":null,"children":[],"decl_id":null,"docs":" Hash a raw bit-pointer.","sig":null,"attributes":[{"value":"* Hash a raw bit-pointer.\n\nThis can be used to prove hashing the pointer address value, rather than the\nreferent bit.\n\n# Original\n\n[`ptr::hash`](core::ptr::hash)\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":233316,"byte_end":233483,"line_start":310,"line_end":318,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":233484,"byte_end":233493,"line_start":319,"line_end":319,"column_start":1,"column_end":10}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":233494,"byte_end":233524,"line_start":320,"line_end":320,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":2211},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":234169,"byte_end":234173,"line_start":358,"line_end":358,"column_start":15,"column_end":19},"name":"read","qualname":"::ptr::read","value":"pub unsafe fn read<O, T>(BitPtr<Const, O, T>) -> bool where O: BitOrder,\nT: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Reads the bit from `src`.","sig":null,"attributes":[{"value":"* Reads the bit from `src`.\n\n# Original\n\n[`ptr::read`](core::ptr::read)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- `src` must be [valid] for reads.\n- `src` must point to a properly initialized value of type `T`.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = 128u8;\nlet ptr = BitPtr::<_, Msb0, _>::from_ref(&data);\nassert!(unsafe {\n  bitvec::ptr::read(ptr)\n});\n```\n\n[valid]: https://doc.rust-lang.org/std/ptr/index.html#safety\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":233660,"byte_end":234144,"line_start":330,"line_end":356,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":234145,"byte_end":234154,"line_start":357,"line_end":357,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2214},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":236032,"byte_end":236045,"line_start":419,"line_end":419,"column_start":15,"column_end":28},"name":"read_volatile","qualname":"::ptr::read_volatile","value":"pub unsafe fn read_volatile<O, T>(BitPtr<Const, O, T>) -> bool where\nO: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs a volatile read of the bit from `src`.","sig":null,"attributes":[{"value":"* Performs a volatile read of the bit from `src`.\n\nVolatile operations are intended to act on I/O memory, and are guaranteed to not\nbe elided or reördered by the compiler across other volatile operations.\n\n# Original\n\n[`ptr::read_volatile`](core::ptr::read_volatile)\n\n# Notes\n\nRust does not curretnly have a rigorously and formally defined memory model, so\nthe precise semantics of what “volatile” means here is subject to change over\ntime. That being said, the semantics will almost always end up pretty similar to\n[C11’s definition of volatile][c11].\n\nThe compiler shouldn’t change the relative order or number of volatile memory\noperations.\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- `dst` must be [valid] for reads\n- `dst` must point to a properly initialized value of type `T`\n- no other pointer must race `dst` to view or modify the referent location\n  unless `T` is capable of ensuring race safety.\n\nJust like in C, whether an operation is volatile has no bearing whatsoëver on\nquestions involving concurrent access from multiple threads. Volatile accesses\nbehave exactly like non-atomic accesses in that regard. In particular, a race\nbetween a `read_volatile` and any write operation on the same location is\nundefined behavior.\n\nThis is true even for atomic types! This instruction is an ordinary load that\nthe compiler will not remove. It is *not* an atomic instruction.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = 4u8;\nlet ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);\nunsafe {\n  assert!(bitvec::ptr::read_volatile(ptr.add(2)));\n}\n```\n\n[c11]: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\n[valid]: https://doc.rust-lang.org/core/ptr/index.html#safety\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":234265,"byte_end":236007,"line_start":366,"line_end":417,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":236008,"byte_end":236017,"line_start":418,"line_end":418,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2217},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":237007,"byte_end":237014,"line_start":461,"line_end":461,"column_start":15,"column_end":22},"name":"replace","qualname":"::ptr::replace","value":"pub unsafe fn replace<O, T>(BitPtr<Mut, O, T>, bool) -> bool where\nO: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Moves `src` into the pointed `dst`, returning the previous `dst` bit.","sig":null,"attributes":[{"value":"* Moves `src` into the pointed `dst`, returning the previous `dst` bit.\n\nThis function is semantically equivalent to [`BitRef::replace`] except that it\noperates on raw pointers instead of references. When a proxy reference is\navailable, prefer [`BitRef::replace`].\n\n# Original\n\n[`ptr::replace`](core::ptr::replace)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- `dst` must be [valid] for both reads and writes.\n- `dst` must point to a properly initialized value of type `T`.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut data = 4u8;\nlet ptr = BitPtr::<_, Lsb0, _>::from_mut(&mut data);\nassert!(unsafe {\n  bitvec::ptr::replace(ptr.add(2), false)\n});\nassert_eq!(data, 0);\n```\n\n[valid]: https://doc.rust-lang.org/std/ptr/index.html#safety\n[`BitPtr::replace`]: crate::ptr::BitRef::replace\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":236146,"byte_end":236982,"line_start":427,"line_end":459,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":236983,"byte_end":236992,"line_start":460,"line_end":460,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2220},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":237815,"byte_end":237838,"line_start":495,"line_end":495,"column_start":8,"column_end":31},"name":"bitslice_from_raw_parts","qualname":"::ptr::bitslice_from_raw_parts","value":"pub fn bitslice_from_raw_parts<O, T>(BitPtr<Const, O, T>, usize)\n-> *const BitSlice<O, T> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Forms a raw bit-slice from a bit-pointer and a length.","sig":null,"attributes":[{"value":"* Forms a raw bit-slice from a bit-pointer and a length.\n\nThe `len` argument is the number of **bits**, not the number of elements.\n\nThis function is safe, but actually using the return value is unsafe. See the\ndocumentation of [`slice::from_raw_parts`] for bit-slice safety requirements.\n\n# Original\n\n[`ptr::slice_from_raw_parts`](core::ptr::slice_from_raw_parts)\n\n# Examples\n\n```rust\nuse bitvec::ptr;\nuse bitvec::order::Lsb0;\n\nlet x = [5u8, 10, 15];\nlet bitptr = ptr::BitPtr::<_, Lsb0, _>::from_ref(&x[0]);\nlet bitslice = ptr::bitslice_from_raw_parts(bitptr, 24);\nassert_eq!(unsafe { &*bitslice }[2], true);\n```\n\n[`slice::from_raw_parts`]: crate::slice::from_raw_parts\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":237121,"byte_end":237797,"line_start":469,"line_end":493,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":237798,"byte_end":237807,"line_start":494,"line_end":494,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2223},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":238918,"byte_end":238945,"line_start":536,"line_end":536,"column_start":8,"column_end":35},"name":"bitslice_from_raw_parts_mut","qualname":"::ptr::bitslice_from_raw_parts_mut","value":"pub fn bitslice_from_raw_parts_mut<O, T>(BitPtr<Mut, O, T>, usize)\n-> *mut BitSlice<O, T> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs the same functionality as [`bitslice_from_raw_parts`], except that\na raw mutable bit-slice is returned, as opposed to a raw immutable bit-slice.","sig":null,"attributes":[{"value":"* Performs the same functionality as [`bitslice_from_raw_parts`], except that\na raw mutable bit-slice is returned, as opposed to a raw immutable bit-slice.\n\nSee the documentation of [`bitslice_from_raw_parts`] for more details.\n\nThis function is safe, but actually using the return value is unsafe. See the\ndocumentation of [`slice::from_raw_parts_mut`] for bit-slice safety\nrequirements.\n\n# Original\n\n[`ptr::slice_from_raw_parts`](core::ptr::slice_from_raw_parts)\n\n# Examples\n\n```rust\nuse bitvec::ptr;\nuse bitvec::order::Lsb0;\n\nlet mut x = [5u8, 10, 15];\nlet bitptr = ptr::BitPtr::<_, Lsb0, _>::from_mut(&mut x[0]);\nlet bitslice = ptr::bitslice_from_raw_parts_mut(bitptr, 24);\nunsafe { &mut *bitslice }.set(0, true);\nassert!(unsafe { &*bitslice }[0]);\n```\n\n[`bitslice_from_raw_parts`]: crate::ptr::bitslice_from_raw_parts\n[`slice::from_raw_parts_mut`]: crate::slice::from_raw_parts_mut\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":238008,"byte_end":238900,"line_start":506,"line_end":534,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":238901,"byte_end":238910,"line_start":535,"line_end":535,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2226},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":239991,"byte_end":239995,"line_start":584,"line_end":584,"column_start":15,"column_end":19},"name":"swap","qualname":"::ptr::swap","value":"pub unsafe fn swap<O1, O2, T1, T2>(BitPtr<Mut, O1, T1>, BitPtr<Mut, O2, T2>)\nwhere O1: BitOrder, O2: BitOrder, T1: BitStore, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Swaps the values at two mutable locations.","sig":null,"attributes":[{"value":"* Swaps the values at two mutable locations.\n\nBut for the following exception, this function is semantically equivalent to\n[`BitRef::swap`]: it operates on raw pointers instead of references. When\nreferences are available, prefer [`BitRef::swap`].\n\n# Original\n\n[`ptr::swap`](core::ptr::swap)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- Both `x` and `y` must be [valid] for both reads and writes.\n- Both `x` and `y` must point to initialized instances of type `T1` and `T2`,\n  respectively.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut data = 2u8;\nlet x = BitPtr::<_, Lsb0, _>::from_mut(&mut data);\nlet y = unsafe { x.add(1) };\n\nunsafe {\n  bitvec::ptr::swap(x, y);\n}\nassert_eq!(data, 1);\n```\n\n[valid]: https://doc.rust-lang.org/std/ptr/index.html#safety\n[`BitRef::swap`]: crate::ptr::BitRef::swap\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":239115,"byte_end":239966,"line_start":547,"line_end":582,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":239967,"byte_end":239976,"line_start":583,"line_end":583,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2231},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":241196,"byte_end":241215,"line_start":636,"line_end":636,"column_start":15,"column_end":34},"name":"swap_nonoverlapping","qualname":"::ptr::swap_nonoverlapping","value":"pub unsafe fn swap_nonoverlapping<O1, O2, T1,\n                                  T2>(BitPtr<Mut, O1, T1>,\n                                      BitPtr<Mut, O2, T2>, usize) where\nO1: BitOrder, O2: BitOrder, T1: BitStore, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Swaps `count` bits between the two regions of memory beginning at `x` and\n`y`. The two regions must *not* overlap.","sig":null,"attributes":[{"value":"* Swaps `count` bits between the two regions of memory beginning at `x` and\n`y`. The two regions must *not* overlap.\n\n# Original\n\n[`ptr::swap_nonoverlapping`](core::ptr::swap_nonoverlapping)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- Both `x` and `y` must be [valid] for both reads and writes of `count` bits.\n- Both `x` and `y` must be fully initialized instances of `T` for all `count`\n  bits.\n- The regions may have overlapping elements, but must not overlap the concrete\n  bits they describe.\n\nNote that even if `count` is `0`, the pointers must still be validly\nconstructed, non-null, and well-aligned.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut x = [0u8; 2];\nlet mut y = !0u16;\nlet x_ptr = BitPtr::<_, Lsb0, _>::from_mut(&mut x[0]);\nlet y_ptr = BitPtr::<_, Msb0, _>::from_mut(&mut y);\n\nunsafe {\n  bitvec::ptr::swap_nonoverlapping(x_ptr, y_ptr, 16);\n}\nassert_eq!(x, [!0; 2]);\nassert_eq!(y, 0);\n```\n\n[valid]: https://doc.rust-lang.org/std/ptr/index.html#safety\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":240148,"byte_end":241171,"line_start":596,"line_end":634,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":241172,"byte_end":241181,"line_start":635,"line_end":635,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2236},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":242411,"byte_end":242416,"line_start":688,"line_end":688,"column_start":15,"column_end":20},"name":"write","qualname":"::ptr::write","value":"pub unsafe fn write<O, T>(BitPtr<Mut, O, T>, bool) where O: BitOrder,\nT: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Overwrites a memory location with the given bit.","sig":null,"attributes":[{"value":"* Overwrites a memory location with the given bit.\n\nBecause this reads from memory in order to construct the new value, it cannot be\nused to set uninitialized memory. The referent `T` element must be fully\ninitialized (such as with [`core::ptr::write`]) before setting bits with this\nfunction.\n\n# Original\n\n[`ptr::write`](core::ptr::write)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- `dst` must be [valid] for writes\n- `dst` must point to a properly initialized value of type `T`\n- no other pointer must race `dst` to view or modify the referent location\n  unless `T` is capable of ensuring race safety.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut data = 0u8;\nlet ptr = BitPtr::<_, Lsb0, _>::from_mut(&mut data);\nunsafe {\n  bitvec::ptr::write(ptr.add(2), true);\n}\nassert_eq!(data, 4);\n```\n\n[valid]: https://doc.rust-lang.org/std/ptr/index.html#safety\n[`core::ptr::write`]: core::ptr::write\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":241440,"byte_end":242386,"line_start":651,"line_end":686,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":242387,"byte_end":242396,"line_start":687,"line_end":687,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2239},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":244585,"byte_end":244599,"line_start":755,"line_end":755,"column_start":15,"column_end":29},"name":"write_volatile","qualname":"::ptr::write_volatile","value":"pub unsafe fn write_volatile<O, T>(BitPtr<Mut, O, T>, bool) where O: BitOrder,\nT: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs a volatile write of a memory location with the given bit.","sig":null,"attributes":[{"value":"* Performs a volatile write of a memory location with the given bit.\n\nBecause processors do not have single-bit write instructions, this must\nperform a volatile read of the location, perform the bit modification within\nthe processor register, then perform a volatile write back to memory. These\nthree steps are guaranteed to be atomic.\n\nVolatile operations are intended to act on I/O memory, and are guaranteed\nnot to be elided or reördered by the compiler across other volatile\noperations.\n\n# Original\n\n[`ptr::write_volatile`](core::ptr::write_volatile)\n\n# Notes\n\nRust does not curretnly have a rigorously and formally defined memory model,\nso the precise semantics of what “volatile” means here is subject to change\nover time. That being said, the semantics will almost always end up pretty\nsimilar to [C11’s definition of volatile][c11].\n\nThe compiler shouldn’t change the relative order or number of volatile\nmemory operations.\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- `dst` must be [valid] for writes\n- no other pointer must race `dst` to view or modify the referent location\n  unless `T` is capable of ensuring race safety.\n\nJust like in C, whether an operation is volatile has no bearing whatsoëver\non questions involving concurrent access from multiple threads. Volatile\naccesses behave exactly like non-atomic accesses in that regard. In\nparticular, a race between a `write_volatile` and any other operation\n(reading or writing) on the same location is undefined behavior.\n\nThis is true even for atomic types! This instruction is an ordinary store\nthat the compiler will not remove. It is *not* an atomic instruction.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut data = 0u8;\nlet ptr = BitPtr::<_, Lsb0, _>::from_mut(&mut data);\nunsafe {\n  bitvec::ptr::write_volatile(ptr, true);\n  assert!(bitvec::ptr::read_volatile(ptr.immut()));\n}\n```\n\n[c11]: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\n[valid]: https://doc.rust-lang.org/core/ptr/index.html#safety\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":242518,"byte_end":244560,"line_start":696,"line_end":753,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":244561,"byte_end":244570,"line_start":754,"line_end":754,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":2242},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","parent":null,"children":[{"krate":0,"index":2243},{"krate":0,"index":2244},{"krate":0,"index":2245},{"krate":0,"index":2248},{"krate":0,"index":2251},{"krate":0,"index":2254},{"krate":0,"index":2255},{"krate":0,"index":2258},{"krate":0,"index":2261},{"krate":0,"index":2264},{"krate":0,"index":2267},{"krate":0,"index":2270},{"krate":0,"index":2271},{"krate":0,"index":2274},{"krate":0,"index":2277},{"krate":0,"index":2278},{"krate":0,"index":2279},{"krate":0,"index":2281},{"krate":0,"index":2282},{"krate":0,"index":2284},{"krate":0,"index":2285},{"krate":0,"index":2288},{"krate":0,"index":2289},{"krate":0,"index":2291},{"krate":0,"index":2292},{"krate":0,"index":2294},{"krate":0,"index":2295},{"krate":0,"index":2298},{"krate":0,"index":2301},{"krate":0,"index":2304},{"krate":0,"index":2307},{"krate":0,"index":2310},{"krate":0,"index":2313},{"krate":0,"index":2314},{"krate":0,"index":2315},{"krate":0,"index":2317},{"krate":0,"index":2320},{"krate":0,"index":2323},{"krate":0,"index":2326},{"krate":0,"index":2329},{"krate":0,"index":2330},{"krate":0,"index":2333},{"krate":0,"index":2336},{"krate":0,"index":2339},{"krate":0,"index":2342},{"krate":0,"index":2345},{"krate":0,"index":2351},{"krate":0,"index":2411},{"krate":0,"index":2421},{"krate":0,"index":2433},{"krate":0,"index":2443},{"krate":0,"index":2447},{"krate":0,"index":2452},{"krate":0,"index":2456},{"krate":0,"index":2460},{"krate":0,"index":2464},{"krate":0,"index":2745},{"krate":0,"index":3008},{"krate":0,"index":3096},{"krate":0,"index":3158},{"krate":0,"index":3367},{"krate":0,"index":3368},{"krate":0,"index":3369},{"krate":0,"index":3372},{"krate":0,"index":3375},{"krate":0,"index":3378},{"krate":0,"index":3381},{"krate":0,"index":3384},{"krate":0,"index":3385},{"krate":0,"index":3388},{"krate":0,"index":3391},{"krate":0,"index":3394},{"krate":0,"index":3397},{"krate":0,"index":3400},{"krate":0,"index":3403},{"krate":0,"index":3406},{"krate":0,"index":3409},{"krate":0,"index":3412},{"krate":0,"index":3415},{"krate":0,"index":3418},{"krate":0,"index":3421},{"krate":0,"index":3424},{"krate":0,"index":3427},{"krate":0,"index":3430},{"krate":0,"index":3433},{"krate":0,"index":3436},{"krate":0,"index":3439},{"krate":0,"index":3442},{"krate":0,"index":3445}],"decl_id":null,"docs":" A dynamically-sized view into individual bits of a memory region.","sig":null,"attributes":[{"value":"* A dynamically-sized view into individual bits of a memory region.\n\nYou can read the language’s [`slice` module documentation][std] here.\n\nThis module defines the [`BitSlice`] region, and all of its associated support\ncode.\n\n[`BitSlice`] is the primary working type of this crate. It is a wrapper type\nover `[T]` which enables you to view, manipulate, and take the address of\nindividual bits in memory. It behaves in every possible respect exactly like an\nordinary slice: it is dynamically-sized, and must be held by `&` or `&mut`\nreference, just like `[T]`, and implements every inherent method and trait that\n`[T]` does, to the absolute limits of what Rust permits.\n\nThe key to [`BitSlice`]’s powerful capability is that references to it use a\nspecial encoding that store, in addition to the address of the base element and\nthe bit length, the index of the starting bit in the base element. This custom\nreference encoding has some costs in what APIs are possible – for instance, Rust\nforbids it from supporting `&mut BitSlice[index] = bool` write indexing – but in\nexchange, enables it to be *far* more capable than any other bit-slice crate in\nexistence.\n\nBecause of the volume of code that must be written to match the `[T]` standard\nAPI, this module is organized very differently than the slice implementation in\nthe [`core`] and [`std`] distribution libraries.\n\n- the root module `slice` contains new APIs that have no counterpart in `[T]`\n- `slice/api` contains reïmplementations of the `[T]` inherent methods\n- `slice/iter` implements all of the iteration capability\n- `slice/ops` implements the traits in `core::ops`\n- `slice/proxy` implements the proxy reference used in place of `&mut bool`\n- `slice/traits` implements all other traits not in `core::ops`\n- lastly, `slice/tests` contains all the unit tests.\n\n[`BitSlice`]: struct.BitSlice.html\n[`core`]: core\n[`std`]: std\n[std]: https://doc.rust-lang.org/stable/std/slice\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":355030,"byte_end":356979,"line_start":1,"line_end":39,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2345},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":371168,"byte_end":371176,"line_start":425,"line_end":425,"column_start":12,"column_end":20},"name":"BitSlice","qualname":"::slice::BitSlice","value":"BitSlice {  }","parent":null,"children":[{"krate":0,"index":2348},{"krate":0,"index":2349},{"krate":0,"index":2350}],"decl_id":null,"docs":" A slice of individual bits, anywhere in memory.","sig":null,"attributes":[{"value":"* A slice of individual bits, anywhere in memory.\n\n`BitSlice<O, T>` is an unsized region type; you interact with it through\n`&BitSlice<O, T>` and `&mut BitSlice<O, T>` references, which work exactly like\nall other Rust references. As with the standard slice’s relationship to arrays\nand vectors, this is [`bitvec`]’s primary working type, but you will probably\nhold it through one of the provided [`BitArray`], [`BitBox`], or [`BitVec`]\ncontainers.\n\n`BitSlice` is conceptually a `[bool]` slice, and provides a nearly complete\nmirror of `[bool]`’s API.\n\nEvery bit-vector crate can give you an opaque type that hides shift/mask\ncalculations from you. `BitSlice` does far more than this: it offers you the\nfull Rust guarantees about reference behavior, including lifetime tracking,\nmutability and aliasing awareness, and explicit memory control, *as well as* the\nfull set of tools and APIs available to the standard `[bool]` slice type.\n`BitSlice` can arbitrarily split and subslice, just like `[bool]`. You can write\na linear consuming function and keep the patterns you already know.\n\nFor example, to trim all the bits off either edge that match a condition, you\ncould write\n\n```rust\nuse bitvec::prelude::*;\n\nfn trim<O: BitOrder, T: BitStore>(\n  bits: &BitSlice<O, T>,\n  to_trim: bool,\n) -> &BitSlice<O, T> {\n  let stop = |b: &bool| *b != to_trim;\n  let front = bits.iter().by_ref().position(stop).unwrap_or(0);\n  let back = bits.iter().by_ref().rposition(stop).unwrap_or(0);\n  &bits[front ..= back]\n}\n# assert_eq!(trim(bits![0, 0, 1, 1, 0, 1, 0], false), bits![1, 1, 0, 1]);\n```\n\nto get behavior something like\n`trim(&BitSlice[0, 0, 1, 1, 0, 1, 0], false) == &BitSlice[1, 1, 0, 1]`.\n\n# Documentation\n\nAll APIs that mirror something in the standard library will have an `Original`\nsection linking to the corresponding item. All APIs that have a different\nsignature or behavior than the original will have an `API Differences` section\nexplaining what has changed, and how to adapt your existing code to the change.\n\nThese sections look like this:\n\n# Original\n\n[`slice`](https://doc.rust-lang.org/stable/std/primitive.slice.html)\n\n# API Differences\n\nThe slice type `[bool]` has no type parameters. `BitSlice<O, T>` has two: one\nfor the memory type used as backing storage, and one for the order of bits\nwithin that memory type.\n\n`&BitSlice<O, T>` is capable of producing `&bool` references to read bits out\nof its memory, but is not capable of producing `&mut bool` references to write\nbits *into* its memory. Any `[bool]` API that would produce a `&mut bool` will\ninstead produce a [`BitRef<Mut, O, T>`] proxy reference.\n\n# Behavior\n\n`BitSlice` is a wrapper over `[T]`. It describes a region of memory, and must be\nhandled indirectly. This is most commonly through the reference types\n`&BitSlice` and `&mut BitSlice`, which borrow memory owned by some other value\nin the program. These buffers can be directly owned by the sibling types\n[`BitBox`], which behaves like [`Box<[T]>`](alloc::boxed::Box), and [`BitVec`],\nwhich behaves like [`Vec<T>`]. It cannot be used as the type parameter to a\nstandard-library-provided handle type.\n\nThe `BitSlice` region provides access to each individual bit in the region, as\nif each bit had a memory address that you could use to dereference it. It packs\neach logical bit into exactly one bit of storage memory, just like\n[`std::bitset`] and [`std::vector<bool>`] in C++.\n\n# Type Parameters\n\n`BitSlice` has two type parameters which propagate through nearly every public\nAPI in the crate. These are very important to its operation, and your choice\nof type arguments informs nearly every part of this library’s behavior.\n\n## `T: BitStore`\n\n[`BitStore`] is the simpler of the two parameters. It refers to the integer type\nused to hold bits. It must be one of the Rust unsigned integer fundamentals:\n`u8`, `u16`, `u32`, `usize`, and on 64-bit systems only, `u64`. In addition, it\ncan also be an alias-safed wrapper over them (see the [`access`] module) in\norder to permit bit-slices to share underlying memory without interfering with\neach other.\n\n`BitSlice` references can only be constructed over the integers, not over their\naliasing wrappers. `BitSlice` will only use aliasing types in its `T` slots when\nyou invoke APIs that produce them, such as [`.split_at_mut()`].\n\nThe default type argument is `usize`.\n\nThe argument you choose is used as the basis of a `[T]` slice, over which the\n`BitSlice` view type is placed. `BitSlice<_, T>` is subject to all of the rules\nabout alignment that `[T]` is. If you are working with in-memory representation\nformats, chances are that you already have a `T` type with which you’ve been\nworking, and should use it here.\n\nIf you are only using this crate to discard the seven wasted bits per `bool`\nof a collection of `bool`s, and are not too concerned about the in-memory\nrepresentation, then you should use the default type argument of `usize`. This\nis because most processors work best when moving an entire `usize` between\nmemory and the processor itself, and using a smaller type may cause it to slow\ndown.\n\n## `O: BitOrder`\n\n[`BitOrder`] is the more complex parameter. It has a default argument which,\nlike `usize`, is the good-enough choice when you do not explicitly need to\ncontrol the representation of bits in memory.\n\nThis parameter determines how to index the bits within a single memory element\n`T`. Computers all agree that in a slice of elements `T`, the element with the\nlower index has a lower memory address than the element with the higher index.\nBut the individual bits within an element do not have addresses, and so there is\nno uniform standard of which bit is the zeroth, which is the first, which is the\npenultimate, and which is the last.\n\nTo make matters even more confusing, there are two predominant ideas of\nin-element ordering that often *correlate* with the in-element *byte* ordering\nof integer types, but are in fact wholly unrelated! [`bitvec`] provides these\ntwo main orders as types for you, and if you need a different one, it also\nprovides the tools you need to make your own.\n\n### Least Significant Bit Comes First\n\nThis ordering, named the [`Lsb0`] type, indexes bits within an element by\nplacing the `0` index at the least significant bit (numeric value `1`) and the\nfinal index at the most significant bit (numeric value [`T::MIN`][minval] for\nsigned integers on most machines).\n\nFor example, this is the ordering used by most C compilers to lay out bit-field\nstruct members on little-endian **byte**-ordered machines.\n\n### Most Significant Bit Comes First\n\nThis ordering, named the [`Msb0`] type, indexes bits within an element by\nplacing the `0` index at the most significant bit (numeric value\n[`T::MIN`][minval] for most signed integers) and the final index at the least\nsignificant bit (numeric value `1`).\n\nFor example, this is the ordering used by the [TCP wire format], and by most C\ncompilers to lay out bit-field struct members on big-endian **byte**-ordered\nmachines.\n\n### Default Ordering\n\nThe default ordering is [`Lsb0`], as it typically produces shorter object code\nthan [`Msb0`] does. If you are implementing a collection, then `Lsb0` is likely\nthe more performant ordering; if you are implementing a buffer protocol, then\nyour choice of ordering is dictated by the protocol definition.\n\n# Safety\n\n`BitSlice` is designed to never introduce new memory unsafety that you did not\nprovide yourself, either before or during the use of this crate. Bugs do, and\nhave, occured, and you are encouraged to submit any discovered flaw as a defect\nreport.\n\nThe `&BitSlice` reference type uses a private encoding scheme to hold all the\ninformation needed in its stack value. This encoding is **not** part of the\npublic API of the library, and is not binary-compatible with `&[T]`.\nFurthermore, in order to satisfy Rust’s requirements about alias conditions,\n`BitSlice` performs type transformations on the `T` parameter to ensure that it\nnever creates the potential for undefined behavior.\n\nYou must never attempt to type-cast a reference to `BitSlice` in any way. You\nmust not use [`mem::transmute`] with `BitSlice` anywhere in its type arguments.\nYou must not use `as`-casting to convert between `*BitSlice` and any other type.\nYou must not attempt to modify the binary representation of a `&BitSlice`\nreference value. These actions will all lead to runtime memory unsafety, are\n(hopefully) likely to induce a program crash, and may possibly cause undefined\nbehavior at compile-time.\n\nEverything in the `BitSlice` public API, even the `unsafe` parts, are guaranteed\nto have no more unsafety than their equivalent parts in the standard library.\nAll `unsafe` APIs will have documentation explicitly detailing what the API\nrequires you to uphold in order for it to function safely and correctly. All\nsafe APIs will do so themselves.\n\n# Performance\n\nLike the standard library’s `[T]` slice, `BitSlice` is designed to be very easy\nto use safely, while supporting `unsafe` when necessary. Rust has a powerful\noptimizing engine, and `BitSlice` will frequently be compiled to have zero\nruntime cost. Where it is slower, it will not be significantly slower than a\nmanual replacement.\n\nAs the machine instructions operate on registers rather than bits, your choice\nof [`T: BitStore`] type parameter can influence your slice’s performance. Using\nlarger register types means that slices can gallop over completely-filled\ninterior elements faster, while narrower register types permit more graceful\nhandling of subslicing and aliased splits.\n\n# Construction\n\n`BitSlice` views of memory can be constructed over borrowed data in a number of\nways. As this is a reference-only type, it can only ever be built by borrowing\nan existing memory buffer and taking temporary control of your program’s view of\nthe region.\n\n## Macro Constructor\n\n`BitSlice` buffers can be constructed at compile-time through the [`bits!`]\nmacro. This macro accepts a superset of the [`vec!`] arguments, and creates an\nappropriate buffer in the local scope. The macro expands to a borrowed\n[`BitArray`] temporary; currently, it cannot be assigned to a `static` binding.\n\n```rust\nuse bitvec::prelude::*;\n\nlet immut = bits![Lsb0, u8; 0, 1, 0, 0, 1, 0, 0, 1];\nlet mutable: &mut BitSlice<_, _> = bits![mut Msb0, u8; 0; 8];\n\nassert_ne!(immut, mutable);\nmutable.clone_from_bitslice(immut);\nassert_eq!(immut, mutable);\n```\n\n## Borrowing Constructors\n\nThe functions [`from_element`], [`from_element_mut`], [`from_slice`], and\n[`from_slice_mut`] take references to existing memory, and construct\n`BitSlice` references over them. These are the most basic ways to borrow memory\nand view it as bits.\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = [0u16; 3];\nlet local_borrow = BitSlice::<Lsb0, _>::from_slice(&data);\n\nlet mut data = [0u8; 5];\nlet local_mut = BitSlice::<Lsb0, _>::from_slice_mut(&mut data);\n```\n\n## Trait Method Constructors\n\nThe [`BitView`] trait implements [`.view_bits::<O>()`] and\n[`.view_bits_mut::<O>()`] methods on elements, arrays not larger than 64\nelements, and slices. This trait, imported in the crate prelude, is *probably*\nthe easiest way for you to borrow memory.\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = [0u32; 5];\nlet trait_view = data.view_bits::<Lsb0>();\n\nlet mut data = 0usize;\nlet trait_mut = data.view_bits_mut::<Msb0>();\n```\n\n## Owned Bit Slices\n\nIf you wish to take ownership of a memory region and enforce that it is always\nviewed as a `BitSlice` by default, you can use one of the [`BitArray`],\n[`BitBox`], or [`BitVec`] types, rather than pairing ordinary buffer types with\nthe borrowing constructors.\n\n```rust\nuse bitvec::prelude::*;\n\nlet slice = bits![0; 27];\nlet array = bitarr![LocalBits, u8; 0; 10];\n# #[cfg(feature = \"alloc\")] fn allocs() {\nlet boxed = bitbox![0; 10];\nlet vec = bitvec![0; 20];\n# } #[cfg(feature = \"alloc\")] allocs();\n\n// arrays always round up\nassert_eq!(array.as_bitslice(), slice[.. 16]);\n# #[cfg(feature = \"alloc\")] fn allocs2() {\n# let slice = bits![0; 27];\n# let boxed = bitbox![0; 10];\n# let vec = bitvec![0; 20];\nassert_eq!(boxed.as_bitslice(), slice[.. 10]);\nassert_eq!(vec.as_bitslice(), slice[.. 20]);\n# } #[cfg(feature = \"alloc\")] allocs2();\n```\n\n[TCP wire format]: https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_segment_structure\n[minval]: https://doc.rust-lang.org/stable/std/primitive.usize.html#associatedconstant.MIN\n\n[`BitArray`]: crate::array::BitArray\n[`BitBox`]: crate::boxed::BitBox\n[`BitRef<Mut, O, T>`]: crate::ptr::BitRef\n[`BitOrder`]: crate::order::BitOrder\n[`BitStore`]: crate::store::BitStore\n[`BitVec`]: crate::vec::BitVec\n[`BitView`]: crate::view::BitView\n[`Cell<T>`]: core::cell::Cell\n[`Lsb0`]: crate::order::Lsb0\n[`Msb0`]: crate::order::Msb0\n[`T: BitStore`]: crate::store::BitStore\n[`Vec<T>`]: alloc::vec::Vec\n\n[`access`]: crate::access\n[`bits!`]: macro@crate::bits\n[`bitvec`]: crate\n[`bitvec::prelude::LocalBits`]: crate::order::LocalBits\n[`from_element`]: Self::from_element\n[`from_element_mut`]: Self::from_element_mut\n[`from_slice`]: Self::from_slice\n[`from_slice_mut`]: Self::from_slice_mut\n[`mem::transmute`]: core::mem::transmute\n[`std::bitset`]: https://en.cppreference.com/w/cpp/utility/bitset\n[`std::vector<bool>`]: https://en.cppreference.com/w/cpp/container/vector_bool\n[`vec!`]: macro@alloc::vec\n\n[`.split_at_mut()`]: Self::split_at_mut\n[`.view_bits::<O>()`]: crate::view::BitView::view_bits\n[`.view_bits_mut::<O>()`]: crate::view::BitView::view_bits_mut\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":357663,"byte_end":371135,"line_start":101,"line_end":423,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":371136,"byte_end":371156,"line_start":424,"line_end":424,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2354},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373395,"byte_end":373407,"line_start":490,"line_end":490,"column_start":9,"column_end":21},"name":"from_element","qualname":"<BitSlice<O, T>>::from_element","value":"pub fn from_element(&T) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a shared `&BitSlice` reference over a shared element.","sig":null,"attributes":[{"value":"/ Constructs a shared `&BitSlice` reference over a shared element.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372613,"byte_end":372681,"line_start":463,"line_end":463,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372683,"byte_end":372686,"line_start":464,"line_end":464,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all [`BitStore`] implementors,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372688,"byte_end":372760,"line_start":465,"line_end":465,"column_start":2,"column_end":74}},{"value":"/ provides a method [`.view_bits::<O>()`] which delegates to this function","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372762,"byte_end":372838,"line_start":466,"line_end":466,"column_start":2,"column_end":78}},{"value":"/ and may be more convenient for you to write.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372840,"byte_end":372888,"line_start":467,"line_end":467,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372890,"byte_end":372893,"line_start":468,"line_end":468,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372895,"byte_end":372911,"line_start":469,"line_end":469,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372913,"byte_end":372916,"line_start":470,"line_end":470,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A shared reference to a memory element.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372918,"byte_end":372971,"line_start":471,"line_end":471,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372973,"byte_end":372976,"line_start":472,"line_end":472,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372978,"byte_end":372991,"line_start":473,"line_end":473,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372993,"byte_end":372996,"line_start":474,"line_end":474,"column_start":2,"column_end":5}},{"value":"/ A shared `&BitSlice` over the `elem` element.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372998,"byte_end":373047,"line_start":475,"line_end":475,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373049,"byte_end":373052,"line_start":476,"line_end":476,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373054,"byte_end":373068,"line_start":477,"line_end":477,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373070,"byte_end":373073,"line_start":478,"line_end":478,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373075,"byte_end":373086,"line_start":479,"line_end":479,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373088,"byte_end":373115,"line_start":480,"line_end":480,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373117,"byte_end":373120,"line_start":481,"line_end":481,"column_start":2,"column_end":5}},{"value":"/ let elem = 0u8;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373122,"byte_end":373141,"line_start":482,"line_end":482,"column_start":2,"column_end":21}},{"value":"/ let bits = BitSlice::<Lsb0, _>::from_element(&elem);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373143,"byte_end":373199,"line_start":483,"line_end":483,"column_start":2,"column_end":58}},{"value":"/ assert_eq!(bits.len(), 8);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373201,"byte_end":373231,"line_start":484,"line_end":484,"column_start":2,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373233,"byte_end":373240,"line_start":485,"line_end":485,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373242,"byte_end":373245,"line_start":486,"line_end":486,"column_start":2,"column_end":5}},{"value":"/ [`BitStore`]: crate::store::BitStore","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373247,"byte_end":373287,"line_start":487,"line_end":487,"column_start":2,"column_end":42}},{"value":"/ [`BitView`]: crate::view::BitView","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373289,"byte_end":373326,"line_start":488,"line_end":488,"column_start":2,"column_end":39}},{"value":"/ [`.view_bits::<O>()`]: crate::view::BitView::view_bits","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373328,"byte_end":373386,"line_start":489,"line_end":489,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2355},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374543,"byte_end":374559,"line_start":527,"line_end":527,"column_start":9,"column_end":25},"name":"from_element_mut","qualname":"<BitSlice<O, T>>::from_element_mut","value":"pub fn from_element_mut(&mut T) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs an exclusive `&mut BitSlice` reference over an element.","sig":null,"attributes":[{"value":"/ Constructs an exclusive `&mut BitSlice` reference over an element.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373530,"byte_end":373600,"line_start":495,"line_end":495,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373602,"byte_end":373605,"line_start":496,"line_end":496,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all [`BitStore`] implementors,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373607,"byte_end":373679,"line_start":497,"line_end":497,"column_start":2,"column_end":74}},{"value":"/ provides a method [`.view_bits_mut::<O>()`] which delegates to this","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373681,"byte_end":373752,"line_start":498,"line_end":498,"column_start":2,"column_end":73}},{"value":"/ function and may be more convenient for you to write.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373754,"byte_end":373811,"line_start":499,"line_end":499,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373813,"byte_end":373816,"line_start":500,"line_end":500,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373818,"byte_end":373834,"line_start":501,"line_end":501,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373836,"byte_end":373839,"line_start":502,"line_end":502,"column_start":2,"column_end":5}},{"value":"/ - `elem`: An exclusive reference to a memory element.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373841,"byte_end":373898,"line_start":503,"line_end":503,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373900,"byte_end":373903,"line_start":504,"line_end":504,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373905,"byte_end":373918,"line_start":505,"line_end":505,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373920,"byte_end":373923,"line_start":506,"line_end":506,"column_start":2,"column_end":5}},{"value":"/ An exclusive `&mut BitSlice` over the `elem` element.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373925,"byte_end":373982,"line_start":507,"line_end":507,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373984,"byte_end":373987,"line_start":508,"line_end":508,"column_start":2,"column_end":5}},{"value":"/ Note that the original `elem` reference will be inaccessible for the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373989,"byte_end":374061,"line_start":509,"line_end":509,"column_start":2,"column_end":74}},{"value":"/ duration of the returned slice handle’s lifetime.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374063,"byte_end":374118,"line_start":510,"line_end":510,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374120,"byte_end":374123,"line_start":511,"line_end":511,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374125,"byte_end":374139,"line_start":512,"line_end":512,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374141,"byte_end":374144,"line_start":513,"line_end":513,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374146,"byte_end":374157,"line_start":514,"line_end":514,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374159,"byte_end":374186,"line_start":515,"line_end":515,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374188,"byte_end":374191,"line_start":516,"line_end":516,"column_start":2,"column_end":5}},{"value":"/ let mut elem = 0u16;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374193,"byte_end":374217,"line_start":517,"line_end":517,"column_start":2,"column_end":26}},{"value":"/ let bits = BitSlice::<Msb0, _>::from_element_mut(&mut elem);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374219,"byte_end":374283,"line_start":518,"line_end":518,"column_start":2,"column_end":66}},{"value":"/ bits.set(15, true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374285,"byte_end":374308,"line_start":519,"line_end":519,"column_start":2,"column_end":25}},{"value":"/ assert!(bits.get(15).unwrap());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374310,"byte_end":374345,"line_start":520,"line_end":520,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(elem, 1);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374347,"byte_end":374371,"line_start":521,"line_end":521,"column_start":2,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374373,"byte_end":374380,"line_start":522,"line_end":522,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374382,"byte_end":374385,"line_start":523,"line_end":523,"column_start":2,"column_end":5}},{"value":"/ [`BitStore`]: crate::store::BitStore","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374387,"byte_end":374427,"line_start":524,"line_end":524,"column_start":2,"column_end":42}},{"value":"/ [`BitView`]: crate::view::BitView","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374429,"byte_end":374466,"line_start":525,"line_end":525,"column_start":2,"column_end":39}},{"value":"/ [`.view_bits_mut::<O>()`]: crate::view::BitView::view_bits_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374468,"byte_end":374534,"line_start":526,"line_end":526,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2356},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375979,"byte_end":375989,"line_start":570,"line_end":570,"column_start":9,"column_end":19},"name":"from_slice","qualname":"<BitSlice<O, T>>::from_slice","value":"pub fn from_slice(&[T]) -> Result<&Self, BitSpanError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a shared `&BitSlice` reference over a slice.","sig":null,"attributes":[{"value":"/ Constructs a shared `&BitSlice` reference over a slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374690,"byte_end":374749,"line_start":532,"line_end":532,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374751,"byte_end":374754,"line_start":533,"line_end":533,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all `[T]` slices, provides a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374756,"byte_end":374826,"line_start":534,"line_end":534,"column_start":2,"column_end":72}},{"value":"/ method [`.view_bits::<O>()`] which delegates to this function and may be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374828,"byte_end":374904,"line_start":535,"line_end":535,"column_start":2,"column_end":78}},{"value":"/ more convenient for you to write.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374906,"byte_end":374943,"line_start":536,"line_end":536,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374945,"byte_end":374948,"line_start":537,"line_end":537,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374950,"byte_end":374966,"line_start":538,"line_end":538,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374968,"byte_end":374971,"line_start":539,"line_end":539,"column_start":2,"column_end":5}},{"value":"/ - `slice`: A shared reference over a sequence of memory elements.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374973,"byte_end":375042,"line_start":540,"line_end":540,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375044,"byte_end":375047,"line_start":541,"line_end":541,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375049,"byte_end":375062,"line_start":542,"line_end":542,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375064,"byte_end":375067,"line_start":543,"line_end":543,"column_start":2,"column_end":5}},{"value":"/ A `&BitSlice` view of the provided slice. The error condition is only","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375069,"byte_end":375142,"line_start":544,"line_end":544,"column_start":2,"column_end":75}},{"value":"/ encountered if the source slice is too long to be encoded in a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375144,"byte_end":375210,"line_start":545,"line_end":545,"column_start":2,"column_end":68}},{"value":"/ `&BitSlice` handle, but such a slice is likely impossible to produce","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375212,"byte_end":375284,"line_start":546,"line_end":546,"column_start":2,"column_end":74}},{"value":"/ without causing errors long before calling this function.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375286,"byte_end":375347,"line_start":547,"line_end":547,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375349,"byte_end":375352,"line_start":548,"line_end":548,"column_start":2,"column_end":5}},{"value":"/ # Conditions","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375354,"byte_end":375370,"line_start":549,"line_end":549,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375372,"byte_end":375375,"line_start":550,"line_end":550,"column_start":2,"column_end":5}},{"value":"/ The produced `&BitSlice` handle always begins at the zeroth bit of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375377,"byte_end":375451,"line_start":551,"line_end":551,"column_start":2,"column_end":76}},{"value":"/ zeroth element in `slice`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375453,"byte_end":375483,"line_start":552,"line_end":552,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375485,"byte_end":375488,"line_start":553,"line_end":553,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375490,"byte_end":375504,"line_start":554,"line_end":554,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375506,"byte_end":375509,"line_start":555,"line_end":555,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375511,"byte_end":375522,"line_start":556,"line_end":556,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375524,"byte_end":375551,"line_start":557,"line_end":557,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375553,"byte_end":375556,"line_start":558,"line_end":558,"column_start":2,"column_end":5}},{"value":"/ let slice = &[0u8, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375558,"byte_end":375584,"line_start":559,"line_end":559,"column_start":2,"column_end":28}},{"value":"/ let bits = BitSlice::<Msb0, _>::from_slice(slice).unwrap();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375586,"byte_end":375649,"line_start":560,"line_end":560,"column_start":2,"column_end":65}},{"value":"/ assert!(bits[15]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375651,"byte_end":375673,"line_start":561,"line_end":561,"column_start":2,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375675,"byte_end":375682,"line_start":562,"line_end":562,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375684,"byte_end":375687,"line_start":563,"line_end":563,"column_start":2,"column_end":5}},{"value":"/ An example showing this function failing would require a slice exceeding","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375689,"byte_end":375765,"line_start":564,"line_end":564,"column_start":2,"column_end":78}},{"value":"/ `!0usize >> 3` bytes in size, which is infeasible to produce.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375767,"byte_end":375832,"line_start":565,"line_end":565,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375834,"byte_end":375837,"line_start":566,"line_end":566,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: crate::view::BitView","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375839,"byte_end":375876,"line_start":567,"line_end":567,"column_start":2,"column_end":39}},{"value":"/ [`MAX_ELTS`]: Self::MAX_ELTS","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375878,"byte_end":375910,"line_start":568,"line_end":568,"column_start":2,"column_end":34}},{"value":"/ [`.view_bits::<O>()`]: crate::view::BitView::view_bits","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375912,"byte_end":375970,"line_start":569,"line_end":569,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2357},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378330,"byte_end":378344,"line_start":638,"line_end":638,"column_start":9,"column_end":23},"name":"from_slice_mut","qualname":"<BitSlice<O, T>>::from_slice_mut","value":"pub fn from_slice_mut(&mut [T]) -> Result<&mut Self, BitSpanError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs an exclusive `&mut BitSlice` reference over a slice.","sig":null,"attributes":[{"value":"/ Constructs an exclusive `&mut BitSlice` reference over a slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376389,"byte_end":376456,"line_start":582,"line_end":582,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376458,"byte_end":376461,"line_start":583,"line_end":583,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all `[T]` slices, provides a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376463,"byte_end":376533,"line_start":584,"line_end":584,"column_start":2,"column_end":72}},{"value":"/ method [`.view_bits_mut::<O>()`] which delegates to this function and","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376535,"byte_end":376608,"line_start":585,"line_end":585,"column_start":2,"column_end":75}},{"value":"/ may be more convenient for you to write.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376610,"byte_end":376654,"line_start":586,"line_end":586,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376656,"byte_end":376659,"line_start":587,"line_end":587,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376661,"byte_end":376677,"line_start":588,"line_end":588,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376679,"byte_end":376682,"line_start":589,"line_end":589,"column_start":2,"column_end":5}},{"value":"/ - `slice`: An exclusive reference over a sequence of memory elements.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376684,"byte_end":376757,"line_start":590,"line_end":590,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376759,"byte_end":376762,"line_start":591,"line_end":591,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376764,"byte_end":376777,"line_start":592,"line_end":592,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376779,"byte_end":376782,"line_start":593,"line_end":593,"column_start":2,"column_end":5}},{"value":"/ A `&mut BitSlice` view of the provided slice. The error condition is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376784,"byte_end":376856,"line_start":594,"line_end":594,"column_start":2,"column_end":74}},{"value":"/ only encountered if the source slice is too long to be encoded in a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376858,"byte_end":376929,"line_start":595,"line_end":595,"column_start":2,"column_end":73}},{"value":"/ `&mut BitSlice` handle, but such a slice is likely impossible to produce","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376931,"byte_end":377007,"line_start":596,"line_end":596,"column_start":2,"column_end":78}},{"value":"/ without causing errors long before calling this function.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377009,"byte_end":377070,"line_start":597,"line_end":597,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377072,"byte_end":377075,"line_start":598,"line_end":598,"column_start":2,"column_end":5}},{"value":"/ Note that the original `slice` reference will be inaccessible for the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377077,"byte_end":377150,"line_start":599,"line_end":599,"column_start":2,"column_end":75}},{"value":"/ duration of the returned slice handle’s lifetime.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377152,"byte_end":377207,"line_start":600,"line_end":600,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377209,"byte_end":377212,"line_start":601,"line_end":601,"column_start":2,"column_end":5}},{"value":"/ # Conditions","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377214,"byte_end":377230,"line_start":602,"line_end":602,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377232,"byte_end":377235,"line_start":603,"line_end":603,"column_start":2,"column_end":5}},{"value":"/ The produced `&mut BitSlice` handle always begins at the zeroth bit of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377237,"byte_end":377311,"line_start":604,"line_end":604,"column_start":2,"column_end":76}},{"value":"/ the zeroth element in `slice`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377313,"byte_end":377347,"line_start":605,"line_end":605,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377349,"byte_end":377352,"line_start":606,"line_end":606,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377354,"byte_end":377368,"line_start":607,"line_end":607,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377370,"byte_end":377373,"line_start":608,"line_end":608,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377375,"byte_end":377386,"line_start":609,"line_end":609,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377388,"byte_end":377415,"line_start":610,"line_end":610,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377417,"byte_end":377420,"line_start":611,"line_end":611,"column_start":2,"column_end":5}},{"value":"/ let mut slice = [0u8; 2];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377422,"byte_end":377451,"line_start":612,"line_end":612,"column_start":2,"column_end":31}},{"value":"/ let bits = BitSlice::<Lsb0, _>::from_slice_mut(&mut slice).unwrap();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377453,"byte_end":377525,"line_start":613,"line_end":613,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377527,"byte_end":377530,"line_start":614,"line_end":614,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits[0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377532,"byte_end":377554,"line_start":615,"line_end":615,"column_start":2,"column_end":24}},{"value":"/ bits.set(0, true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377556,"byte_end":377578,"line_start":616,"line_end":616,"column_start":2,"column_end":24}},{"value":"/ assert!(bits[0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377580,"byte_end":377601,"line_start":617,"line_end":617,"column_start":2,"column_end":23}},{"value":"/ assert_eq!(slice[0], 1);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377603,"byte_end":377631,"line_start":618,"line_end":618,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377633,"byte_end":377640,"line_start":619,"line_end":619,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377642,"byte_end":377645,"line_start":620,"line_end":620,"column_start":2,"column_end":5}},{"value":"/ This example attempts to construct a `&mut BitSlice` handle from a slice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377647,"byte_end":377723,"line_start":621,"line_end":621,"column_start":2,"column_end":78}},{"value":"/ that is too large to index. Either the `vec!` allocation will fail, or","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377725,"byte_end":377799,"line_start":622,"line_end":622,"column_start":2,"column_end":76}},{"value":"/ the bit-slice constructor will fail.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377801,"byte_end":377841,"line_start":623,"line_end":623,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377843,"byte_end":377846,"line_start":624,"line_end":624,"column_start":2,"column_end":5}},{"value":"/ ```rust,should_panic","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377848,"byte_end":377872,"line_start":625,"line_end":625,"column_start":2,"column_end":26}},{"value":"/ # #[cfg(feature = \"alloc\")] {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377874,"byte_end":377907,"line_start":626,"line_end":626,"column_start":2,"column_end":35}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377909,"byte_end":377936,"line_start":627,"line_end":627,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377938,"byte_end":377941,"line_start":628,"line_end":628,"column_start":2,"column_end":5}},{"value":"/ let mut data = vec![0usize; BitSlice::<Lsb0, usize>::MAX_ELTS];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377943,"byte_end":378010,"line_start":629,"line_end":629,"column_start":2,"column_end":69}},{"value":"/ let bits = BitSlice::<Lsb0, _>::from_slice_mut(&mut data[..]).unwrap();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378012,"byte_end":378087,"line_start":630,"line_end":630,"column_start":2,"column_end":77}},{"value":"/ # }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378089,"byte_end":378096,"line_start":631,"line_end":631,"column_start":2,"column_end":9}},{"value":"/ # #[cfg(not(feature = \"alloc\"))] panic!(\"No allocator present\");","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378098,"byte_end":378166,"line_start":632,"line_end":632,"column_start":2,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378168,"byte_end":378175,"line_start":633,"line_end":633,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378177,"byte_end":378180,"line_start":634,"line_end":634,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: crate::view::BitView","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378182,"byte_end":378219,"line_start":635,"line_end":635,"column_start":2,"column_end":39}},{"value":"/ [`MAX_ELTS`]: Self::MAX_ELTS","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378221,"byte_end":378253,"line_start":636,"line_end":636,"column_start":2,"column_end":34}},{"value":"/ [`.view_bits_mut::<O>()`]: crate::view::BitView::view_bits_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378255,"byte_end":378321,"line_start":637,"line_end":637,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2358},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379122,"byte_end":379142,"line_start":663,"line_end":663,"column_start":16,"column_end":36},"name":"from_slice_unchecked","qualname":"<BitSlice<O, T>>::from_slice_unchecked","value":"pub unsafe fn from_slice_unchecked(&[T]) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice reference into a `BitSlice` reference without checking\n that its size can be safely used.","sig":null,"attributes":[{"value":"/ Converts a slice reference into a `BitSlice` reference without checking","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378620,"byte_end":378695,"line_start":650,"line_end":650,"column_start":2,"column_end":77}},{"value":"/ that its size can be safely used.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378697,"byte_end":378734,"line_start":651,"line_end":651,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378736,"byte_end":378739,"line_start":652,"line_end":652,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378741,"byte_end":378753,"line_start":653,"line_end":653,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378755,"byte_end":378758,"line_start":654,"line_end":654,"column_start":2,"column_end":5}},{"value":"/ If the `slice` length is longer than [`MAX_ELTS`], then the returned","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378760,"byte_end":378832,"line_start":655,"line_end":655,"column_start":2,"column_end":74}},{"value":"/ `BitSlice` will have its length severely truncated. This is not a safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378834,"byte_end":378910,"line_start":656,"line_end":656,"column_start":2,"column_end":78}},{"value":"/ violation, but it is behavior that callers must avoid to remain correct.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378912,"byte_end":378988,"line_start":657,"line_end":657,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378990,"byte_end":378993,"line_start":658,"line_end":658,"column_start":2,"column_end":5}},{"value":"/ Prefer [`::from_slice()`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378995,"byte_end":379025,"line_start":659,"line_end":659,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379027,"byte_end":379030,"line_start":660,"line_end":660,"column_start":2,"column_end":5}},{"value":"/ [`MAX_ELTS`]: Self::MAX_ELTS","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379032,"byte_end":379064,"line_start":661,"line_end":661,"column_start":2,"column_end":34}},{"value":"/ [`::from_slice()`]: Self::from_slice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379066,"byte_end":379106,"line_start":662,"line_end":662,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2359},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379823,"byte_end":379847,"line_start":683,"line_end":683,"column_start":16,"column_end":40},"name":"from_slice_unchecked_mut","qualname":"<BitSlice<O, T>>::from_slice_unchecked_mut","value":"pub unsafe fn from_slice_unchecked_mut(&mut [T]) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice reference into a `BitSlice` reference without checking\n that its size can be safely used.","sig":null,"attributes":[{"value":"/ Converts a slice reference into a `BitSlice` reference without checking","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379309,"byte_end":379384,"line_start":670,"line_end":670,"column_start":2,"column_end":77}},{"value":"/ that its size can be safely used.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379386,"byte_end":379423,"line_start":671,"line_end":671,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379425,"byte_end":379428,"line_start":672,"line_end":672,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379430,"byte_end":379442,"line_start":673,"line_end":673,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379444,"byte_end":379447,"line_start":674,"line_end":674,"column_start":2,"column_end":5}},{"value":"/ If the `slice` length is longer than [`MAX_ELTS`], then the returned","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379449,"byte_end":379521,"line_start":675,"line_end":675,"column_start":2,"column_end":74}},{"value":"/ `BitSlice` will have its length severely truncated. This is not a safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379523,"byte_end":379599,"line_start":676,"line_end":676,"column_start":2,"column_end":78}},{"value":"/ violation, but it is behavior that callers must avoid to remain correct.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379601,"byte_end":379677,"line_start":677,"line_end":677,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379679,"byte_end":379682,"line_start":678,"line_end":678,"column_start":2,"column_end":5}},{"value":"/ Prefer [`::from_slice_mut()`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379684,"byte_end":379718,"line_start":679,"line_end":679,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379720,"byte_end":379723,"line_start":680,"line_end":680,"column_start":2,"column_end":5}},{"value":"/ [`MAX_ELTS`]: Self::MAX_ELTS","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379725,"byte_end":379757,"line_start":681,"line_end":681,"column_start":2,"column_end":34}},{"value":"/ [`::from_slice_mut()`]: Self::from_slice_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379759,"byte_end":379807,"line_start":682,"line_end":682,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2360},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380292,"byte_end":380297,"line_start":702,"line_end":702,"column_start":9,"column_end":14},"name":"empty","qualname":"<BitSlice<O, T>>::empty","value":"pub fn empty<'a>() -> &'a Self","parent":null,"children":[],"decl_id":null,"docs":" Produces the empty slice reference.","sig":null,"attributes":[{"value":"/ Produces the empty slice reference.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380026,"byte_end":380065,"line_start":690,"line_end":690,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380067,"byte_end":380070,"line_start":691,"line_end":691,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to `&[]` for ordinary slices.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380072,"byte_end":380124,"line_start":692,"line_end":692,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380126,"byte_end":380129,"line_start":693,"line_end":693,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380131,"byte_end":380145,"line_start":694,"line_end":694,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380147,"byte_end":380150,"line_start":695,"line_end":695,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380152,"byte_end":380163,"line_start":696,"line_end":696,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380165,"byte_end":380192,"line_start":697,"line_end":697,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380194,"byte_end":380197,"line_start":698,"line_end":698,"column_start":2,"column_end":5}},{"value":"/ let bits: &BitSlice = BitSlice::empty();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380199,"byte_end":380243,"line_start":699,"line_end":699,"column_start":2,"column_end":46}},{"value":"/ assert!(bits.is_empty());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380245,"byte_end":380274,"line_start":700,"line_end":700,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380276,"byte_end":380283,"line_start":701,"line_end":701,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2362},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380659,"byte_end":380668,"line_start":718,"line_end":718,"column_start":9,"column_end":18},"name":"empty_mut","qualname":"<BitSlice<O, T>>::empty_mut","value":"pub fn empty_mut<'a>() -> &'a mut Self","parent":null,"children":[],"decl_id":null,"docs":" Produces the empty mutable slice reference.","sig":null,"attributes":[{"value":"/ Produces the empty mutable slice reference.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380373,"byte_end":380420,"line_start":706,"line_end":706,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380422,"byte_end":380425,"line_start":707,"line_end":707,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to `&mut []` for ordinary slices.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380427,"byte_end":380483,"line_start":708,"line_end":708,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380485,"byte_end":380488,"line_start":709,"line_end":709,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380490,"byte_end":380504,"line_start":710,"line_end":710,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380506,"byte_end":380509,"line_start":711,"line_end":711,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380511,"byte_end":380522,"line_start":712,"line_end":712,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380524,"byte_end":380551,"line_start":713,"line_end":713,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380553,"byte_end":380556,"line_start":714,"line_end":714,"column_start":2,"column_end":5}},{"value":"/ let bits: &mut BitSlice = BitSlice::empty_mut();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380558,"byte_end":380610,"line_start":715,"line_end":715,"column_start":2,"column_end":54}},{"value":"/ assert!(bits.is_empty());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380612,"byte_end":380641,"line_start":716,"line_end":716,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380643,"byte_end":380650,"line_start":717,"line_end":717,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2364},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381632,"byte_end":381635,"line_start":761,"line_end":761,"column_start":9,"column_end":12},"name":"set","qualname":"<BitSlice<O, T>>::set","value":"pub fn set(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a new bit at a given index.","sig":null,"attributes":[{"value":"/ Writes a new bit at a given index.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380733,"byte_end":380771,"line_start":722,"line_end":722,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380773,"byte_end":380776,"line_start":723,"line_end":723,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380778,"byte_end":380794,"line_start":724,"line_end":724,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380796,"byte_end":380799,"line_start":725,"line_end":725,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380801,"byte_end":380818,"line_start":726,"line_end":726,"column_start":2,"column_end":19}},{"value":"/ - `index`: The bit index at which to write. It must be in the range `0","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380820,"byte_end":380894,"line_start":727,"line_end":727,"column_start":2,"column_end":76}},{"value":"/   .. self.len()`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380896,"byte_end":380917,"line_start":728,"line_end":728,"column_start":2,"column_end":23}},{"value":"/ - `value`: The value to be written; `true` for `1` or `false` for `0`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380919,"byte_end":380993,"line_start":729,"line_end":729,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380995,"byte_end":380998,"line_start":730,"line_end":730,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381000,"byte_end":381013,"line_start":731,"line_end":731,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381015,"byte_end":381018,"line_start":732,"line_end":732,"column_start":2,"column_end":5}},{"value":"/ If `index` is valid, then the bit to which it refers is set to `value`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381020,"byte_end":381095,"line_start":733,"line_end":733,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381097,"byte_end":381100,"line_start":734,"line_end":734,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381102,"byte_end":381114,"line_start":735,"line_end":735,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381116,"byte_end":381119,"line_start":736,"line_end":736,"column_start":2,"column_end":5}},{"value":"/ This method panics if `index` is not less than [`self.len()`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381121,"byte_end":381187,"line_start":737,"line_end":737,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381189,"byte_end":381192,"line_start":738,"line_end":738,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381194,"byte_end":381208,"line_start":739,"line_end":739,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381210,"byte_end":381213,"line_start":740,"line_end":740,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381215,"byte_end":381226,"line_start":741,"line_end":741,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381228,"byte_end":381255,"line_start":742,"line_end":742,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381257,"byte_end":381260,"line_start":743,"line_end":743,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381262,"byte_end":381290,"line_start":744,"line_end":744,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381292,"byte_end":381295,"line_start":745,"line_end":745,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits[0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381297,"byte_end":381319,"line_start":746,"line_end":746,"column_start":2,"column_end":24}},{"value":"/ bits.set(0, true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381321,"byte_end":381343,"line_start":747,"line_end":747,"column_start":2,"column_end":24}},{"value":"/ assert!(bits[0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381345,"byte_end":381366,"line_start":748,"line_end":748,"column_start":2,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381368,"byte_end":381375,"line_start":749,"line_end":749,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381377,"byte_end":381380,"line_start":750,"line_end":750,"column_start":2,"column_end":5}},{"value":"/ This example panics when it attempts to set a bit that is out of bounds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381382,"byte_end":381458,"line_start":751,"line_end":751,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381460,"byte_end":381463,"line_start":752,"line_end":752,"column_start":2,"column_end":5}},{"value":"/ ```rust,should_panic","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381465,"byte_end":381489,"line_start":753,"line_end":753,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381491,"byte_end":381518,"line_start":754,"line_end":754,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381520,"byte_end":381523,"line_start":755,"line_end":755,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381525,"byte_end":381553,"line_start":756,"line_end":756,"column_start":2,"column_end":30}},{"value":"/ bits.set(1, false);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381555,"byte_end":381578,"line_start":757,"line_end":757,"column_start":2,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381580,"byte_end":381587,"line_start":758,"line_end":758,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381589,"byte_end":381592,"line_start":759,"line_end":759,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381594,"byte_end":381623,"line_start":760,"line_end":760,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2365},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383250,"byte_end":383261,"line_start":820,"line_end":820,"column_start":9,"column_end":20},"name":"set_aliased","qualname":"<BitSlice<O, T>>::set_aliased","value":"pub fn set_aliased(&Self, usize, bool) where T: radium::Radium","parent":null,"children":[],"decl_id":null,"docs":" Writes a new bit at a given index.","sig":null,"attributes":[{"value":"/ Writes a new bit at a given index.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381765,"byte_end":381803,"line_start":768,"line_end":768,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381805,"byte_end":381808,"line_start":769,"line_end":769,"column_start":2,"column_end":5}},{"value":"/ This method supports writing through a shared reference to a bit that","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381810,"byte_end":381883,"line_start":770,"line_end":770,"column_start":2,"column_end":75}},{"value":"/ may be observed by other `BitSlice` handles. It is only present when the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381885,"byte_end":381961,"line_start":771,"line_end":771,"column_start":2,"column_end":78}},{"value":"/ `T` type parameter supports such shared mutation (measured by the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381963,"byte_end":382032,"line_start":772,"line_end":772,"column_start":2,"column_end":71}},{"value":"/ [`Radium`] trait).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382034,"byte_end":382056,"line_start":773,"line_end":773,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382058,"byte_end":382061,"line_start":774,"line_end":774,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382063,"byte_end":382079,"line_start":775,"line_end":775,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382081,"byte_end":382084,"line_start":776,"line_end":776,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382086,"byte_end":382099,"line_start":777,"line_end":777,"column_start":2,"column_end":15}},{"value":"/ - `index`: The bit index at which to write. It must be in the range `0","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382101,"byte_end":382175,"line_start":778,"line_end":778,"column_start":2,"column_end":76}},{"value":"/   .. self.len()`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382177,"byte_end":382198,"line_start":779,"line_end":779,"column_start":2,"column_end":23}},{"value":"/ - `value`: The value to be written; `true` for `1` or `false` for `0`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382200,"byte_end":382274,"line_start":780,"line_end":780,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382276,"byte_end":382279,"line_start":781,"line_end":781,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382281,"byte_end":382294,"line_start":782,"line_end":782,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382296,"byte_end":382299,"line_start":783,"line_end":783,"column_start":2,"column_end":5}},{"value":"/ If `index` is valid, then the bit to which it refers is set to `value`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382301,"byte_end":382376,"line_start":784,"line_end":784,"column_start":2,"column_end":77}},{"value":"/ If `T` is an [atomic], this will lock the memory bus for the referent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382378,"byte_end":382451,"line_start":785,"line_end":785,"column_start":2,"column_end":75}},{"value":"/ address, and may cause stalls.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382453,"byte_end":382487,"line_start":786,"line_end":786,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382489,"byte_end":382492,"line_start":787,"line_end":787,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382494,"byte_end":382506,"line_start":788,"line_end":788,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382508,"byte_end":382511,"line_start":789,"line_end":789,"column_start":2,"column_end":5}},{"value":"/ This method panics if `index` is not less than [`self.len()`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382513,"byte_end":382579,"line_start":790,"line_end":790,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382581,"byte_end":382584,"line_start":791,"line_end":791,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382586,"byte_end":382600,"line_start":792,"line_end":792,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382602,"byte_end":382605,"line_start":793,"line_end":793,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382607,"byte_end":382618,"line_start":794,"line_end":794,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382620,"byte_end":382647,"line_start":795,"line_end":795,"column_start":2,"column_end":29}},{"value":"/ use core::cell::Cell;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382649,"byte_end":382674,"line_start":796,"line_end":796,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382676,"byte_end":382679,"line_start":797,"line_end":797,"column_start":2,"column_end":5}},{"value":"/ let byte = Cell::new(0u8);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382681,"byte_end":382711,"line_start":798,"line_end":798,"column_start":2,"column_end":32}},{"value":"/ let bits = byte.view_bits::<Msb0>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382713,"byte_end":382753,"line_start":799,"line_end":799,"column_start":2,"column_end":42}},{"value":"/ let bits_2 = bits;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382755,"byte_end":382777,"line_start":800,"line_end":800,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382779,"byte_end":382782,"line_start":801,"line_end":801,"column_start":2,"column_end":5}},{"value":"/ bits.set_aliased(1, true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382784,"byte_end":382814,"line_start":802,"line_end":802,"column_start":2,"column_end":32}},{"value":"/ assert!(bits_2[1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382816,"byte_end":382839,"line_start":803,"line_end":803,"column_start":2,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382841,"byte_end":382848,"line_start":804,"line_end":804,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382850,"byte_end":382853,"line_start":805,"line_end":805,"column_start":2,"column_end":5}},{"value":"/ This example panics when it attempts to set a bit that is out of bounds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382855,"byte_end":382931,"line_start":806,"line_end":806,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382933,"byte_end":382936,"line_start":807,"line_end":807,"column_start":2,"column_end":5}},{"value":"/ ```rust,should_panic","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382938,"byte_end":382962,"line_start":808,"line_end":808,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382964,"byte_end":382991,"line_start":809,"line_end":809,"column_start":2,"column_end":29}},{"value":"/ use core::cell::Cell;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382993,"byte_end":383018,"line_start":810,"line_end":810,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383020,"byte_end":383023,"line_start":811,"line_end":811,"column_start":2,"column_end":5}},{"value":"/ let byte = Cell::new(0u8);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383025,"byte_end":383055,"line_start":812,"line_end":812,"column_start":2,"column_end":32}},{"value":"/ let bits = byte.view_bits::<Lsb0>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383057,"byte_end":383097,"line_start":813,"line_end":813,"column_start":2,"column_end":42}},{"value":"/ bits.set_aliased(8, false);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383099,"byte_end":383130,"line_start":814,"line_end":814,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383132,"byte_end":383139,"line_start":815,"line_end":815,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383141,"byte_end":383144,"line_start":816,"line_end":816,"column_start":2,"column_end":5}},{"value":"/ [atomic]: core::sync::atomic","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383146,"byte_end":383178,"line_start":817,"line_end":817,"column_start":2,"column_end":34}},{"value":"/ [`Radium`]: radium::Radium","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383180,"byte_end":383210,"line_start":818,"line_end":818,"column_start":2,"column_end":32}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383212,"byte_end":383241,"line_start":819,"line_end":819,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2366},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383932,"byte_end":383935,"line_start":857,"line_end":857,"column_start":9,"column_end":12},"name":"any","qualname":"<BitSlice<O, T>>::any","value":"pub fn any(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *any* bit in the slice is set (logical `∨`).","sig":null,"attributes":[{"value":"/ Tests if *any* bit in the slice is set (logical `∨`).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383420,"byte_end":383479,"line_start":828,"line_end":828,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383481,"byte_end":383484,"line_start":829,"line_end":829,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383486,"byte_end":383503,"line_start":830,"line_end":830,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383505,"byte_end":383508,"line_start":831,"line_end":831,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383510,"byte_end":383521,"line_start":832,"line_end":832,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 0","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383523,"byte_end":383535,"line_start":833,"line_end":833,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 1","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383537,"byte_end":383549,"line_start":834,"line_end":834,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 1","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383551,"byte_end":383563,"line_start":835,"line_end":835,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 1","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383565,"byte_end":383577,"line_start":836,"line_end":836,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383579,"byte_end":383586,"line_start":837,"line_end":837,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383588,"byte_end":383591,"line_start":838,"line_end":838,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383593,"byte_end":383609,"line_start":839,"line_end":839,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383611,"byte_end":383614,"line_start":840,"line_end":840,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383616,"byte_end":383629,"line_start":841,"line_end":841,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383631,"byte_end":383634,"line_start":842,"line_end":842,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383636,"byte_end":383649,"line_start":843,"line_end":843,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383651,"byte_end":383654,"line_start":844,"line_end":844,"column_start":2,"column_end":5}},{"value":"/ Whether any bit in the slice domain is set. The empty slice returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383656,"byte_end":383727,"line_start":845,"line_end":845,"column_start":2,"column_end":73}},{"value":"/ `false`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383729,"byte_end":383741,"line_start":846,"line_end":846,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383743,"byte_end":383746,"line_start":847,"line_end":847,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383748,"byte_end":383762,"line_start":848,"line_end":848,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383764,"byte_end":383767,"line_start":849,"line_end":849,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383769,"byte_end":383780,"line_start":850,"line_end":850,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383782,"byte_end":383809,"line_start":851,"line_end":851,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383811,"byte_end":383814,"line_start":852,"line_end":852,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383816,"byte_end":383849,"line_start":853,"line_end":853,"column_start":2,"column_end":35}},{"value":"/ assert!(bits[.. 2].any());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383851,"byte_end":383881,"line_start":854,"line_end":854,"column_start":2,"column_end":32}},{"value":"/ assert!(!bits[2 ..].any());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383883,"byte_end":383914,"line_start":855,"line_end":855,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383916,"byte_end":383923,"line_start":856,"line_end":856,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2370},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384949,"byte_end":384952,"line_start":902,"line_end":902,"column_start":9,"column_end":12},"name":"all","qualname":"<BitSlice<O, T>>::all","value":"pub fn all(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *all* bits in the slice domain are set (logical `∧`).","sig":null,"attributes":[{"value":"/ Tests if *all* bits in the slice domain are set (logical `∧`).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384427,"byte_end":384495,"line_start":873,"line_end":873,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384497,"byte_end":384500,"line_start":874,"line_end":874,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384502,"byte_end":384519,"line_start":875,"line_end":875,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384521,"byte_end":384524,"line_start":876,"line_end":876,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384526,"byte_end":384537,"line_start":877,"line_end":877,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 0","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384539,"byte_end":384551,"line_start":878,"line_end":878,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 0","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384553,"byte_end":384565,"line_start":879,"line_end":879,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 0","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384567,"byte_end":384579,"line_start":880,"line_end":880,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 1","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384581,"byte_end":384593,"line_start":881,"line_end":881,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384595,"byte_end":384602,"line_start":882,"line_end":882,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384604,"byte_end":384607,"line_start":883,"line_end":883,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384609,"byte_end":384625,"line_start":884,"line_end":884,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384627,"byte_end":384630,"line_start":885,"line_end":885,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384632,"byte_end":384645,"line_start":886,"line_end":886,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384647,"byte_end":384650,"line_start":887,"line_end":887,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384652,"byte_end":384665,"line_start":888,"line_end":888,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384667,"byte_end":384670,"line_start":889,"line_end":889,"column_start":2,"column_end":5}},{"value":"/ Whether all bits in the slice domain are set. The empty slice returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384672,"byte_end":384745,"line_start":890,"line_end":890,"column_start":2,"column_end":75}},{"value":"/ `true`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384747,"byte_end":384758,"line_start":891,"line_end":891,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384760,"byte_end":384763,"line_start":892,"line_end":892,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384765,"byte_end":384779,"line_start":893,"line_end":893,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384781,"byte_end":384784,"line_start":894,"line_end":894,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384786,"byte_end":384797,"line_start":895,"line_end":895,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384799,"byte_end":384826,"line_start":896,"line_end":896,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384828,"byte_end":384831,"line_start":897,"line_end":897,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384833,"byte_end":384866,"line_start":898,"line_end":898,"column_start":2,"column_end":35}},{"value":"/ assert!(bits[.. 2].all());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384868,"byte_end":384898,"line_start":899,"line_end":899,"column_start":2,"column_end":32}},{"value":"/ assert!(!bits[2 ..].all());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384900,"byte_end":384931,"line_start":900,"line_end":900,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384933,"byte_end":384940,"line_start":901,"line_end":901,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2374},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386499,"byte_end":386506,"line_start":960,"line_end":960,"column_start":9,"column_end":16},"name":"not_any","qualname":"<BitSlice<O, T>>::not_any","value":"pub fn not_any(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *all* bits in the slice are unset (logical `¬∨`).","sig":null,"attributes":[{"value":"/ Tests if *all* bits in the slice are unset (logical `¬∨`).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386007,"byte_end":386072,"line_start":932,"line_end":932,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386074,"byte_end":386077,"line_start":933,"line_end":933,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386079,"byte_end":386096,"line_start":934,"line_end":934,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386098,"byte_end":386101,"line_start":935,"line_end":935,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386103,"byte_end":386114,"line_start":936,"line_end":936,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 1","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386116,"byte_end":386128,"line_start":937,"line_end":937,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 0","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386130,"byte_end":386142,"line_start":938,"line_end":938,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 0","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386144,"byte_end":386156,"line_start":939,"line_end":939,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 0","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386158,"byte_end":386170,"line_start":940,"line_end":940,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386172,"byte_end":386179,"line_start":941,"line_end":941,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386181,"byte_end":386184,"line_start":942,"line_end":942,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386186,"byte_end":386202,"line_start":943,"line_end":943,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386204,"byte_end":386207,"line_start":944,"line_end":944,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386209,"byte_end":386222,"line_start":945,"line_end":945,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386224,"byte_end":386227,"line_start":946,"line_end":946,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386229,"byte_end":386242,"line_start":947,"line_end":947,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386244,"byte_end":386247,"line_start":948,"line_end":948,"column_start":2,"column_end":5}},{"value":"/ Whether all bits in the slice domain are unset.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386249,"byte_end":386300,"line_start":949,"line_end":949,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386302,"byte_end":386305,"line_start":950,"line_end":950,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386307,"byte_end":386321,"line_start":951,"line_end":951,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386323,"byte_end":386326,"line_start":952,"line_end":952,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386328,"byte_end":386339,"line_start":953,"line_end":953,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386341,"byte_end":386368,"line_start":954,"line_end":954,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386370,"byte_end":386373,"line_start":955,"line_end":955,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386375,"byte_end":386408,"line_start":956,"line_end":956,"column_start":2,"column_end":35}},{"value":"/ assert!(!bits[.. 2].not_any());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386410,"byte_end":386445,"line_start":957,"line_end":957,"column_start":2,"column_end":37}},{"value":"/ assert!(bits[2 ..].not_any());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386447,"byte_end":386481,"line_start":958,"line_end":958,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386483,"byte_end":386490,"line_start":959,"line_end":959,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2375},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387031,"byte_end":387038,"line_start":992,"line_end":992,"column_start":9,"column_end":16},"name":"not_all","qualname":"<BitSlice<O, T>>::not_all","value":"pub fn not_all(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *any* bit in the slice is unset (logical `¬∧`).","sig":null,"attributes":[{"value":"/ Tests if *any* bit in the slice is unset (logical `¬∧`).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386543,"byte_end":386606,"line_start":964,"line_end":964,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386608,"byte_end":386611,"line_start":965,"line_end":965,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386613,"byte_end":386630,"line_start":966,"line_end":966,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386632,"byte_end":386635,"line_start":967,"line_end":967,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386637,"byte_end":386648,"line_start":968,"line_end":968,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 1","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386650,"byte_end":386662,"line_start":969,"line_end":969,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 1","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386664,"byte_end":386676,"line_start":970,"line_end":970,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 1","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386678,"byte_end":386690,"line_start":971,"line_end":971,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 0","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386692,"byte_end":386704,"line_start":972,"line_end":972,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386706,"byte_end":386713,"line_start":973,"line_end":973,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386715,"byte_end":386718,"line_start":974,"line_end":974,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386720,"byte_end":386736,"line_start":975,"line_end":975,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386738,"byte_end":386741,"line_start":976,"line_end":976,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386743,"byte_end":386756,"line_start":977,"line_end":977,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386758,"byte_end":386761,"line_start":978,"line_end":978,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386763,"byte_end":386776,"line_start":979,"line_end":979,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386778,"byte_end":386781,"line_start":980,"line_end":980,"column_start":2,"column_end":5}},{"value":"/ Whether any bit in the slice domain is unset.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386783,"byte_end":386832,"line_start":981,"line_end":981,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386834,"byte_end":386837,"line_start":982,"line_end":982,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386839,"byte_end":386853,"line_start":983,"line_end":983,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386855,"byte_end":386858,"line_start":984,"line_end":984,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386860,"byte_end":386871,"line_start":985,"line_end":985,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386873,"byte_end":386900,"line_start":986,"line_end":986,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386902,"byte_end":386905,"line_start":987,"line_end":987,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386907,"byte_end":386940,"line_start":988,"line_end":988,"column_start":2,"column_end":35}},{"value":"/ assert!(!bits[.. 2].not_all());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386942,"byte_end":386977,"line_start":989,"line_end":989,"column_start":2,"column_end":37}},{"value":"/ assert!(bits[2 ..].not_all());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386979,"byte_end":387013,"line_start":990,"line_end":990,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387015,"byte_end":387022,"line_start":991,"line_end":991,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2376},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387846,"byte_end":387850,"line_start":1034,"line_end":1034,"column_start":9,"column_end":13},"name":"some","qualname":"<BitSlice<O, T>>::some","value":"pub fn some(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the slice has some, but not all, bits set and some, but\n not all, bits unset.","sig":null,"attributes":[{"value":"/ Tests whether the slice has some, but not all, bits set and some, but","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387075,"byte_end":387148,"line_start":996,"line_end":996,"column_start":2,"column_end":75}},{"value":"/ not all, bits unset.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387150,"byte_end":387174,"line_start":997,"line_end":997,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387176,"byte_end":387179,"line_start":998,"line_end":998,"column_start":2,"column_end":5}},{"value":"/ This is `false` if either [`.all()`] or [`.not_any()`] are `true`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387181,"byte_end":387251,"line_start":999,"line_end":999,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387253,"byte_end":387256,"line_start":1000,"line_end":1000,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387258,"byte_end":387275,"line_start":1001,"line_end":1001,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387277,"byte_end":387280,"line_start":1002,"line_end":1002,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387282,"byte_end":387293,"line_start":1003,"line_end":1003,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 0","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387295,"byte_end":387307,"line_start":1004,"line_end":1004,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 1","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387309,"byte_end":387321,"line_start":1005,"line_end":1005,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 1","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387323,"byte_end":387335,"line_start":1006,"line_end":1006,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 0","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387337,"byte_end":387349,"line_start":1007,"line_end":1007,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387351,"byte_end":387358,"line_start":1008,"line_end":1008,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387360,"byte_end":387363,"line_start":1009,"line_end":1009,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387365,"byte_end":387381,"line_start":1010,"line_end":1010,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387383,"byte_end":387386,"line_start":1011,"line_end":1011,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387388,"byte_end":387401,"line_start":1012,"line_end":1012,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387403,"byte_end":387406,"line_start":1013,"line_end":1013,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387408,"byte_end":387421,"line_start":1014,"line_end":1014,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387423,"byte_end":387426,"line_start":1015,"line_end":1015,"column_start":2,"column_end":5}},{"value":"/ Whether the slice domain has mixed content. The empty slice returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387428,"byte_end":387499,"line_start":1016,"line_end":1016,"column_start":2,"column_end":73}},{"value":"/ `false`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387501,"byte_end":387513,"line_start":1017,"line_end":1017,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387515,"byte_end":387518,"line_start":1018,"line_end":1018,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387520,"byte_end":387534,"line_start":1019,"line_end":1019,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387536,"byte_end":387539,"line_start":1020,"line_end":1020,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387541,"byte_end":387552,"line_start":1021,"line_end":1021,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387554,"byte_end":387581,"line_start":1022,"line_end":1022,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387583,"byte_end":387586,"line_start":1023,"line_end":1023,"column_start":2,"column_end":5}},{"value":"/ let data = 0b111_000_10u8;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387588,"byte_end":387618,"line_start":1024,"line_end":1024,"column_start":2,"column_end":32}},{"value":"/ let bits = bits![1, 1, 0, 0, 1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387620,"byte_end":387659,"line_start":1025,"line_end":1025,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387661,"byte_end":387664,"line_start":1026,"line_end":1026,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits[.. 2].some());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387666,"byte_end":387698,"line_start":1027,"line_end":1027,"column_start":2,"column_end":34}},{"value":"/ assert!(!bits[2 .. 4].some());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387700,"byte_end":387734,"line_start":1028,"line_end":1028,"column_start":2,"column_end":36}},{"value":"/ assert!(bits.some());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387736,"byte_end":387761,"line_start":1029,"line_end":1029,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387763,"byte_end":387770,"line_start":1030,"line_end":1030,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387772,"byte_end":387775,"line_start":1031,"line_end":1031,"column_start":2,"column_end":5}},{"value":"/ [`.all()`]: Self::all","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387777,"byte_end":387802,"line_start":1032,"line_end":1032,"column_start":2,"column_end":27}},{"value":"/ [`.not_any()`]: Self::not_any","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387804,"byte_end":387837,"line_start":1033,"line_end":1033,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2377},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388339,"byte_end":388349,"line_start":1059,"line_end":1059,"column_start":9,"column_end":19},"name":"count_ones","qualname":"<BitSlice<O, T>>::count_ones","value":"pub fn count_ones(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits set to `1` in the slice contents.","sig":null,"attributes":[{"value":"/ Counts the number of bits set to `1` in the slice contents.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387904,"byte_end":387967,"line_start":1038,"line_end":1038,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387969,"byte_end":387972,"line_start":1039,"line_end":1039,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387974,"byte_end":387990,"line_start":1040,"line_end":1040,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387992,"byte_end":387995,"line_start":1041,"line_end":1041,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387997,"byte_end":388010,"line_start":1042,"line_end":1042,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388012,"byte_end":388015,"line_start":1043,"line_end":1043,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388017,"byte_end":388030,"line_start":1044,"line_end":1044,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388032,"byte_end":388035,"line_start":1045,"line_end":1045,"column_start":2,"column_end":5}},{"value":"/ The number of bits in the slice domain that are set to `1`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388037,"byte_end":388100,"line_start":1046,"line_end":1046,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388102,"byte_end":388105,"line_start":1047,"line_end":1047,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388107,"byte_end":388121,"line_start":1048,"line_end":1048,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388123,"byte_end":388126,"line_start":1049,"line_end":1049,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388128,"byte_end":388144,"line_start":1050,"line_end":1050,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388146,"byte_end":388149,"line_start":1051,"line_end":1051,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388151,"byte_end":388162,"line_start":1052,"line_end":1052,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388164,"byte_end":388191,"line_start":1053,"line_end":1053,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388193,"byte_end":388196,"line_start":1054,"line_end":1054,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388198,"byte_end":388231,"line_start":1055,"line_end":1055,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(bits[.. 2].count_ones(), 2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388233,"byte_end":388276,"line_start":1056,"line_end":1056,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits[2 ..].count_ones(), 0);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388278,"byte_end":388321,"line_start":1057,"line_end":1057,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388323,"byte_end":388330,"line_start":1058,"line_end":1058,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2381},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389402,"byte_end":389413,"line_start":1104,"line_end":1104,"column_start":9,"column_end":20},"name":"count_zeros","qualname":"<BitSlice<O, T>>::count_zeros","value":"pub fn count_zeros(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits cleared to `0` in the slice contents.","sig":null,"attributes":[{"value":"/ Counts the number of bits cleared to `0` in the slice contents.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388957,"byte_end":389024,"line_start":1083,"line_end":1083,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389026,"byte_end":389029,"line_start":1084,"line_end":1084,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389031,"byte_end":389047,"line_start":1085,"line_end":1085,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389049,"byte_end":389052,"line_start":1086,"line_end":1086,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389054,"byte_end":389067,"line_start":1087,"line_end":1087,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389069,"byte_end":389072,"line_start":1088,"line_end":1088,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389074,"byte_end":389087,"line_start":1089,"line_end":1089,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389089,"byte_end":389092,"line_start":1090,"line_end":1090,"column_start":2,"column_end":5}},{"value":"/ The number of bits in the slice domain that are cleared to `0`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389094,"byte_end":389161,"line_start":1091,"line_end":1091,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389163,"byte_end":389166,"line_start":1092,"line_end":1092,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389168,"byte_end":389182,"line_start":1093,"line_end":1093,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389184,"byte_end":389187,"line_start":1094,"line_end":1094,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389189,"byte_end":389205,"line_start":1095,"line_end":1095,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389207,"byte_end":389210,"line_start":1096,"line_end":1096,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389212,"byte_end":389223,"line_start":1097,"line_end":1097,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389225,"byte_end":389252,"line_start":1098,"line_end":1098,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389254,"byte_end":389257,"line_start":1099,"line_end":1099,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389259,"byte_end":389292,"line_start":1100,"line_end":1100,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(bits[.. 2].count_zeros(), 0);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389294,"byte_end":389338,"line_start":1101,"line_end":1101,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits[2 ..].count_zeros(), 2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389340,"byte_end":389384,"line_start":1102,"line_end":1102,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389386,"byte_end":389393,"line_start":1103,"line_end":1103,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2385},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390643,"byte_end":390652,"line_start":1151,"line_end":1151,"column_start":9,"column_end":18},"name":"iter_ones","qualname":"<BitSlice<O, T>>::iter_ones","value":"pub fn iter_ones(&Self) -> IterOnes<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates all bits in a `BitSlice` that are set to `1`.","sig":null,"attributes":[{"value":"/ Enumerates all bits in a `BitSlice` that are set to `1`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390028,"byte_end":390088,"line_start":1128,"line_end":1128,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390090,"byte_end":390093,"line_start":1129,"line_end":1129,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390095,"byte_end":390109,"line_start":1130,"line_end":1130,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390111,"byte_end":390114,"line_start":1131,"line_end":1131,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390116,"byte_end":390127,"line_start":1132,"line_end":1132,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390129,"byte_end":390156,"line_start":1133,"line_end":1133,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390158,"byte_end":390161,"line_start":1134,"line_end":1134,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0, 1, 0, 0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390163,"byte_end":390211,"line_start":1135,"line_end":1135,"column_start":2,"column_end":50}},{"value":"/ let mut indices = [1, 4, 8].iter().copied();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390213,"byte_end":390261,"line_start":1136,"line_end":1136,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390263,"byte_end":390266,"line_start":1137,"line_end":1137,"column_start":2,"column_end":5}},{"value":"/ let mut iter_ones = bits.iter_ones();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390268,"byte_end":390309,"line_start":1138,"line_end":1138,"column_start":2,"column_end":43}},{"value":"/ let mut compose = bits.iter()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390311,"byte_end":390344,"line_start":1139,"line_end":1139,"column_start":2,"column_end":35}},{"value":"/   .copied()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390346,"byte_end":390361,"line_start":1140,"line_end":1140,"column_start":2,"column_end":17}},{"value":"/   .enumerate()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390363,"byte_end":390381,"line_start":1141,"line_end":1141,"column_start":2,"column_end":20}},{"value":"/   .filter_map(|(idx, bit)| if bit { Some(idx) } else { None });","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390383,"byte_end":390450,"line_start":1142,"line_end":1142,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390452,"byte_end":390455,"line_start":1143,"line_end":1143,"column_start":2,"column_end":5}},{"value":"/ for ((a, b), c) in iter_ones.zip(compose).zip(indices) {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390457,"byte_end":390517,"line_start":1144,"line_end":1144,"column_start":2,"column_end":62}},{"value":"/   assert_eq!(a, b);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390519,"byte_end":390542,"line_start":1145,"line_end":1145,"column_start":2,"column_end":25}},{"value":"/   assert_eq!(b, c);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390544,"byte_end":390567,"line_start":1146,"line_end":1146,"column_start":2,"column_end":25}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390569,"byte_end":390574,"line_start":1147,"line_end":1147,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390576,"byte_end":390583,"line_start":1148,"line_end":1148,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390585,"byte_end":390602,"line_start":1149,"line_end":1149,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390604,"byte_end":390634,"line_start":1150,"line_end":1150,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2386},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391330,"byte_end":391340,"line_start":1178,"line_end":1178,"column_start":9,"column_end":19},"name":"iter_zeros","qualname":"<BitSlice<O, T>>::iter_zeros","value":"pub fn iter_zeros(&Self) -> IterZeros<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates all bits in a `BitSlice` that are cleared to `0`.","sig":null,"attributes":[{"value":"/ Enumerates all bits in a `BitSlice` that are cleared to `0`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390707,"byte_end":390771,"line_start":1155,"line_end":1155,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390773,"byte_end":390776,"line_start":1156,"line_end":1156,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390778,"byte_end":390792,"line_start":1157,"line_end":1157,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390794,"byte_end":390797,"line_start":1158,"line_end":1158,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390799,"byte_end":390810,"line_start":1159,"line_end":1159,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390812,"byte_end":390839,"line_start":1160,"line_end":1160,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390841,"byte_end":390844,"line_start":1161,"line_end":1161,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 0, 1, 1, 0, 1, 1, 1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390846,"byte_end":390894,"line_start":1162,"line_end":1162,"column_start":2,"column_end":50}},{"value":"/ let mut indices = [1, 4, 8].iter().copied();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390896,"byte_end":390944,"line_start":1163,"line_end":1163,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390946,"byte_end":390949,"line_start":1164,"line_end":1164,"column_start":2,"column_end":5}},{"value":"/ let mut iter_zeros = bits.iter_zeros();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390951,"byte_end":390994,"line_start":1165,"line_end":1165,"column_start":2,"column_end":45}},{"value":"/ let mut compose = bits.iter()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390996,"byte_end":391029,"line_start":1166,"line_end":1166,"column_start":2,"column_end":35}},{"value":"/   .copied()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391031,"byte_end":391046,"line_start":1167,"line_end":1167,"column_start":2,"column_end":17}},{"value":"/   .enumerate()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391048,"byte_end":391066,"line_start":1168,"line_end":1168,"column_start":2,"column_end":20}},{"value":"/   .filter_map(|(idx, bit)| if !bit { Some(idx) } else { None });","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391068,"byte_end":391136,"line_start":1169,"line_end":1169,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391138,"byte_end":391141,"line_start":1170,"line_end":1170,"column_start":2,"column_end":5}},{"value":"/ for ((a, b), c) in iter_zeros.zip(compose).zip(indices) {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391143,"byte_end":391204,"line_start":1171,"line_end":1171,"column_start":2,"column_end":63}},{"value":"/   assert_eq!(a, b);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391206,"byte_end":391229,"line_start":1172,"line_end":1172,"column_start":2,"column_end":25}},{"value":"/   assert_eq!(b, c);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391231,"byte_end":391254,"line_start":1173,"line_end":1173,"column_start":2,"column_end":25}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391256,"byte_end":391261,"line_start":1174,"line_end":1174,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391263,"byte_end":391270,"line_start":1175,"line_end":1175,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391272,"byte_end":391289,"line_start":1176,"line_end":1176,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391291,"byte_end":391321,"line_start":1177,"line_end":1177,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2387},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391665,"byte_end":391674,"line_start":1193,"line_end":1193,"column_start":9,"column_end":18},"name":"first_one","qualname":"<BitSlice<O, T>>::first_one","value":"pub fn first_one(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the index of the first bit in the bit-slice set to `1`.","sig":null,"attributes":[{"value":"/ Gets the index of the first bit in the bit-slice set to `1`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391397,"byte_end":391461,"line_start":1182,"line_end":1182,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391463,"byte_end":391466,"line_start":1183,"line_end":1183,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391468,"byte_end":391482,"line_start":1184,"line_end":1184,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391484,"byte_end":391487,"line_start":1185,"line_end":1185,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391489,"byte_end":391500,"line_start":1186,"line_end":1186,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391502,"byte_end":391529,"line_start":1187,"line_end":1187,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391531,"byte_end":391534,"line_start":1188,"line_end":1188,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].first_one().is_none());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391536,"byte_end":391579,"line_start":1189,"line_end":1189,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![0, 0, 1].first_one().unwrap(), 2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391581,"byte_end":391636,"line_start":1190,"line_end":1190,"column_start":2,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391638,"byte_end":391645,"line_start":1191,"line_end":1191,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391647,"byte_end":391656,"line_start":1192,"line_end":1192,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2388},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392002,"byte_end":392012,"line_start":1208,"line_end":1208,"column_start":9,"column_end":19},"name":"first_zero","qualname":"<BitSlice<O, T>>::first_zero","value":"pub fn first_zero(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the index of the first bit in the bit-slice set to `0`.","sig":null,"attributes":[{"value":"/ Gets the index of the first bit in the bit-slice set to `0`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391732,"byte_end":391796,"line_start":1197,"line_end":1197,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391798,"byte_end":391801,"line_start":1198,"line_end":1198,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391803,"byte_end":391817,"line_start":1199,"line_end":1199,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391819,"byte_end":391822,"line_start":1200,"line_end":1200,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391824,"byte_end":391835,"line_start":1201,"line_end":1201,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391837,"byte_end":391864,"line_start":1202,"line_end":1202,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391866,"byte_end":391869,"line_start":1203,"line_end":1203,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].first_zero().is_none());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391871,"byte_end":391915,"line_start":1204,"line_end":1204,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits![1, 1, 0].first_zero().unwrap(), 2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391917,"byte_end":391973,"line_start":1205,"line_end":1205,"column_start":2,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391975,"byte_end":391982,"line_start":1206,"line_end":1206,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391984,"byte_end":391993,"line_start":1207,"line_end":1207,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2389},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392339,"byte_end":392347,"line_start":1223,"line_end":1223,"column_start":9,"column_end":17},"name":"last_one","qualname":"<BitSlice<O, T>>::last_one","value":"pub fn last_one(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the index of the last bit in the bit-slice set to `1`.","sig":null,"attributes":[{"value":"/ Gets the index of the last bit in the bit-slice set to `1`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392071,"byte_end":392134,"line_start":1212,"line_end":1212,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392136,"byte_end":392139,"line_start":1213,"line_end":1213,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392141,"byte_end":392155,"line_start":1214,"line_end":1214,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392157,"byte_end":392160,"line_start":1215,"line_end":1215,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392162,"byte_end":392173,"line_start":1216,"line_end":1216,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392175,"byte_end":392202,"line_start":1217,"line_end":1217,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392204,"byte_end":392207,"line_start":1218,"line_end":1218,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].last_one().is_none());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392209,"byte_end":392251,"line_start":1219,"line_end":1219,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(bits![1, 0, 0, 1].last_one().unwrap(), 3);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392253,"byte_end":392310,"line_start":1220,"line_end":1220,"column_start":2,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392312,"byte_end":392319,"line_start":1221,"line_end":1221,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392321,"byte_end":392330,"line_start":1222,"line_end":1222,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2390},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392680,"byte_end":392689,"line_start":1238,"line_end":1238,"column_start":9,"column_end":18},"name":"last_zero","qualname":"<BitSlice<O, T>>::last_zero","value":"pub fn last_zero(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the index of the last bit in the bit-slice set to `0`.","sig":null,"attributes":[{"value":"/ Gets the index of the last bit in the bit-slice set to `0`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392410,"byte_end":392473,"line_start":1227,"line_end":1227,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392475,"byte_end":392478,"line_start":1228,"line_end":1228,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392480,"byte_end":392494,"line_start":1229,"line_end":1229,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392496,"byte_end":392499,"line_start":1230,"line_end":1230,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392501,"byte_end":392512,"line_start":1231,"line_end":1231,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392514,"byte_end":392541,"line_start":1232,"line_end":1232,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392543,"byte_end":392546,"line_start":1233,"line_end":1233,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].last_zero().is_none());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392548,"byte_end":392591,"line_start":1234,"line_end":1234,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![0, 1, 1, 0].last_zero().unwrap(), 3);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392593,"byte_end":392651,"line_start":1235,"line_end":1235,"column_start":2,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392653,"byte_end":392660,"line_start":1236,"line_end":1236,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392662,"byte_end":392671,"line_start":1237,"line_end":1237,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2391},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393201,"byte_end":393213,"line_start":1258,"line_end":1258,"column_start":9,"column_end":21},"name":"leading_ones","qualname":"<BitSlice<O, T>>::leading_ones","value":"pub fn leading_ones(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits from the start of the bit-slice to the first\n bit set to `0`.","sig":null,"attributes":[{"value":"/ Counts the number of bits from the start of the bit-slice to the first","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392753,"byte_end":392827,"line_start":1242,"line_end":1242,"column_start":2,"column_end":76}},{"value":"/ bit set to `0`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392829,"byte_end":392848,"line_start":1243,"line_end":1243,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392850,"byte_end":392853,"line_start":1244,"line_end":1244,"column_start":2,"column_end":5}},{"value":"/ This returns `0` if the bit-slice is empty.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392855,"byte_end":392902,"line_start":1245,"line_end":1245,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392904,"byte_end":392907,"line_start":1246,"line_end":1246,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392909,"byte_end":392923,"line_start":1247,"line_end":1247,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392925,"byte_end":392928,"line_start":1248,"line_end":1248,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392930,"byte_end":392941,"line_start":1249,"line_end":1249,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392943,"byte_end":392970,"line_start":1250,"line_end":1250,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392972,"byte_end":392975,"line_start":1251,"line_end":1251,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![].leading_ones(), 0);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392977,"byte_end":393019,"line_start":1252,"line_end":1252,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(bits![0].leading_ones(), 0);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393021,"byte_end":393064,"line_start":1253,"line_end":1253,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![1, 0, 1, 1].leading_ones(), 1);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393066,"byte_end":393118,"line_start":1254,"line_end":1254,"column_start":2,"column_end":54}},{"value":"/ assert_eq!(bits![1, 1, 1, 1].leading_ones(), 4);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393120,"byte_end":393172,"line_start":1255,"line_end":1255,"column_start":2,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393174,"byte_end":393181,"line_start":1256,"line_end":1256,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393183,"byte_end":393192,"line_start":1257,"line_end":1257,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2392},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393731,"byte_end":393744,"line_start":1278,"line_end":1278,"column_start":9,"column_end":22},"name":"leading_zeros","qualname":"<BitSlice<O, T>>::leading_zeros","value":"pub fn leading_zeros(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits from the start of the bit-slice to the first\n bit set to `1`.","sig":null,"attributes":[{"value":"/ Counts the number of bits from the start of the bit-slice to the first","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393279,"byte_end":393353,"line_start":1262,"line_end":1262,"column_start":2,"column_end":76}},{"value":"/ bit set to `1`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393355,"byte_end":393374,"line_start":1263,"line_end":1263,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393376,"byte_end":393379,"line_start":1264,"line_end":1264,"column_start":2,"column_end":5}},{"value":"/ This returns `0` if the bit-slice is empty.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393381,"byte_end":393428,"line_start":1265,"line_end":1265,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393430,"byte_end":393433,"line_start":1266,"line_end":1266,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393435,"byte_end":393449,"line_start":1267,"line_end":1267,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393451,"byte_end":393454,"line_start":1268,"line_end":1268,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393456,"byte_end":393467,"line_start":1269,"line_end":1269,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393469,"byte_end":393496,"line_start":1270,"line_end":1270,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393498,"byte_end":393501,"line_start":1271,"line_end":1271,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![].leading_zeros(), 0);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393503,"byte_end":393546,"line_start":1272,"line_end":1272,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![1].leading_zeros(), 0);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393548,"byte_end":393592,"line_start":1273,"line_end":1273,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits![0, 1, 0, 0].leading_zeros(), 1);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393594,"byte_end":393647,"line_start":1274,"line_end":1274,"column_start":2,"column_end":55}},{"value":"/ assert_eq!(bits![0, 0, 0, 0].leading_zeros(), 4);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393649,"byte_end":393702,"line_start":1275,"line_end":1275,"column_start":2,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393704,"byte_end":393711,"line_start":1276,"line_end":1276,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393713,"byte_end":393722,"line_start":1277,"line_end":1277,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2393},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394203,"byte_end":394216,"line_start":1297,"line_end":1297,"column_start":9,"column_end":22},"name":"trailing_ones","qualname":"<BitSlice<O, T>>::trailing_ones","value":"pub fn trailing_ones(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits from the end of the bit-slice to the last bit\n set to `0`.","sig":null,"attributes":[{"value":"/ Counts the number of bits from the end of the bit-slice to the last bit","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393809,"byte_end":393884,"line_start":1282,"line_end":1282,"column_start":2,"column_end":77}},{"value":"/ set to `0`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393886,"byte_end":393901,"line_start":1283,"line_end":1283,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393903,"byte_end":393906,"line_start":1284,"line_end":1284,"column_start":2,"column_end":5}},{"value":"/ This returns `0` if the bit-slice is empty.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393908,"byte_end":393955,"line_start":1285,"line_end":1285,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393957,"byte_end":393960,"line_start":1286,"line_end":1286,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393962,"byte_end":393976,"line_start":1287,"line_end":1287,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393978,"byte_end":393981,"line_start":1288,"line_end":1288,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393983,"byte_end":393994,"line_start":1289,"line_end":1289,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393996,"byte_end":394023,"line_start":1290,"line_end":1290,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394025,"byte_end":394028,"line_start":1291,"line_end":1291,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![].trailing_ones(), 0);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394030,"byte_end":394073,"line_start":1292,"line_end":1292,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![0].trailing_ones(), 0);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394075,"byte_end":394119,"line_start":1293,"line_end":1293,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits![1, 0, 1, 1].trailing_ones(), 2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394121,"byte_end":394174,"line_start":1294,"line_end":1294,"column_start":2,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394176,"byte_end":394183,"line_start":1295,"line_end":1295,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394185,"byte_end":394194,"line_start":1296,"line_end":1296,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2395},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394720,"byte_end":394734,"line_start":1317,"line_end":1317,"column_start":9,"column_end":23},"name":"trailing_zeros","qualname":"<BitSlice<O, T>>::trailing_zeros","value":"pub fn trailing_zeros(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits from the end of the bit-slice to the last bit\n set to `1`.","sig":null,"attributes":[{"value":"/ Counts the number of bits from the end of the bit-slice to the last bit","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394323,"byte_end":394398,"line_start":1302,"line_end":1302,"column_start":2,"column_end":77}},{"value":"/ set to `1`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394400,"byte_end":394415,"line_start":1303,"line_end":1303,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394417,"byte_end":394420,"line_start":1304,"line_end":1304,"column_start":2,"column_end":5}},{"value":"/ This returns `0` if the bit-slice is empty.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394422,"byte_end":394469,"line_start":1305,"line_end":1305,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394471,"byte_end":394474,"line_start":1306,"line_end":1306,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394476,"byte_end":394490,"line_start":1307,"line_end":1307,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394492,"byte_end":394495,"line_start":1308,"line_end":1308,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394497,"byte_end":394508,"line_start":1309,"line_end":1309,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394510,"byte_end":394537,"line_start":1310,"line_end":1310,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394539,"byte_end":394542,"line_start":1311,"line_end":1311,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![].trailing_zeros(), 0);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394544,"byte_end":394588,"line_start":1312,"line_end":1312,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits![1].trailing_zeros(), 0);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394590,"byte_end":394635,"line_start":1313,"line_end":1313,"column_start":2,"column_end":47}},{"value":"/ assert_eq!(bits![0, 1, 0, 0].trailing_zeros(), 2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394637,"byte_end":394691,"line_start":1314,"line_end":1314,"column_start":2,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394693,"byte_end":394700,"line_start":1315,"line_end":1315,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394702,"byte_end":394711,"line_start":1316,"line_end":1316,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2397},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":397044,"byte_end":397063,"line_start":1394,"line_end":1394,"column_start":9,"column_end":28},"name":"clone_from_bitslice","qualname":"<BitSlice<O, T>>::clone_from_bitslice","value":"pub fn clone_from_bitslice<O2, T2>(&mut Self, &BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies the bits from `src` into `self`.","sig":null,"attributes":[{"value":"/ Copies the bits from `src` into `self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394840,"byte_end":394883,"line_start":1322,"line_end":1322,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394885,"byte_end":394888,"line_start":1323,"line_end":1323,"column_start":2,"column_end":5}},{"value":"/ The length of `src` must be the same as `self.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394890,"byte_end":394940,"line_start":1324,"line_end":1324,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394942,"byte_end":394945,"line_start":1325,"line_end":1325,"column_start":2,"column_end":5}},{"value":"/ If `src` has the same type arguments as `self`, it can be more","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394947,"byte_end":395013,"line_start":1326,"line_end":1326,"column_start":2,"column_end":68}},{"value":"/ performant to use [`.copy_from_bitslice()`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395015,"byte_end":395063,"line_start":1327,"line_end":1327,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395065,"byte_end":395068,"line_start":1328,"line_end":1328,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395070,"byte_end":395084,"line_start":1329,"line_end":1329,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395086,"byte_end":395089,"line_start":1330,"line_end":1330,"column_start":2,"column_end":5}},{"value":"/ [`slice::clone_from_bitslice`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.clone_from_bitslice)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395091,"byte_end":395211,"line_start":1331,"line_end":1331,"column_start":2,"column_end":122}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395213,"byte_end":395216,"line_start":1332,"line_end":1332,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395218,"byte_end":395239,"line_start":1333,"line_end":1333,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395241,"byte_end":395244,"line_start":1334,"line_end":1334,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it takes a bit slice rather than an element","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395246,"byte_end":395320,"line_start":1335,"line_end":1335,"column_start":2,"column_end":76}},{"value":"/ slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395322,"byte_end":395332,"line_start":1336,"line_end":1336,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395334,"byte_end":395337,"line_start":1337,"line_end":1337,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395339,"byte_end":395351,"line_start":1338,"line_end":1338,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395353,"byte_end":395356,"line_start":1339,"line_end":1339,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395358,"byte_end":395428,"line_start":1340,"line_end":1340,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395430,"byte_end":395433,"line_start":1341,"line_end":1341,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395435,"byte_end":395449,"line_start":1342,"line_end":1342,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395451,"byte_end":395454,"line_start":1343,"line_end":1343,"column_start":2,"column_end":5}},{"value":"/ Cloning two bits from a slice into another:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395456,"byte_end":395503,"line_start":1344,"line_end":1344,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395505,"byte_end":395508,"line_start":1345,"line_end":1345,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395510,"byte_end":395521,"line_start":1346,"line_end":1346,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395523,"byte_end":395550,"line_start":1347,"line_end":1347,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395552,"byte_end":395555,"line_start":1348,"line_end":1348,"column_start":2,"column_end":5}},{"value":"/ let src = bits![Msb0, u16; 1; 4];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395557,"byte_end":395594,"line_start":1349,"line_end":1349,"column_start":2,"column_end":39}},{"value":"/ let dst = bits![mut Lsb0, u8; 0; 2];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395596,"byte_end":395636,"line_start":1350,"line_end":1350,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395638,"byte_end":395641,"line_start":1351,"line_end":1351,"column_start":2,"column_end":5}},{"value":"/ dst.clone_from_bitslice(&src[2 ..]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395643,"byte_end":395683,"line_start":1352,"line_end":1352,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(dst, bits![1; 2]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395685,"byte_end":395718,"line_start":1353,"line_end":1353,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395720,"byte_end":395727,"line_start":1354,"line_end":1354,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395729,"byte_end":395732,"line_start":1355,"line_end":1355,"column_start":2,"column_end":5}},{"value":"/ Rust enforces that there can only be one mutable reference with no","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395734,"byte_end":395804,"line_start":1356,"line_end":1356,"column_start":2,"column_end":72}},{"value":"/ immutable references to a particular piece of data in a particular","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395806,"byte_end":395876,"line_start":1357,"line_end":1357,"column_start":2,"column_end":72}},{"value":"/ scope. Because of this, attempting to use clone_from_slice on a single","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395878,"byte_end":395952,"line_start":1358,"line_end":1358,"column_start":2,"column_end":76}},{"value":"/ slice will result in a compile failure:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395954,"byte_end":395997,"line_start":1359,"line_end":1359,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":395999,"byte_end":396002,"line_start":1360,"line_end":1360,"column_start":2,"column_end":5}},{"value":"/ ```rust,compile_fail","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396004,"byte_end":396028,"line_start":1361,"line_end":1361,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396030,"byte_end":396057,"line_start":1362,"line_end":1362,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396059,"byte_end":396062,"line_start":1363,"line_end":1363,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![mut 0, 0, 0, 1, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396064,"byte_end":396105,"line_start":1364,"line_end":1364,"column_start":2,"column_end":43}},{"value":"/ slice[.. 2].clone_from_bitslice(&slice[3 ..]); // compile fail!","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396107,"byte_end":396174,"line_start":1365,"line_end":1365,"column_start":2,"column_end":69}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396176,"byte_end":396183,"line_start":1366,"line_end":1366,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396185,"byte_end":396188,"line_start":1367,"line_end":1367,"column_start":2,"column_end":5}},{"value":"/ To work around this, we can use [`.split_at_mut()`] to create two","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396190,"byte_end":396259,"line_start":1368,"line_end":1368,"column_start":2,"column_end":71}},{"value":"/ distinct sub-slices from a slice:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396261,"byte_end":396298,"line_start":1369,"line_end":1369,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396300,"byte_end":396303,"line_start":1370,"line_end":1370,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396305,"byte_end":396316,"line_start":1371,"line_end":1371,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396318,"byte_end":396345,"line_start":1372,"line_end":1372,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396347,"byte_end":396350,"line_start":1373,"line_end":1373,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![mut 0, 0, 0, 1, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396352,"byte_end":396393,"line_start":1374,"line_end":1374,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396395,"byte_end":396398,"line_start":1375,"line_end":1375,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396400,"byte_end":396405,"line_start":1376,"line_end":1376,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = slice.split_at_mut(2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396407,"byte_end":396455,"line_start":1377,"line_end":1377,"column_start":2,"column_end":50}},{"value":"/   left.clone_from_bitslice(&right[1 ..]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396457,"byte_end":396502,"line_start":1378,"line_end":1378,"column_start":2,"column_end":47}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396504,"byte_end":396509,"line_start":1379,"line_end":1379,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396511,"byte_end":396514,"line_start":1380,"line_end":1380,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(slice, bits![1, 1, 0, 1, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396516,"byte_end":396560,"line_start":1381,"line_end":1381,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396562,"byte_end":396569,"line_start":1382,"line_end":1382,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396571,"byte_end":396574,"line_start":1383,"line_end":1383,"column_start":2,"column_end":5}},{"value":"/ # Performance","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396576,"byte_end":396593,"line_start":1384,"line_end":1384,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396595,"byte_end":396598,"line_start":1385,"line_end":1385,"column_start":2,"column_end":5}},{"value":"/ If `self` and `src` use the same type arguments, this specializes to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396600,"byte_end":396672,"line_start":1386,"line_end":1386,"column_start":2,"column_end":74}},{"value":"/ [`.copy_from_bitslice()`]; if you know statically that this is the case,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396674,"byte_end":396750,"line_start":1387,"line_end":1387,"column_start":2,"column_end":78}},{"value":"/ prefer to call that method directly and avoid the cost of detection at","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396752,"byte_end":396826,"line_start":1388,"line_end":1388,"column_start":2,"column_end":76}},{"value":"/ runtime. Otherwise, this is a bit-by-bit crawl across both slices, which","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396828,"byte_end":396904,"line_start":1389,"line_end":1389,"column_start":2,"column_end":78}},{"value":"/ is a slow process.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396906,"byte_end":396928,"line_start":1390,"line_end":1390,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396930,"byte_end":396933,"line_start":1391,"line_end":1391,"column_start":2,"column_end":5}},{"value":"/ [`.copy_from_bitslice()`]: Self::copy_from_bitslice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396935,"byte_end":396990,"line_start":1392,"line_end":1392,"column_start":2,"column_end":57}},{"value":"/ [`.split_at_mut()`]: Self::split_at_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":396992,"byte_end":397035,"line_start":1393,"line_end":1393,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2400},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399491,"byte_end":399509,"line_start":1488,"line_end":1488,"column_start":9,"column_end":27},"name":"copy_from_bitslice","qualname":"<BitSlice<O, T>>::copy_from_bitslice","value":"pub fn copy_from_bitslice(&mut Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Copies all bits from `src` into `self`, using a memcpy wherever\n possible.","sig":null,"attributes":[{"value":"/ Copies all bits from `src` into `self`, using a memcpy wherever","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":397531,"byte_end":397598,"line_start":1420,"line_end":1420,"column_start":2,"column_end":69}},{"value":"/ possible.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":397600,"byte_end":397613,"line_start":1421,"line_end":1421,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":397615,"byte_end":397618,"line_start":1422,"line_end":1422,"column_start":2,"column_end":5}},{"value":"/ The length of `src` must be same as `self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":397620,"byte_end":397667,"line_start":1423,"line_end":1423,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":397669,"byte_end":397672,"line_start":1424,"line_end":1424,"column_start":2,"column_end":5}},{"value":"/ If `src` does not use the same type arguments as `self`, use","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":397674,"byte_end":397738,"line_start":1425,"line_end":1425,"column_start":2,"column_end":66}},{"value":"/ [`.clone_from_bitslice()`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":397740,"byte_end":397771,"line_start":1426,"line_end":1426,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":397773,"byte_end":397776,"line_start":1427,"line_end":1427,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":397778,"byte_end":397792,"line_start":1428,"line_end":1428,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":397794,"byte_end":397797,"line_start":1429,"line_end":1429,"column_start":2,"column_end":5}},{"value":"/ [`slice::copy_from_slice`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.copy_from_slice)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":397799,"byte_end":397911,"line_start":1430,"line_end":1430,"column_start":2,"column_end":114}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":397913,"byte_end":397916,"line_start":1431,"line_end":1431,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":397918,"byte_end":397939,"line_start":1432,"line_end":1432,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":397941,"byte_end":397944,"line_start":1433,"line_end":1433,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it takes a bit slice rather than an element","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":397946,"byte_end":398020,"line_start":1434,"line_end":1434,"column_start":2,"column_end":76}},{"value":"/ slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398022,"byte_end":398032,"line_start":1435,"line_end":1435,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398034,"byte_end":398037,"line_start":1436,"line_end":1436,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398039,"byte_end":398051,"line_start":1437,"line_end":1437,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398053,"byte_end":398056,"line_start":1438,"line_end":1438,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398058,"byte_end":398128,"line_start":1439,"line_end":1439,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398130,"byte_end":398133,"line_start":1440,"line_end":1440,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398135,"byte_end":398149,"line_start":1441,"line_end":1441,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398151,"byte_end":398154,"line_start":1442,"line_end":1442,"column_start":2,"column_end":5}},{"value":"/ Copying two bits from a slice into another:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398156,"byte_end":398203,"line_start":1443,"line_end":1443,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398205,"byte_end":398208,"line_start":1444,"line_end":1444,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398210,"byte_end":398221,"line_start":1445,"line_end":1445,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398223,"byte_end":398250,"line_start":1446,"line_end":1446,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398252,"byte_end":398255,"line_start":1447,"line_end":1447,"column_start":2,"column_end":5}},{"value":"/ let src = bits![1; 4];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398257,"byte_end":398283,"line_start":1448,"line_end":1448,"column_start":2,"column_end":28}},{"value":"/ let dst = bits![mut 0; 2];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398285,"byte_end":398315,"line_start":1449,"line_end":1449,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398317,"byte_end":398320,"line_start":1450,"line_end":1450,"column_start":2,"column_end":5}},{"value":"/ // Because the slices have to be the same length,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398322,"byte_end":398375,"line_start":1451,"line_end":1451,"column_start":2,"column_end":55}},{"value":"/ // we slice the source slice from four bits to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398377,"byte_end":398427,"line_start":1452,"line_end":1452,"column_start":2,"column_end":52}},{"value":"/ // two. It will panic if we don't do this.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398429,"byte_end":398475,"line_start":1453,"line_end":1453,"column_start":2,"column_end":48}},{"value":"/ dst.clone_from_bitslice(&src[2..]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398477,"byte_end":398516,"line_start":1454,"line_end":1454,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398518,"byte_end":398525,"line_start":1455,"line_end":1455,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398527,"byte_end":398530,"line_start":1456,"line_end":1456,"column_start":2,"column_end":5}},{"value":"/ Rust enforces that there can only be one mutable reference with no","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398532,"byte_end":398602,"line_start":1457,"line_end":1457,"column_start":2,"column_end":72}},{"value":"/ immutable references to a particular piece of data in a particular","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398604,"byte_end":398674,"line_start":1458,"line_end":1458,"column_start":2,"column_end":72}},{"value":"/ scope. Because of this, attempting to use [.copy_from_slice()] on a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398676,"byte_end":398747,"line_start":1459,"line_end":1459,"column_start":2,"column_end":73}},{"value":"/ single slice will result in a compile failure:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398749,"byte_end":398799,"line_start":1460,"line_end":1460,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398801,"byte_end":398804,"line_start":1461,"line_end":1461,"column_start":2,"column_end":5}},{"value":"/ ```rust,compile_fail","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398806,"byte_end":398830,"line_start":1462,"line_end":1462,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398832,"byte_end":398859,"line_start":1463,"line_end":1463,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398861,"byte_end":398864,"line_start":1464,"line_end":1464,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![mut 0, 0, 0, 1, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398866,"byte_end":398907,"line_start":1465,"line_end":1465,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398909,"byte_end":398912,"line_start":1466,"line_end":1466,"column_start":2,"column_end":5}},{"value":"/ slice[.. 2].copy_from_bitslice(&bits[3 ..]); // compile fail!","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398914,"byte_end":398979,"line_start":1467,"line_end":1467,"column_start":2,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398981,"byte_end":398988,"line_start":1468,"line_end":1468,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398990,"byte_end":398993,"line_start":1469,"line_end":1469,"column_start":2,"column_end":5}},{"value":"/ To work around this, we can use [`.split_at_mut()`] to create two","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398995,"byte_end":399064,"line_start":1470,"line_end":1470,"column_start":2,"column_end":71}},{"value":"/ distinct sub-slices from a slice:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399066,"byte_end":399103,"line_start":1471,"line_end":1471,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399105,"byte_end":399108,"line_start":1472,"line_end":1472,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399110,"byte_end":399121,"line_start":1473,"line_end":1473,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399123,"byte_end":399150,"line_start":1474,"line_end":1474,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399152,"byte_end":399155,"line_start":1475,"line_end":1475,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![mut 0, 0, 0, 1, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399157,"byte_end":399198,"line_start":1476,"line_end":1476,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399200,"byte_end":399203,"line_start":1477,"line_end":1477,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399205,"byte_end":399210,"line_start":1478,"line_end":1478,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = slice.split_at_mut(2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399212,"byte_end":399260,"line_start":1479,"line_end":1479,"column_start":2,"column_end":50}},{"value":"/   left.copy_from_bitslice(&right[1 ..]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399262,"byte_end":399306,"line_start":1480,"line_end":1480,"column_start":2,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399308,"byte_end":399313,"line_start":1481,"line_end":1481,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399315,"byte_end":399318,"line_start":1482,"line_end":1482,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(slice, bits![1, 1, 0, 1, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399320,"byte_end":399364,"line_start":1483,"line_end":1483,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399366,"byte_end":399373,"line_start":1484,"line_end":1484,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399375,"byte_end":399378,"line_start":1485,"line_end":1485,"column_start":2,"column_end":5}},{"value":"/ [`.clone_from_bitslice()`]: Self::clone_from_bitslice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399380,"byte_end":399437,"line_start":1486,"line_end":1486,"column_start":2,"column_end":59}},{"value":"/ [`.split_at_mut()`]: Self::split_at_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399439,"byte_end":399482,"line_start":1487,"line_end":1487,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2401},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403822,"byte_end":403840,"line_start":1629,"line_end":1629,"column_start":9,"column_end":27},"name":"swap_with_bitslice","qualname":"<BitSlice<O, T>>::swap_with_bitslice","value":"pub fn swap_with_bitslice<O2, T2>(&mut Self, &mut BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Swaps all bits in `self` with those in `other`.","sig":null,"attributes":[{"value":"/ Swaps all bits in `self` with those in `other`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":402929,"byte_end":402980,"line_start":1595,"line_end":1595,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":402982,"byte_end":402985,"line_start":1596,"line_end":1596,"column_start":2,"column_end":5}},{"value":"/ The length of `other` must be the same as `self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":402987,"byte_end":403040,"line_start":1597,"line_end":1597,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403042,"byte_end":403045,"line_start":1598,"line_end":1598,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403047,"byte_end":403061,"line_start":1599,"line_end":1599,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403063,"byte_end":403066,"line_start":1600,"line_end":1600,"column_start":2,"column_end":5}},{"value":"/ [`slice::swap_with_slice`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.swap_with_slice)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403068,"byte_end":403180,"line_start":1601,"line_end":1601,"column_start":2,"column_end":114}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403182,"byte_end":403185,"line_start":1602,"line_end":1602,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403187,"byte_end":403208,"line_start":1603,"line_end":1603,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403210,"byte_end":403213,"line_start":1604,"line_end":1604,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it takes a bit slice rather than an element","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403215,"byte_end":403289,"line_start":1605,"line_end":1605,"column_start":2,"column_end":76}},{"value":"/ slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403291,"byte_end":403301,"line_start":1606,"line_end":1606,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403303,"byte_end":403306,"line_start":1607,"line_end":1607,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403308,"byte_end":403320,"line_start":1608,"line_end":1608,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403322,"byte_end":403325,"line_start":1609,"line_end":1609,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403327,"byte_end":403397,"line_start":1610,"line_end":1610,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403399,"byte_end":403402,"line_start":1611,"line_end":1611,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403404,"byte_end":403418,"line_start":1612,"line_end":1612,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403420,"byte_end":403423,"line_start":1613,"line_end":1613,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403425,"byte_end":403436,"line_start":1614,"line_end":1614,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403438,"byte_end":403465,"line_start":1615,"line_end":1615,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403467,"byte_end":403470,"line_start":1616,"line_end":1616,"column_start":2,"column_end":5}},{"value":"/ let mut one = [0xA5u8, 0x69];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403472,"byte_end":403505,"line_start":1617,"line_end":1617,"column_start":2,"column_end":35}},{"value":"/ let mut two = 0x1234u16;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403507,"byte_end":403535,"line_start":1618,"line_end":1618,"column_start":2,"column_end":30}},{"value":"/ let one_bits = one.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403537,"byte_end":403584,"line_start":1619,"line_end":1619,"column_start":2,"column_end":49}},{"value":"/ let two_bits = two.view_bits_mut::<Lsb0>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403586,"byte_end":403633,"line_start":1620,"line_end":1620,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403635,"byte_end":403638,"line_start":1621,"line_end":1621,"column_start":2,"column_end":5}},{"value":"/ one_bits.swap_with_bitslice(two_bits);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403640,"byte_end":403682,"line_start":1622,"line_end":1622,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403684,"byte_end":403687,"line_start":1623,"line_end":1623,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(one, [0x2C, 0x48]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403689,"byte_end":403723,"line_start":1624,"line_end":1624,"column_start":2,"column_end":36}},{"value":"/ # #[cfg(target_endian = \"little\")] {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403725,"byte_end":403765,"line_start":1625,"line_end":1625,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(two, 0x96A5);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403767,"byte_end":403795,"line_start":1626,"line_end":1626,"column_start":2,"column_end":30}},{"value":"/ # }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403797,"byte_end":403804,"line_start":1627,"line_end":1627,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403806,"byte_end":403813,"line_start":1628,"line_end":1628,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2404},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404879,"byte_end":404889,"line_start":1672,"line_end":1672,"column_start":9,"column_end":19},"name":"shift_left","qualname":"<BitSlice<O, T>>::shift_left","value":"pub fn shift_left(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shifts the contents of a bit-slice left (towards index `0`).","sig":null,"attributes":[{"value":"/ Shifts the contents of a bit-slice left (towards index `0`).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404185,"byte_end":404249,"line_start":1647,"line_end":1647,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404251,"byte_end":404254,"line_start":1648,"line_end":1648,"column_start":2,"column_end":5}},{"value":"/ This moves the contents of the slice from `by ..` down to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404256,"byte_end":404317,"line_start":1649,"line_end":1649,"column_start":2,"column_end":63}},{"value":"/ `0 .. len - by`, and erases `len - by ..` to `0`. As this is a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404319,"byte_end":404385,"line_start":1650,"line_end":1650,"column_start":2,"column_end":68}},{"value":"/ destructive (and linearly expensive) operation, you may prefer instead","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404387,"byte_end":404461,"line_start":1651,"line_end":1651,"column_start":2,"column_end":76}},{"value":"/ to use range subslicing.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404463,"byte_end":404491,"line_start":1652,"line_end":1652,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404493,"byte_end":404496,"line_start":1653,"line_end":1653,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404498,"byte_end":404514,"line_start":1654,"line_end":1654,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404516,"byte_end":404519,"line_start":1655,"line_end":1655,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404521,"byte_end":404538,"line_start":1656,"line_end":1656,"column_start":2,"column_end":19}},{"value":"/ - `by`: The distance by which to shift the slice contents.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404540,"byte_end":404602,"line_start":1657,"line_end":1657,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404604,"byte_end":404607,"line_start":1658,"line_end":1658,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404609,"byte_end":404621,"line_start":1659,"line_end":1659,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404623,"byte_end":404626,"line_start":1660,"line_end":1660,"column_start":2,"column_end":5}},{"value":"/ This panics if `by` is not less than `self.len()`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404628,"byte_end":404682,"line_start":1661,"line_end":1661,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404684,"byte_end":404687,"line_start":1662,"line_end":1662,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404689,"byte_end":404703,"line_start":1663,"line_end":1663,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404705,"byte_end":404708,"line_start":1664,"line_end":1664,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404710,"byte_end":404721,"line_start":1665,"line_end":1665,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404723,"byte_end":404750,"line_start":1666,"line_end":1666,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404752,"byte_end":404755,"line_start":1667,"line_end":1667,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 1; 6];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404757,"byte_end":404788,"line_start":1668,"line_end":1668,"column_start":2,"column_end":33}},{"value":"/ bits.shift_left(2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404790,"byte_end":404813,"line_start":1669,"line_end":1669,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(bits, bits![1, 1, 1, 1, 0, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404815,"byte_end":404861,"line_start":1670,"line_end":1670,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404863,"byte_end":404870,"line_start":1671,"line_end":1671,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2405},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405906,"byte_end":405917,"line_start":1715,"line_end":1715,"column_start":9,"column_end":20},"name":"shift_right","qualname":"<BitSlice<O, T>>::shift_right","value":"pub fn shift_right(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shifts the contents of a bit-slice right (towards index `self.len()`).","sig":null,"attributes":[{"value":"/ Shifts the contents of a bit-slice right (towards index `self.len()`).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405216,"byte_end":405290,"line_start":1691,"line_end":1691,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405292,"byte_end":405295,"line_start":1692,"line_end":1692,"column_start":2,"column_end":5}},{"value":"/ This moves the contents of the slice from `.. len - by` up to `by ..`,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405297,"byte_end":405371,"line_start":1693,"line_end":1693,"column_start":2,"column_end":76}},{"value":"/ and erases `.. by` to `0`. As this is a destructive (and linearly","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405373,"byte_end":405442,"line_start":1694,"line_end":1694,"column_start":2,"column_end":71}},{"value":"/ expensive) operation, you may prefer instead to use range subslicing.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405444,"byte_end":405517,"line_start":1695,"line_end":1695,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405519,"byte_end":405522,"line_start":1696,"line_end":1696,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405524,"byte_end":405540,"line_start":1697,"line_end":1697,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405542,"byte_end":405545,"line_start":1698,"line_end":1698,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405547,"byte_end":405564,"line_start":1699,"line_end":1699,"column_start":2,"column_end":19}},{"value":"/ - `by`: The distance by which to shift the slice contents.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405566,"byte_end":405628,"line_start":1700,"line_end":1700,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405630,"byte_end":405633,"line_start":1701,"line_end":1701,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405635,"byte_end":405647,"line_start":1702,"line_end":1702,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405649,"byte_end":405652,"line_start":1703,"line_end":1703,"column_start":2,"column_end":5}},{"value":"/ This panics if `by` is not less than `self.len()`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405654,"byte_end":405708,"line_start":1704,"line_end":1704,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405710,"byte_end":405713,"line_start":1705,"line_end":1705,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405715,"byte_end":405729,"line_start":1706,"line_end":1706,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405731,"byte_end":405734,"line_start":1707,"line_end":1707,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405736,"byte_end":405747,"line_start":1708,"line_end":1708,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405749,"byte_end":405776,"line_start":1709,"line_end":1709,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405778,"byte_end":405781,"line_start":1710,"line_end":1710,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 1; 6];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405783,"byte_end":405814,"line_start":1711,"line_end":1711,"column_start":2,"column_end":33}},{"value":"/ bits.shift_right(2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405816,"byte_end":405840,"line_start":1712,"line_end":1712,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(bits, bits![0, 0, 1, 1, 1, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405842,"byte_end":405888,"line_start":1713,"line_end":1713,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405890,"byte_end":405897,"line_start":1714,"line_end":1714,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2406},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406815,"byte_end":406822,"line_start":1755,"line_end":1755,"column_start":9,"column_end":16},"name":"set_all","qualname":"<BitSlice<O, T>>::set_all","value":"pub fn set_all(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets all bits in the slice to a value.","sig":null,"attributes":[{"value":"/ Sets all bits in the slice to a value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406244,"byte_end":406286,"line_start":1734,"line_end":1734,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406288,"byte_end":406291,"line_start":1735,"line_end":1735,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406293,"byte_end":406309,"line_start":1736,"line_end":1736,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406311,"byte_end":406314,"line_start":1737,"line_end":1737,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406316,"byte_end":406333,"line_start":1738,"line_end":1738,"column_start":2,"column_end":19}},{"value":"/ - `value`: The bit value to which all bits in the slice will be set.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406335,"byte_end":406407,"line_start":1739,"line_end":1739,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406409,"byte_end":406412,"line_start":1740,"line_end":1740,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406414,"byte_end":406428,"line_start":1741,"line_end":1741,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406430,"byte_end":406433,"line_start":1742,"line_end":1742,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406435,"byte_end":406446,"line_start":1743,"line_end":1743,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406448,"byte_end":406475,"line_start":1744,"line_end":1744,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406477,"byte_end":406480,"line_start":1745,"line_end":1745,"column_start":2,"column_end":5}},{"value":"/ let mut src = 0u8;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406482,"byte_end":406504,"line_start":1746,"line_end":1746,"column_start":2,"column_end":24}},{"value":"/ let bits = src.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406506,"byte_end":406549,"line_start":1747,"line_end":1747,"column_start":2,"column_end":45}},{"value":"/ bits[2 .. 6].set_all(true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406551,"byte_end":406582,"line_start":1748,"line_end":1748,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(bits.as_slice(), &[0b0011_1100]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406584,"byte_end":406632,"line_start":1749,"line_end":1749,"column_start":2,"column_end":50}},{"value":"/ bits[3 .. 5].set_all(false);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406634,"byte_end":406666,"line_start":1750,"line_end":1750,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bits.as_slice(), &[0b0010_0100]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406668,"byte_end":406716,"line_start":1751,"line_end":1751,"column_start":2,"column_end":50}},{"value":"/ bits[.. 1].set_all(true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406718,"byte_end":406747,"line_start":1752,"line_end":1752,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(bits.as_slice(), &[0b1010_0100]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406749,"byte_end":406797,"line_start":1753,"line_end":1753,"column_start":2,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406799,"byte_end":406806,"line_start":1754,"line_end":1754,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2407},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408651,"byte_end":408659,"line_start":1814,"line_end":1814,"column_start":9,"column_end":17},"name":"for_each","qualname":"<BitSlice<O, T>>::for_each","value":"pub fn for_each<F>(&mut Self, F) where F: FnMut(usize, bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Applies a function to each bit in the slice.","sig":null,"attributes":[{"value":"/ Applies a function to each bit in the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407503,"byte_end":407551,"line_start":1781,"line_end":1781,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407553,"byte_end":407556,"line_start":1782,"line_end":1782,"column_start":2,"column_end":5}},{"value":"/ `BitSlice` cannot implement [`IndexMut`], as it cannot manifest `&mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407558,"byte_end":407631,"line_start":1783,"line_end":1783,"column_start":2,"column_end":75}},{"value":"/ bool` references, and the [`BitRef`] proxy reference has an unavoidable","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407633,"byte_end":407708,"line_start":1784,"line_end":1784,"column_start":2,"column_end":77}},{"value":"/ overhead. This method bypasses both problems, by applying a function to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407710,"byte_end":407785,"line_start":1785,"line_end":1785,"column_start":2,"column_end":77}},{"value":"/ each pair of index and value in the slice, without constructing a proxy","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407787,"byte_end":407862,"line_start":1786,"line_end":1786,"column_start":2,"column_end":77}},{"value":"/ reference. Benchmarks indicate that this method is about 2–4 times","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407864,"byte_end":407936,"line_start":1787,"line_end":1787,"column_start":2,"column_end":72}},{"value":"/ faster than the `.iter_mut().enumerate()` equivalent.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407938,"byte_end":407995,"line_start":1788,"line_end":1788,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407997,"byte_end":408000,"line_start":1789,"line_end":1789,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408002,"byte_end":408018,"line_start":1790,"line_end":1790,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408020,"byte_end":408023,"line_start":1791,"line_end":1791,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408025,"byte_end":408042,"line_start":1792,"line_end":1792,"column_start":2,"column_end":19}},{"value":"/ - `func`: A function which receives two arguments, `index: usize` and","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408044,"byte_end":408117,"line_start":1793,"line_end":1793,"column_start":2,"column_end":75}},{"value":"/   `value: bool`, and returns a `bool`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408119,"byte_end":408161,"line_start":1794,"line_end":1794,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408163,"byte_end":408166,"line_start":1795,"line_end":1795,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408168,"byte_end":408181,"line_start":1796,"line_end":1796,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408183,"byte_end":408186,"line_start":1797,"line_end":1797,"column_start":2,"column_end":5}},{"value":"/ For each index in the slice, the result of invoking `func` with the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408188,"byte_end":408259,"line_start":1798,"line_end":1798,"column_start":2,"column_end":73}},{"value":"/ index number and current bit value is written into the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408261,"byte_end":408326,"line_start":1799,"line_end":1799,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408328,"byte_end":408331,"line_start":1800,"line_end":1800,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408333,"byte_end":408347,"line_start":1801,"line_end":1801,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408349,"byte_end":408352,"line_start":1802,"line_end":1802,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408354,"byte_end":408365,"line_start":1803,"line_end":1803,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408367,"byte_end":408394,"line_start":1804,"line_end":1804,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408396,"byte_end":408399,"line_start":1805,"line_end":1805,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408401,"byte_end":408424,"line_start":1806,"line_end":1806,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408426,"byte_end":408470,"line_start":1807,"line_end":1807,"column_start":2,"column_end":46}},{"value":"/ bits.for_each(|idx, _bit| idx % 3 == 0);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408472,"byte_end":408516,"line_start":1808,"line_end":1808,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(data, 0b100_100_10);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408518,"byte_end":408553,"line_start":1809,"line_end":1809,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408555,"byte_end":408562,"line_start":1810,"line_end":1810,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408564,"byte_end":408567,"line_start":1811,"line_end":1811,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408569,"byte_end":408603,"line_start":1812,"line_end":1812,"column_start":2,"column_end":36}},{"value":"/ [`IndexMut`]: core::ops::IndexMut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408605,"byte_end":408642,"line_start":1813,"line_end":1813,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2409},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410586,"byte_end":410597,"line_start":1872,"line_end":1872,"column_start":9,"column_end":20},"name":"offset_from","qualname":"<BitSlice<O, T>>::offset_from","value":"pub fn offset_from(&Self, &Self) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Produces the absolute offset in bits between two slice heads.","sig":null,"attributes":[{"value":"/ Produces the absolute offset in bits between two slice heads.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408887,"byte_end":408952,"line_start":1825,"line_end":1825,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408954,"byte_end":408957,"line_start":1826,"line_end":1826,"column_start":2,"column_end":5}},{"value":"/ While this method is sound for any two arbitrary bit slices, the answer","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408959,"byte_end":409034,"line_start":1827,"line_end":1827,"column_start":2,"column_end":77}},{"value":"/ it produces is meaningful *only* when one argument is a strict subslice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409036,"byte_end":409111,"line_start":1828,"line_end":1828,"column_start":2,"column_end":77}},{"value":"/ of the other. If the two slices are created from different buffers","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409113,"byte_end":409183,"line_start":1829,"line_end":1829,"column_start":2,"column_end":72}},{"value":"/ entirely, a comparison is undefined; if the two slices are disjoint","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409185,"byte_end":409256,"line_start":1830,"line_end":1830,"column_start":2,"column_end":73}},{"value":"/ regions of the same buffer, then the semantically correct distance is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409258,"byte_end":409331,"line_start":1831,"line_end":1831,"column_start":2,"column_end":75}},{"value":"/ between the tail of the lower and the head of the upper, which this","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409333,"byte_end":409404,"line_start":1832,"line_end":1832,"column_start":2,"column_end":73}},{"value":"/ does not measure.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409406,"byte_end":409427,"line_start":1833,"line_end":1833,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409429,"byte_end":409432,"line_start":1834,"line_end":1834,"column_start":2,"column_end":5}},{"value":"/ # Visual Description","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409434,"byte_end":409458,"line_start":1835,"line_end":1835,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409460,"byte_end":409463,"line_start":1836,"line_end":1836,"column_start":2,"column_end":5}},{"value":"/ Consider the following sequence of bits:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409465,"byte_end":409509,"line_start":1837,"line_end":1837,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409511,"byte_end":409514,"line_start":1838,"line_end":1838,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409516,"byte_end":409527,"line_start":1839,"line_end":1839,"column_start":2,"column_end":13}},{"value":"/ [ 0 1 2 3 4 5 6 7 8 9 a b ]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409529,"byte_end":409560,"line_start":1840,"line_end":1840,"column_start":2,"column_end":33}},{"value":"/   |       ^^^^^^^       |","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409562,"byte_end":409591,"line_start":1841,"line_end":1841,"column_start":2,"column_end":31}},{"value":"/   ^^^^^^^^^^^^^^^^^^^^^^^","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409593,"byte_end":409622,"line_start":1842,"line_end":1842,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409624,"byte_end":409631,"line_start":1843,"line_end":1843,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409633,"byte_end":409636,"line_start":1844,"line_end":1844,"column_start":2,"column_end":5}},{"value":"/ It does not matter whether there are bits between the tail of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409638,"byte_end":409707,"line_start":1845,"line_end":1845,"column_start":2,"column_end":71}},{"value":"/ smaller and the larger slices. The offset is computed from the bit","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409709,"byte_end":409779,"line_start":1846,"line_end":1846,"column_start":2,"column_end":72}},{"value":"/ distance between the two heads.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409781,"byte_end":409816,"line_start":1847,"line_end":1847,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409818,"byte_end":409821,"line_start":1848,"line_end":1848,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409823,"byte_end":409837,"line_start":1849,"line_end":1849,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409839,"byte_end":409842,"line_start":1850,"line_end":1850,"column_start":2,"column_end":5}},{"value":"/ This function computes the *semantic* distance between the heads, rather","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409844,"byte_end":409920,"line_start":1851,"line_end":1851,"column_start":2,"column_end":78}},{"value":"/ than the *electrical. It does not take into account the `BitOrder`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409922,"byte_end":409992,"line_start":1852,"line_end":1852,"column_start":2,"column_end":72}},{"value":"/ implementation of the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409994,"byte_end":410026,"line_start":1853,"line_end":1853,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410028,"byte_end":410031,"line_start":1854,"line_end":1854,"column_start":2,"column_end":5}},{"value":"/ # Safety and Soundness","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410033,"byte_end":410059,"line_start":1855,"line_end":1855,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410061,"byte_end":410064,"line_start":1856,"line_end":1856,"column_start":2,"column_end":5}},{"value":"/ One of `self` or `other` must contain the other for this comparison to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410066,"byte_end":410140,"line_start":1857,"line_end":1857,"column_start":2,"column_end":76}},{"value":"/ be meaningful.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410142,"byte_end":410160,"line_start":1858,"line_end":1858,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410162,"byte_end":410165,"line_start":1859,"line_end":1859,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410167,"byte_end":410183,"line_start":1860,"line_end":1860,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410185,"byte_end":410188,"line_start":1861,"line_end":1861,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410190,"byte_end":410203,"line_start":1862,"line_end":1862,"column_start":2,"column_end":15}},{"value":"/ - `other`: Another bit slice. This must be either a strict subregion or","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410205,"byte_end":410280,"line_start":1863,"line_end":1863,"column_start":2,"column_end":77}},{"value":"/   a strict superregion of `self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410282,"byte_end":410319,"line_start":1864,"line_end":1864,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410321,"byte_end":410324,"line_start":1865,"line_end":1865,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410326,"byte_end":410339,"line_start":1866,"line_end":1866,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410341,"byte_end":410344,"line_start":1867,"line_end":1867,"column_start":2,"column_end":5}},{"value":"/ The distance in (semantic) bits betwen the heads of each region. The","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410346,"byte_end":410418,"line_start":1868,"line_end":1868,"column_start":2,"column_end":74}},{"value":"/ value is positive when `other` is higher in the address space than","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410420,"byte_end":410490,"line_start":1869,"line_end":1869,"column_start":2,"column_end":72}},{"value":"/ `self`, and negative when `other` is lower in the address space than","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410492,"byte_end":410564,"line_start":1870,"line_end":1870,"column_start":2,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410566,"byte_end":410577,"line_start":1871,"line_end":1871,"column_start":2,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":2410},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410764,"byte_end":410783,"line_start":1878,"line_end":1878,"column_start":9,"column_end":28},"name":"electrical_distance","qualname":"<BitSlice<O, T>>::electrical_distance","value":"pub fn electrical_distance(&Self, &Self) -> isize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated = \"Use `BitPtr::offset_from`\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410712,"byte_end":410755,"line_start":1877,"line_end":1877,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2414},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412900,"byte_end":412913,"line_start":1944,"line_end":1944,"column_start":16,"column_end":29},"name":"set_unchecked","qualname":"<BitSlice<O, T>>::set_unchecked","value":"pub unsafe fn set_unchecked(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a new bit at a given index, without doing bounds checking.","sig":null,"attributes":[{"value":"/ Writes a new bit at a given index, without doing bounds checking.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411220,"byte_end":411289,"line_start":1894,"line_end":1894,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411291,"byte_end":411294,"line_start":1895,"line_end":1895,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! Calling this method","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411296,"byte_end":411372,"line_start":1896,"line_end":1896,"column_start":2,"column_end":78}},{"value":"/ with an out-of-bounds index is *[undefined behavior]*. For a safe","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411374,"byte_end":411443,"line_start":1897,"line_end":1897,"column_start":2,"column_end":71}},{"value":"/ alternative, see [`.set()`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411445,"byte_end":411477,"line_start":1898,"line_end":1898,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411479,"byte_end":411482,"line_start":1899,"line_end":1899,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411484,"byte_end":411500,"line_start":1900,"line_end":1900,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411502,"byte_end":411505,"line_start":1901,"line_end":1901,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411507,"byte_end":411524,"line_start":1902,"line_end":1902,"column_start":2,"column_end":19}},{"value":"/ - `index`: The bit index at which to write. It must be in the range `0","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411526,"byte_end":411600,"line_start":1903,"line_end":1903,"column_start":2,"column_end":76}},{"value":"/   .. self.len()`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411602,"byte_end":411623,"line_start":1904,"line_end":1904,"column_start":2,"column_end":23}},{"value":"/ - `value`: The value to be written; `true` for `1` or `false` for `0`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411625,"byte_end":411699,"line_start":1905,"line_end":1905,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411701,"byte_end":411704,"line_start":1906,"line_end":1906,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411706,"byte_end":411719,"line_start":1907,"line_end":1907,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411721,"byte_end":411724,"line_start":1908,"line_end":1908,"column_start":2,"column_end":5}},{"value":"/ The bit at `index` is set to `value`. If `index` is out of bounds, then","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411726,"byte_end":411801,"line_start":1909,"line_end":1909,"column_start":2,"column_end":77}},{"value":"/ the memory access is incorrect, and its behavior is unspecified.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411803,"byte_end":411871,"line_start":1910,"line_end":1910,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411873,"byte_end":411876,"line_start":1911,"line_end":1911,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411878,"byte_end":411890,"line_start":1912,"line_end":1912,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411892,"byte_end":411895,"line_start":1913,"line_end":1913,"column_start":2,"column_end":5}},{"value":"/ This method is **not** safe. It performs raw pointer arithmetic to seek","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411897,"byte_end":411972,"line_start":1914,"line_end":1914,"column_start":2,"column_end":77}},{"value":"/ from the start of the slice to the requested index, and set the bit","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411974,"byte_end":412045,"line_start":1915,"line_end":1915,"column_start":2,"column_end":73}},{"value":"/ there. It does not inspect the length of `self`, and it is free to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412047,"byte_end":412117,"line_start":1916,"line_end":1916,"column_start":2,"column_end":72}},{"value":"/ perform out-of-bounds memory *write* access.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412119,"byte_end":412167,"line_start":1917,"line_end":1917,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412169,"byte_end":412172,"line_start":1918,"line_end":1918,"column_start":2,"column_end":5}},{"value":"/ Use this method **only** when you have already performed the bounds","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412174,"byte_end":412245,"line_start":1919,"line_end":1919,"column_start":2,"column_end":73}},{"value":"/ check, and can guarantee that the call occurs with a safely in-bounds","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412247,"byte_end":412320,"line_start":1920,"line_end":1920,"column_start":2,"column_end":75}},{"value":"/ index.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412322,"byte_end":412332,"line_start":1921,"line_end":1921,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412334,"byte_end":412337,"line_start":1922,"line_end":1922,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412339,"byte_end":412353,"line_start":1923,"line_end":1923,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412355,"byte_end":412358,"line_start":1924,"line_end":1924,"column_start":2,"column_end":5}},{"value":"/ This example uses a bit slice of length 2, and demonstrates","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412360,"byte_end":412423,"line_start":1925,"line_end":1925,"column_start":2,"column_end":65}},{"value":"/ out-of-bounds access to the last bit in the element.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412425,"byte_end":412481,"line_start":1926,"line_end":1926,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412483,"byte_end":412486,"line_start":1927,"line_end":1927,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412488,"byte_end":412499,"line_start":1928,"line_end":1928,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412501,"byte_end":412528,"line_start":1929,"line_end":1929,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412530,"byte_end":412533,"line_start":1930,"line_end":1930,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0; 2];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412535,"byte_end":412566,"line_start":1931,"line_end":1931,"column_start":2,"column_end":33}},{"value":"/ let (first, _) = bits.split_at_mut(1);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412568,"byte_end":412610,"line_start":1932,"line_end":1932,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412612,"byte_end":412615,"line_start":1933,"line_end":1933,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412617,"byte_end":412629,"line_start":1934,"line_end":1934,"column_start":2,"column_end":14}},{"value":"/   first.set_unchecked(1, true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412631,"byte_end":412666,"line_start":1935,"line_end":1935,"column_start":2,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412668,"byte_end":412673,"line_start":1936,"line_end":1936,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412675,"byte_end":412678,"line_start":1937,"line_end":1937,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits, bits![0, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412680,"byte_end":412714,"line_start":1938,"line_end":1938,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412716,"byte_end":412723,"line_start":1939,"line_end":1939,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412725,"byte_end":412728,"line_start":1940,"line_end":1940,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412730,"byte_end":412759,"line_start":1941,"line_end":1941,"column_start":2,"column_end":31}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412761,"byte_end":412857,"line_start":1942,"line_end":1942,"column_start":2,"column_end":98}},{"value":"/ [`.set()`]: Self::set","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412859,"byte_end":412884,"line_start":1943,"line_end":1943,"column_start":2,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":2415},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414529,"byte_end":414550,"line_start":1992,"line_end":1992,"column_start":16,"column_end":37},"name":"set_aliased_unchecked","qualname":"<BitSlice<O, T>>::set_aliased_unchecked","value":"pub unsafe fn set_aliased_unchecked(&Self, usize, bool) where\nT: radium::Radium","parent":null,"children":[],"decl_id":null,"docs":" Writes a new bit at a given index, without doing bounds checking.","sig":null,"attributes":[{"value":"/ Writes a new bit at a given index, without doing bounds checking.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413007,"byte_end":413076,"line_start":1948,"line_end":1948,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413078,"byte_end":413081,"line_start":1949,"line_end":1949,"column_start":2,"column_end":5}},{"value":"/ This method supports writing through a shared reference to a bit that","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413083,"byte_end":413156,"line_start":1950,"line_end":1950,"column_start":2,"column_end":75}},{"value":"/ may be observed by other `BitSlice` handles. It is only present when the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413158,"byte_end":413234,"line_start":1951,"line_end":1951,"column_start":2,"column_end":78}},{"value":"/ `T` type parameter supports such shared mutation (measured by the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413236,"byte_end":413305,"line_start":1952,"line_end":1952,"column_start":2,"column_end":71}},{"value":"/ [`Radium`] trait).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413307,"byte_end":413329,"line_start":1953,"line_end":1953,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413331,"byte_end":413334,"line_start":1954,"line_end":1954,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413336,"byte_end":413349,"line_start":1955,"line_end":1955,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413351,"byte_end":413354,"line_start":1956,"line_end":1956,"column_start":2,"column_end":5}},{"value":"/ The bit at `index` is set to `value`. If `index` is out of bounds, then","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413356,"byte_end":413431,"line_start":1957,"line_end":1957,"column_start":2,"column_end":77}},{"value":"/ the memory access is incorrect, and its behavior is unspecified. If `T`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413433,"byte_end":413508,"line_start":1958,"line_end":1958,"column_start":2,"column_end":77}},{"value":"/ is an [atomic], this will lock the memory bus for the referent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413510,"byte_end":413576,"line_start":1959,"line_end":1959,"column_start":2,"column_end":68}},{"value":"/ address, and may cause stalls.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413578,"byte_end":413612,"line_start":1960,"line_end":1960,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413614,"byte_end":413617,"line_start":1961,"line_end":1961,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413619,"byte_end":413631,"line_start":1962,"line_end":1962,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413633,"byte_end":413636,"line_start":1963,"line_end":1963,"column_start":2,"column_end":5}},{"value":"/ This method is **not** safe. It performs raw pointer arithmetic to seek","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413638,"byte_end":413713,"line_start":1964,"line_end":1964,"column_start":2,"column_end":77}},{"value":"/ from the start of the slice to the requested index, and set the bit","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413715,"byte_end":413786,"line_start":1965,"line_end":1965,"column_start":2,"column_end":73}},{"value":"/ there. It does not inspect the length of `self`, and it is free to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413788,"byte_end":413858,"line_start":1966,"line_end":1966,"column_start":2,"column_end":72}},{"value":"/ perform out-of-bounds memory *write* access.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413860,"byte_end":413908,"line_start":1967,"line_end":1967,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413910,"byte_end":413913,"line_start":1968,"line_end":1968,"column_start":2,"column_end":5}},{"value":"/ Use this method **only** when you have already performed the bounds","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413915,"byte_end":413986,"line_start":1969,"line_end":1969,"column_start":2,"column_end":73}},{"value":"/ check, and can guarantee that the call occurs with a safely in-bounds","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413988,"byte_end":414061,"line_start":1970,"line_end":1970,"column_start":2,"column_end":75}},{"value":"/ index.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414063,"byte_end":414073,"line_start":1971,"line_end":1971,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414075,"byte_end":414078,"line_start":1972,"line_end":1972,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414080,"byte_end":414094,"line_start":1973,"line_end":1973,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414096,"byte_end":414099,"line_start":1974,"line_end":1974,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414101,"byte_end":414112,"line_start":1975,"line_end":1975,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414114,"byte_end":414141,"line_start":1976,"line_end":1976,"column_start":2,"column_end":29}},{"value":"/ use core::cell::Cell;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414143,"byte_end":414168,"line_start":1977,"line_end":1977,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414170,"byte_end":414173,"line_start":1978,"line_end":1978,"column_start":2,"column_end":5}},{"value":"/ let byte = Cell::new(0u8);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414175,"byte_end":414205,"line_start":1979,"line_end":1979,"column_start":2,"column_end":32}},{"value":"/ let bits = byte.view_bits::<Msb0>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414207,"byte_end":414247,"line_start":1980,"line_end":1980,"column_start":2,"column_end":42}},{"value":"/ let bits_2 = bits;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414249,"byte_end":414271,"line_start":1981,"line_end":1981,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414273,"byte_end":414276,"line_start":1982,"line_end":1982,"column_start":2,"column_end":5}},{"value":"/ let (first, _) = bits.split_at(1);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414278,"byte_end":414316,"line_start":1983,"line_end":1983,"column_start":2,"column_end":40}},{"value":"/ assert_eq!(first.len(), 1);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414318,"byte_end":414349,"line_start":1984,"line_end":1984,"column_start":2,"column_end":33}},{"value":"/ unsafe { first.set_aliased_unchecked(2, true); }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414351,"byte_end":414403,"line_start":1985,"line_end":1985,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414405,"byte_end":414408,"line_start":1986,"line_end":1986,"column_start":2,"column_end":5}},{"value":"/ assert!(bits_2[2]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414410,"byte_end":414433,"line_start":1987,"line_end":1987,"column_start":2,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414435,"byte_end":414442,"line_start":1988,"line_end":1988,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414444,"byte_end":414447,"line_start":1989,"line_end":1989,"column_start":2,"column_end":5}},{"value":"/ [atomic]: core::sync::atomic","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414449,"byte_end":414481,"line_start":1990,"line_end":1990,"column_start":2,"column_end":34}},{"value":"/ [`Radium`]: radium::Radium","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414483,"byte_end":414513,"line_start":1991,"line_end":1991,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2416},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414894,"byte_end":414908,"line_start":2007,"line_end":2007,"column_start":16,"column_end":30},"name":"swap_unchecked","qualname":"<BitSlice<O, T>>::swap_unchecked","value":"pub unsafe fn swap_unchecked(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps two bits in the slice.","sig":null,"attributes":[{"value":"/ Swaps two bits in the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414674,"byte_end":414706,"line_start":1997,"line_end":1997,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414708,"byte_end":414711,"line_start":1998,"line_end":1998,"column_start":2,"column_end":5}},{"value":"/ See [`.swap()`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414713,"byte_end":414733,"line_start":1999,"line_end":1999,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414735,"byte_end":414738,"line_start":2000,"line_end":2000,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414740,"byte_end":414752,"line_start":2001,"line_end":2001,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414754,"byte_end":414757,"line_start":2002,"line_end":2002,"column_start":2,"column_end":5}},{"value":"/ `a` and `b` must both be less than [`self.len()`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414759,"byte_end":414813,"line_start":2003,"line_end":2003,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414815,"byte_end":414818,"line_start":2004,"line_end":2004,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414820,"byte_end":414849,"line_start":2005,"line_end":2005,"column_start":2,"column_end":31}},{"value":"/ [`.swap()`]: Self::swap","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414851,"byte_end":414878,"line_start":2006,"line_end":2006,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2417},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415793,"byte_end":415811,"line_start":2041,"line_end":2041,"column_start":16,"column_end":34},"name":"split_at_unchecked","qualname":"<BitSlice<O, T>>::split_at_unchecked","value":"pub unsafe fn split_at_unchecked(&Self, usize) -> (&Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Divides one slice into two at an index, without performing any bounds\n checking.","sig":null,"attributes":[{"value":"/ Divides one slice into two at an index, without performing any bounds","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415087,"byte_end":415160,"line_start":2014,"line_end":2014,"column_start":2,"column_end":75}},{"value":"/ checking.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415162,"byte_end":415175,"line_start":2015,"line_end":2015,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415177,"byte_end":415180,"line_start":2016,"line_end":2016,"column_start":2,"column_end":5}},{"value":"/ See [`.split_at()`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415182,"byte_end":415206,"line_start":2017,"line_end":2017,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415208,"byte_end":415211,"line_start":2018,"line_end":2018,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415213,"byte_end":415225,"line_start":2019,"line_end":2019,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415227,"byte_end":415230,"line_start":2020,"line_end":2020,"column_start":2,"column_end":5}},{"value":"/ `mid` must not be greater than [`self.len()`]. If this condition is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415232,"byte_end":415303,"line_start":2021,"line_end":2021,"column_start":2,"column_end":73}},{"value":"/ violated, the function behavior is *unspecified*.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415305,"byte_end":415358,"line_start":2022,"line_end":2022,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415360,"byte_end":415363,"line_start":2023,"line_end":2023,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415365,"byte_end":415379,"line_start":2024,"line_end":2024,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415381,"byte_end":415384,"line_start":2025,"line_end":2025,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415386,"byte_end":415397,"line_start":2026,"line_end":2026,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415399,"byte_end":415426,"line_start":2027,"line_end":2027,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415428,"byte_end":415431,"line_start":2028,"line_end":2028,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 0, 1, 1, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415433,"byte_end":415472,"line_start":2029,"line_end":2029,"column_start":2,"column_end":41}},{"value":"/ let (l, r) = unsafe { bits.split_at_unchecked(3) };","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415474,"byte_end":415529,"line_start":2030,"line_end":2030,"column_start":2,"column_end":57}},{"value":"/ assert!(l.not_any());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415531,"byte_end":415556,"line_start":2031,"line_end":2031,"column_start":2,"column_end":27}},{"value":"/ assert!(r.all());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415558,"byte_end":415579,"line_start":2032,"line_end":2032,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415581,"byte_end":415584,"line_start":2033,"line_end":2033,"column_start":2,"column_end":5}},{"value":"/ let (l, r) = unsafe { bits.split_at_unchecked(6) };","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415586,"byte_end":415641,"line_start":2034,"line_end":2034,"column_start":2,"column_end":57}},{"value":"/ assert_eq!(l, bits);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415643,"byte_end":415667,"line_start":2035,"line_end":2035,"column_start":2,"column_end":26}},{"value":"/ assert!(r.is_empty());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415669,"byte_end":415695,"line_start":2036,"line_end":2036,"column_start":2,"column_end":28}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415697,"byte_end":415704,"line_start":2037,"line_end":2037,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415706,"byte_end":415709,"line_start":2038,"line_end":2038,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415711,"byte_end":415740,"line_start":2039,"line_end":2039,"column_start":2,"column_end":31}},{"value":"/ [`.split_at()`]: Self::split_at","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415742,"byte_end":415777,"line_start":2040,"line_end":2040,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":2418},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416209,"byte_end":416231,"line_start":2056,"line_end":2056,"column_start":16,"column_end":38},"name":"split_at_unchecked_mut","qualname":"<BitSlice<O, T>>::split_at_unchecked_mut","value":"pub unsafe fn split_at_unchecked_mut(&mut Self, usize)\n-> (&mut BitSlice<O, T::Alias>, &mut BitSlice<O, T::Alias>)","parent":null,"children":[],"decl_id":null,"docs":" Divides one mutable slice into two at an index.","sig":null,"attributes":[{"value":"/ Divides one mutable slice into two at an index.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415915,"byte_end":415966,"line_start":2045,"line_end":2045,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415968,"byte_end":415971,"line_start":2046,"line_end":2046,"column_start":2,"column_end":5}},{"value":"/ See [`.split_at_mut()`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415973,"byte_end":416001,"line_start":2047,"line_end":2047,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416003,"byte_end":416006,"line_start":2048,"line_end":2048,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416008,"byte_end":416020,"line_start":2049,"line_end":2049,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416022,"byte_end":416025,"line_start":2050,"line_end":2050,"column_start":2,"column_end":5}},{"value":"/ `mid` must not be greater than [`self.len()`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416027,"byte_end":416077,"line_start":2051,"line_end":2051,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416079,"byte_end":416082,"line_start":2052,"line_end":2052,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416084,"byte_end":416113,"line_start":2053,"line_end":2053,"column_start":2,"column_end":31}},{"value":"/ [`.split_at_mut()`]: Self::split_at_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416115,"byte_end":416158,"line_start":2054,"line_end":2054,"column_start":2,"column_end":45}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416160,"byte_end":416193,"line_start":2055,"line_end":2055,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2419},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417071,"byte_end":417092,"line_start":2088,"line_end":2088,"column_start":16,"column_end":37},"name":"copy_within_unchecked","qualname":"<BitSlice<O, T>>::copy_within_unchecked","value":"pub unsafe fn copy_within_unchecked<R>(&mut Self, R, usize) where\nR: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Copies bits from one part of the slice to another part of itself,\n without doing bounds checks.","sig":null,"attributes":[{"value":"/ Copies bits from one part of the slice to another part of itself,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416486,"byte_end":416555,"line_start":2067,"line_end":2067,"column_start":2,"column_end":71}},{"value":"/ without doing bounds checks.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416557,"byte_end":416589,"line_start":2068,"line_end":2068,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416591,"byte_end":416594,"line_start":2069,"line_end":2069,"column_start":2,"column_end":5}},{"value":"/ The ranges are allowed to overlap.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416596,"byte_end":416634,"line_start":2070,"line_end":2070,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416636,"byte_end":416639,"line_start":2071,"line_end":2071,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416641,"byte_end":416657,"line_start":2072,"line_end":2072,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416659,"byte_end":416662,"line_start":2073,"line_end":2073,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416664,"byte_end":416681,"line_start":2074,"line_end":2074,"column_start":2,"column_end":19}},{"value":"/ - `src`: The range within `self` from which to copy.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416683,"byte_end":416739,"line_start":2075,"line_end":2075,"column_start":2,"column_end":58}},{"value":"/ - `dst`: The starting index within `self` at which to paste.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416741,"byte_end":416805,"line_start":2076,"line_end":2076,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416807,"byte_end":416810,"line_start":2077,"line_end":2077,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416812,"byte_end":416825,"line_start":2078,"line_end":2078,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416827,"byte_end":416830,"line_start":2079,"line_end":2079,"column_start":2,"column_end":5}},{"value":"/ `self[src]` is copied to `self[dest .. dest + src.end() - src.start()]`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416832,"byte_end":416908,"line_start":2080,"line_end":2080,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416910,"byte_end":416913,"line_start":2081,"line_end":2081,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416915,"byte_end":416927,"line_start":2082,"line_end":2082,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416929,"byte_end":416932,"line_start":2083,"line_end":2083,"column_start":2,"column_end":5}},{"value":"/ `src` and `dest .. dest + src.len()` must be entirely within","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416934,"byte_end":416998,"line_start":2084,"line_end":2084,"column_start":2,"column_end":66}},{"value":"/ [`self.len()`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417000,"byte_end":417019,"line_start":2085,"line_end":2085,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417021,"byte_end":417024,"line_start":2086,"line_end":2086,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417026,"byte_end":417055,"line_start":2087,"line_end":2087,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2424},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419567,"byte_end":419576,"line_start":2171,"line_end":2171,"column_start":9,"column_end":18},"name":"as_bitptr","qualname":"<BitSlice<O, T>>::as_bitptr","value":"pub fn as_bitptr(&Self) -> BitPtr<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw bit-pointer to the base of the bit-slice’s region.","sig":null,"attributes":[{"value":"/ Returns a raw bit-pointer to the base of the bit-slice’s region.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418054,"byte_end":418124,"line_start":2126,"line_end":2126,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418126,"byte_end":418129,"line_start":2127,"line_end":2127,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the bit-slice outlives the bit-pointer this","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418131,"byte_end":418206,"line_start":2128,"line_end":2128,"column_start":2,"column_end":77}},{"value":"/ function returns, or else it will end up pointing to garbage.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418208,"byte_end":418273,"line_start":2129,"line_end":2129,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418275,"byte_end":418278,"line_start":2130,"line_end":2130,"column_start":2,"column_end":5}},{"value":"/ The caller must also ensure that the memory the bit-pointer","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418280,"byte_end":418343,"line_start":2131,"line_end":2131,"column_start":2,"column_end":65}},{"value":"/ (non-transitively) points to is never written to using this bit-pointer","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418345,"byte_end":418420,"line_start":2132,"line_end":2132,"column_start":2,"column_end":77}},{"value":"/ or any bit-pointer derived from it. If you need to mutate the contents","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418422,"byte_end":418496,"line_start":2133,"line_end":2133,"column_start":2,"column_end":76}},{"value":"/ of the slice, use [`.as_mut_bitptr()`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418498,"byte_end":418541,"line_start":2134,"line_end":2134,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418543,"byte_end":418546,"line_start":2135,"line_end":2135,"column_start":2,"column_end":5}},{"value":"/ Modifying the container referenced by this bit-slice may cause its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418548,"byte_end":418618,"line_start":2136,"line_end":2136,"column_start":2,"column_end":72}},{"value":"/ buffer to be reällocated, which would also make any bit-pointers to it","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418620,"byte_end":418695,"line_start":2137,"line_end":2137,"column_start":2,"column_end":76}},{"value":"/ invalid.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418697,"byte_end":418709,"line_start":2138,"line_end":2138,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418711,"byte_end":418714,"line_start":2139,"line_end":2139,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418716,"byte_end":418730,"line_start":2140,"line_end":2140,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418732,"byte_end":418735,"line_start":2141,"line_end":2141,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_ptr`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_ptr)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418737,"byte_end":418831,"line_start":2142,"line_end":2142,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418833,"byte_end":418836,"line_start":2143,"line_end":2143,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418838,"byte_end":418859,"line_start":2144,"line_end":2144,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418861,"byte_end":418864,"line_start":2145,"line_end":2145,"column_start":2,"column_end":5}},{"value":"/ This returns a structure, [`BitPtr`], rather than an actual raw pointer","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418866,"byte_end":418941,"line_start":2146,"line_end":2146,"column_start":2,"column_end":77}},{"value":"/ `*Bit`. The information required to address a bit within a memory","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418943,"byte_end":419012,"line_start":2147,"line_end":2147,"column_start":2,"column_end":71}},{"value":"/ element cannot be encoded into a single pointer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419014,"byte_end":419066,"line_start":2148,"line_end":2148,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419068,"byte_end":419071,"line_start":2149,"line_end":2149,"column_start":2,"column_end":5}},{"value":"/ This structure can be converted back into a `&BitSlice` with the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419073,"byte_end":419141,"line_start":2150,"line_end":2150,"column_start":2,"column_end":70}},{"value":"/ function [`from_raw_parts`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419143,"byte_end":419175,"line_start":2151,"line_end":2151,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419177,"byte_end":419180,"line_start":2152,"line_end":2152,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419182,"byte_end":419196,"line_start":2153,"line_end":2153,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419198,"byte_end":419201,"line_start":2154,"line_end":2154,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419203,"byte_end":419214,"line_start":2155,"line_end":2155,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419216,"byte_end":419243,"line_start":2156,"line_end":2156,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419245,"byte_end":419248,"line_start":2157,"line_end":2157,"column_start":2,"column_end":5}},{"value":"/ let x = bits![0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419250,"byte_end":419277,"line_start":2158,"line_end":2158,"column_start":2,"column_end":29}},{"value":"/ let x_ptr = x.as_ptr();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419279,"byte_end":419306,"line_start":2159,"line_end":2159,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419308,"byte_end":419311,"line_start":2160,"line_end":2160,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419313,"byte_end":419325,"line_start":2161,"line_end":2161,"column_start":2,"column_end":14}},{"value":"/   for i in 0 .. x.len() {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419327,"byte_end":419356,"line_start":2162,"line_end":2162,"column_start":2,"column_end":31}},{"value":"/     assert_eq!(*x.get_unchecked(i), (&*x)[i]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419358,"byte_end":419408,"line_start":2163,"line_end":2163,"column_start":2,"column_end":52}},{"value":"/   }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419410,"byte_end":419417,"line_start":2164,"line_end":2164,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419419,"byte_end":419424,"line_start":2165,"line_end":2165,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419426,"byte_end":419433,"line_start":2166,"line_end":2166,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419435,"byte_end":419438,"line_start":2167,"line_end":2167,"column_start":2,"column_end":5}},{"value":"/ [`.as_mut_bitptr()`]: Self::as_mut_bitptr","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419440,"byte_end":419485,"line_start":2168,"line_end":2168,"column_start":2,"column_end":47}},{"value":"/ [`from_raw_parts`]: crate::slice::from_raw_parts","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419487,"byte_end":419539,"line_start":2169,"line_end":2169,"column_start":2,"column_end":54}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419541,"byte_end":419558,"line_start":2170,"line_end":2170,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":2425},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420844,"byte_end":420857,"line_start":2211,"line_end":2211,"column_start":9,"column_end":22},"name":"as_mut_bitptr","qualname":"<BitSlice<O, T>>::as_mut_bitptr","value":"pub fn as_mut_bitptr(&mut Self) -> BitPtr<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an unsafe mutable bit-pointer to the bit-slice’s region.","sig":null,"attributes":[{"value":"/ Returns an unsafe mutable bit-pointer to the bit-slice’s region.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419646,"byte_end":419716,"line_start":2175,"line_end":2175,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419718,"byte_end":419721,"line_start":2176,"line_end":2176,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the bit-slice outlives the bit-pointer this","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419723,"byte_end":419798,"line_start":2177,"line_end":2177,"column_start":2,"column_end":77}},{"value":"/ function returns, or else it will end up pointing to garbage.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419800,"byte_end":419865,"line_start":2178,"line_end":2178,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419867,"byte_end":419870,"line_start":2179,"line_end":2179,"column_start":2,"column_end":5}},{"value":"/ Modifying the container referenced by this bit-slice may cause its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419872,"byte_end":419942,"line_start":2180,"line_end":2180,"column_start":2,"column_end":72}},{"value":"/ buffer to be reällocated, which would also make any bit-pointers to it","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419944,"byte_end":420019,"line_start":2181,"line_end":2181,"column_start":2,"column_end":76}},{"value":"/ invalid.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420021,"byte_end":420033,"line_start":2182,"line_end":2182,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420035,"byte_end":420038,"line_start":2183,"line_end":2183,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420040,"byte_end":420054,"line_start":2184,"line_end":2184,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420056,"byte_end":420059,"line_start":2185,"line_end":2185,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_mut_ptr`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_mut_ptr)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420061,"byte_end":420163,"line_start":2186,"line_end":2186,"column_start":2,"column_end":104}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420165,"byte_end":420168,"line_start":2187,"line_end":2187,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420170,"byte_end":420191,"line_start":2188,"line_end":2188,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420193,"byte_end":420196,"line_start":2189,"line_end":2189,"column_start":2,"column_end":5}},{"value":"/ This returns `*mut BitSlice`, which is the equivalont of `*mut [T]`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420198,"byte_end":420269,"line_start":2190,"line_end":2190,"column_start":2,"column_end":73}},{"value":"/ instead of `*mut T`. The pointer encoding used requires more than one","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420271,"byte_end":420344,"line_start":2191,"line_end":2191,"column_start":2,"column_end":75}},{"value":"/ CPU word of space to address a single bit, so there is no advantage to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420346,"byte_end":420420,"line_start":2192,"line_end":2192,"column_start":2,"column_end":76}},{"value":"/ removing the length information from the encoded pointer value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420422,"byte_end":420489,"line_start":2193,"line_end":2193,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420491,"byte_end":420494,"line_start":2194,"line_end":2194,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420496,"byte_end":420510,"line_start":2195,"line_end":2195,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420512,"byte_end":420515,"line_start":2196,"line_end":2196,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420517,"byte_end":420528,"line_start":2197,"line_end":2197,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420530,"byte_end":420557,"line_start":2198,"line_end":2198,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420559,"byte_end":420562,"line_start":2199,"line_end":2199,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Lsb0, u8; 0; 8];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420564,"byte_end":420605,"line_start":2200,"line_end":2200,"column_start":2,"column_end":43}},{"value":"/ let bits_ptr = bits.as_mut_ptr();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420607,"byte_end":420644,"line_start":2201,"line_end":2201,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420646,"byte_end":420649,"line_start":2202,"line_end":2202,"column_start":2,"column_end":5}},{"value":"/ for i in 0 .. bits.len() {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420651,"byte_end":420681,"line_start":2203,"line_end":2203,"column_start":2,"column_end":32}},{"value":"/   unsafe {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420683,"byte_end":420697,"line_start":2204,"line_end":2204,"column_start":2,"column_end":16}},{"value":"/     bits_ptr.add(i).write(i % 3 == 0);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420699,"byte_end":420741,"line_start":2205,"line_end":2205,"column_start":2,"column_end":44}},{"value":"/   }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420743,"byte_end":420750,"line_start":2206,"line_end":2206,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420752,"byte_end":420757,"line_start":2207,"line_end":2207,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b0100_1001);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420759,"byte_end":420807,"line_start":2208,"line_end":2208,"column_start":2,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420809,"byte_end":420816,"line_start":2209,"line_end":2209,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420818,"byte_end":420835,"line_start":2210,"line_end":2210,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":2426},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422577,"byte_end":422592,"line_start":2258,"line_end":2258,"column_start":9,"column_end":24},"name":"as_bitptr_range","qualname":"<BitSlice<O, T>>::as_bitptr_range","value":"pub fn as_bitptr_range(&Self) -> BitPtrRange<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the two raw bit-pointers spanning the bit-slice.","sig":null,"attributes":[{"value":"/ Returns the two raw bit-pointers spanning the bit-slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420933,"byte_end":420993,"line_start":2215,"line_end":2215,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420995,"byte_end":420998,"line_start":2216,"line_end":2216,"column_start":2,"column_end":5}},{"value":"/ The returned range is half-open, which means that the end bit-pointer","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421000,"byte_end":421073,"line_start":2217,"line_end":2217,"column_start":2,"column_end":75}},{"value":"/ points *one past* the last bit of the bit-slice. This way, an empty","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421075,"byte_end":421146,"line_start":2218,"line_end":2218,"column_start":2,"column_end":73}},{"value":"/ bit-slice is represented by two equal bit-pointers, and the difference","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421148,"byte_end":421222,"line_start":2219,"line_end":2219,"column_start":2,"column_end":76}},{"value":"/ between the two bit-pointers represents the size of the bit-slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421224,"byte_end":421294,"line_start":2220,"line_end":2220,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421296,"byte_end":421299,"line_start":2221,"line_end":2221,"column_start":2,"column_end":5}},{"value":"/ See [`as_bitptr`] for warnings on using these bit-pointers. The end","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421301,"byte_end":421372,"line_start":2222,"line_end":2222,"column_start":2,"column_end":73}},{"value":"/ bit-pointer requires extra caution, as it does not point to a valid bit","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421374,"byte_end":421449,"line_start":2223,"line_end":2223,"column_start":2,"column_end":77}},{"value":"/ in the bit-slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421451,"byte_end":421472,"line_start":2224,"line_end":2224,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421474,"byte_end":421477,"line_start":2225,"line_end":2225,"column_start":2,"column_end":5}},{"value":"/ This function allows a more direct access to bit-pointers, without","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421479,"byte_end":421549,"line_start":2226,"line_end":2226,"column_start":2,"column_end":72}},{"value":"/ paying the cost of encoding into a `*BitSlice`, at the cost of no longer","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421551,"byte_end":421627,"line_start":2227,"line_end":2227,"column_start":2,"column_end":78}},{"value":"/ fitting into ordinary Rust interfaces.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421629,"byte_end":421671,"line_start":2228,"line_end":2228,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421673,"byte_end":421676,"line_start":2229,"line_end":2229,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421678,"byte_end":421692,"line_start":2230,"line_end":2230,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421694,"byte_end":421697,"line_start":2231,"line_end":2231,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_ptr_range`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_ptr_range)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421699,"byte_end":421805,"line_start":2232,"line_end":2232,"column_start":2,"column_end":108}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421807,"byte_end":421810,"line_start":2233,"line_end":2233,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421812,"byte_end":421833,"line_start":2234,"line_end":2234,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421835,"byte_end":421838,"line_start":2235,"line_end":2235,"column_start":2,"column_end":5}},{"value":"/ This returns a dedicated structure, rather than a range of [`BitPtr`]s,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421840,"byte_end":421915,"line_start":2236,"line_end":2236,"column_start":2,"column_end":77}},{"value":"/ because the traits needed for non-`core` types to correctly operate in","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421917,"byte_end":421991,"line_start":2237,"line_end":2237,"column_start":2,"column_end":76}},{"value":"/ ranges are still unstable. The structure can be converted into a range,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421993,"byte_end":422068,"line_start":2238,"line_end":2238,"column_start":2,"column_end":77}},{"value":"/ but that range will not be an iterator.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422070,"byte_end":422113,"line_start":2239,"line_end":2239,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422115,"byte_end":422118,"line_start":2240,"line_end":2240,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422120,"byte_end":422134,"line_start":2241,"line_end":2241,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422136,"byte_end":422139,"line_start":2242,"line_end":2242,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422141,"byte_end":422152,"line_start":2243,"line_end":2243,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422154,"byte_end":422181,"line_start":2244,"line_end":2244,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422183,"byte_end":422186,"line_start":2245,"line_end":2245,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422188,"byte_end":422224,"line_start":2246,"line_end":2246,"column_start":2,"column_end":38}},{"value":"/ let mid_ptr = bits.get(2).unwrap().into_bitptr();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422226,"byte_end":422279,"line_start":2247,"line_end":2247,"column_start":2,"column_end":55}},{"value":"/ let mut range = bits.as_bitptr_range();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422281,"byte_end":422324,"line_start":2248,"line_end":2248,"column_start":2,"column_end":45}},{"value":"/ assert!(range.contains(&mid_ptr));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422326,"byte_end":422364,"line_start":2249,"line_end":2249,"column_start":2,"column_end":40}},{"value":"/ unsafe {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422366,"byte_end":422378,"line_start":2250,"line_end":2250,"column_start":2,"column_end":14}},{"value":"/   assert!(!range.next().unwrap().read());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422380,"byte_end":422425,"line_start":2251,"line_end":2251,"column_start":2,"column_end":47}},{"value":"/   assert!(range.next_back().unwrap().read())","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422427,"byte_end":422475,"line_start":2252,"line_end":2252,"column_start":2,"column_end":50}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422477,"byte_end":422482,"line_start":2253,"line_end":2253,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422484,"byte_end":422491,"line_start":2254,"line_end":2254,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422493,"byte_end":422496,"line_start":2255,"line_end":2255,"column_start":2,"column_end":5}},{"value":"/ [`BitPtr`]: crate::ptr::BitPtr","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422498,"byte_end":422532,"line_start":2256,"line_end":2256,"column_start":2,"column_end":36}},{"value":"/ [`as_bitptr`]: Self::as_bitptr","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422534,"byte_end":422568,"line_start":2257,"line_end":2257,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2427},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424100,"byte_end":424119,"line_start":2300,"line_end":2300,"column_start":9,"column_end":28},"name":"as_mut_bitptr_range","qualname":"<BitSlice<O, T>>::as_mut_bitptr_range","value":"pub fn as_mut_bitptr_range(&mut Self) -> BitPtrRange<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the two unsafe mutable bit-pointers spanning the bit-slice.","sig":null,"attributes":[{"value":"/ Returns the two unsafe mutable bit-pointers spanning the bit-slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422683,"byte_end":422754,"line_start":2262,"line_end":2262,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422756,"byte_end":422759,"line_start":2263,"line_end":2263,"column_start":2,"column_end":5}},{"value":"/ The returned range is half-open, which means that the end bit-pointer","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422761,"byte_end":422834,"line_start":2264,"line_end":2264,"column_start":2,"column_end":75}},{"value":"/ points *one past* the last bitt of the bit-slice. This way, an empty","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422836,"byte_end":422908,"line_start":2265,"line_end":2265,"column_start":2,"column_end":74}},{"value":"/ bit-slice is represented by two equal bit-pointers, and the difference","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422910,"byte_end":422984,"line_start":2266,"line_end":2266,"column_start":2,"column_end":76}},{"value":"/ between the two bit-pointers represents the size of the bit-slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422986,"byte_end":423056,"line_start":2267,"line_end":2267,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423058,"byte_end":423061,"line_start":2268,"line_end":2268,"column_start":2,"column_end":5}},{"value":"/ See [`as_mut_bitptr`] for warnings on using these bit-pointers. The end","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423063,"byte_end":423138,"line_start":2269,"line_end":2269,"column_start":2,"column_end":77}},{"value":"/ bit-pointer requires extra caution, as it does not point to a valid bit","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423140,"byte_end":423215,"line_start":2270,"line_end":2270,"column_start":2,"column_end":77}},{"value":"/ in the bit-slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423217,"byte_end":423238,"line_start":2271,"line_end":2271,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423240,"byte_end":423243,"line_start":2272,"line_end":2272,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423245,"byte_end":423259,"line_start":2273,"line_end":2273,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423261,"byte_end":423264,"line_start":2274,"line_end":2274,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_mut_ptr_range`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_mut_ptr_range)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423266,"byte_end":423380,"line_start":2275,"line_end":2275,"column_start":2,"column_end":116}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423382,"byte_end":423385,"line_start":2276,"line_end":2276,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423387,"byte_end":423408,"line_start":2277,"line_end":2277,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423410,"byte_end":423413,"line_start":2278,"line_end":2278,"column_start":2,"column_end":5}},{"value":"/ This returns a dedicated structure, rather than a range of [`BitPtr`]s,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423415,"byte_end":423490,"line_start":2279,"line_end":2279,"column_start":2,"column_end":77}},{"value":"/ because the traits needed for non-`core` types to correctly operate in","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423492,"byte_end":423566,"line_start":2280,"line_end":2280,"column_start":2,"column_end":76}},{"value":"/ ranges are still unstable. The structure can be converted into a range,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423568,"byte_end":423643,"line_start":2281,"line_end":2281,"column_start":2,"column_end":77}},{"value":"/ but that range will not be an iterator.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423645,"byte_end":423688,"line_start":2282,"line_end":2282,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423690,"byte_end":423693,"line_start":2283,"line_end":2283,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423695,"byte_end":423709,"line_start":2284,"line_end":2284,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423711,"byte_end":423714,"line_start":2285,"line_end":2285,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423716,"byte_end":423727,"line_start":2286,"line_end":2286,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423729,"byte_end":423756,"line_start":2287,"line_end":2287,"column_start":2,"column_end":29}},{"value":"/ use bitvec::ptr as bv_ptr;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423758,"byte_end":423788,"line_start":2288,"line_end":2288,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423790,"byte_end":423793,"line_start":2289,"line_end":2289,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423795,"byte_end":423818,"line_start":2290,"line_end":2290,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423820,"byte_end":423864,"line_start":2291,"line_end":2291,"column_start":2,"column_end":46}},{"value":"/ for mut bitptr in bits.as_mut_bitptr_range() {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423866,"byte_end":423916,"line_start":2292,"line_end":2292,"column_start":2,"column_end":52}},{"value":"/   unsafe { bv_ptr::write(bitptr, true); }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423918,"byte_end":423963,"line_start":2293,"line_end":2293,"column_start":2,"column_end":47}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423965,"byte_end":423970,"line_start":2294,"line_end":2294,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, !0);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423972,"byte_end":423997,"line_start":2295,"line_end":2295,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423999,"byte_end":424006,"line_start":2296,"line_end":2296,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424008,"byte_end":424011,"line_start":2297,"line_end":2297,"column_start":2,"column_end":5}},{"value":"/ [`BitPtr`]: crate::ptr::BitPtr","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424013,"byte_end":424047,"line_start":2298,"line_end":2298,"column_start":2,"column_end":36}},{"value":"/ [`as_mut_bitptr`]: Self::as_mut_bitptr","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424049,"byte_end":424091,"line_start":2299,"line_end":2299,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2428},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425394,"byte_end":425404,"line_start":2339,"line_end":2339,"column_start":9,"column_end":19},"name":"bit_domain","qualname":"<BitSlice<O, T>>::bit_domain","value":"pub fn bit_domain(&Self) -> BitDomain<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the slice into subslices at alias boundaries.","sig":null,"attributes":[{"value":"/ Splits the slice into subslices at alias boundaries.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424216,"byte_end":424272,"line_start":2304,"line_end":2304,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424274,"byte_end":424277,"line_start":2305,"line_end":2305,"column_start":2,"column_end":5}},{"value":"/ This splits `self` into the memory locations that it partially fills and","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424279,"byte_end":424355,"line_start":2306,"line_end":2306,"column_start":2,"column_end":78}},{"value":"/ the memory locations that it completely fills. The locations that are","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424357,"byte_end":424430,"line_start":2307,"line_end":2307,"column_start":2,"column_end":75}},{"value":"/ completely filled may be accessed without any `bitvec`-imposed alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424432,"byte_end":424504,"line_start":2308,"line_end":2308,"column_start":2,"column_end":74}},{"value":"/ conditions, while the locations that are only partially filled are left","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424506,"byte_end":424581,"line_start":2309,"line_end":2309,"column_start":2,"column_end":77}},{"value":"/ unchanged.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424583,"byte_end":424597,"line_start":2310,"line_end":2310,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424599,"byte_end":424602,"line_start":2311,"line_end":2311,"column_start":2,"column_end":5}},{"value":"/ You can read more about the [`BitDomain`] splitting in its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424604,"byte_end":424666,"line_start":2312,"line_end":2312,"column_start":2,"column_end":64}},{"value":"/ documentation.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424668,"byte_end":424686,"line_start":2313,"line_end":2313,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424688,"byte_end":424691,"line_start":2314,"line_end":2314,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424693,"byte_end":424707,"line_start":2315,"line_end":2315,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424709,"byte_end":424712,"line_start":2316,"line_end":2316,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424714,"byte_end":424725,"line_start":2317,"line_end":2317,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424727,"byte_end":424754,"line_start":2318,"line_end":2318,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424756,"byte_end":424759,"line_start":2319,"line_end":2319,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u16; 3];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424761,"byte_end":424790,"line_start":2320,"line_end":2320,"column_start":2,"column_end":31}},{"value":"/ let all = data.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424792,"byte_end":424835,"line_start":2321,"line_end":2321,"column_start":2,"column_end":45}},{"value":"/ let (_, rest) = all.split_at_mut(8);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424837,"byte_end":424877,"line_start":2322,"line_end":2322,"column_start":2,"column_end":42}},{"value":"/ let bits: &BitSlice<Msb0, <u16 as BitStore>::Alias> = &rest[.. 32];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424879,"byte_end":424950,"line_start":2323,"line_end":2323,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424952,"byte_end":424955,"line_start":2324,"line_end":2324,"column_start":2,"column_end":5}},{"value":"/ let (head, body, tail) = bits","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424957,"byte_end":424990,"line_start":2325,"line_end":2325,"column_start":2,"column_end":35}},{"value":"/   .bit_domain()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424992,"byte_end":425011,"line_start":2326,"line_end":2326,"column_start":2,"column_end":21}},{"value":"/   .region()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425013,"byte_end":425028,"line_start":2327,"line_end":2327,"column_start":2,"column_end":17}},{"value":"/   .unwrap();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425030,"byte_end":425046,"line_start":2328,"line_end":2328,"column_start":2,"column_end":18}},{"value":"/ assert_eq!(head.len(), 8);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425048,"byte_end":425078,"line_start":2329,"line_end":2329,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(tail.len(), 8);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425080,"byte_end":425110,"line_start":2330,"line_end":2330,"column_start":2,"column_end":32}},{"value":"/ let _: &BitSlice<Msb0, <u16 as BitStore>::Alias> = head;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425112,"byte_end":425172,"line_start":2331,"line_end":2331,"column_start":2,"column_end":62}},{"value":"/ let _: &BitSlice<Msb0, <u16 as BitStore>::Alias> = tail;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425174,"byte_end":425234,"line_start":2332,"line_end":2332,"column_start":2,"column_end":62}},{"value":"/ let _: &BitSlice<Msb0, u16> = body;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425236,"byte_end":425275,"line_start":2333,"line_end":2333,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425277,"byte_end":425284,"line_start":2334,"line_end":2334,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425286,"byte_end":425289,"line_start":2335,"line_end":2335,"column_start":2,"column_end":5}},{"value":"/ [`BitDomain`]: crate::domain::BitDomain","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425291,"byte_end":425334,"line_start":2336,"line_end":2336,"column_start":2,"column_end":45}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425336,"byte_end":425353,"line_start":2337,"line_end":2337,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425355,"byte_end":425385,"line_start":2338,"line_end":2338,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2429},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426679,"byte_end":426693,"line_start":2379,"line_end":2379,"column_start":9,"column_end":23},"name":"bit_domain_mut","qualname":"<BitSlice<O, T>>::bit_domain_mut","value":"pub fn bit_domain_mut(&mut Self) -> BitDomainMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the slice into subslices at alias boundaries.","sig":null,"attributes":[{"value":"/ Splits the slice into subslices at alias boundaries.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425461,"byte_end":425517,"line_start":2343,"line_end":2343,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425519,"byte_end":425522,"line_start":2344,"line_end":2344,"column_start":2,"column_end":5}},{"value":"/ This splits `self` into the memory locations that it partially fills and","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425524,"byte_end":425600,"line_start":2345,"line_end":2345,"column_start":2,"column_end":78}},{"value":"/ the memory locations that it completely fills. The locations that are","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425602,"byte_end":425675,"line_start":2346,"line_end":2346,"column_start":2,"column_end":75}},{"value":"/ completely filled may be accessed without any `bitvec`-imposed alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425677,"byte_end":425749,"line_start":2347,"line_end":2347,"column_start":2,"column_end":74}},{"value":"/ conditions, while the locations that are only partially filled are left","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425751,"byte_end":425826,"line_start":2348,"line_end":2348,"column_start":2,"column_end":77}},{"value":"/ unchanged.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425828,"byte_end":425842,"line_start":2349,"line_end":2349,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425844,"byte_end":425847,"line_start":2350,"line_end":2350,"column_start":2,"column_end":5}},{"value":"/ You can read more about the [`BitDomainMut`] splitting in its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425849,"byte_end":425914,"line_start":2351,"line_end":2351,"column_start":2,"column_end":67}},{"value":"/ documentation.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425916,"byte_end":425934,"line_start":2352,"line_end":2352,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425936,"byte_end":425939,"line_start":2353,"line_end":2353,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425941,"byte_end":425955,"line_start":2354,"line_end":2354,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425957,"byte_end":425960,"line_start":2355,"line_end":2355,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425962,"byte_end":425973,"line_start":2356,"line_end":2356,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":425975,"byte_end":426002,"line_start":2357,"line_end":2357,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426004,"byte_end":426007,"line_start":2358,"line_end":2358,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u16; 3];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426009,"byte_end":426038,"line_start":2359,"line_end":2359,"column_start":2,"column_end":31}},{"value":"/ let all = data.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426040,"byte_end":426083,"line_start":2360,"line_end":2360,"column_start":2,"column_end":45}},{"value":"/ let (_, rest) = all.split_at_mut(8);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426085,"byte_end":426125,"line_start":2361,"line_end":2361,"column_start":2,"column_end":42}},{"value":"/ let bits: &mut BitSlice<Msb0, <u16 as BitStore>::Alias>","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426127,"byte_end":426186,"line_start":2362,"line_end":2362,"column_start":2,"column_end":61}},{"value":"/   = &mut rest[.. 32];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426188,"byte_end":426213,"line_start":2363,"line_end":2363,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426215,"byte_end":426218,"line_start":2364,"line_end":2364,"column_start":2,"column_end":5}},{"value":"/ let (head, body, tail) = bits","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426220,"byte_end":426253,"line_start":2365,"line_end":2365,"column_start":2,"column_end":35}},{"value":"/   .bit_domain_mut()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426255,"byte_end":426278,"line_start":2366,"line_end":2366,"column_start":2,"column_end":25}},{"value":"/   .region()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426280,"byte_end":426295,"line_start":2367,"line_end":2367,"column_start":2,"column_end":17}},{"value":"/   .unwrap();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426297,"byte_end":426313,"line_start":2368,"line_end":2368,"column_start":2,"column_end":18}},{"value":"/ assert_eq!(head.len(), 8);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426315,"byte_end":426345,"line_start":2369,"line_end":2369,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(tail.len(), 8);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426347,"byte_end":426377,"line_start":2370,"line_end":2370,"column_start":2,"column_end":32}},{"value":"/ let _: &mut BitSlice<Msb0, <u16 as BitStore>::Alias> = head;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426379,"byte_end":426443,"line_start":2371,"line_end":2371,"column_start":2,"column_end":66}},{"value":"/ let _: &mut BitSlice<Msb0, <u16 as BitStore>::Alias> = tail;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426445,"byte_end":426509,"line_start":2372,"line_end":2372,"column_start":2,"column_end":66}},{"value":"/ let _: &mut BitSlice<Msb0, u16> = body;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426511,"byte_end":426554,"line_start":2373,"line_end":2373,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426556,"byte_end":426563,"line_start":2374,"line_end":2374,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426565,"byte_end":426568,"line_start":2375,"line_end":2375,"column_start":2,"column_end":5}},{"value":"/ [`BitDomainMut`]: crate::domain::BitDomainMut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426570,"byte_end":426619,"line_start":2376,"line_end":2376,"column_start":2,"column_end":51}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426621,"byte_end":426638,"line_start":2377,"line_end":2377,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426640,"byte_end":426670,"line_start":2378,"line_end":2378,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2430},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427898,"byte_end":427904,"line_start":2418,"line_end":2418,"column_start":9,"column_end":15},"name":"domain","qualname":"<BitSlice<O, T>>::domain","value":"pub fn domain(&Self) -> Domain<, T>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying memory containing the slice, split at alias\n boundaries.","sig":null,"attributes":[{"value":"/ Views the underlying memory containing the slice, split at alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426760,"byte_end":426828,"line_start":2383,"line_end":2383,"column_start":2,"column_end":70}},{"value":"/ boundaries.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426830,"byte_end":426845,"line_start":2384,"line_end":2384,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426847,"byte_end":426850,"line_start":2385,"line_end":2385,"column_start":2,"column_end":5}},{"value":"/ This splits `self` into the memory locations that it partially fills and","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426852,"byte_end":426928,"line_start":2386,"line_end":2386,"column_start":2,"column_end":78}},{"value":"/ the memory locatinos that it completely fills. The locations that are","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":426930,"byte_end":427003,"line_start":2387,"line_end":2387,"column_start":2,"column_end":75}},{"value":"/ completely filled may be accessed without any `bitvec`-imposed alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427005,"byte_end":427077,"line_start":2388,"line_end":2388,"column_start":2,"column_end":74}},{"value":"/ conditions, while the locations that are only partially filled are left","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427079,"byte_end":427154,"line_start":2389,"line_end":2389,"column_start":2,"column_end":77}},{"value":"/ unchanged.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427156,"byte_end":427170,"line_start":2390,"line_end":2390,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427172,"byte_end":427175,"line_start":2391,"line_end":2391,"column_start":2,"column_end":5}},{"value":"/ You can read more about the [`Domain`] splitting in its documentation.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427177,"byte_end":427251,"line_start":2392,"line_end":2392,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427253,"byte_end":427256,"line_start":2393,"line_end":2393,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427258,"byte_end":427272,"line_start":2394,"line_end":2394,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427274,"byte_end":427277,"line_start":2395,"line_end":2395,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427279,"byte_end":427290,"line_start":2396,"line_end":2396,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427292,"byte_end":427319,"line_start":2397,"line_end":2397,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427321,"byte_end":427324,"line_start":2398,"line_end":2398,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u16; 3];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427326,"byte_end":427355,"line_start":2399,"line_end":2399,"column_start":2,"column_end":31}},{"value":"/ let all = data.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427357,"byte_end":427400,"line_start":2400,"line_end":2400,"column_start":2,"column_end":45}},{"value":"/ let (_, rest) = all.split_at_mut(8);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427402,"byte_end":427442,"line_start":2401,"line_end":2401,"column_start":2,"column_end":42}},{"value":"/ let bits: &BitSlice<Msb0, <u16 as BitStore>::Alias> = &rest[.. 32];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427444,"byte_end":427515,"line_start":2402,"line_end":2402,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427517,"byte_end":427520,"line_start":2403,"line_end":2403,"column_start":2,"column_end":5}},{"value":"/ let (head, body, tail) = bits","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427522,"byte_end":427555,"line_start":2404,"line_end":2404,"column_start":2,"column_end":35}},{"value":"/   .domain()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427557,"byte_end":427572,"line_start":2405,"line_end":2405,"column_start":2,"column_end":17}},{"value":"/   .region()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427574,"byte_end":427589,"line_start":2406,"line_end":2406,"column_start":2,"column_end":17}},{"value":"/   .unwrap();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427591,"byte_end":427607,"line_start":2407,"line_end":2407,"column_start":2,"column_end":18}},{"value":"/ assert_eq!(body.len(), 1);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427609,"byte_end":427639,"line_start":2408,"line_end":2408,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427641,"byte_end":427644,"line_start":2409,"line_end":2409,"column_start":2,"column_end":5}},{"value":"/ let _: &<u16 as BitStore>::Alias = head.unwrap().1;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427646,"byte_end":427701,"line_start":2410,"line_end":2410,"column_start":2,"column_end":57}},{"value":"/ let _: &<u16 as BitStore>::Alias = tail.unwrap().0;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427703,"byte_end":427758,"line_start":2411,"line_end":2411,"column_start":2,"column_end":57}},{"value":"/ let _: &[u16] = body;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427760,"byte_end":427785,"line_start":2412,"line_end":2412,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427787,"byte_end":427794,"line_start":2413,"line_end":2413,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427796,"byte_end":427799,"line_start":2414,"line_end":2414,"column_start":2,"column_end":5}},{"value":"/ [`Domain`]: crate::domain::Domain","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427801,"byte_end":427838,"line_start":2415,"line_end":2415,"column_start":2,"column_end":39}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427840,"byte_end":427857,"line_start":2416,"line_end":2416,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427859,"byte_end":427889,"line_start":2417,"line_end":2417,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2431},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429169,"byte_end":429179,"line_start":2459,"line_end":2459,"column_start":9,"column_end":19},"name":"domain_mut","qualname":"<BitSlice<O, T>>::domain_mut","value":"pub fn domain_mut(&mut Self) -> DomainMut<, T>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying memory containing the slice, split at alias\n boundaries.","sig":null,"attributes":[{"value":"/ Views the underlying memory containing the slice, split at alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427952,"byte_end":428020,"line_start":2422,"line_end":2422,"column_start":2,"column_end":70}},{"value":"/ boundaries.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428022,"byte_end":428037,"line_start":2423,"line_end":2423,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428039,"byte_end":428042,"line_start":2424,"line_end":2424,"column_start":2,"column_end":5}},{"value":"/ This splits `self` into the memory locations that it partially fills and","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428044,"byte_end":428120,"line_start":2425,"line_end":2425,"column_start":2,"column_end":78}},{"value":"/ the memory locations that it completely fills. The locations that are","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428122,"byte_end":428195,"line_start":2426,"line_end":2426,"column_start":2,"column_end":75}},{"value":"/ completely filled may be accessed without any `bitvec`-imposed alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428197,"byte_end":428269,"line_start":2427,"line_end":2427,"column_start":2,"column_end":74}},{"value":"/ conditions, while the locations that are only partially filled are left","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428271,"byte_end":428346,"line_start":2428,"line_end":2428,"column_start":2,"column_end":77}},{"value":"/ unchanged.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428348,"byte_end":428362,"line_start":2429,"line_end":2429,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428364,"byte_end":428367,"line_start":2430,"line_end":2430,"column_start":2,"column_end":5}},{"value":"/ You can read more about the [`DomainMut`] splitting in its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428369,"byte_end":428431,"line_start":2431,"line_end":2431,"column_start":2,"column_end":64}},{"value":"/ documentation.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428433,"byte_end":428451,"line_start":2432,"line_end":2432,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428453,"byte_end":428456,"line_start":2433,"line_end":2433,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428458,"byte_end":428472,"line_start":2434,"line_end":2434,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428474,"byte_end":428477,"line_start":2435,"line_end":2435,"column_start":2,"column_end":5}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428479,"byte_end":428482,"line_start":2436,"line_end":2436,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428484,"byte_end":428495,"line_start":2437,"line_end":2437,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428497,"byte_end":428524,"line_start":2438,"line_end":2438,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428526,"byte_end":428529,"line_start":2439,"line_end":2439,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u16; 3];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428531,"byte_end":428560,"line_start":2440,"line_end":2440,"column_start":2,"column_end":31}},{"value":"/ let all = data.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428562,"byte_end":428605,"line_start":2441,"line_end":2441,"column_start":2,"column_end":45}},{"value":"/ let (_, rest) = all.split_at_mut(8);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428607,"byte_end":428647,"line_start":2442,"line_end":2442,"column_start":2,"column_end":42}},{"value":"/ let bits: &mut BitSlice<Msb0, <u16 as BitStore>::Alias> = &mut rest[.. 32];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428649,"byte_end":428728,"line_start":2443,"line_end":2443,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428730,"byte_end":428733,"line_start":2444,"line_end":2444,"column_start":2,"column_end":5}},{"value":"/ let (head, body, tail) = bits","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428735,"byte_end":428768,"line_start":2445,"line_end":2445,"column_start":2,"column_end":35}},{"value":"/   .domain_mut()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428770,"byte_end":428789,"line_start":2446,"line_end":2446,"column_start":2,"column_end":21}},{"value":"/   .region()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428791,"byte_end":428806,"line_start":2447,"line_end":2447,"column_start":2,"column_end":17}},{"value":"/   .unwrap();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428808,"byte_end":428824,"line_start":2448,"line_end":2448,"column_start":2,"column_end":18}},{"value":"/ assert_eq!(body.len(), 1);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428826,"byte_end":428856,"line_start":2449,"line_end":2449,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428858,"byte_end":428861,"line_start":2450,"line_end":2450,"column_start":2,"column_end":5}},{"value":"/ let _: &<<u16 as BitStore>::Alias as BitStore>::Access = head.unwrap().1;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428863,"byte_end":428940,"line_start":2451,"line_end":2451,"column_start":2,"column_end":79}},{"value":"/ let _: &<<u16 as BitStore>::Alias as BitStore>::Access = tail.unwrap().0;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428942,"byte_end":429019,"line_start":2452,"line_end":2452,"column_start":2,"column_end":79}},{"value":"/ let _: &mut [u16] = body;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429021,"byte_end":429050,"line_start":2453,"line_end":2453,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429052,"byte_end":429059,"line_start":2454,"line_end":2454,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429061,"byte_end":429064,"line_start":2455,"line_end":2455,"column_start":2,"column_end":5}},{"value":"/ [`DomainMut`]: crate::domain::DomainMut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429066,"byte_end":429109,"line_start":2456,"line_end":2456,"column_start":2,"column_end":45}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429111,"byte_end":429128,"line_start":2457,"line_end":2457,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429130,"byte_end":429160,"line_start":2458,"line_end":2458,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2432},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429621,"byte_end":429629,"line_start":2472,"line_end":2472,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<BitSlice<O, T>>::as_slice","value":"pub fn as_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying memory containing the slice.","sig":null,"attributes":[{"value":"/ Views the underlying memory containing the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429237,"byte_end":429290,"line_start":2463,"line_end":2463,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429292,"byte_end":429295,"line_start":2464,"line_end":2464,"column_start":2,"column_end":5}},{"value":"/ The returned slice handle views all elements touched by `self`, and","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429297,"byte_end":429368,"line_start":2465,"line_end":2465,"column_start":2,"column_end":73}},{"value":"/ marks them all with `self`’s current aliasing state. For a more precise","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429370,"byte_end":429447,"line_start":2466,"line_end":2466,"column_start":2,"column_end":77}},{"value":"/ view, or one that permits mutation, use [`.domain()`] or","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429449,"byte_end":429509,"line_start":2467,"line_end":2467,"column_start":2,"column_end":62}},{"value":"/ [`.domain_mut()`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429511,"byte_end":429533,"line_start":2468,"line_end":2468,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429535,"byte_end":429538,"line_start":2469,"line_end":2469,"column_start":2,"column_end":5}},{"value":"/ [`.domain()`]: Self::domain","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429540,"byte_end":429571,"line_start":2470,"line_end":2470,"column_start":2,"column_end":33}},{"value":"/ [`.domain_mut()`]: Self::domain_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429573,"byte_end":429612,"line_start":2471,"line_end":2471,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2446},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432955,"byte_end":432975,"line_start":2578,"line_end":2578,"column_start":9,"column_end":29},"name":"split_at_aliased_mut","qualname":"<BitSlice<O, T>>::split_at_aliased_mut","value":"pub fn split_at_aliased_mut(&mut Self, usize) -> (&mut Self, &mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Splits a mutable slice at some mid-point.","sig":null,"attributes":[{"value":"/ Splits a mutable slice at some mid-point.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432531,"byte_end":432576,"line_start":2567,"line_end":2567,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432578,"byte_end":432581,"line_start":2568,"line_end":2568,"column_start":2,"column_end":5}},{"value":"/ This method has the same behavior as [`.split_at_mut()`], except that it","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432583,"byte_end":432659,"line_start":2569,"line_end":2569,"column_start":2,"column_end":78}},{"value":"/ does not apply an aliasing marker to the partitioned subslices.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432661,"byte_end":432728,"line_start":2570,"line_end":2570,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432730,"byte_end":432733,"line_start":2571,"line_end":2571,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432735,"byte_end":432747,"line_start":2572,"line_end":2572,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432749,"byte_end":432752,"line_start":2573,"line_end":2573,"column_start":2,"column_end":5}},{"value":"/ Because this method is defined only on `BitSlice`s whose `T` type is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432754,"byte_end":432826,"line_start":2574,"line_end":2574,"column_start":2,"column_end":74}},{"value":"/ alias-safe, the subslices do not need to be additionally marked.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432828,"byte_end":432896,"line_start":2575,"line_end":2575,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432898,"byte_end":432901,"line_start":2576,"line_end":2576,"column_start":2,"column_end":5}},{"value":"/ [`.split_at_mut()`]: Self::split_at_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432903,"byte_end":432946,"line_start":2577,"line_end":2577,"column_start":2,"column_end":45}}]},{"kind":"Const","id":{"krate":0,"index":2450},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":433602,"byte_end":433610,"line_start":2602,"line_end":2602,"column_start":12,"column_end":20},"name":"MAX_BITS","qualname":"::slice::BitSlice::<O, T>::MAX_BITS","value":"usize","parent":{"krate":0,"index":2447},"children":[],"decl_id":null,"docs":" The inclusive maximum length of a `BitSlice<_, T>`.","sig":null,"attributes":[{"value":"/ The inclusive maximum length of a `BitSlice<_, T>`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":433244,"byte_end":433299,"line_start":2593,"line_end":2593,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":433301,"byte_end":433304,"line_start":2594,"line_end":2594,"column_start":2,"column_end":5}},{"value":"/ As `BitSlice` is zero-indexed, the largest possible index is one less","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":433306,"byte_end":433379,"line_start":2595,"line_end":2595,"column_start":2,"column_end":75}},{"value":"/ than this value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":433381,"byte_end":433401,"line_start":2596,"line_end":2596,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":433403,"byte_end":433406,"line_start":2597,"line_end":2597,"column_start":2,"column_end":5}},{"value":"/ |CPU word width|         Value         |","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":433408,"byte_end":433452,"line_start":2598,"line_end":2598,"column_start":2,"column_end":46}},{"value":"/ |-------------:|----------------------:|","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":433454,"byte_end":433498,"line_start":2599,"line_end":2599,"column_start":2,"column_end":46}},{"value":"/ |32 bits       |     `0x1fff_ffff`     |","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":433500,"byte_end":433544,"line_start":2600,"line_end":2600,"column_start":2,"column_end":46}},{"value":"/ |64 bits       |`0x1fff_ffff_ffff_ffff`|","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":433546,"byte_end":433590,"line_start":2601,"line_end":2601,"column_start":2,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":2451},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434447,"byte_end":434455,"line_start":2617,"line_end":2617,"column_start":12,"column_end":20},"name":"MAX_ELTS","qualname":"::slice::BitSlice::<O, T>::MAX_ELTS","value":"usize","parent":{"krate":0,"index":2447},"children":[],"decl_id":null,"docs":" The inclusive maximum length that a slice `[T]` can be for\n `BitSlice<_, T>` to cover it.","sig":null,"attributes":[{"value":"/ The inclusive maximum length that a slice `[T]` can be for","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":433662,"byte_end":433724,"line_start":2603,"line_end":2603,"column_start":2,"column_end":64}},{"value":"/ `BitSlice<_, T>` to cover it.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":433726,"byte_end":433759,"line_start":2604,"line_end":2604,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":433761,"byte_end":433764,"line_start":2605,"line_end":2605,"column_start":2,"column_end":5}},{"value":"/ A `BitSlice<_, T>` that begins in the interior of an element and","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":433766,"byte_end":433834,"line_start":2606,"line_end":2606,"column_start":2,"column_end":70}},{"value":"/ contains the maximum number of bits will extend one element past the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":433836,"byte_end":433908,"line_start":2607,"line_end":2607,"column_start":2,"column_end":74}},{"value":"/ cutoff that would occur if the slice began at the zeroth bit. Such a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":433910,"byte_end":433982,"line_start":2608,"line_end":2608,"column_start":2,"column_end":74}},{"value":"/ slice must be manually constructed, but will not otherwise fail.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":433984,"byte_end":434052,"line_start":2609,"line_end":2609,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434054,"byte_end":434057,"line_start":2610,"line_end":2610,"column_start":2,"column_end":5}},{"value":"/ |Type Bits|Max Elements (32-bit)| Max Elements (64-bit) |","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434059,"byte_end":434120,"line_start":2611,"line_end":2611,"column_start":2,"column_end":63}},{"value":"/ |--------:|--------------------:|----------------------:|","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434122,"byte_end":434183,"line_start":2612,"line_end":2612,"column_start":2,"column_end":63}},{"value":"/ |        8|    `0x0400_0001`    |`0x0400_0000_0000_0001`|","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434185,"byte_end":434246,"line_start":2613,"line_end":2613,"column_start":2,"column_end":63}},{"value":"/ |       16|    `0x0200_0001`    |`0x0200_0000_0000_0001`|","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434248,"byte_end":434309,"line_start":2614,"line_end":2614,"column_start":2,"column_end":63}},{"value":"/ |       32|    `0x0100_0001`    |`0x0100_0000_0000_0001`|","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434311,"byte_end":434372,"line_start":2615,"line_end":2615,"column_start":2,"column_end":63}},{"value":"/ |       64|    `0x0080_0001`    |`0x0080_0000_0000_0001`|","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434374,"byte_end":434435,"line_start":2616,"line_end":2616,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2455},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":435000,"byte_end":435009,"line_start":2642,"line_end":2642,"column_start":9,"column_end":18},"name":"to_bitvec","qualname":"<BitSlice<O, T>>::to_bitvec","value":"pub fn to_bitvec(&Self) -> BitVec<O, T::Unalias>","parent":null,"children":[],"decl_id":null,"docs":" Copies `self` into a new [`BitVec`].","sig":null,"attributes":[{"value":"/ Copies `self` into a new [`BitVec`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434598,"byte_end":434638,"line_start":2626,"line_end":2626,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434640,"byte_end":434643,"line_start":2627,"line_end":2627,"column_start":2,"column_end":5}},{"value":"/ This resets any alias markings from `self`, since the returned buffer is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434645,"byte_end":434721,"line_start":2628,"line_end":2628,"column_start":2,"column_end":78}},{"value":"/ known to be newly allocated and thus unaliased.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434723,"byte_end":434774,"line_start":2629,"line_end":2629,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434776,"byte_end":434779,"line_start":2630,"line_end":2630,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434781,"byte_end":434795,"line_start":2631,"line_end":2631,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434797,"byte_end":434800,"line_start":2632,"line_end":2632,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434802,"byte_end":434813,"line_start":2633,"line_end":2633,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434815,"byte_end":434842,"line_start":2634,"line_end":2634,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434844,"byte_end":434847,"line_start":2635,"line_end":2635,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434849,"byte_end":434882,"line_start":2636,"line_end":2636,"column_start":2,"column_end":35}},{"value":"/ let bv = bits.to_bitvec();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434884,"byte_end":434914,"line_start":2637,"line_end":2637,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(bits, bv);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434916,"byte_end":434941,"line_start":2638,"line_end":2638,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434943,"byte_end":434950,"line_start":2639,"line_end":2639,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434952,"byte_end":434955,"line_start":2640,"line_end":2640,"column_start":2,"column_end":5}},{"value":"/ [`BitVec`]: crate::vec::BitVec","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434957,"byte_end":434991,"line_start":2641,"line_end":2641,"column_start":2,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":2456},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":436133,"byte_end":436157,"line_start":2681,"line_end":2681,"column_start":15,"column_end":39},"name":"from_raw_parts_unchecked","qualname":"::slice::from_raw_parts_unchecked","value":"pub unsafe fn from_raw_parts_unchecked<'a, O, T>(BitPtr<Const, O, T>, usize)\n-> &'a BitSlice<O, T> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs the same functionality as [`from_raw_parts`], without checking the\n`len` argument.","sig":null,"attributes":[{"value":"* Performs the same functionality as [`from_raw_parts`], without checking the\n`len` argument.\n\n# Parameters\n\n- `data`: A `BitPtr` to a dereferencable region of memory.\n- `len`: The length, in bits, of the region beginning at `*data`. This is not\n  checked against the maximum value, and is encoded directly into the bit-slice\n  reference. If it exceeds [`BitSlice::MAX_BITS`], it will be modulated to fit\n  (the high bits will be discarded).\n\n# Returns\n\nA `&BitSlice` reference starting at `data` and running for `len & MAX_BITS`\nbits.\n\n# Safety\n\nSee [`from_raw_parts`].\n\n[`BitSlice::MAX_BITS`]: crate::slice::BitSlice::MAX_BITS\n[`from_raw_parts`]: crate::slice::from_raw_parts\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":435435,"byte_end":436118,"line_start":2658,"line_end":2680,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":2460},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":437035,"byte_end":437063,"line_start":2715,"line_end":2715,"column_start":15,"column_end":43},"name":"from_raw_parts_unchecked_mut","qualname":"::slice::from_raw_parts_unchecked_mut","value":"pub unsafe fn from_raw_parts_unchecked_mut<'a, O, T>(BitPtr<Mut, O, T>, usize)\n-> &'a mut BitSlice<O, T> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs the same functionality as [`from_raw_parts_mut`], without checking\nthe `len` argument.","sig":null,"attributes":[{"value":"* Performs the same functionality as [`from_raw_parts_mut`], without checking\nthe `len` argument.\n\n# Parameters\n\n- `data`: A `BitPtr` to a dereferencable region of memory.\n- `len`: The length, in bits, of the region beginning at `*data`. This is not\n  checked against the maximum value, and is encoded directly into the bit-slice\n  reference. If it exceeds [`BitSlice::MAX_BITS`], it will be modulated to fit\n  (the high bits will be discarded).\n\n# Returns\n\nA `&mut BitSlice` reference starting at `data` and running for `len & MAX_BITS`\nbits.\n\n# Safety\n\nSee [`from_raw_parts_mut`].\n\n[`BitSlice::MAX_BITS`]: crate::slice::BitSlice::MAX_BITS\n[`from_raw_parts_mut`]: crate::slice::from_raw_parts_mut\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":436317,"byte_end":437020,"line_start":2692,"line_end":2714,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2605},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438935,"byte_end":438938,"line_start":88,"line_end":88,"column_start":9,"column_end":12},"name":"len","qualname":"<BitSlice<O, T>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits in the slice.","sig":null,"attributes":[{"value":"/ Returns the number of bits in the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438615,"byte_end":438659,"line_start":73,"line_end":73,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438661,"byte_end":438664,"line_start":74,"line_end":74,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438666,"byte_end":438680,"line_start":75,"line_end":75,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438682,"byte_end":438685,"line_start":76,"line_end":76,"column_start":2,"column_end":5}},{"value":"/ [`slice::len`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.len)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438687,"byte_end":438775,"line_start":77,"line_end":77,"column_start":2,"column_end":90}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438777,"byte_end":438780,"line_start":78,"line_end":78,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438782,"byte_end":438796,"line_start":79,"line_end":79,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438798,"byte_end":438801,"line_start":80,"line_end":80,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438803,"byte_end":438814,"line_start":81,"line_end":81,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438816,"byte_end":438843,"line_start":82,"line_end":82,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438845,"byte_end":438848,"line_start":83,"line_end":83,"column_start":2,"column_end":5}},{"value":"/ let a = bits![0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438850,"byte_end":438877,"line_start":84,"line_end":84,"column_start":2,"column_end":29}},{"value":"/ assert_eq!(a.len(), 3);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438879,"byte_end":438906,"line_start":85,"line_end":85,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438908,"byte_end":438915,"line_start":86,"line_end":86,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438917,"byte_end":438926,"line_start":87,"line_end":87,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2606},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439324,"byte_end":439332,"line_start":107,"line_end":107,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<BitSlice<O, T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the slice has a length of 0.","sig":null,"attributes":[{"value":"/ Returns `true` if the slice has a length of 0.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438988,"byte_end":439038,"line_start":92,"line_end":92,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439040,"byte_end":439043,"line_start":93,"line_end":93,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439045,"byte_end":439059,"line_start":94,"line_end":94,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439061,"byte_end":439064,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ [`slice::is_empty`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.is_empty)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439066,"byte_end":439164,"line_start":96,"line_end":96,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439166,"byte_end":439169,"line_start":97,"line_end":97,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439171,"byte_end":439185,"line_start":98,"line_end":98,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439187,"byte_end":439190,"line_start":99,"line_end":99,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439192,"byte_end":439203,"line_start":100,"line_end":100,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439205,"byte_end":439232,"line_start":101,"line_end":101,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439234,"byte_end":439237,"line_start":102,"line_end":102,"column_start":2,"column_end":5}},{"value":"/ let a = bits![0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439239,"byte_end":439266,"line_start":103,"line_end":103,"column_start":2,"column_end":29}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439268,"byte_end":439295,"line_start":104,"line_end":104,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439297,"byte_end":439304,"line_start":105,"line_end":105,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439306,"byte_end":439315,"line_start":106,"line_end":106,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2607},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439716,"byte_end":439721,"line_start":127,"line_end":127,"column_start":9,"column_end":14},"name":"first","qualname":"<BitSlice<O, T>>::first","value":"pub fn first(&Self) -> Option<BitRef<, Const, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first bit of the slice, or `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the first bit of the slice, or `None` if it is empty.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439386,"byte_end":439451,"line_start":111,"line_end":111,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439453,"byte_end":439456,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439458,"byte_end":439472,"line_start":113,"line_end":113,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439474,"byte_end":439477,"line_start":114,"line_end":114,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439479,"byte_end":439493,"line_start":115,"line_end":115,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439495,"byte_end":439498,"line_start":116,"line_end":116,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439500,"byte_end":439511,"line_start":117,"line_end":117,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439513,"byte_end":439540,"line_start":118,"line_end":118,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439542,"byte_end":439545,"line_start":119,"line_end":119,"column_start":2,"column_end":5}},{"value":"/ let v = bits![1, 0, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439547,"byte_end":439574,"line_start":120,"line_end":120,"column_start":2,"column_end":29}},{"value":"/ assert_eq!(Some(&true), v.first().as_deref());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439576,"byte_end":439626,"line_start":121,"line_end":121,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439628,"byte_end":439631,"line_start":122,"line_end":122,"column_start":2,"column_end":5}},{"value":"/ let w = bits![];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439633,"byte_end":439653,"line_start":123,"line_end":123,"column_start":2,"column_end":22}},{"value":"/ assert_eq!(None, w.first());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439655,"byte_end":439687,"line_start":124,"line_end":124,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439689,"byte_end":439696,"line_start":125,"line_end":125,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439698,"byte_end":439707,"line_start":126,"line_end":126,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2608},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440558,"byte_end":440567,"line_start":160,"line_end":160,"column_start":9,"column_end":18},"name":"first_mut","qualname":"<BitSlice<O, T>>::first_mut","value":"pub fn first_mut(&mut Self) -> Option<BitRef<, Mut, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer to the first bit of the slice, or `None`\n if it is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable pointer to the first bit of the slice, or `None`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439781,"byte_end":439851,"line_start":131,"line_end":131,"column_start":2,"column_end":72}},{"value":"/ if it is empty.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439853,"byte_end":439872,"line_start":132,"line_end":132,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439874,"byte_end":439877,"line_start":133,"line_end":133,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439879,"byte_end":439893,"line_start":134,"line_end":134,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439895,"byte_end":439898,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ [`slice::first_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.first_mut)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439900,"byte_end":440000,"line_start":136,"line_end":136,"column_start":2,"column_end":102}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440002,"byte_end":440005,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440007,"byte_end":440028,"line_start":138,"line_end":138,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440030,"byte_end":440033,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440035,"byte_end":440106,"line_start":140,"line_end":140,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440108,"byte_end":440182,"line_start":141,"line_end":141,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440184,"byte_end":440257,"line_start":142,"line_end":142,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440259,"byte_end":440266,"line_start":143,"line_end":143,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440268,"byte_end":440271,"line_start":144,"line_end":144,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440273,"byte_end":440287,"line_start":145,"line_end":145,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440289,"byte_end":440292,"line_start":146,"line_end":146,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440294,"byte_end":440305,"line_start":147,"line_end":147,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440307,"byte_end":440334,"line_start":148,"line_end":148,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440336,"byte_end":440339,"line_start":149,"line_end":149,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0, 1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440341,"byte_end":440372,"line_start":150,"line_end":150,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440374,"byte_end":440377,"line_start":151,"line_end":151,"column_start":2,"column_end":5}},{"value":"/ if let Some(mut first) = x.first_mut() {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440379,"byte_end":440423,"line_start":152,"line_end":152,"column_start":2,"column_end":46}},{"value":"/   *first = true;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440425,"byte_end":440445,"line_start":153,"line_end":153,"column_start":2,"column_end":22}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440447,"byte_end":440452,"line_start":154,"line_end":154,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![1, 1, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440454,"byte_end":440488,"line_start":155,"line_end":155,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440490,"byte_end":440497,"line_start":156,"line_end":156,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440499,"byte_end":440502,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440504,"byte_end":440538,"line_start":158,"line_end":158,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440540,"byte_end":440549,"line_start":159,"line_end":159,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2609},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441148,"byte_end":441159,"line_start":185,"line_end":185,"column_start":9,"column_end":20},"name":"split_first","qualname":"<BitSlice<O, T>>::split_first","value":"pub fn split_first(&Self) -> Option<(BitRef<, Const, O, T>, &Self)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first and all the rest of the bits of the slice, or\n `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the first and all the rest of the bits of the slice, or","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440633,"byte_end":440700,"line_start":164,"line_end":164,"column_start":2,"column_end":69}},{"value":"/ `None` if it is empty.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440702,"byte_end":440728,"line_start":165,"line_end":165,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440730,"byte_end":440733,"line_start":166,"line_end":166,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440735,"byte_end":440749,"line_start":167,"line_end":167,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440751,"byte_end":440754,"line_start":168,"line_end":168,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_first`](https://doc.rust-lang.org/stable/std/primitive.slice.html#split_first)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440756,"byte_end":440853,"line_start":169,"line_end":169,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440855,"byte_end":440858,"line_start":170,"line_end":170,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440860,"byte_end":440874,"line_start":171,"line_end":171,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440876,"byte_end":440879,"line_start":172,"line_end":172,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440881,"byte_end":440892,"line_start":173,"line_end":173,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440894,"byte_end":440921,"line_start":174,"line_end":174,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440923,"byte_end":440926,"line_start":175,"line_end":175,"column_start":2,"column_end":5}},{"value":"/ let x = bits![1, 0, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440928,"byte_end":440955,"line_start":176,"line_end":176,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440957,"byte_end":440960,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ if let Some((first, rest)) = x.split_first() {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440962,"byte_end":441012,"line_start":178,"line_end":178,"column_start":2,"column_end":52}},{"value":"/   assert_eq!(first, &true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441014,"byte_end":441045,"line_start":179,"line_end":179,"column_start":2,"column_end":33}},{"value":"/   assert_eq!(rest, bits![0; 2]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441047,"byte_end":441083,"line_start":180,"line_end":180,"column_start":2,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441085,"byte_end":441090,"line_start":181,"line_end":181,"column_start":2,"column_end":7}},{"value":"/ # fn end_the_block() {}","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441092,"byte_end":441119,"line_start":182,"line_end":182,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441121,"byte_end":441128,"line_start":183,"line_end":183,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441130,"byte_end":441139,"line_start":184,"line_end":184,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2610},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442557,"byte_end":442572,"line_start":233,"line_end":233,"column_start":9,"column_end":24},"name":"split_first_mut","qualname":"<BitSlice<O, T>>::split_first_mut","value":"pub fn split_first_mut(&mut Self)\n-> Option<(BitRef<, Mut, O, T::Alias>, &mut BitSlice<O, T::Alias>)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first and all the rest of the bits of the slice, or\n `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the first and all the rest of the bits of the slice, or","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441367,"byte_end":441434,"line_start":195,"line_end":195,"column_start":2,"column_end":69}},{"value":"/ `None` if it is empty.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441436,"byte_end":441462,"line_start":196,"line_end":196,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441464,"byte_end":441467,"line_start":197,"line_end":197,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441469,"byte_end":441483,"line_start":198,"line_end":198,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441485,"byte_end":441488,"line_start":199,"line_end":199,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_first_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#split_first_mut)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441490,"byte_end":441595,"line_start":200,"line_end":200,"column_start":2,"column_end":107}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441597,"byte_end":441600,"line_start":201,"line_end":201,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441602,"byte_end":441623,"line_start":202,"line_end":202,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441625,"byte_end":441628,"line_start":203,"line_end":203,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441630,"byte_end":441701,"line_start":204,"line_end":204,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441703,"byte_end":441777,"line_start":205,"line_end":205,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441779,"byte_end":441852,"line_start":206,"line_end":206,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441854,"byte_end":441861,"line_start":207,"line_end":207,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441863,"byte_end":441866,"line_start":208,"line_end":208,"column_start":2,"column_end":5}},{"value":"/ Because the references are permitted to use the same memory address,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441868,"byte_end":441940,"line_start":209,"line_end":209,"column_start":2,"column_end":74}},{"value":"/ they are marked as aliasing in order to satisfy Rust’s requirements","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441942,"byte_end":442015,"line_start":210,"line_end":210,"column_start":2,"column_end":73}},{"value":"/ about freedom from data races.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442017,"byte_end":442051,"line_start":211,"line_end":211,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442053,"byte_end":442056,"line_start":212,"line_end":212,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442058,"byte_end":442072,"line_start":213,"line_end":213,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442074,"byte_end":442077,"line_start":214,"line_end":214,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442079,"byte_end":442090,"line_start":215,"line_end":215,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442092,"byte_end":442119,"line_start":216,"line_end":216,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442121,"byte_end":442124,"line_start":217,"line_end":217,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442126,"byte_end":442157,"line_start":218,"line_end":218,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442159,"byte_end":442162,"line_start":219,"line_end":219,"column_start":2,"column_end":5}},{"value":"/ if let Some((mut first, rest)) = x.split_first_mut() {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442164,"byte_end":442222,"line_start":220,"line_end":220,"column_start":2,"column_end":60}},{"value":"/   *first = true;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442224,"byte_end":442244,"line_start":221,"line_end":221,"column_start":2,"column_end":22}},{"value":"/   rest.set(0, true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442246,"byte_end":442270,"line_start":222,"line_end":222,"column_start":2,"column_end":26}},{"value":"/   rest.set(1, false);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442272,"byte_end":442297,"line_start":223,"line_end":223,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442299,"byte_end":442304,"line_start":224,"line_end":224,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![1, 1, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442306,"byte_end":442340,"line_start":225,"line_end":225,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442342,"byte_end":442349,"line_start":226,"line_end":226,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442351,"byte_end":442354,"line_start":227,"line_end":227,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442356,"byte_end":442390,"line_start":228,"line_end":228,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442504,"byte_end":442513,"line_start":231,"line_end":231,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442515,"byte_end":442548,"line_start":232,"line_end":232,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2611},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443340,"byte_end":443350,"line_start":266,"line_end":266,"column_start":9,"column_end":19},"name":"split_last","qualname":"<BitSlice<O, T>>::split_last","value":"pub fn split_last(&Self) -> Option<(BitRef<, Const, O, T>, &Self)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last and all the rest of the bits of the slice, or\n `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the last and all the rest of the bits of the slice, or","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442824,"byte_end":442890,"line_start":245,"line_end":245,"column_start":2,"column_end":68}},{"value":"/ `None` if it is empty.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442892,"byte_end":442918,"line_start":246,"line_end":246,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442920,"byte_end":442923,"line_start":247,"line_end":247,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442925,"byte_end":442939,"line_start":248,"line_end":248,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442941,"byte_end":442944,"line_start":249,"line_end":249,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_last`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_last)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442946,"byte_end":443048,"line_start":250,"line_end":250,"column_start":2,"column_end":104}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443050,"byte_end":443053,"line_start":251,"line_end":251,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443055,"byte_end":443069,"line_start":252,"line_end":252,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443071,"byte_end":443074,"line_start":253,"line_end":253,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443076,"byte_end":443087,"line_start":254,"line_end":254,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443089,"byte_end":443116,"line_start":255,"line_end":255,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443118,"byte_end":443121,"line_start":256,"line_end":256,"column_start":2,"column_end":5}},{"value":"/ let x = bits![0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443123,"byte_end":443150,"line_start":257,"line_end":257,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443152,"byte_end":443155,"line_start":258,"line_end":258,"column_start":2,"column_end":5}},{"value":"/ if let Some((last, rest)) = x.split_last() {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443157,"byte_end":443205,"line_start":259,"line_end":259,"column_start":2,"column_end":50}},{"value":"/   assert_eq!(last, &true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443207,"byte_end":443237,"line_start":260,"line_end":260,"column_start":2,"column_end":32}},{"value":"/   assert_eq!(rest, bits![0; 2]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443239,"byte_end":443275,"line_start":261,"line_end":261,"column_start":2,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443277,"byte_end":443282,"line_start":262,"line_end":262,"column_start":2,"column_end":7}},{"value":"/ # fn end_the_block() {}","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443284,"byte_end":443311,"line_start":263,"line_end":263,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443313,"byte_end":443320,"line_start":264,"line_end":264,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443322,"byte_end":443331,"line_start":265,"line_end":265,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2612},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444773,"byte_end":444787,"line_start":314,"line_end":314,"column_start":9,"column_end":23},"name":"split_last_mut","qualname":"<BitSlice<O, T>>::split_last_mut","value":"pub fn split_last_mut(&mut Self)\n-> Option<(BitRef<, Mut, O, T::Alias>, &mut BitSlice<O, T::Alias>)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last and all the rest of the bits of the slice, or\n `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the last and all the rest of the bits of the slice, or","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443578,"byte_end":443644,"line_start":276,"line_end":276,"column_start":2,"column_end":68}},{"value":"/ `None` if it is empty.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443646,"byte_end":443672,"line_start":277,"line_end":277,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443674,"byte_end":443677,"line_start":278,"line_end":278,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443679,"byte_end":443693,"line_start":279,"line_end":279,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443695,"byte_end":443698,"line_start":280,"line_end":280,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_last_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_last_mut)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443700,"byte_end":443810,"line_start":281,"line_end":281,"column_start":2,"column_end":112}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443812,"byte_end":443815,"line_start":282,"line_end":282,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443817,"byte_end":443838,"line_start":283,"line_end":283,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443840,"byte_end":443843,"line_start":284,"line_end":284,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443845,"byte_end":443916,"line_start":285,"line_end":285,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443918,"byte_end":443992,"line_start":286,"line_end":286,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443994,"byte_end":444067,"line_start":287,"line_end":287,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444069,"byte_end":444076,"line_start":288,"line_end":288,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444078,"byte_end":444081,"line_start":289,"line_end":289,"column_start":2,"column_end":5}},{"value":"/ Because the references are permitted to use the same memory address,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444083,"byte_end":444155,"line_start":290,"line_end":290,"column_start":2,"column_end":74}},{"value":"/ they are marked as aliasing in order to satisfy Rust’s requirements","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444157,"byte_end":444230,"line_start":291,"line_end":291,"column_start":2,"column_end":73}},{"value":"/ about freedom from data races.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444232,"byte_end":444266,"line_start":292,"line_end":292,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444268,"byte_end":444271,"line_start":293,"line_end":293,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444273,"byte_end":444287,"line_start":294,"line_end":294,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444289,"byte_end":444292,"line_start":295,"line_end":295,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444294,"byte_end":444305,"line_start":296,"line_end":296,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444307,"byte_end":444334,"line_start":297,"line_end":297,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444336,"byte_end":444339,"line_start":298,"line_end":298,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 1, 0, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444341,"byte_end":444372,"line_start":299,"line_end":299,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444374,"byte_end":444377,"line_start":300,"line_end":300,"column_start":2,"column_end":5}},{"value":"/ if let Some((mut last, rest)) = x.split_last_mut() {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444379,"byte_end":444435,"line_start":301,"line_end":301,"column_start":2,"column_end":58}},{"value":"/   *last = true;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444437,"byte_end":444456,"line_start":302,"line_end":302,"column_start":2,"column_end":21}},{"value":"/   rest.set(0, false);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444458,"byte_end":444483,"line_start":303,"line_end":303,"column_start":2,"column_end":27}},{"value":"/   rest.set(1, true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444485,"byte_end":444509,"line_start":304,"line_end":304,"column_start":2,"column_end":26}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444511,"byte_end":444516,"line_start":305,"line_end":305,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![0, 1, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444518,"byte_end":444552,"line_start":306,"line_end":306,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444554,"byte_end":444561,"line_start":307,"line_end":307,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444563,"byte_end":444566,"line_start":308,"line_end":308,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444568,"byte_end":444606,"line_start":309,"line_end":309,"column_start":2,"column_end":40}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444720,"byte_end":444729,"line_start":312,"line_end":312,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444731,"byte_end":444764,"line_start":313,"line_end":313,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2613},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445471,"byte_end":445475,"line_start":344,"line_end":344,"column_start":9,"column_end":13},"name":"last","qualname":"<BitSlice<O, T>>::last","value":"pub fn last(&Self) -> Option<BitRef<, Const, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last bit of the slice, or `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the last bit of the slice, or `None` if it is empty.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445047,"byte_end":445111,"line_start":326,"line_end":326,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445113,"byte_end":445116,"line_start":327,"line_end":327,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445118,"byte_end":445132,"line_start":328,"line_end":328,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445134,"byte_end":445137,"line_start":329,"line_end":329,"column_start":2,"column_end":5}},{"value":"/ [`slice::last`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.last)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445139,"byte_end":445229,"line_start":330,"line_end":330,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445231,"byte_end":445234,"line_start":331,"line_end":331,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445236,"byte_end":445250,"line_start":332,"line_end":332,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445252,"byte_end":445255,"line_start":333,"line_end":333,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445257,"byte_end":445268,"line_start":334,"line_end":334,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445270,"byte_end":445297,"line_start":335,"line_end":335,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445299,"byte_end":445302,"line_start":336,"line_end":336,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445304,"byte_end":445331,"line_start":337,"line_end":337,"column_start":2,"column_end":29}},{"value":"/ assert_eq!(Some(&true), v.last().as_deref());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445333,"byte_end":445382,"line_start":338,"line_end":338,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445384,"byte_end":445387,"line_start":339,"line_end":339,"column_start":2,"column_end":5}},{"value":"/ let w = bits![];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445389,"byte_end":445409,"line_start":340,"line_end":340,"column_start":2,"column_end":22}},{"value":"/ assert_eq!(None, w.last());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445411,"byte_end":445442,"line_start":341,"line_end":341,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445444,"byte_end":445451,"line_start":342,"line_end":342,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445453,"byte_end":445462,"line_start":343,"line_end":343,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2614},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446356,"byte_end":446364,"line_start":379,"line_end":379,"column_start":9,"column_end":17},"name":"last_mut","qualname":"<BitSlice<O, T>>::last_mut","value":"pub fn last_mut(&mut Self) -> Option<BitRef<, Mut, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer to the last bit in the slice.","sig":null,"attributes":[{"value":"/ Returns a mutable pointer to the last bit in the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445616,"byte_end":445675,"line_start":351,"line_end":351,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445677,"byte_end":445680,"line_start":352,"line_end":352,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445682,"byte_end":445696,"line_start":353,"line_end":353,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445698,"byte_end":445701,"line_start":354,"line_end":354,"column_start":2,"column_end":5}},{"value":"/ [`slice::last_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.last_mut)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445703,"byte_end":445801,"line_start":355,"line_end":355,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445803,"byte_end":445806,"line_start":356,"line_end":356,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445808,"byte_end":445829,"line_start":357,"line_end":357,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445831,"byte_end":445834,"line_start":358,"line_end":358,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445836,"byte_end":445907,"line_start":359,"line_end":359,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445909,"byte_end":445983,"line_start":360,"line_end":360,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445985,"byte_end":446058,"line_start":361,"line_end":361,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446060,"byte_end":446067,"line_start":362,"line_end":362,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446069,"byte_end":446072,"line_start":363,"line_end":363,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446074,"byte_end":446088,"line_start":364,"line_end":364,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446090,"byte_end":446093,"line_start":365,"line_end":365,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446095,"byte_end":446106,"line_start":366,"line_end":366,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446108,"byte_end":446135,"line_start":367,"line_end":367,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446137,"byte_end":446140,"line_start":368,"line_end":368,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0, 1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446142,"byte_end":446173,"line_start":369,"line_end":369,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446175,"byte_end":446178,"line_start":370,"line_end":370,"column_start":2,"column_end":5}},{"value":"/ if let Some(mut last) = x.last_mut() {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446180,"byte_end":446222,"line_start":371,"line_end":371,"column_start":2,"column_end":44}},{"value":"/   *last = true;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446224,"byte_end":446243,"line_start":372,"line_end":372,"column_start":2,"column_end":21}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446245,"byte_end":446250,"line_start":373,"line_end":373,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![0, 1, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446252,"byte_end":446286,"line_start":374,"line_end":374,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446288,"byte_end":446295,"line_start":375,"line_end":375,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446297,"byte_end":446300,"line_start":376,"line_end":376,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446302,"byte_end":446336,"line_start":377,"line_end":377,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446338,"byte_end":446347,"line_start":378,"line_end":378,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2615},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447233,"byte_end":447236,"line_start":409,"line_end":409,"column_start":9,"column_end":12},"name":"get","qualname":"<BitSlice<O, T>>::get","value":"pub fn get<'a, I>(&'a Self, I) -> Option<I::Immut> where I: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to a bit or subslice depending on the type of index.","sig":null,"attributes":[{"value":"/ Returns a reference to a bit or subslice depending on the type of index.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446511,"byte_end":446587,"line_start":386,"line_end":386,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446589,"byte_end":446592,"line_start":387,"line_end":387,"column_start":2,"column_end":5}},{"value":"/ - If given a position, returns a reference to the bit at that position","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446594,"byte_end":446668,"line_start":388,"line_end":388,"column_start":2,"column_end":76}},{"value":"/   or `None` if out of bounds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446670,"byte_end":446703,"line_start":389,"line_end":389,"column_start":2,"column_end":35}},{"value":"/ - If given a range, returns the subslice corresponding to that range, or","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446705,"byte_end":446781,"line_start":390,"line_end":390,"column_start":2,"column_end":78}},{"value":"/   `None` if out of bounds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446783,"byte_end":446813,"line_start":391,"line_end":391,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446815,"byte_end":446818,"line_start":392,"line_end":392,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446820,"byte_end":446834,"line_start":393,"line_end":393,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446836,"byte_end":446839,"line_start":394,"line_end":394,"column_start":2,"column_end":5}},{"value":"/ [`slice::get`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.get)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446841,"byte_end":446929,"line_start":395,"line_end":395,"column_start":2,"column_end":90}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446931,"byte_end":446934,"line_start":396,"line_end":396,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446936,"byte_end":446950,"line_start":397,"line_end":397,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446952,"byte_end":446955,"line_start":398,"line_end":398,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446957,"byte_end":446968,"line_start":399,"line_end":399,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446970,"byte_end":446997,"line_start":400,"line_end":400,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446999,"byte_end":447002,"line_start":401,"line_end":401,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447004,"byte_end":447031,"line_start":402,"line_end":402,"column_start":2,"column_end":29}},{"value":"/ assert_eq!(Some(&true), v.get(1).as_deref());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447033,"byte_end":447082,"line_start":403,"line_end":403,"column_start":2,"column_end":51}},{"value":"/ assert_eq!(Some(bits![0, 1]), v.get(0 .. 2));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447084,"byte_end":447133,"line_start":404,"line_end":404,"column_start":2,"column_end":51}},{"value":"/ assert_eq!(None, v.get(3));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447135,"byte_end":447166,"line_start":405,"line_end":405,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(None, v.get(0 .. 4));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447168,"byte_end":447204,"line_start":406,"line_end":406,"column_start":2,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447206,"byte_end":447213,"line_start":407,"line_end":407,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447215,"byte_end":447224,"line_start":408,"line_end":408,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2618},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448193,"byte_end":448200,"line_start":444,"line_end":444,"column_start":9,"column_end":16},"name":"get_mut","qualname":"<BitSlice<O, T>>::get_mut","value":"pub fn get_mut<'a, I>(&'a mut Self, I) -> Option<I::Mut> where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to a bit or subslice depending on the type\n of index (see [`.get()`]) or `None` if the index is out of bounds.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to a bit or subslice depending on the type","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447343,"byte_end":447417,"line_start":414,"line_end":414,"column_start":2,"column_end":76}},{"value":"/ of index (see [`.get()`]) or `None` if the index is out of bounds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447419,"byte_end":447489,"line_start":415,"line_end":415,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447491,"byte_end":447494,"line_start":416,"line_end":416,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447496,"byte_end":447510,"line_start":417,"line_end":417,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447512,"byte_end":447515,"line_start":418,"line_end":418,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.get_mut)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447517,"byte_end":447613,"line_start":419,"line_end":419,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447615,"byte_end":447618,"line_start":420,"line_end":420,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447620,"byte_end":447641,"line_start":421,"line_end":421,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447643,"byte_end":447646,"line_start":422,"line_end":422,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447648,"byte_end":447719,"line_start":423,"line_end":423,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447721,"byte_end":447795,"line_start":424,"line_end":424,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447797,"byte_end":447870,"line_start":425,"line_end":425,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447872,"byte_end":447879,"line_start":426,"line_end":426,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447881,"byte_end":447884,"line_start":427,"line_end":427,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447886,"byte_end":447900,"line_start":428,"line_end":428,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447902,"byte_end":447905,"line_start":429,"line_end":429,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447907,"byte_end":447918,"line_start":430,"line_end":430,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447920,"byte_end":447947,"line_start":431,"line_end":431,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447949,"byte_end":447952,"line_start":432,"line_end":432,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447954,"byte_end":447985,"line_start":433,"line_end":433,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447987,"byte_end":447990,"line_start":434,"line_end":434,"column_start":2,"column_end":5}},{"value":"/ if let Some(mut bit) = x.get_mut(1) {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447992,"byte_end":448033,"line_start":435,"line_end":435,"column_start":2,"column_end":43}},{"value":"/   *bit = true;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448035,"byte_end":448053,"line_start":436,"line_end":436,"column_start":2,"column_end":20}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448055,"byte_end":448060,"line_start":437,"line_end":437,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![0, 1, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448062,"byte_end":448096,"line_start":438,"line_end":438,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448098,"byte_end":448105,"line_start":439,"line_end":439,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448107,"byte_end":448110,"line_start":440,"line_end":440,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448112,"byte_end":448146,"line_start":441,"line_end":441,"column_start":2,"column_end":36}},{"value":"/ [`.get()`]: Self::get","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448148,"byte_end":448173,"line_start":442,"line_end":442,"column_start":2,"column_end":27}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448175,"byte_end":448184,"line_start":443,"line_end":443,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2621},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449135,"byte_end":449148,"line_start":475,"line_end":475,"column_start":16,"column_end":29},"name":"get_unchecked","qualname":"<BitSlice<O, T>>::get_unchecked","value":"pub unsafe fn get_unchecked<'a, I>(&'a Self, I) -> I::Immut where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to a bit or subslice, without doing bounds checking.","sig":null,"attributes":[{"value":"/ Returns a reference to a bit or subslice, without doing bounds checking.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448313,"byte_end":448389,"line_start":449,"line_end":449,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448391,"byte_end":448394,"line_start":450,"line_end":450,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! Calling this method","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448396,"byte_end":448472,"line_start":451,"line_end":451,"column_start":2,"column_end":78}},{"value":"/ with an out-of-bounds index is *[undefined behavior]* even if the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448474,"byte_end":448543,"line_start":452,"line_end":452,"column_start":2,"column_end":71}},{"value":"/ resulting reference is not used. For a safe alternative, see [`.get()`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448545,"byte_end":448621,"line_start":453,"line_end":453,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448623,"byte_end":448626,"line_start":454,"line_end":454,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448628,"byte_end":448642,"line_start":455,"line_end":455,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448644,"byte_end":448647,"line_start":456,"line_end":456,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_unchecked`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.get_unchecked)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448649,"byte_end":448757,"line_start":457,"line_end":457,"column_start":2,"column_end":110}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448759,"byte_end":448762,"line_start":458,"line_end":458,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448764,"byte_end":448778,"line_start":459,"line_end":459,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448780,"byte_end":448783,"line_start":460,"line_end":460,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448785,"byte_end":448796,"line_start":461,"line_end":461,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448798,"byte_end":448825,"line_start":462,"line_end":462,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448827,"byte_end":448830,"line_start":463,"line_end":463,"column_start":2,"column_end":5}},{"value":"/ let x = bits![0, 1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448832,"byte_end":448859,"line_start":464,"line_end":464,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448861,"byte_end":448864,"line_start":465,"line_end":465,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448866,"byte_end":448878,"line_start":466,"line_end":466,"column_start":2,"column_end":14}},{"value":"/   assert_eq!(x.get_unchecked(1), &true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448880,"byte_end":448924,"line_start":467,"line_end":467,"column_start":2,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448926,"byte_end":448931,"line_start":468,"line_end":468,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448933,"byte_end":448940,"line_start":469,"line_end":469,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448942,"byte_end":448945,"line_start":470,"line_end":470,"column_start":2,"column_end":5}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448947,"byte_end":449043,"line_start":471,"line_end":471,"column_start":2,"column_end":98}},{"value":"/ [`.get()`]: Self::get","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449045,"byte_end":449070,"line_start":472,"line_end":472,"column_start":2,"column_end":27}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449072,"byte_end":449081,"line_start":473,"line_end":473,"column_start":2,"column_end":11}},{"value":"allow(clippy :: missing_safety_doc)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449083,"byte_end":449119,"line_start":474,"line_end":474,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2624},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450447,"byte_end":450464,"line_start":517,"line_end":517,"column_start":16,"column_end":33},"name":"get_unchecked_mut","qualname":"<BitSlice<O, T>>::get_unchecked_mut","value":"pub unsafe fn get_unchecked_mut<'a, I>(&'a mut Self, I) -> I::Mut where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to a bit or subslice, without doing bounds\n checking.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to a bit or subslice, without doing bounds","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449257,"byte_end":449331,"line_start":480,"line_end":480,"column_start":2,"column_end":76}},{"value":"/ checking.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449333,"byte_end":449346,"line_start":481,"line_end":481,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449348,"byte_end":449351,"line_start":482,"line_end":482,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! Calling this method","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449353,"byte_end":449429,"line_start":483,"line_end":483,"column_start":2,"column_end":78}},{"value":"/ with an out-of-bounds index is *[undefined behavior]* even if the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449431,"byte_end":449500,"line_start":484,"line_end":484,"column_start":2,"column_end":71}},{"value":"/ resulting reference is not used. For a safe alternative, see","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449502,"byte_end":449566,"line_start":485,"line_end":485,"column_start":2,"column_end":66}},{"value":"/ [`.get_mut()`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449568,"byte_end":449587,"line_start":486,"line_end":486,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449589,"byte_end":449592,"line_start":487,"line_end":487,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449594,"byte_end":449608,"line_start":488,"line_end":488,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449610,"byte_end":449613,"line_start":489,"line_end":489,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_unchecked_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.get_unchecked_mut)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449615,"byte_end":449731,"line_start":490,"line_end":490,"column_start":2,"column_end":118}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449733,"byte_end":449736,"line_start":491,"line_end":491,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449738,"byte_end":449759,"line_start":492,"line_end":492,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449761,"byte_end":449764,"line_start":493,"line_end":493,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449766,"byte_end":449837,"line_start":494,"line_end":494,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449839,"byte_end":449913,"line_start":495,"line_end":495,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449915,"byte_end":449988,"line_start":496,"line_end":496,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449990,"byte_end":449997,"line_start":497,"line_end":497,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449999,"byte_end":450002,"line_start":498,"line_end":498,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450004,"byte_end":450018,"line_start":499,"line_end":499,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450020,"byte_end":450023,"line_start":500,"line_end":500,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450025,"byte_end":450036,"line_start":501,"line_end":501,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450038,"byte_end":450065,"line_start":502,"line_end":502,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450067,"byte_end":450070,"line_start":503,"line_end":503,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0; 3];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450072,"byte_end":450100,"line_start":504,"line_end":504,"column_start":2,"column_end":30}},{"value":"/ unsafe {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450102,"byte_end":450114,"line_start":505,"line_end":505,"column_start":2,"column_end":14}},{"value":"/   let mut bit = x.get_unchecked_mut(1);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450116,"byte_end":450159,"line_start":506,"line_end":506,"column_start":2,"column_end":45}},{"value":"/   *bit = true;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450161,"byte_end":450179,"line_start":507,"line_end":507,"column_start":2,"column_end":20}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450181,"byte_end":450186,"line_start":508,"line_end":508,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![0, 1, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450188,"byte_end":450222,"line_start":509,"line_end":509,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450224,"byte_end":450231,"line_start":510,"line_end":510,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450233,"byte_end":450236,"line_start":511,"line_end":511,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450238,"byte_end":450272,"line_start":512,"line_end":512,"column_start":2,"column_end":36}},{"value":"/ [`get_mut`]: Self::get_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450274,"byte_end":450304,"line_start":513,"line_end":513,"column_start":2,"column_end":32}},{"value":"/ [undefined behavior]: ../../reference/behavior-considered-undefined.html","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450306,"byte_end":450382,"line_start":514,"line_end":514,"column_start":2,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450384,"byte_end":450393,"line_start":515,"line_end":515,"column_start":2,"column_end":11}},{"value":"allow(clippy :: missing_safety_doc)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450395,"byte_end":450431,"line_start":516,"line_end":516,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2627},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450717,"byte_end":450723,"line_start":526,"line_end":526,"column_start":9,"column_end":15},"name":"as_ptr","qualname":"<BitSlice<O, T>>::as_ptr","value":"pub fn as_ptr(&Self) -> BitPtr<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450595,"byte_end":450612,"line_start":523,"line_end":523,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450614,"byte_end":450644,"line_start":524,"line_end":524,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_bitptr` to access the region pointer\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450646,"byte_end":450708,"line_start":525,"line_end":525,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2628},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450925,"byte_end":450937,"line_start":534,"line_end":534,"column_start":9,"column_end":21},"name":"as_ptr_range","qualname":"<BitSlice<O, T>>::as_ptr_range","value":"pub fn as_ptr_range(&Self) -> BitPtrRange<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450796,"byte_end":450813,"line_start":531,"line_end":531,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450815,"byte_end":450845,"line_start":532,"line_end":532,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_bitptr_range` to access the region pointers\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450847,"byte_end":450916,"line_start":533,"line_end":533,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2629},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451147,"byte_end":451157,"line_start":542,"line_end":542,"column_start":9,"column_end":19},"name":"as_mut_ptr","qualname":"<BitSlice<O, T>>::as_mut_ptr","value":"pub fn as_mut_ptr(&mut Self) -> BitPtr<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451021,"byte_end":451038,"line_start":539,"line_end":539,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451040,"byte_end":451070,"line_start":540,"line_end":540,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_mut_bitptr` to access the region pointer\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451072,"byte_end":451138,"line_start":541,"line_end":541,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2630},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451369,"byte_end":451385,"line_start":550,"line_end":550,"column_start":9,"column_end":25},"name":"as_mut_ptr_range","qualname":"<BitSlice<O, T>>::as_mut_ptr_range","value":"pub fn as_mut_ptr_range(&mut Self) -> BitPtrRange<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451236,"byte_end":451253,"line_start":547,"line_end":547,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451255,"byte_end":451285,"line_start":548,"line_end":548,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_mut_bitptr_range` to access the region pointers\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451287,"byte_end":451360,"line_start":549,"line_end":549,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2631},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451980,"byte_end":451984,"line_start":579,"line_end":579,"column_start":9,"column_end":13},"name":"swap","qualname":"<BitSlice<O, T>>::swap","value":"pub fn swap(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps two bits in the slice.","sig":null,"attributes":[{"value":"/ Swaps two bits in the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451459,"byte_end":451491,"line_start":554,"line_end":554,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451493,"byte_end":451496,"line_start":555,"line_end":555,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451498,"byte_end":451512,"line_start":556,"line_end":556,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451514,"byte_end":451517,"line_start":557,"line_end":557,"column_start":2,"column_end":5}},{"value":"/ [`slice::swap`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.swap)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451519,"byte_end":451609,"line_start":558,"line_end":558,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451611,"byte_end":451614,"line_start":559,"line_end":559,"column_start":2,"column_end":5}},{"value":"/ # Arguments","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451616,"byte_end":451631,"line_start":560,"line_end":560,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451633,"byte_end":451636,"line_start":561,"line_end":561,"column_start":2,"column_end":5}},{"value":"/ - `a`: The index of the first bit","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451638,"byte_end":451675,"line_start":562,"line_end":562,"column_start":2,"column_end":39}},{"value":"/ - `b`: The index of the second bit","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451677,"byte_end":451715,"line_start":563,"line_end":563,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451717,"byte_end":451720,"line_start":564,"line_end":564,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451722,"byte_end":451734,"line_start":565,"line_end":565,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451736,"byte_end":451739,"line_start":566,"line_end":566,"column_start":2,"column_end":5}},{"value":"/ Panics if `a` or `b` are out of bounds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451741,"byte_end":451784,"line_start":567,"line_end":567,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451786,"byte_end":451789,"line_start":568,"line_end":568,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451791,"byte_end":451805,"line_start":569,"line_end":569,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451807,"byte_end":451810,"line_start":570,"line_end":570,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451812,"byte_end":451823,"line_start":571,"line_end":571,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451825,"byte_end":451852,"line_start":572,"line_end":572,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451854,"byte_end":451857,"line_start":573,"line_end":573,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 1, 1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451859,"byte_end":451893,"line_start":574,"line_end":574,"column_start":2,"column_end":36}},{"value":"/ v.swap(1, 3);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451895,"byte_end":451912,"line_start":575,"line_end":575,"column_start":2,"column_end":19}},{"value":"/ assert_eq!(v, bits![0, 0, 1, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451914,"byte_end":451951,"line_start":576,"line_end":576,"column_start":2,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451953,"byte_end":451960,"line_start":577,"line_end":577,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451962,"byte_end":451971,"line_start":578,"line_end":578,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2632},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452491,"byte_end":452498,"line_start":603,"line_end":603,"column_start":9,"column_end":16},"name":"reverse","qualname":"<BitSlice<O, T>>::reverse","value":"pub fn reverse(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverses the order of bits in the slice, in place.","sig":null,"attributes":[{"value":"/ Reverses the order of bits in the slice, in place.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452124,"byte_end":452178,"line_start":587,"line_end":587,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452180,"byte_end":452183,"line_start":588,"line_end":588,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452185,"byte_end":452199,"line_start":589,"line_end":589,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452201,"byte_end":452204,"line_start":590,"line_end":590,"column_start":2,"column_end":5}},{"value":"/ [`slice::reverse`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.reverse)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452206,"byte_end":452302,"line_start":591,"line_end":591,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452304,"byte_end":452307,"line_start":592,"line_end":592,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452309,"byte_end":452323,"line_start":593,"line_end":593,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452325,"byte_end":452328,"line_start":594,"line_end":594,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452330,"byte_end":452341,"line_start":595,"line_end":595,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452343,"byte_end":452370,"line_start":596,"line_end":596,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452372,"byte_end":452375,"line_start":597,"line_end":597,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 1, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452377,"byte_end":452408,"line_start":598,"line_end":598,"column_start":2,"column_end":33}},{"value":"/ v.reverse();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452410,"byte_end":452426,"line_start":599,"line_end":599,"column_start":2,"column_end":18}},{"value":"/ assert_eq!(v, bits![1, 1, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452428,"byte_end":452462,"line_start":600,"line_end":600,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452464,"byte_end":452471,"line_start":601,"line_end":601,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452473,"byte_end":452482,"line_start":602,"line_end":602,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2633},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454830,"byte_end":454834,"line_start":672,"line_end":672,"column_start":9,"column_end":13},"name":"iter","qualname":"<BitSlice<O, T>>::iter","value":"pub fn iter(&Self) -> Iter<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453590,"byte_end":453629,"line_start":635,"line_end":635,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453631,"byte_end":453634,"line_start":636,"line_end":636,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453636,"byte_end":453650,"line_start":637,"line_end":637,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453652,"byte_end":453655,"line_start":638,"line_end":638,"column_start":2,"column_end":5}},{"value":"/ [`slice::iter`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.iter)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453657,"byte_end":453747,"line_start":639,"line_end":639,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453749,"byte_end":453752,"line_start":640,"line_end":640,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453754,"byte_end":453775,"line_start":641,"line_end":641,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453777,"byte_end":453780,"line_start":642,"line_end":642,"column_start":2,"column_end":5}},{"value":"/ This iterator yields [`BitRef`] proxy references, rather than `&bool`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453782,"byte_end":453855,"line_start":643,"line_end":643,"column_start":2,"column_end":75}},{"value":"/ ordinary references. It does so in order to promote consistency in the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453857,"byte_end":453931,"line_start":644,"line_end":644,"column_start":2,"column_end":76}},{"value":"/ crate, and make switching between immutable and mutable single-bit","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453933,"byte_end":454003,"line_start":645,"line_end":645,"column_start":2,"column_end":72}},{"value":"/ access easier.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454005,"byte_end":454023,"line_start":646,"line_end":646,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454025,"byte_end":454028,"line_start":647,"line_end":647,"column_start":2,"column_end":5}},{"value":"/ The produced iterator has a [`by_ref`] adapter that yields `&bool`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454030,"byte_end":454100,"line_start":648,"line_end":648,"column_start":2,"column_end":72}},{"value":"/ references, and a [`by_val`] adapter that yields `bool` values. Use","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454102,"byte_end":454173,"line_start":649,"line_end":649,"column_start":2,"column_end":73}},{"value":"/ these methods to fit this iterator into APIs that expect ordinary `bool`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454175,"byte_end":454251,"line_start":650,"line_end":650,"column_start":2,"column_end":78}},{"value":"/ inputs.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454253,"byte_end":454264,"line_start":651,"line_end":651,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454266,"byte_end":454269,"line_start":652,"line_end":652,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454271,"byte_end":454285,"line_start":653,"line_end":653,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454287,"byte_end":454290,"line_start":654,"line_end":654,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454292,"byte_end":454303,"line_start":655,"line_end":655,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454305,"byte_end":454332,"line_start":656,"line_end":656,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454334,"byte_end":454337,"line_start":657,"line_end":657,"column_start":2,"column_end":5}},{"value":"/ let x = bits![0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454339,"byte_end":454366,"line_start":658,"line_end":658,"column_start":2,"column_end":29}},{"value":"/ let mut iterator = x.iter();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454368,"byte_end":454400,"line_start":659,"line_end":659,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454402,"byte_end":454405,"line_start":660,"line_end":660,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iterator.next().as_deref(), Some(&false));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454407,"byte_end":454464,"line_start":661,"line_end":661,"column_start":2,"column_end":59}},{"value":"/ assert_eq!(iterator.next().as_deref(), Some(&false));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454466,"byte_end":454523,"line_start":662,"line_end":662,"column_start":2,"column_end":59}},{"value":"/ assert_eq!(iterator.next().as_deref(), Some(&true));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454525,"byte_end":454581,"line_start":663,"line_end":663,"column_start":2,"column_end":58}},{"value":"/ assert_eq!(iterator.next().as_deref(), None);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454583,"byte_end":454632,"line_start":664,"line_end":664,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454634,"byte_end":454641,"line_start":665,"line_end":665,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454643,"byte_end":454646,"line_start":666,"line_end":666,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454648,"byte_end":454682,"line_start":667,"line_end":667,"column_start":2,"column_end":36}},{"value":"/ [`by_ref`]: crate::slice::Iter::by_ref","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454684,"byte_end":454726,"line_start":668,"line_end":668,"column_start":2,"column_end":44}},{"value":"/ [`by_val`]: crate::slice::Iter::by_val","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454728,"byte_end":454770,"line_start":669,"line_end":669,"column_start":2,"column_end":44}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454772,"byte_end":454789,"line_start":670,"line_end":670,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454791,"byte_end":454821,"line_start":671,"line_end":671,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2634},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456068,"byte_end":456076,"line_start":712,"line_end":712,"column_start":9,"column_end":17},"name":"iter_mut","qualname":"<BitSlice<O, T>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows modifying each bit.","sig":null,"attributes":[{"value":"/ Returns an iterator that allows modifying each bit.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454881,"byte_end":454936,"line_start":676,"line_end":676,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454938,"byte_end":454941,"line_start":677,"line_end":677,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454943,"byte_end":454957,"line_start":678,"line_end":678,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454959,"byte_end":454962,"line_start":679,"line_end":679,"column_start":2,"column_end":5}},{"value":"/ [`slice::iter_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.iter_mut)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454964,"byte_end":455062,"line_start":680,"line_end":680,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455064,"byte_end":455067,"line_start":681,"line_end":681,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455069,"byte_end":455090,"line_start":682,"line_end":682,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455092,"byte_end":455095,"line_start":683,"line_end":683,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455097,"byte_end":455168,"line_start":684,"line_end":684,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455170,"byte_end":455244,"line_start":685,"line_end":685,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455246,"byte_end":455319,"line_start":686,"line_end":686,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455321,"byte_end":455328,"line_start":687,"line_end":687,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455330,"byte_end":455333,"line_start":688,"line_end":688,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455335,"byte_end":455408,"line_start":689,"line_end":689,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455410,"byte_end":455480,"line_start":690,"line_end":690,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455482,"byte_end":455551,"line_start":691,"line_end":691,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455553,"byte_end":455629,"line_start":692,"line_end":692,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455631,"byte_end":455686,"line_start":693,"line_end":693,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455688,"byte_end":455691,"line_start":694,"line_end":694,"column_start":2,"column_end":5}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455693,"byte_end":455696,"line_start":695,"line_end":695,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455698,"byte_end":455712,"line_start":696,"line_end":696,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455714,"byte_end":455717,"line_start":697,"line_end":697,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455719,"byte_end":455730,"line_start":698,"line_end":698,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455732,"byte_end":455759,"line_start":699,"line_end":699,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455761,"byte_end":455764,"line_start":700,"line_end":700,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455766,"byte_end":455797,"line_start":701,"line_end":701,"column_start":2,"column_end":33}},{"value":"/ for mut bit in x.iter_mut() {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455799,"byte_end":455832,"line_start":702,"line_end":702,"column_start":2,"column_end":35}},{"value":"/   *bit = !*bit;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455834,"byte_end":455853,"line_start":703,"line_end":703,"column_start":2,"column_end":21}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455855,"byte_end":455860,"line_start":704,"line_end":704,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![1, 1, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455862,"byte_end":455896,"line_start":705,"line_end":705,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455898,"byte_end":455905,"line_start":706,"line_end":706,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455907,"byte_end":455910,"line_start":707,"line_end":707,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455912,"byte_end":455946,"line_start":708,"line_end":708,"column_start":2,"column_end":36}},{"value":"/ [`.remove_alias()`]: crate::slice::IterMut::remove_alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455948,"byte_end":456008,"line_start":709,"line_end":709,"column_start":2,"column_end":62}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456010,"byte_end":456027,"line_start":710,"line_end":710,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456029,"byte_end":456059,"line_start":711,"line_end":711,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2635},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457060,"byte_end":457067,"line_start":751,"line_end":751,"column_start":9,"column_end":16},"name":"windows","qualname":"<BitSlice<O, T>>::windows","value":"pub fn windows(&Self, usize) -> Windows<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all contiguous windows of length `size`. The\n windows overlap. If the slice is shorter than `size`, the iterator\n returns no values.","sig":null,"attributes":[{"value":"/ Returns an iterator over all contiguous windows of length `size`. The","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456133,"byte_end":456206,"line_start":716,"line_end":716,"column_start":2,"column_end":75}},{"value":"/ windows overlap. If the slice is shorter than `size`, the iterator","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456208,"byte_end":456278,"line_start":717,"line_end":717,"column_start":2,"column_end":72}},{"value":"/ returns no values.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456280,"byte_end":456302,"line_start":718,"line_end":718,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456304,"byte_end":456307,"line_start":719,"line_end":719,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456309,"byte_end":456323,"line_start":720,"line_end":720,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456325,"byte_end":456328,"line_start":721,"line_end":721,"column_start":2,"column_end":5}},{"value":"/ [`slice::windows`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.windows)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456330,"byte_end":456426,"line_start":722,"line_end":722,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456428,"byte_end":456431,"line_start":723,"line_end":723,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456433,"byte_end":456445,"line_start":724,"line_end":724,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456447,"byte_end":456450,"line_start":725,"line_end":725,"column_start":2,"column_end":5}},{"value":"/ Panics if `size` is 0.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456452,"byte_end":456478,"line_start":726,"line_end":726,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456480,"byte_end":456483,"line_start":727,"line_end":727,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456485,"byte_end":456499,"line_start":728,"line_end":728,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456501,"byte_end":456504,"line_start":729,"line_end":729,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456506,"byte_end":456517,"line_start":730,"line_end":730,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456519,"byte_end":456546,"line_start":731,"line_end":731,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456548,"byte_end":456551,"line_start":732,"line_end":732,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 0, 1, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456553,"byte_end":456587,"line_start":733,"line_end":733,"column_start":2,"column_end":36}},{"value":"/ let mut iter = slice.windows(2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456589,"byte_end":456625,"line_start":734,"line_end":734,"column_start":2,"column_end":38}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0; 2]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456627,"byte_end":456677,"line_start":735,"line_end":735,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456679,"byte_end":456729,"line_start":736,"line_end":736,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1; 2]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456731,"byte_end":456781,"line_start":737,"line_end":737,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456783,"byte_end":456818,"line_start":738,"line_end":738,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456820,"byte_end":456827,"line_start":739,"line_end":739,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456829,"byte_end":456832,"line_start":740,"line_end":740,"column_start":2,"column_end":5}},{"value":"/ If the slice is shorter than `size`:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456834,"byte_end":456874,"line_start":741,"line_end":741,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456876,"byte_end":456879,"line_start":742,"line_end":742,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456881,"byte_end":456892,"line_start":743,"line_end":743,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456894,"byte_end":456921,"line_start":744,"line_end":744,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456923,"byte_end":456926,"line_start":745,"line_end":745,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0; 3];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456928,"byte_end":456956,"line_start":746,"line_end":746,"column_start":2,"column_end":30}},{"value":"/ let mut iter = slice.windows(4);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456958,"byte_end":456994,"line_start":747,"line_end":747,"column_start":2,"column_end":38}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456996,"byte_end":457031,"line_start":748,"line_end":748,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457033,"byte_end":457040,"line_start":749,"line_end":749,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457042,"byte_end":457051,"line_start":750,"line_end":750,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2636},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458323,"byte_end":458329,"line_start":791,"line_end":791,"column_start":9,"column_end":15},"name":"chunks","qualname":"<BitSlice<O, T>>::chunks","value":"pub fn chunks(&Self, usize) -> Chunks<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457190,"byte_end":457260,"line_start":756,"line_end":756,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457262,"byte_end":457305,"line_start":757,"line_end":757,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457307,"byte_end":457310,"line_start":758,"line_end":758,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457312,"byte_end":457382,"line_start":759,"line_end":759,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last chunk will not have length","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457384,"byte_end":457460,"line_start":760,"line_end":760,"column_start":2,"column_end":78}},{"value":"/ `chunk_size`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457462,"byte_end":457479,"line_start":761,"line_end":761,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457481,"byte_end":457484,"line_start":762,"line_end":762,"column_start":2,"column_end":5}},{"value":"/ See [`.chunks_exact()`] for a variant of this iterator that returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457486,"byte_end":457557,"line_start":763,"line_end":763,"column_start":2,"column_end":73}},{"value":"/ chunks of always exactly `chunk_size` bits, and [`.rchunks()`] for the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457559,"byte_end":457633,"line_start":764,"line_end":764,"column_start":2,"column_end":76}},{"value":"/ same iterator but starting at the end of the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457635,"byte_end":457690,"line_start":765,"line_end":765,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457692,"byte_end":457695,"line_start":766,"line_end":766,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457697,"byte_end":457711,"line_start":767,"line_end":767,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457713,"byte_end":457716,"line_start":768,"line_end":768,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.chunks)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457718,"byte_end":457812,"line_start":769,"line_end":769,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457814,"byte_end":457817,"line_start":770,"line_end":770,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457819,"byte_end":457831,"line_start":771,"line_end":771,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457833,"byte_end":457836,"line_start":772,"line_end":772,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457838,"byte_end":457870,"line_start":773,"line_end":773,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457872,"byte_end":457875,"line_start":774,"line_end":774,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457877,"byte_end":457891,"line_start":775,"line_end":775,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457893,"byte_end":457896,"line_start":776,"line_end":776,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457898,"byte_end":457909,"line_start":777,"line_end":777,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457911,"byte_end":457938,"line_start":778,"line_end":778,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457940,"byte_end":457943,"line_start":779,"line_end":779,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 1, 0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457945,"byte_end":457982,"line_start":780,"line_end":780,"column_start":2,"column_end":39}},{"value":"/ let mut iter = slice.chunks(2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457984,"byte_end":458019,"line_start":781,"line_end":781,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458021,"byte_end":458071,"line_start":782,"line_end":782,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458073,"byte_end":458123,"line_start":783,"line_end":783,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458125,"byte_end":458172,"line_start":784,"line_end":784,"column_start":2,"column_end":49}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458174,"byte_end":458209,"line_start":785,"line_end":785,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458211,"byte_end":458218,"line_start":786,"line_end":786,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458220,"byte_end":458223,"line_start":787,"line_end":787,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_exact()`]: Self::chunks_exact","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458225,"byte_end":458268,"line_start":788,"line_end":788,"column_start":2,"column_end":45}},{"value":"/ [`.rchunks()`]: Self::rchunks","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458270,"byte_end":458303,"line_start":789,"line_end":789,"column_start":2,"column_end":35}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458305,"byte_end":458314,"line_start":790,"line_end":790,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2637},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460070,"byte_end":460080,"line_start":844,"line_end":844,"column_start":9,"column_end":19},"name":"chunks_mut","qualname":"<BitSlice<O, T>>::chunks_mut","value":"pub fn chunks_mut(&mut Self, usize) -> ChunksMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458467,"byte_end":458537,"line_start":796,"line_end":796,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458539,"byte_end":458582,"line_start":797,"line_end":797,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458584,"byte_end":458587,"line_start":798,"line_end":798,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458589,"byte_end":458664,"line_start":799,"line_end":799,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last chunk will not have","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458666,"byte_end":458739,"line_start":800,"line_end":800,"column_start":2,"column_end":75}},{"value":"/ length `chunk_size`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458741,"byte_end":458765,"line_start":801,"line_end":801,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458767,"byte_end":458770,"line_start":802,"line_end":802,"column_start":2,"column_end":5}},{"value":"/ See [`.chunks_exact_mut()`] for a variant of this iterator that returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458772,"byte_end":458847,"line_start":803,"line_end":803,"column_start":2,"column_end":77}},{"value":"/ chunks of always exactly `chunk_size` bits, and [`.rchunks_mut()`] for","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458849,"byte_end":458923,"line_start":804,"line_end":804,"column_start":2,"column_end":76}},{"value":"/ the same iterator but starting at the end of the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458925,"byte_end":458984,"line_start":805,"line_end":805,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458986,"byte_end":458989,"line_start":806,"line_end":806,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458991,"byte_end":459005,"line_start":807,"line_end":807,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459007,"byte_end":459010,"line_start":808,"line_end":808,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.chunks_mut)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459012,"byte_end":459114,"line_start":809,"line_end":809,"column_start":2,"column_end":104}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459116,"byte_end":459119,"line_start":810,"line_end":810,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459121,"byte_end":459142,"line_start":811,"line_end":811,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459144,"byte_end":459147,"line_start":812,"line_end":812,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459149,"byte_end":459222,"line_start":813,"line_end":813,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459224,"byte_end":459294,"line_start":814,"line_end":814,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459296,"byte_end":459365,"line_start":815,"line_end":815,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459367,"byte_end":459443,"line_start":816,"line_end":816,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459445,"byte_end":459500,"line_start":817,"line_end":817,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459502,"byte_end":459505,"line_start":818,"line_end":818,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459507,"byte_end":459519,"line_start":819,"line_end":819,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459521,"byte_end":459524,"line_start":820,"line_end":820,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459526,"byte_end":459558,"line_start":821,"line_end":821,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459560,"byte_end":459563,"line_start":822,"line_end":822,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459565,"byte_end":459579,"line_start":823,"line_end":823,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459581,"byte_end":459584,"line_start":824,"line_end":824,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459586,"byte_end":459597,"line_start":825,"line_end":825,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459599,"byte_end":459626,"line_start":826,"line_end":826,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459628,"byte_end":459631,"line_start":827,"line_end":827,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0; 5];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459633,"byte_end":459661,"line_start":828,"line_end":828,"column_start":2,"column_end":30}},{"value":"/ let mut count = 1;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459663,"byte_end":459685,"line_start":829,"line_end":829,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459687,"byte_end":459690,"line_start":830,"line_end":830,"column_start":2,"column_end":5}},{"value":"/ for chunk in v.chunks_mut(2) {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459692,"byte_end":459726,"line_start":831,"line_end":831,"column_start":2,"column_end":36}},{"value":"/   for mut bit in chunk.iter_mut() {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459728,"byte_end":459767,"line_start":832,"line_end":832,"column_start":2,"column_end":41}},{"value":"/     *bit = count % 2 == 0;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459769,"byte_end":459799,"line_start":833,"line_end":833,"column_start":2,"column_end":32}},{"value":"/   }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459801,"byte_end":459808,"line_start":834,"line_end":834,"column_start":2,"column_end":9}},{"value":"/   count += 1;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459810,"byte_end":459827,"line_start":835,"line_end":835,"column_start":2,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459829,"byte_end":459834,"line_start":836,"line_end":836,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![0, 0, 1, 1, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459836,"byte_end":459876,"line_start":837,"line_end":837,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459878,"byte_end":459885,"line_start":838,"line_end":838,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459887,"byte_end":459890,"line_start":839,"line_end":839,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_exact_mut()`]: Self::chunks_exact_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459892,"byte_end":459943,"line_start":840,"line_end":840,"column_start":2,"column_end":53}},{"value":"/ [`.rchunks_mut()`]: Self::rchunks_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459945,"byte_end":459986,"line_start":841,"line_end":841,"column_start":2,"column_end":43}},{"value":"/ [`.remove_alias()`]: crate::slice::ChunksMut::remove_alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459988,"byte_end":460050,"line_start":842,"line_end":842,"column_start":2,"column_end":64}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460052,"byte_end":460061,"line_start":843,"line_end":843,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2638},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461677,"byte_end":461689,"line_start":890,"line_end":890,"column_start":9,"column_end":21},"name":"chunks_exact","qualname":"<BitSlice<O, T>>::chunks_exact","value":"pub fn chunks_exact(&Self, usize) -> ChunksExact<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460228,"byte_end":460298,"line_start":849,"line_end":849,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460300,"byte_end":460343,"line_start":850,"line_end":850,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460345,"byte_end":460348,"line_start":851,"line_end":851,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460350,"byte_end":460420,"line_start":852,"line_end":852,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last up to `chunk_size-1` bits","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460422,"byte_end":460497,"line_start":853,"line_end":853,"column_start":2,"column_end":77}},{"value":"/ will be omitted and can be retrieved from the [`.remainder()`] method of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460499,"byte_end":460575,"line_start":854,"line_end":854,"column_start":2,"column_end":78}},{"value":"/ the iterator.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460577,"byte_end":460594,"line_start":855,"line_end":855,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460596,"byte_end":460599,"line_start":856,"line_end":856,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler may be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460601,"byte_end":460676,"line_start":857,"line_end":857,"column_start":2,"column_end":77}},{"value":"/ able to optimize the resulting code better than in the case of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460678,"byte_end":460744,"line_start":858,"line_end":858,"column_start":2,"column_end":68}},{"value":"/ [`.chunks()`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460746,"byte_end":460764,"line_start":859,"line_end":859,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460766,"byte_end":460769,"line_start":860,"line_end":860,"column_start":2,"column_end":5}},{"value":"/ See [`.chunks()`] for a variant of this iterator that also returns the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460771,"byte_end":460845,"line_start":861,"line_end":861,"column_start":2,"column_end":76}},{"value":"/ remainder as a smaller chunk, and [`.rchunks_exact()`] for the same","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460847,"byte_end":460918,"line_start":862,"line_end":862,"column_start":2,"column_end":73}},{"value":"/ iterator but starting at the end of the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460920,"byte_end":460970,"line_start":863,"line_end":863,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460972,"byte_end":460975,"line_start":864,"line_end":864,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460977,"byte_end":460991,"line_start":865,"line_end":865,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460993,"byte_end":460996,"line_start":866,"line_end":866,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_exact`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.chunks_exact)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460998,"byte_end":461104,"line_start":867,"line_end":867,"column_start":2,"column_end":108}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461106,"byte_end":461109,"line_start":868,"line_end":868,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461111,"byte_end":461123,"line_start":869,"line_end":869,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461125,"byte_end":461128,"line_start":870,"line_end":870,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461130,"byte_end":461162,"line_start":871,"line_end":871,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461164,"byte_end":461167,"line_start":872,"line_end":872,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461169,"byte_end":461183,"line_start":873,"line_end":873,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461185,"byte_end":461188,"line_start":874,"line_end":874,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461190,"byte_end":461201,"line_start":875,"line_end":875,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461203,"byte_end":461230,"line_start":876,"line_end":876,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461232,"byte_end":461235,"line_start":877,"line_end":877,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 1, 1, 0, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461237,"byte_end":461274,"line_start":878,"line_end":878,"column_start":2,"column_end":39}},{"value":"/ let mut iter = slice.chunks_exact(2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461276,"byte_end":461317,"line_start":879,"line_end":879,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461319,"byte_end":461369,"line_start":880,"line_end":880,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461371,"byte_end":461421,"line_start":881,"line_end":881,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461423,"byte_end":461458,"line_start":882,"line_end":882,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(iter.remainder(), bits![0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461460,"byte_end":461503,"line_start":883,"line_end":883,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461505,"byte_end":461512,"line_start":884,"line_end":884,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461514,"byte_end":461517,"line_start":885,"line_end":885,"column_start":2,"column_end":5}},{"value":"/ [`.chunks()`]: Self::chunks","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461519,"byte_end":461550,"line_start":886,"line_end":886,"column_start":2,"column_end":33}},{"value":"/ [`.rchunks_exact()`]: Self::rchunks_exact","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461552,"byte_end":461597,"line_start":887,"line_end":887,"column_start":2,"column_end":47}},{"value":"/ [`.remainder()`]: crate::slice::ChunksExact::remainder","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461599,"byte_end":461657,"line_start":888,"line_end":888,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461659,"byte_end":461668,"line_start":889,"line_end":889,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2639},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463690,"byte_end":463706,"line_start":945,"line_end":945,"column_start":9,"column_end":25},"name":"chunks_exact_mut","qualname":"<BitSlice<O, T>>::chunks_exact_mut","value":"pub fn chunks_exact_mut(&mut Self, usize) -> ChunksExactMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461837,"byte_end":461907,"line_start":895,"line_end":895,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461909,"byte_end":461952,"line_start":896,"line_end":896,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461954,"byte_end":461957,"line_start":897,"line_end":897,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461959,"byte_end":462034,"line_start":898,"line_end":898,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last up to `chunk_size-1`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462036,"byte_end":462110,"line_start":899,"line_end":899,"column_start":2,"column_end":76}},{"value":"/ bits will be omitted and can be retrieved from the [`.into_remainder()`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462112,"byte_end":462188,"line_start":900,"line_end":900,"column_start":2,"column_end":78}},{"value":"/ method of the iterator.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462190,"byte_end":462217,"line_start":901,"line_end":901,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462219,"byte_end":462222,"line_start":902,"line_end":902,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler may be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462224,"byte_end":462299,"line_start":903,"line_end":903,"column_start":2,"column_end":77}},{"value":"/ able to optimize the resulting code better than in the case of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462301,"byte_end":462367,"line_start":904,"line_end":904,"column_start":2,"column_end":68}},{"value":"/ [`.chunks_mut()`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462369,"byte_end":462391,"line_start":905,"line_end":905,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462393,"byte_end":462396,"line_start":906,"line_end":906,"column_start":2,"column_end":5}},{"value":"/ See [`.chunks_mut()`] for a variant of this iterator that also returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462398,"byte_end":462472,"line_start":907,"line_end":907,"column_start":2,"column_end":76}},{"value":"/ the remainder as a smaller chunk, and [`.rchunks_exact_mut()`] for the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462474,"byte_end":462548,"line_start":908,"line_end":908,"column_start":2,"column_end":76}},{"value":"/ same iterator but starting at the end of the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462550,"byte_end":462605,"line_start":909,"line_end":909,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462607,"byte_end":462610,"line_start":910,"line_end":910,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462612,"byte_end":462626,"line_start":911,"line_end":911,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462628,"byte_end":462631,"line_start":912,"line_end":912,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_exact_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.chunks_exact_mut)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462633,"byte_end":462747,"line_start":913,"line_end":913,"column_start":2,"column_end":116}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462749,"byte_end":462752,"line_start":914,"line_end":914,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462754,"byte_end":462775,"line_start":915,"line_end":915,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462777,"byte_end":462780,"line_start":916,"line_end":916,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462782,"byte_end":462855,"line_start":917,"line_end":917,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462857,"byte_end":462927,"line_start":918,"line_end":918,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462929,"byte_end":462998,"line_start":919,"line_end":919,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463000,"byte_end":463076,"line_start":920,"line_end":920,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463078,"byte_end":463133,"line_start":921,"line_end":921,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463135,"byte_end":463138,"line_start":922,"line_end":922,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463140,"byte_end":463152,"line_start":923,"line_end":923,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463154,"byte_end":463157,"line_start":924,"line_end":924,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463159,"byte_end":463191,"line_start":925,"line_end":925,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463193,"byte_end":463196,"line_start":926,"line_end":926,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463198,"byte_end":463212,"line_start":927,"line_end":927,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463214,"byte_end":463217,"line_start":928,"line_end":928,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463219,"byte_end":463230,"line_start":929,"line_end":929,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463232,"byte_end":463259,"line_start":930,"line_end":930,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463261,"byte_end":463264,"line_start":931,"line_end":931,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0; 5];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463266,"byte_end":463294,"line_start":932,"line_end":932,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463296,"byte_end":463299,"line_start":933,"line_end":933,"column_start":2,"column_end":5}},{"value":"/ for chunk in v.chunks_exact_mut(2) {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463301,"byte_end":463341,"line_start":934,"line_end":934,"column_start":2,"column_end":42}},{"value":"/   chunk.set_all(true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463343,"byte_end":463369,"line_start":935,"line_end":935,"column_start":2,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463371,"byte_end":463376,"line_start":936,"line_end":936,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![1, 1, 1, 1, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463378,"byte_end":463418,"line_start":937,"line_end":937,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463420,"byte_end":463427,"line_start":938,"line_end":938,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463429,"byte_end":463432,"line_start":939,"line_end":939,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_mut()`]: Self::chunks_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463434,"byte_end":463473,"line_start":940,"line_end":940,"column_start":2,"column_end":41}},{"value":"/ [`.into_remainder()`]: crate::slice::ChunksExactMut::into_remainder","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463475,"byte_end":463546,"line_start":941,"line_end":941,"column_start":2,"column_end":73}},{"value":"/ [`.rchunks_exact_mut()`]: Self::rchunks_exact_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463548,"byte_end":463601,"line_start":942,"line_end":942,"column_start":2,"column_end":55}},{"value":"/ [`.remove_alias()`]: crate::slice::ChunksExactMut::remove_alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463603,"byte_end":463670,"line_start":943,"line_end":943,"column_start":2,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463672,"byte_end":463681,"line_start":944,"line_end":944,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2640},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465008,"byte_end":465015,"line_start":988,"line_end":988,"column_start":9,"column_end":16},"name":"rchunks","qualname":"<BitSlice<O, T>>::rchunks","value":"pub fn rchunks(&Self, usize) -> RChunks<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463872,"byte_end":463942,"line_start":953,"line_end":953,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463944,"byte_end":463981,"line_start":954,"line_end":954,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463983,"byte_end":463986,"line_start":955,"line_end":955,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463988,"byte_end":464058,"line_start":956,"line_end":956,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last chunk will not have length","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464060,"byte_end":464136,"line_start":957,"line_end":957,"column_start":2,"column_end":78}},{"value":"/ `chunk_size`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464138,"byte_end":464155,"line_start":958,"line_end":958,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464157,"byte_end":464160,"line_start":959,"line_end":959,"column_start":2,"column_end":5}},{"value":"/ See [`.rchunks_exact()`] for a variant of this iterator that returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464162,"byte_end":464234,"line_start":960,"line_end":960,"column_start":2,"column_end":74}},{"value":"/ chunks of always exactly `chunk_size` bits, and [`.chunks()`] for the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464236,"byte_end":464309,"line_start":961,"line_end":961,"column_start":2,"column_end":75}},{"value":"/ same iterator but starting at the beginning of the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464311,"byte_end":464372,"line_start":962,"line_end":962,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464374,"byte_end":464377,"line_start":963,"line_end":963,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464379,"byte_end":464393,"line_start":964,"line_end":964,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464395,"byte_end":464398,"line_start":965,"line_end":965,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rchunks)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464400,"byte_end":464496,"line_start":966,"line_end":966,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464498,"byte_end":464501,"line_start":967,"line_end":967,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464503,"byte_end":464515,"line_start":968,"line_end":968,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464517,"byte_end":464520,"line_start":969,"line_end":969,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464522,"byte_end":464554,"line_start":970,"line_end":970,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464556,"byte_end":464559,"line_start":971,"line_end":971,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464561,"byte_end":464575,"line_start":972,"line_end":972,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464577,"byte_end":464580,"line_start":973,"line_end":973,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464582,"byte_end":464593,"line_start":974,"line_end":974,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464595,"byte_end":464622,"line_start":975,"line_end":975,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464624,"byte_end":464627,"line_start":976,"line_end":976,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 1, 0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464629,"byte_end":464666,"line_start":977,"line_end":977,"column_start":2,"column_end":39}},{"value":"/ let mut iter = slice.rchunks(2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464668,"byte_end":464704,"line_start":978,"line_end":978,"column_start":2,"column_end":38}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464706,"byte_end":464756,"line_start":979,"line_end":979,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464758,"byte_end":464808,"line_start":980,"line_end":980,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464810,"byte_end":464857,"line_start":981,"line_end":981,"column_start":2,"column_end":49}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464859,"byte_end":464894,"line_start":982,"line_end":982,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464896,"byte_end":464903,"line_start":983,"line_end":983,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464905,"byte_end":464908,"line_start":984,"line_end":984,"column_start":2,"column_end":5}},{"value":"/ [`.chunks()`]: Self::chunks","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464910,"byte_end":464941,"line_start":985,"line_end":985,"column_start":2,"column_end":33}},{"value":"/ [`.rchunks_exact()`]: Self::rchunks_exact","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464943,"byte_end":464988,"line_start":986,"line_end":986,"column_start":2,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464990,"byte_end":464999,"line_start":987,"line_end":987,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2641},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466762,"byte_end":466773,"line_start":1041,"line_end":1041,"column_start":9,"column_end":20},"name":"rchunks_mut","qualname":"<BitSlice<O, T>>::rchunks_mut","value":"pub fn rchunks_mut(&mut Self, usize) -> RChunksMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465155,"byte_end":465225,"line_start":993,"line_end":993,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465227,"byte_end":465264,"line_start":994,"line_end":994,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465266,"byte_end":465269,"line_start":995,"line_end":995,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465271,"byte_end":465346,"line_start":996,"line_end":996,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last chunk will not have","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465348,"byte_end":465421,"line_start":997,"line_end":997,"column_start":2,"column_end":75}},{"value":"/ length `chunk_size`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465423,"byte_end":465447,"line_start":998,"line_end":998,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465449,"byte_end":465452,"line_start":999,"line_end":999,"column_start":2,"column_end":5}},{"value":"/ See [`.rchunks_exact_mut()`] for a variant of this iterator that returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465454,"byte_end":465530,"line_start":1000,"line_end":1000,"column_start":2,"column_end":78}},{"value":"/ chunks of always exactly `chunk_size` bits, and [`.chunks_mut()`] for","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465532,"byte_end":465605,"line_start":1001,"line_end":1001,"column_start":2,"column_end":75}},{"value":"/ the same iterator but starting at the beginning of the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465607,"byte_end":465672,"line_start":1002,"line_end":1002,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465674,"byte_end":465677,"line_start":1003,"line_end":1003,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465679,"byte_end":465693,"line_start":1004,"line_end":1004,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465695,"byte_end":465698,"line_start":1005,"line_end":1005,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rchunks_mut)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465700,"byte_end":465804,"line_start":1006,"line_end":1006,"column_start":2,"column_end":106}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465806,"byte_end":465809,"line_start":1007,"line_end":1007,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465811,"byte_end":465832,"line_start":1008,"line_end":1008,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465834,"byte_end":465837,"line_start":1009,"line_end":1009,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465839,"byte_end":465912,"line_start":1010,"line_end":1010,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465914,"byte_end":465984,"line_start":1011,"line_end":1011,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465986,"byte_end":466055,"line_start":1012,"line_end":1012,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466057,"byte_end":466133,"line_start":1013,"line_end":1013,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466135,"byte_end":466190,"line_start":1014,"line_end":1014,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466192,"byte_end":466195,"line_start":1015,"line_end":1015,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466197,"byte_end":466209,"line_start":1016,"line_end":1016,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466211,"byte_end":466214,"line_start":1017,"line_end":1017,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466216,"byte_end":466248,"line_start":1018,"line_end":1018,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466250,"byte_end":466253,"line_start":1019,"line_end":1019,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466255,"byte_end":466269,"line_start":1020,"line_end":1020,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466271,"byte_end":466274,"line_start":1021,"line_end":1021,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466276,"byte_end":466287,"line_start":1022,"line_end":1022,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466289,"byte_end":466316,"line_start":1023,"line_end":1023,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466318,"byte_end":466321,"line_start":1024,"line_end":1024,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0; 5];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466323,"byte_end":466351,"line_start":1025,"line_end":1025,"column_start":2,"column_end":30}},{"value":"/ let mut count = 1;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466353,"byte_end":466375,"line_start":1026,"line_end":1026,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466377,"byte_end":466380,"line_start":1027,"line_end":1027,"column_start":2,"column_end":5}},{"value":"/ for chunk in v.rchunks_mut(2) {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466382,"byte_end":466417,"line_start":1028,"line_end":1028,"column_start":2,"column_end":37}},{"value":"/   for mut bit in chunk.iter_mut() {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466419,"byte_end":466458,"line_start":1029,"line_end":1029,"column_start":2,"column_end":41}},{"value":"/     *bit = count % 2 == 0;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466460,"byte_end":466490,"line_start":1030,"line_end":1030,"column_start":2,"column_end":32}},{"value":"/   }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466492,"byte_end":466499,"line_start":1031,"line_end":1031,"column_start":2,"column_end":9}},{"value":"/   count += 1;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466501,"byte_end":466518,"line_start":1032,"line_end":1032,"column_start":2,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466520,"byte_end":466525,"line_start":1033,"line_end":1033,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![0, 1, 1, 0, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466527,"byte_end":466567,"line_start":1034,"line_end":1034,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466569,"byte_end":466576,"line_start":1035,"line_end":1035,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466578,"byte_end":466581,"line_start":1036,"line_end":1036,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_mut()`]: Self::chunks_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466583,"byte_end":466622,"line_start":1037,"line_end":1037,"column_start":2,"column_end":41}},{"value":"/ [`.rchunks_exact_mut()`]: Self::rchunks_exact_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466624,"byte_end":466677,"line_start":1038,"line_end":1038,"column_start":2,"column_end":55}},{"value":"/ [`.remove_alias()`]: crate::slice::RChunksMut::remove_alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466679,"byte_end":466742,"line_start":1039,"line_end":1039,"column_start":2,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466744,"byte_end":466753,"line_start":1040,"line_end":1040,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2642},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468376,"byte_end":468389,"line_start":1087,"line_end":1087,"column_start":9,"column_end":22},"name":"rchunks_exact","qualname":"<BitSlice<O, T>>::rchunks_exact","value":"pub fn rchunks_exact(&Self, usize) -> RChunksExact<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466923,"byte_end":466993,"line_start":1046,"line_end":1046,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466995,"byte_end":467032,"line_start":1047,"line_end":1047,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467034,"byte_end":467037,"line_start":1048,"line_end":1048,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467039,"byte_end":467109,"line_start":1049,"line_end":1049,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last up to `chunk_size-1` bits","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467111,"byte_end":467186,"line_start":1050,"line_end":1050,"column_start":2,"column_end":77}},{"value":"/ will be omitted and can be retrieved from the [`.remainder()`] method of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467188,"byte_end":467264,"line_start":1051,"line_end":1051,"column_start":2,"column_end":78}},{"value":"/ the iterator.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467266,"byte_end":467283,"line_start":1052,"line_end":1052,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467285,"byte_end":467288,"line_start":1053,"line_end":1053,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler may be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467290,"byte_end":467365,"line_start":1054,"line_end":1054,"column_start":2,"column_end":77}},{"value":"/ able to optimize the resulting code better than in the case of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467367,"byte_end":467433,"line_start":1055,"line_end":1055,"column_start":2,"column_end":68}},{"value":"/ [`.rchunks()`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467435,"byte_end":467454,"line_start":1056,"line_end":1056,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467456,"byte_end":467459,"line_start":1057,"line_end":1057,"column_start":2,"column_end":5}},{"value":"/ See [`.rchunks()`] for a variant of this iterator that also returns the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467461,"byte_end":467536,"line_start":1058,"line_end":1058,"column_start":2,"column_end":77}},{"value":"/ remainder as a smaller chunk, and [`.chunks_exact()`] for the same","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467538,"byte_end":467608,"line_start":1059,"line_end":1059,"column_start":2,"column_end":72}},{"value":"/ iterator but starting at the beginning of the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467610,"byte_end":467666,"line_start":1060,"line_end":1060,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467668,"byte_end":467671,"line_start":1061,"line_end":1061,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467673,"byte_end":467687,"line_start":1062,"line_end":1062,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467689,"byte_end":467692,"line_start":1063,"line_end":1063,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks_exact`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rchunks_exact)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467694,"byte_end":467802,"line_start":1064,"line_end":1064,"column_start":2,"column_end":110}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467804,"byte_end":467807,"line_start":1065,"line_end":1065,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467809,"byte_end":467821,"line_start":1066,"line_end":1066,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467823,"byte_end":467826,"line_start":1067,"line_end":1067,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467828,"byte_end":467860,"line_start":1068,"line_end":1068,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467862,"byte_end":467865,"line_start":1069,"line_end":1069,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467867,"byte_end":467881,"line_start":1070,"line_end":1070,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467883,"byte_end":467886,"line_start":1071,"line_end":1071,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467888,"byte_end":467899,"line_start":1072,"line_end":1072,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467901,"byte_end":467928,"line_start":1073,"line_end":1073,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467930,"byte_end":467933,"line_start":1074,"line_end":1074,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 0, 1, 1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467935,"byte_end":467972,"line_start":1075,"line_end":1075,"column_start":2,"column_end":39}},{"value":"/ let mut iter = slice.rchunks_exact(2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467974,"byte_end":468016,"line_start":1076,"line_end":1076,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468018,"byte_end":468068,"line_start":1077,"line_end":1077,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468070,"byte_end":468120,"line_start":1078,"line_end":1078,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468122,"byte_end":468157,"line_start":1079,"line_end":1079,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(iter.remainder(), bits![0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468159,"byte_end":468202,"line_start":1080,"line_end":1080,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468204,"byte_end":468211,"line_start":1081,"line_end":1081,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468213,"byte_end":468216,"line_start":1082,"line_end":1082,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_exact()`]: Self::chunks_exact","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468218,"byte_end":468261,"line_start":1083,"line_end":1083,"column_start":2,"column_end":45}},{"value":"/ [`.rchunks()`]: Self::rchunks","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468263,"byte_end":468296,"line_start":1084,"line_end":1084,"column_start":2,"column_end":35}},{"value":"/ [`.remainder()`]: crate::slice::ChunksExact::remainder","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468298,"byte_end":468356,"line_start":1085,"line_end":1085,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468358,"byte_end":468367,"line_start":1086,"line_end":1086,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2643},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470396,"byte_end":470413,"line_start":1142,"line_end":1142,"column_start":9,"column_end":26},"name":"rchunks_exact_mut","qualname":"<BitSlice<O, T>>::rchunks_exact_mut","value":"pub fn rchunks_exact_mut(&mut Self, usize) -> RChunksExactMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468539,"byte_end":468609,"line_start":1092,"line_end":1092,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468611,"byte_end":468648,"line_start":1093,"line_end":1093,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468650,"byte_end":468653,"line_start":1094,"line_end":1094,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468655,"byte_end":468730,"line_start":1095,"line_end":1095,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last up to `chunk_size-1`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468732,"byte_end":468806,"line_start":1096,"line_end":1096,"column_start":2,"column_end":76}},{"value":"/ bits will be omitted and can be retrieved from the [`.into_remainder()`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468808,"byte_end":468884,"line_start":1097,"line_end":1097,"column_start":2,"column_end":78}},{"value":"/ method of the iterator.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468886,"byte_end":468913,"line_start":1098,"line_end":1098,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468915,"byte_end":468918,"line_start":1099,"line_end":1099,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler may be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468920,"byte_end":468995,"line_start":1100,"line_end":1100,"column_start":2,"column_end":77}},{"value":"/ able to optimize the resulting code better than in the case of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468997,"byte_end":469063,"line_start":1101,"line_end":1101,"column_start":2,"column_end":68}},{"value":"/ [`.rchunks_mut()`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469065,"byte_end":469088,"line_start":1102,"line_end":1102,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469090,"byte_end":469093,"line_start":1103,"line_end":1103,"column_start":2,"column_end":5}},{"value":"/ See [`.rchunks_mut()`] for a variant of this iterator that also returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469095,"byte_end":469170,"line_start":1104,"line_end":1104,"column_start":2,"column_end":77}},{"value":"/ the remainder as a smaller chunk, and [`.chunks_exact_mut()`] for the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469172,"byte_end":469245,"line_start":1105,"line_end":1105,"column_start":2,"column_end":75}},{"value":"/ same iterator but starting at the beginning of the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469247,"byte_end":469308,"line_start":1106,"line_end":1106,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469310,"byte_end":469313,"line_start":1107,"line_end":1107,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469315,"byte_end":469329,"line_start":1108,"line_end":1108,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469331,"byte_end":469334,"line_start":1109,"line_end":1109,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks_exact_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rchunks_exact_mut)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469336,"byte_end":469452,"line_start":1110,"line_end":1110,"column_start":2,"column_end":118}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469454,"byte_end":469457,"line_start":1111,"line_end":1111,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469459,"byte_end":469480,"line_start":1112,"line_end":1112,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469482,"byte_end":469485,"line_start":1113,"line_end":1113,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469487,"byte_end":469560,"line_start":1114,"line_end":1114,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469562,"byte_end":469632,"line_start":1115,"line_end":1115,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469634,"byte_end":469703,"line_start":1116,"line_end":1116,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469705,"byte_end":469781,"line_start":1117,"line_end":1117,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469783,"byte_end":469838,"line_start":1118,"line_end":1118,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469840,"byte_end":469843,"line_start":1119,"line_end":1119,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469845,"byte_end":469857,"line_start":1120,"line_end":1120,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469859,"byte_end":469862,"line_start":1121,"line_end":1121,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469864,"byte_end":469896,"line_start":1122,"line_end":1122,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469898,"byte_end":469901,"line_start":1123,"line_end":1123,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469903,"byte_end":469917,"line_start":1124,"line_end":1124,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469919,"byte_end":469922,"line_start":1125,"line_end":1125,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469924,"byte_end":469935,"line_start":1126,"line_end":1126,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469937,"byte_end":469964,"line_start":1127,"line_end":1127,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469966,"byte_end":469969,"line_start":1128,"line_end":1128,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0; 5];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469971,"byte_end":469999,"line_start":1129,"line_end":1129,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470001,"byte_end":470004,"line_start":1130,"line_end":1130,"column_start":2,"column_end":5}},{"value":"/ for chunk in v.rchunks_exact_mut(2) {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470006,"byte_end":470047,"line_start":1131,"line_end":1131,"column_start":2,"column_end":43}},{"value":"/   chunk.set_all(true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470049,"byte_end":470075,"line_start":1132,"line_end":1132,"column_start":2,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470077,"byte_end":470082,"line_start":1133,"line_end":1133,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![0, 1, 1, 1, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470084,"byte_end":470124,"line_start":1134,"line_end":1134,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470126,"byte_end":470133,"line_start":1135,"line_end":1135,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470135,"byte_end":470138,"line_start":1136,"line_end":1136,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_exact_mut()`]: Self::chunks_exact_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470140,"byte_end":470191,"line_start":1137,"line_end":1137,"column_start":2,"column_end":53}},{"value":"/ [`.into_remainder()`]: crate::slice::ChunksExactMut::into_remainder","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470193,"byte_end":470264,"line_start":1138,"line_end":1138,"column_start":2,"column_end":73}},{"value":"/ [`.rchunks_mut()`]: Self::rchunks_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470266,"byte_end":470307,"line_start":1139,"line_end":1139,"column_start":2,"column_end":43}},{"value":"/ [`.remove_alias()`]: crate::slice::ChunksExactMut::remove_alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470309,"byte_end":470376,"line_start":1140,"line_end":1140,"column_start":2,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470378,"byte_end":470387,"line_start":1141,"line_end":1141,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2644},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471941,"byte_end":471949,"line_start":1198,"line_end":1198,"column_start":9,"column_end":17},"name":"split_at","qualname":"<BitSlice<O, T>>::split_at","value":"pub fn split_at(&Self, usize) -> (&Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Divides one slice into two at an index.","sig":null,"attributes":[{"value":"/ Divides one slice into two at an index.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470581,"byte_end":470624,"line_start":1150,"line_end":1150,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470626,"byte_end":470629,"line_start":1151,"line_end":1151,"column_start":2,"column_end":5}},{"value":"/ The first will contain all indices from `[0, mid)` (excluding the index","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470631,"byte_end":470706,"line_start":1152,"line_end":1152,"column_start":2,"column_end":77}},{"value":"/ `mid` itself) and the second will contain all indices from `[mid, len)`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470708,"byte_end":470783,"line_start":1153,"line_end":1153,"column_start":2,"column_end":77}},{"value":"/ (excluding the index `len` itself).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470785,"byte_end":470824,"line_start":1154,"line_end":1154,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470826,"byte_end":470829,"line_start":1155,"line_end":1155,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470831,"byte_end":470845,"line_start":1156,"line_end":1156,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470847,"byte_end":470850,"line_start":1157,"line_end":1157,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_at`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_at)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470852,"byte_end":470950,"line_start":1158,"line_end":1158,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470952,"byte_end":470955,"line_start":1159,"line_end":1159,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470957,"byte_end":470969,"line_start":1160,"line_end":1160,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470971,"byte_end":470974,"line_start":1161,"line_end":1161,"column_start":2,"column_end":5}},{"value":"/ Panics if `mid > len`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470976,"byte_end":471002,"line_start":1162,"line_end":1162,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471004,"byte_end":471007,"line_start":1163,"line_end":1163,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471009,"byte_end":471023,"line_start":1164,"line_end":1164,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471025,"byte_end":471028,"line_start":1165,"line_end":1165,"column_start":2,"column_end":5}},{"value":"/ When `mid` is `0` or `self.len()`, then the left or right return values,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471030,"byte_end":471106,"line_start":1166,"line_end":1166,"column_start":2,"column_end":78}},{"value":"/ respectively, are empty slices. Empty slice references produced by this","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471108,"byte_end":471183,"line_start":1167,"line_end":1167,"column_start":2,"column_end":77}},{"value":"/ method are specified to have the address information you would expect:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471185,"byte_end":471259,"line_start":1168,"line_end":1168,"column_start":2,"column_end":76}},{"value":"/ a left empty slice has the same base address and start bit as `self`,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471261,"byte_end":471334,"line_start":1169,"line_end":1169,"column_start":2,"column_end":75}},{"value":"/ and a right empty slice will have its address raised by `self.len()`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471336,"byte_end":471409,"line_start":1170,"line_end":1170,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471411,"byte_end":471414,"line_start":1171,"line_end":1171,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471416,"byte_end":471430,"line_start":1172,"line_end":1172,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471432,"byte_end":471435,"line_start":1173,"line_end":1173,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471437,"byte_end":471448,"line_start":1174,"line_end":1174,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471450,"byte_end":471477,"line_start":1175,"line_end":1175,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471479,"byte_end":471482,"line_start":1176,"line_end":1176,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 0, 0, 1, 1, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471484,"byte_end":471520,"line_start":1177,"line_end":1177,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471522,"byte_end":471525,"line_start":1178,"line_end":1178,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471527,"byte_end":471532,"line_start":1179,"line_end":1179,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = v.split_at(0);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471534,"byte_end":471574,"line_start":1180,"line_end":1180,"column_start":2,"column_end":42}},{"value":"/   assert_eq!(left, bits![]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471576,"byte_end":471608,"line_start":1181,"line_end":1181,"column_start":2,"column_end":34}},{"value":"/   assert_eq!(right, v);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471610,"byte_end":471637,"line_start":1182,"line_end":1182,"column_start":2,"column_end":29}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471639,"byte_end":471644,"line_start":1183,"line_end":1183,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471646,"byte_end":471649,"line_start":1184,"line_end":1184,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471651,"byte_end":471656,"line_start":1185,"line_end":1185,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = v.split_at(2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471658,"byte_end":471698,"line_start":1186,"line_end":1186,"column_start":2,"column_end":42}},{"value":"/   assert_eq!(left, bits![0, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471700,"byte_end":471736,"line_start":1187,"line_end":1187,"column_start":2,"column_end":38}},{"value":"/   assert_eq!(right, bits![0, 1, 1, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471738,"byte_end":471781,"line_start":1188,"line_end":1188,"column_start":2,"column_end":45}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471783,"byte_end":471788,"line_start":1189,"line_end":1189,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471790,"byte_end":471793,"line_start":1190,"line_end":1190,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471795,"byte_end":471800,"line_start":1191,"line_end":1191,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = v.split_at(6);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471802,"byte_end":471842,"line_start":1192,"line_end":1192,"column_start":2,"column_end":42}},{"value":"/   assert_eq!(left, v);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471844,"byte_end":471870,"line_start":1193,"line_end":1193,"column_start":2,"column_end":28}},{"value":"/   assert_eq!(right, bits![]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471872,"byte_end":471905,"line_start":1194,"line_end":1194,"column_start":2,"column_end":35}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471907,"byte_end":471912,"line_start":1195,"line_end":1195,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471914,"byte_end":471921,"line_start":1196,"line_end":1196,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471923,"byte_end":471932,"line_start":1197,"line_end":1197,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2645},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474378,"byte_end":474390,"line_start":1265,"line_end":1265,"column_start":9,"column_end":21},"name":"split_at_mut","qualname":"<BitSlice<O, T>>::split_at_mut","value":"pub fn split_at_mut(&mut Self, usize)\n-> (&mut BitSlice<O, T::Alias>, &mut BitSlice<O, T::Alias>)","parent":null,"children":[],"decl_id":null,"docs":" Divides one mutable slice into two at an index.","sig":null,"attributes":[{"value":"/ Divides one mutable slice into two at an index.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472123,"byte_end":472174,"line_start":1204,"line_end":1204,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472176,"byte_end":472179,"line_start":1205,"line_end":1205,"column_start":2,"column_end":5}},{"value":"/ The first will contain all indices from `[0, mid)` (excluding the index","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472181,"byte_end":472256,"line_start":1206,"line_end":1206,"column_start":2,"column_end":77}},{"value":"/ `mid` itself) and the second will contain all indices from `[mid, len)`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472258,"byte_end":472333,"line_start":1207,"line_end":1207,"column_start":2,"column_end":77}},{"value":"/ (excluding the index `len` itself).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472335,"byte_end":472374,"line_start":1208,"line_end":1208,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472376,"byte_end":472379,"line_start":1209,"line_end":1209,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472381,"byte_end":472395,"line_start":1210,"line_end":1210,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472397,"byte_end":472400,"line_start":1211,"line_end":1211,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_at_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_at_mut)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472402,"byte_end":472508,"line_start":1212,"line_end":1212,"column_start":2,"column_end":108}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472510,"byte_end":472513,"line_start":1213,"line_end":1213,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472515,"byte_end":472536,"line_start":1214,"line_end":1214,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472538,"byte_end":472541,"line_start":1215,"line_end":1215,"column_start":2,"column_end":5}},{"value":"/ The partition index `mid` may occur anywhere in the slice, and as a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472543,"byte_end":472614,"line_start":1216,"line_end":1216,"column_start":2,"column_end":73}},{"value":"/ result the two returned slices may both have write access to the memory","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472616,"byte_end":472691,"line_start":1217,"line_end":1217,"column_start":2,"column_end":77}},{"value":"/ address containing `mid`. As such, the returned slices must be marked","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472693,"byte_end":472766,"line_start":1218,"line_end":1218,"column_start":2,"column_end":75}},{"value":"/ with [`T::Alias`] in order to correctly manage memory access going","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472768,"byte_end":472838,"line_start":1219,"line_end":1219,"column_start":2,"column_end":72}},{"value":"/ forward.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472840,"byte_end":472852,"line_start":1220,"line_end":1220,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472854,"byte_end":472857,"line_start":1221,"line_end":1221,"column_start":2,"column_end":5}},{"value":"/ This marking is applied to all memory accesses in both slices,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472859,"byte_end":472925,"line_start":1222,"line_end":1222,"column_start":2,"column_end":68}},{"value":"/ regardless of whether any future accesses actually require it. To limit","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472927,"byte_end":473002,"line_start":1223,"line_end":1223,"column_start":2,"column_end":77}},{"value":"/ the alias marking to only the addresses that need it, use","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473004,"byte_end":473065,"line_start":1224,"line_end":1224,"column_start":2,"column_end":63}},{"value":"/ [`.bit_domain()`] or [`.bit_domain_mut()`] to split either slice into","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473067,"byte_end":473140,"line_start":1225,"line_end":1225,"column_start":2,"column_end":75}},{"value":"/ its aliased and unaliased subslices.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473142,"byte_end":473182,"line_start":1226,"line_end":1226,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473184,"byte_end":473187,"line_start":1227,"line_end":1227,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473189,"byte_end":473201,"line_start":1228,"line_end":1228,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473203,"byte_end":473206,"line_start":1229,"line_end":1229,"column_start":2,"column_end":5}},{"value":"/ Panics if `mid > len`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473208,"byte_end":473234,"line_start":1230,"line_end":1230,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473236,"byte_end":473239,"line_start":1231,"line_end":1231,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473241,"byte_end":473255,"line_start":1232,"line_end":1232,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473257,"byte_end":473260,"line_start":1233,"line_end":1233,"column_start":2,"column_end":5}},{"value":"/ When `mid` is `0` or `self.len()`, then the left or right return values,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473262,"byte_end":473338,"line_start":1234,"line_end":1234,"column_start":2,"column_end":78}},{"value":"/ respectively, are empty slices. Empty slice references produced by this","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473340,"byte_end":473415,"line_start":1235,"line_end":1235,"column_start":2,"column_end":77}},{"value":"/ method are specified to have the address information you would expect:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473417,"byte_end":473491,"line_start":1236,"line_end":1236,"column_start":2,"column_end":76}},{"value":"/ a left empty slice has the same base address and start bit as `self`,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473493,"byte_end":473566,"line_start":1237,"line_end":1237,"column_start":2,"column_end":75}},{"value":"/ and a right empty slice will have its address raised by `self.len()`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473568,"byte_end":473641,"line_start":1238,"line_end":1238,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473643,"byte_end":473646,"line_start":1239,"line_end":1239,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473648,"byte_end":473662,"line_start":1240,"line_end":1240,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473664,"byte_end":473667,"line_start":1241,"line_end":1241,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473669,"byte_end":473680,"line_start":1242,"line_end":1242,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473682,"byte_end":473709,"line_start":1243,"line_end":1243,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473711,"byte_end":473714,"line_start":1244,"line_end":1244,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 0, 0, 1, 1, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473716,"byte_end":473756,"line_start":1245,"line_end":1245,"column_start":2,"column_end":42}},{"value":"/ // scoped to restrict the lifetime of the borrows","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473758,"byte_end":473811,"line_start":1246,"line_end":1246,"column_start":2,"column_end":55}},{"value":"/ {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473813,"byte_end":473818,"line_start":1247,"line_end":1247,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = v.split_at_mut(2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473820,"byte_end":473864,"line_start":1248,"line_end":1248,"column_start":2,"column_end":46}},{"value":"/   assert_eq!(left, bits![0, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473866,"byte_end":473902,"line_start":1249,"line_end":1249,"column_start":2,"column_end":38}},{"value":"/   assert_eq!(right, bits![0, 1, 1, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473904,"byte_end":473947,"line_start":1250,"line_end":1250,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473949,"byte_end":473952,"line_start":1251,"line_end":1251,"column_start":2,"column_end":5}},{"value":"/   left.set(1, true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473954,"byte_end":473978,"line_start":1252,"line_end":1252,"column_start":2,"column_end":26}},{"value":"/   right.set(1, false);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473980,"byte_end":474006,"line_start":1253,"line_end":1253,"column_start":2,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474008,"byte_end":474013,"line_start":1254,"line_end":1254,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![0, 1, 0, 0, 1, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474015,"byte_end":474058,"line_start":1255,"line_end":1255,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474060,"byte_end":474067,"line_start":1256,"line_end":1256,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474069,"byte_end":474072,"line_start":1257,"line_end":1257,"column_start":2,"column_end":5}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474074,"byte_end":474121,"line_start":1258,"line_end":1258,"column_start":2,"column_end":49}},{"value":"/ [`.bit_domain`()]: Self::bit_domain","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474123,"byte_end":474162,"line_start":1259,"line_end":1259,"column_start":2,"column_end":41}},{"value":"/ [`.bit_domain_mut`()]: Self::bit_domain_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474164,"byte_end":474211,"line_start":1260,"line_end":1260,"column_start":2,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474325,"byte_end":474334,"line_start":1263,"line_end":1263,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474336,"byte_end":474369,"line_start":1264,"line_end":1264,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2646},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476342,"byte_end":476347,"line_start":1330,"line_end":1330,"column_start":9,"column_end":14},"name":"split","qualname":"<BitSlice<O, T>>::split","value":"pub fn split<F>(&Self, F) -> Split<, O, T, F> where F: FnMut(usize, &bool) ->\nbool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`.\n The matched bit is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474565,"byte_end":474640,"line_start":1273,"line_end":1273,"column_start":2,"column_end":77}},{"value":"/ The matched bit is not contained in the subslices.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474642,"byte_end":474696,"line_start":1274,"line_end":1274,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474698,"byte_end":474701,"line_start":1275,"line_end":1275,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474703,"byte_end":474717,"line_start":1276,"line_end":1276,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474719,"byte_end":474722,"line_start":1277,"line_end":1277,"column_start":2,"column_end":5}},{"value":"/ [`slice::split`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474724,"byte_end":474816,"line_start":1278,"line_end":1278,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474818,"byte_end":474821,"line_start":1279,"line_end":1279,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474823,"byte_end":474844,"line_start":1280,"line_end":1280,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474846,"byte_end":474849,"line_start":1281,"line_end":1281,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474851,"byte_end":474919,"line_start":1282,"line_end":1282,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474921,"byte_end":474995,"line_start":1283,"line_end":1283,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474997,"byte_end":475007,"line_start":1284,"line_end":1284,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475009,"byte_end":475012,"line_start":1285,"line_end":1285,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475014,"byte_end":475028,"line_start":1286,"line_end":1286,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475030,"byte_end":475033,"line_start":1287,"line_end":1287,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475035,"byte_end":475046,"line_start":1288,"line_end":1288,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475048,"byte_end":475075,"line_start":1289,"line_end":1289,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475077,"byte_end":475080,"line_start":1290,"line_end":1290,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 1, 1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475082,"byte_end":475116,"line_start":1291,"line_end":1291,"column_start":2,"column_end":36}},{"value":"/ let mut iter = slice.split(|pos, _bit| pos % 3 == 2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475118,"byte_end":475175,"line_start":1292,"line_end":1292,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475177,"byte_end":475180,"line_start":1293,"line_end":1293,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475182,"byte_end":475232,"line_start":1294,"line_end":1294,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475234,"byte_end":475281,"line_start":1295,"line_end":1295,"column_start":2,"column_end":49}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475283,"byte_end":475318,"line_start":1296,"line_end":1296,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475320,"byte_end":475327,"line_start":1297,"line_end":1297,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475329,"byte_end":475332,"line_start":1298,"line_end":1298,"column_start":2,"column_end":5}},{"value":"/ If the first bit is matched, an empty slice will be the first item","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475334,"byte_end":475404,"line_start":1299,"line_end":1299,"column_start":2,"column_end":72}},{"value":"/ returned by the iterator. Similarly, if the last bit in the slice is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475406,"byte_end":475478,"line_start":1300,"line_end":1300,"column_start":2,"column_end":74}},{"value":"/ matched, an empty slice will be the last item returned by the iterator:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475480,"byte_end":475555,"line_start":1301,"line_end":1301,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475557,"byte_end":475560,"line_start":1302,"line_end":1302,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475562,"byte_end":475573,"line_start":1303,"line_end":1303,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475575,"byte_end":475602,"line_start":1304,"line_end":1304,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475604,"byte_end":475607,"line_start":1305,"line_end":1305,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475609,"byte_end":475640,"line_start":1306,"line_end":1306,"column_start":2,"column_end":33}},{"value":"/ let mut iter = slice.split(|_pos, bit| *bit);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475642,"byte_end":475691,"line_start":1307,"line_end":1307,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475693,"byte_end":475696,"line_start":1308,"line_end":1308,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475698,"byte_end":475748,"line_start":1309,"line_end":1309,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475750,"byte_end":475796,"line_start":1310,"line_end":1310,"column_start":2,"column_end":48}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475798,"byte_end":475833,"line_start":1311,"line_end":1311,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475835,"byte_end":475842,"line_start":1312,"line_end":1312,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475844,"byte_end":475847,"line_start":1313,"line_end":1313,"column_start":2,"column_end":5}},{"value":"/ If two matched bits are directly adjacent, an empty slice will be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475849,"byte_end":475918,"line_start":1314,"line_end":1314,"column_start":2,"column_end":71}},{"value":"/ present between them:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475920,"byte_end":475945,"line_start":1315,"line_end":1315,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475947,"byte_end":475950,"line_start":1316,"line_end":1316,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475952,"byte_end":475963,"line_start":1317,"line_end":1317,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475965,"byte_end":475992,"line_start":1318,"line_end":1318,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475994,"byte_end":475997,"line_start":1319,"line_end":1319,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![1, 0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475999,"byte_end":476033,"line_start":1320,"line_end":1320,"column_start":2,"column_end":36}},{"value":"/ let mut iter = slice.split(|_pos, bit| !*bit);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476035,"byte_end":476085,"line_start":1321,"line_end":1321,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476087,"byte_end":476090,"line_start":1322,"line_end":1322,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476092,"byte_end":476139,"line_start":1323,"line_end":1323,"column_start":2,"column_end":49}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476141,"byte_end":476187,"line_start":1324,"line_end":1324,"column_start":2,"column_end":48}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476189,"byte_end":476236,"line_start":1325,"line_end":1325,"column_start":2,"column_end":49}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476238,"byte_end":476273,"line_start":1326,"line_end":1326,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476275,"byte_end":476282,"line_start":1327,"line_end":1327,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476284,"byte_end":476301,"line_start":1328,"line_end":1328,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476303,"byte_end":476333,"line_start":1329,"line_end":1329,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2648},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477652,"byte_end":477661,"line_start":1369,"line_end":1369,"column_start":9,"column_end":18},"name":"split_mut","qualname":"<BitSlice<O, T>>::split_mut","value":"pub fn split_mut<F>(&mut Self, F) -> SplitMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over mutable subslices separated by bits that match\n `pred`. The matched bit is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over mutable subslices separated by bits that match","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476455,"byte_end":476530,"line_start":1335,"line_end":1335,"column_start":2,"column_end":77}},{"value":"/ `pred`. The matched bit is not contained in the subslices.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476532,"byte_end":476594,"line_start":1336,"line_end":1336,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476596,"byte_end":476599,"line_start":1337,"line_end":1337,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476601,"byte_end":476615,"line_start":1338,"line_end":1338,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476617,"byte_end":476620,"line_start":1339,"line_end":1339,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_mut)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476622,"byte_end":476722,"line_start":1340,"line_end":1340,"column_start":2,"column_end":102}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476724,"byte_end":476727,"line_start":1341,"line_end":1341,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476729,"byte_end":476750,"line_start":1342,"line_end":1342,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476752,"byte_end":476755,"line_start":1343,"line_end":1343,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476757,"byte_end":476825,"line_start":1344,"line_end":1344,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476827,"byte_end":476901,"line_start":1345,"line_end":1345,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476903,"byte_end":476913,"line_start":1346,"line_end":1346,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476915,"byte_end":476918,"line_start":1347,"line_end":1347,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476920,"byte_end":476993,"line_start":1348,"line_end":1348,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476995,"byte_end":477065,"line_start":1349,"line_end":1349,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477067,"byte_end":477136,"line_start":1350,"line_end":1350,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477138,"byte_end":477214,"line_start":1351,"line_end":1351,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477216,"byte_end":477271,"line_start":1352,"line_end":1352,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477273,"byte_end":477276,"line_start":1353,"line_end":1353,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477278,"byte_end":477292,"line_start":1354,"line_end":1354,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477294,"byte_end":477297,"line_start":1355,"line_end":1355,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477299,"byte_end":477310,"line_start":1356,"line_end":1356,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477312,"byte_end":477339,"line_start":1357,"line_end":1357,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477341,"byte_end":477344,"line_start":1358,"line_end":1358,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477346,"byte_end":477386,"line_start":1359,"line_end":1359,"column_start":2,"column_end":42}},{"value":"/ for group in v.split_mut(|_pos, bit| *bit) {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477388,"byte_end":477436,"line_start":1360,"line_end":1360,"column_start":2,"column_end":50}},{"value":"/   group.set(0, true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477438,"byte_end":477463,"line_start":1361,"line_end":1361,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477465,"byte_end":477470,"line_start":1362,"line_end":1362,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![1, 0, 1, 1, 1, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477472,"byte_end":477515,"line_start":1363,"line_end":1363,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477517,"byte_end":477524,"line_start":1364,"line_end":1364,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477526,"byte_end":477529,"line_start":1365,"line_end":1365,"column_start":2,"column_end":5}},{"value":"/ [`.remove_alias()`]: crate::slice::SplitMut::remove_alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477531,"byte_end":477592,"line_start":1366,"line_end":1366,"column_start":2,"column_end":63}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477594,"byte_end":477611,"line_start":1367,"line_end":1367,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477613,"byte_end":477643,"line_start":1368,"line_end":1368,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2650},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479238,"byte_end":479244,"line_start":1419,"line_end":1419,"column_start":9,"column_end":15},"name":"rsplit","qualname":"<BitSlice<O, T>>::rsplit","value":"pub fn rsplit<F>(&Self, F) -> RSplit<, O, T, F> where F: FnMut(usize, &bool)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n starting at the end of the slice and working backwards. The matched bit\n is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477791,"byte_end":477866,"line_start":1374,"line_end":1374,"column_start":2,"column_end":77}},{"value":"/ starting at the end of the slice and working backwards. The matched bit","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477868,"byte_end":477943,"line_start":1375,"line_end":1375,"column_start":2,"column_end":77}},{"value":"/ is not contained in the subslices.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477945,"byte_end":477983,"line_start":1376,"line_end":1376,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477985,"byte_end":477988,"line_start":1377,"line_end":1377,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477990,"byte_end":478004,"line_start":1378,"line_end":1378,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478006,"byte_end":478009,"line_start":1379,"line_end":1379,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplit`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rsplit)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478011,"byte_end":478105,"line_start":1380,"line_end":1380,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478107,"byte_end":478110,"line_start":1381,"line_end":1381,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478112,"byte_end":478133,"line_start":1382,"line_end":1382,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478135,"byte_end":478138,"line_start":1383,"line_end":1383,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478140,"byte_end":478208,"line_start":1384,"line_end":1384,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478210,"byte_end":478284,"line_start":1385,"line_end":1385,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478286,"byte_end":478296,"line_start":1386,"line_end":1386,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478298,"byte_end":478301,"line_start":1387,"line_end":1387,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478303,"byte_end":478317,"line_start":1388,"line_end":1388,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478319,"byte_end":478322,"line_start":1389,"line_end":1389,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478324,"byte_end":478335,"line_start":1390,"line_end":1390,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478337,"byte_end":478364,"line_start":1391,"line_end":1391,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478366,"byte_end":478369,"line_start":1392,"line_end":1392,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![1, 1, 1, 0, 1, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478371,"byte_end":478411,"line_start":1393,"line_end":1393,"column_start":2,"column_end":42}},{"value":"/ let mut iter = slice.rsplit(|_pos, bit| !*bit);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478413,"byte_end":478464,"line_start":1394,"line_end":1394,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478466,"byte_end":478469,"line_start":1395,"line_end":1395,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1; 2]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478471,"byte_end":478521,"line_start":1396,"line_end":1396,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1; 3]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478523,"byte_end":478573,"line_start":1397,"line_end":1397,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478575,"byte_end":478610,"line_start":1398,"line_end":1398,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478612,"byte_end":478619,"line_start":1399,"line_end":1399,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478621,"byte_end":478624,"line_start":1400,"line_end":1400,"column_start":2,"column_end":5}},{"value":"/ As with [`.split()`], if the first or last bit is matched, an empty","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478626,"byte_end":478697,"line_start":1401,"line_end":1401,"column_start":2,"column_end":73}},{"value":"/ slice will be the first (or last) item returned by the iterator.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478699,"byte_end":478767,"line_start":1402,"line_end":1402,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478769,"byte_end":478772,"line_start":1403,"line_end":1403,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478774,"byte_end":478785,"line_start":1404,"line_end":1404,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478787,"byte_end":478814,"line_start":1405,"line_end":1405,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478816,"byte_end":478819,"line_start":1406,"line_end":1406,"column_start":2,"column_end":5}},{"value":"/ let v = bits![1, 0, 0, 1, 0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478821,"byte_end":478860,"line_start":1407,"line_end":1407,"column_start":2,"column_end":41}},{"value":"/ let mut it = v.rsplit(|_pos, bit| *bit);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478862,"byte_end":478906,"line_start":1408,"line_end":1408,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(it.next().unwrap(), bits![]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478908,"byte_end":478952,"line_start":1409,"line_end":1409,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(it.next().unwrap(), bits![0; 2]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478954,"byte_end":479002,"line_start":1410,"line_end":1410,"column_start":2,"column_end":50}},{"value":"/ assert_eq!(it.next().unwrap(), bits![0; 2]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479004,"byte_end":479052,"line_start":1411,"line_end":1411,"column_start":2,"column_end":50}},{"value":"/ assert_eq!(it.next().unwrap(), bits![]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479054,"byte_end":479098,"line_start":1412,"line_end":1412,"column_start":2,"column_end":46}},{"value":"/ assert!(it.next().is_none());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479100,"byte_end":479133,"line_start":1413,"line_end":1413,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479135,"byte_end":479142,"line_start":1414,"line_end":1414,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479144,"byte_end":479147,"line_start":1415,"line_end":1415,"column_start":2,"column_end":5}},{"value":"/ [`.split()`]: Self::split","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479149,"byte_end":479178,"line_start":1416,"line_end":1416,"column_start":2,"column_end":31}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479180,"byte_end":479197,"line_start":1417,"line_end":1417,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479199,"byte_end":479229,"line_start":1418,"line_end":1418,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2652},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480616,"byte_end":480626,"line_start":1459,"line_end":1459,"column_start":9,"column_end":19},"name":"rsplit_mut","qualname":"<BitSlice<O, T>>::rsplit_mut","value":"pub fn rsplit_mut<F>(&mut Self, F) -> RSplitMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over mutable subslices separated by bits that match\n `pred`, starting at the end of the slice and working backwards. The\n matched bit is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over mutable subslices separated by bits that match","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479354,"byte_end":479429,"line_start":1424,"line_end":1424,"column_start":2,"column_end":77}},{"value":"/ `pred`, starting at the end of the slice and working backwards. The","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479431,"byte_end":479502,"line_start":1425,"line_end":1425,"column_start":2,"column_end":73}},{"value":"/ matched bit is not contained in the subslices.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479504,"byte_end":479554,"line_start":1426,"line_end":1426,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479556,"byte_end":479559,"line_start":1427,"line_end":1427,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479561,"byte_end":479575,"line_start":1428,"line_end":1428,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479577,"byte_end":479580,"line_start":1429,"line_end":1429,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplit_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rsplit_mut)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479582,"byte_end":479684,"line_start":1430,"line_end":1430,"column_start":2,"column_end":104}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479686,"byte_end":479689,"line_start":1431,"line_end":1431,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479691,"byte_end":479712,"line_start":1432,"line_end":1432,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479714,"byte_end":479717,"line_start":1433,"line_end":1433,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479719,"byte_end":479787,"line_start":1434,"line_end":1434,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479789,"byte_end":479863,"line_start":1435,"line_end":1435,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479865,"byte_end":479875,"line_start":1436,"line_end":1436,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479877,"byte_end":479880,"line_start":1437,"line_end":1437,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479882,"byte_end":479955,"line_start":1438,"line_end":1438,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479957,"byte_end":480027,"line_start":1439,"line_end":1439,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480029,"byte_end":480098,"line_start":1440,"line_end":1440,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480100,"byte_end":480176,"line_start":1441,"line_end":1441,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480178,"byte_end":480233,"line_start":1442,"line_end":1442,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480235,"byte_end":480238,"line_start":1443,"line_end":1443,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480240,"byte_end":480254,"line_start":1444,"line_end":1444,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480256,"byte_end":480259,"line_start":1445,"line_end":1445,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480261,"byte_end":480272,"line_start":1446,"line_end":1446,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480274,"byte_end":480301,"line_start":1447,"line_end":1447,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480303,"byte_end":480306,"line_start":1448,"line_end":1448,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480308,"byte_end":480348,"line_start":1449,"line_end":1449,"column_start":2,"column_end":42}},{"value":"/ for group in v.rsplit_mut(|_pos, bit| *bit) {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480350,"byte_end":480399,"line_start":1450,"line_end":1450,"column_start":2,"column_end":51}},{"value":"/   group.set(0, true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480401,"byte_end":480426,"line_start":1451,"line_end":1451,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480428,"byte_end":480433,"line_start":1452,"line_end":1452,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![1, 0, 1, 1, 1, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480435,"byte_end":480478,"line_start":1453,"line_end":1453,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480480,"byte_end":480487,"line_start":1454,"line_end":1454,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480489,"byte_end":480492,"line_start":1455,"line_end":1455,"column_start":2,"column_end":5}},{"value":"/ [`.remove_alias()`]: crate::slice::RSplitMut::remove_alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480494,"byte_end":480556,"line_start":1456,"line_end":1456,"column_start":2,"column_end":64}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480558,"byte_end":480575,"line_start":1457,"line_end":1457,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480577,"byte_end":480607,"line_start":1458,"line_end":1458,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2654},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481731,"byte_end":481737,"line_start":1497,"line_end":1497,"column_start":9,"column_end":15},"name":"splitn","qualname":"<BitSlice<O, T>>::splitn","value":"pub fn splitn<F>(&Self, usize, F) -> SplitN<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n limited to returning at most `n` items. The matched bit is not contained\n in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480758,"byte_end":480833,"line_start":1464,"line_end":1464,"column_start":2,"column_end":77}},{"value":"/ limited to returning at most `n` items. The matched bit is not contained","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480835,"byte_end":480911,"line_start":1465,"line_end":1465,"column_start":2,"column_end":78}},{"value":"/ in the subslices.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480913,"byte_end":480934,"line_start":1466,"line_end":1466,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480936,"byte_end":480939,"line_start":1467,"line_end":1467,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480941,"byte_end":481017,"line_start":1468,"line_end":1468,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481019,"byte_end":481022,"line_start":1469,"line_end":1469,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481024,"byte_end":481038,"line_start":1470,"line_end":1470,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481040,"byte_end":481043,"line_start":1471,"line_end":1471,"column_start":2,"column_end":5}},{"value":"/ [`slice::splitn`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.splitn)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481045,"byte_end":481139,"line_start":1472,"line_end":1472,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481141,"byte_end":481144,"line_start":1473,"line_end":1473,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481146,"byte_end":481167,"line_start":1474,"line_end":1474,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481169,"byte_end":481172,"line_start":1475,"line_end":1475,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481174,"byte_end":481242,"line_start":1476,"line_end":1476,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481244,"byte_end":481318,"line_start":1477,"line_end":1477,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481320,"byte_end":481330,"line_start":1478,"line_end":1478,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481332,"byte_end":481335,"line_start":1479,"line_end":1479,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481337,"byte_end":481351,"line_start":1480,"line_end":1480,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481353,"byte_end":481356,"line_start":1481,"line_end":1481,"column_start":2,"column_end":5}},{"value":"/ Print the slice split once by set bits (i.e., `[0, 0,]`, `[0, 1, 0]`):","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481358,"byte_end":481432,"line_start":1482,"line_end":1482,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481434,"byte_end":481437,"line_start":1483,"line_end":1483,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481439,"byte_end":481450,"line_start":1484,"line_end":1484,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481452,"byte_end":481479,"line_start":1485,"line_end":1485,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481481,"byte_end":481484,"line_start":1486,"line_end":1486,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 0, 1, 0, 1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481486,"byte_end":481522,"line_start":1487,"line_end":1487,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481524,"byte_end":481527,"line_start":1488,"line_end":1488,"column_start":2,"column_end":5}},{"value":"/ for group in v.splitn(2, |_pos, bit| *bit) {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481529,"byte_end":481577,"line_start":1489,"line_end":1489,"column_start":2,"column_end":50}},{"value":"/   # #[cfg(feature = \"std\")] {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481579,"byte_end":481612,"line_start":1490,"line_end":1490,"column_start":2,"column_end":35}},{"value":"/   println!(\"{:b}\", group);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481614,"byte_end":481644,"line_start":1491,"line_end":1491,"column_start":2,"column_end":32}},{"value":"/   # }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481646,"byte_end":481655,"line_start":1492,"line_end":1492,"column_start":2,"column_end":11}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481657,"byte_end":481662,"line_start":1493,"line_end":1493,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481664,"byte_end":481671,"line_start":1494,"line_end":1494,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481673,"byte_end":481690,"line_start":1495,"line_end":1495,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481692,"byte_end":481722,"line_start":1496,"line_end":1496,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2656},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483189,"byte_end":483199,"line_start":1540,"line_end":1540,"column_start":9,"column_end":19},"name":"splitn_mut","qualname":"<BitSlice<O, T>>::splitn_mut","value":"pub fn splitn_mut<F>(&mut Self, usize, F) -> SplitNMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n limited to returning at most `n` items. The matched bit is not contained\n in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481860,"byte_end":481935,"line_start":1502,"line_end":1502,"column_start":2,"column_end":77}},{"value":"/ limited to returning at most `n` items. The matched bit is not contained","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481937,"byte_end":482013,"line_start":1503,"line_end":1503,"column_start":2,"column_end":78}},{"value":"/ in the subslices.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482015,"byte_end":482036,"line_start":1504,"line_end":1504,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482038,"byte_end":482041,"line_start":1505,"line_end":1505,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482043,"byte_end":482119,"line_start":1506,"line_end":1506,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482121,"byte_end":482124,"line_start":1507,"line_end":1507,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482126,"byte_end":482140,"line_start":1508,"line_end":1508,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482142,"byte_end":482145,"line_start":1509,"line_end":1509,"column_start":2,"column_end":5}},{"value":"/ [`slice::splitn_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.splitn_mut)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482147,"byte_end":482249,"line_start":1510,"line_end":1510,"column_start":2,"column_end":104}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482251,"byte_end":482254,"line_start":1511,"line_end":1511,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482256,"byte_end":482277,"line_start":1512,"line_end":1512,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482279,"byte_end":482282,"line_start":1513,"line_end":1513,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482284,"byte_end":482352,"line_start":1514,"line_end":1514,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482354,"byte_end":482428,"line_start":1515,"line_end":1515,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482430,"byte_end":482440,"line_start":1516,"line_end":1516,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482442,"byte_end":482445,"line_start":1517,"line_end":1517,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482447,"byte_end":482520,"line_start":1518,"line_end":1518,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482522,"byte_end":482592,"line_start":1519,"line_end":1519,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482594,"byte_end":482663,"line_start":1520,"line_end":1520,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482665,"byte_end":482741,"line_start":1521,"line_end":1521,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482743,"byte_end":482798,"line_start":1522,"line_end":1522,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482800,"byte_end":482803,"line_start":1523,"line_end":1523,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482805,"byte_end":482819,"line_start":1524,"line_end":1524,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482821,"byte_end":482824,"line_start":1525,"line_end":1525,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482826,"byte_end":482837,"line_start":1526,"line_end":1526,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482839,"byte_end":482866,"line_start":1527,"line_end":1527,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482868,"byte_end":482871,"line_start":1528,"line_end":1528,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482873,"byte_end":482913,"line_start":1529,"line_end":1529,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482915,"byte_end":482918,"line_start":1530,"line_end":1530,"column_start":2,"column_end":5}},{"value":"/ for group in v.splitn_mut(2, |_pos, bit| *bit) {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482920,"byte_end":482972,"line_start":1531,"line_end":1531,"column_start":2,"column_end":54}},{"value":"/   group.set(0, true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482974,"byte_end":482999,"line_start":1532,"line_end":1532,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483001,"byte_end":483006,"line_start":1533,"line_end":1533,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![1, 0, 1, 1, 1, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483008,"byte_end":483051,"line_start":1534,"line_end":1534,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483053,"byte_end":483060,"line_start":1535,"line_end":1535,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483062,"byte_end":483065,"line_start":1536,"line_end":1536,"column_start":2,"column_end":5}},{"value":"/ [`.remove_alias()`]: crate::slice::SplitNMut::remove_alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483067,"byte_end":483129,"line_start":1537,"line_end":1537,"column_start":2,"column_end":64}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483131,"byte_end":483148,"line_start":1538,"line_end":1538,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483150,"byte_end":483180,"line_start":1539,"line_end":1539,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2658},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484410,"byte_end":484417,"line_start":1580,"line_end":1580,"column_start":9,"column_end":16},"name":"rsplitn","qualname":"<BitSlice<O, T>>::rsplitn","value":"pub fn rsplitn<F>(&Self, usize, F) -> RSplitN<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n limited to returning at most `n` items. This starts at the end of the\n slice and works backwards. The matched bit is not contained in the\n subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483344,"byte_end":483419,"line_start":1545,"line_end":1545,"column_start":2,"column_end":77}},{"value":"/ limited to returning at most `n` items. This starts at the end of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483421,"byte_end":483494,"line_start":1546,"line_end":1546,"column_start":2,"column_end":75}},{"value":"/ slice and works backwards. The matched bit is not contained in the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483496,"byte_end":483566,"line_start":1547,"line_end":1547,"column_start":2,"column_end":72}},{"value":"/ subslices.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483568,"byte_end":483582,"line_start":1548,"line_end":1548,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483584,"byte_end":483587,"line_start":1549,"line_end":1549,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483589,"byte_end":483665,"line_start":1550,"line_end":1550,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483667,"byte_end":483670,"line_start":1551,"line_end":1551,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483672,"byte_end":483686,"line_start":1552,"line_end":1552,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483688,"byte_end":483691,"line_start":1553,"line_end":1553,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplitn`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rsplitn)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483693,"byte_end":483789,"line_start":1554,"line_end":1554,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483791,"byte_end":483794,"line_start":1555,"line_end":1555,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483796,"byte_end":483817,"line_start":1556,"line_end":1556,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483819,"byte_end":483822,"line_start":1557,"line_end":1557,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483824,"byte_end":483892,"line_start":1558,"line_end":1558,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483894,"byte_end":483968,"line_start":1559,"line_end":1559,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483970,"byte_end":483980,"line_start":1560,"line_end":1560,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483982,"byte_end":483985,"line_start":1561,"line_end":1561,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483987,"byte_end":484001,"line_start":1562,"line_end":1562,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484003,"byte_end":484006,"line_start":1563,"line_end":1563,"column_start":2,"column_end":5}},{"value":"/ Print the slice split once, starting from the end, by set bits (i.e.,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484008,"byte_end":484081,"line_start":1564,"line_end":1564,"column_start":2,"column_end":75}},{"value":"/ `[0]`, `[0, 0, 1, 0]`):","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484083,"byte_end":484110,"line_start":1565,"line_end":1565,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484112,"byte_end":484115,"line_start":1566,"line_end":1566,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484117,"byte_end":484128,"line_start":1567,"line_end":1567,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484130,"byte_end":484157,"line_start":1568,"line_end":1568,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484159,"byte_end":484162,"line_start":1569,"line_end":1569,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 0, 1, 0, 1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484164,"byte_end":484200,"line_start":1570,"line_end":1570,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484202,"byte_end":484205,"line_start":1571,"line_end":1571,"column_start":2,"column_end":5}},{"value":"/ for group in v.rsplitn(2, |_pos, bit| *bit) {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484207,"byte_end":484256,"line_start":1572,"line_end":1572,"column_start":2,"column_end":51}},{"value":"/   # #[cfg(feature = \"std\")] {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484258,"byte_end":484291,"line_start":1573,"line_end":1573,"column_start":2,"column_end":35}},{"value":"/   println!(\"{:b}\", group);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484293,"byte_end":484323,"line_start":1574,"line_end":1574,"column_start":2,"column_end":32}},{"value":"/   # }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484325,"byte_end":484334,"line_start":1575,"line_end":1575,"column_start":2,"column_end":11}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484336,"byte_end":484341,"line_start":1576,"line_end":1576,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484343,"byte_end":484350,"line_start":1577,"line_end":1577,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484352,"byte_end":484369,"line_start":1578,"line_end":1578,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484371,"byte_end":484401,"line_start":1579,"line_end":1579,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2660},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485937,"byte_end":485948,"line_start":1624,"line_end":1624,"column_start":9,"column_end":20},"name":"rsplitn_mut","qualname":"<BitSlice<O, T>>::rsplitn_mut","value":"pub fn rsplitn_mut<F>(&mut Self, usize, F) -> RSplitNMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n limited to returning at most `n` items. This starts at the end of the\n slice and works backwards. The matched bit is not contained in the\n subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484542,"byte_end":484617,"line_start":1585,"line_end":1585,"column_start":2,"column_end":77}},{"value":"/ limited to returning at most `n` items. This starts at the end of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484619,"byte_end":484692,"line_start":1586,"line_end":1586,"column_start":2,"column_end":75}},{"value":"/ slice and works backwards. The matched bit is not contained in the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484694,"byte_end":484764,"line_start":1587,"line_end":1587,"column_start":2,"column_end":72}},{"value":"/ subslices.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484766,"byte_end":484780,"line_start":1588,"line_end":1588,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484782,"byte_end":484785,"line_start":1589,"line_end":1589,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484787,"byte_end":484863,"line_start":1590,"line_end":1590,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484865,"byte_end":484868,"line_start":1591,"line_end":1591,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484870,"byte_end":484884,"line_start":1592,"line_end":1592,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484886,"byte_end":484889,"line_start":1593,"line_end":1593,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplitn_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rsplitn_mut)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484891,"byte_end":484995,"line_start":1594,"line_end":1594,"column_start":2,"column_end":106}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484997,"byte_end":485000,"line_start":1595,"line_end":1595,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485002,"byte_end":485023,"line_start":1596,"line_end":1596,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485025,"byte_end":485028,"line_start":1597,"line_end":1597,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485030,"byte_end":485098,"line_start":1598,"line_end":1598,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485100,"byte_end":485174,"line_start":1599,"line_end":1599,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485176,"byte_end":485186,"line_start":1600,"line_end":1600,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485188,"byte_end":485191,"line_start":1601,"line_end":1601,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485193,"byte_end":485266,"line_start":1602,"line_end":1602,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485268,"byte_end":485338,"line_start":1603,"line_end":1603,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485340,"byte_end":485409,"line_start":1604,"line_end":1604,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485411,"byte_end":485487,"line_start":1605,"line_end":1605,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485489,"byte_end":485544,"line_start":1606,"line_end":1606,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485546,"byte_end":485549,"line_start":1607,"line_end":1607,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485551,"byte_end":485565,"line_start":1608,"line_end":1608,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485567,"byte_end":485570,"line_start":1609,"line_end":1609,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485572,"byte_end":485583,"line_start":1610,"line_end":1610,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485585,"byte_end":485612,"line_start":1611,"line_end":1611,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485614,"byte_end":485617,"line_start":1612,"line_end":1612,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485619,"byte_end":485659,"line_start":1613,"line_end":1613,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485661,"byte_end":485664,"line_start":1614,"line_end":1614,"column_start":2,"column_end":5}},{"value":"/ for group in v.rsplitn_mut(2, |_pos, bit| *bit) {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485666,"byte_end":485719,"line_start":1615,"line_end":1615,"column_start":2,"column_end":55}},{"value":"/   group.set(0, true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485721,"byte_end":485746,"line_start":1616,"line_end":1616,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485748,"byte_end":485753,"line_start":1617,"line_end":1617,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![1, 0, 1, 0, 1, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485755,"byte_end":485798,"line_start":1618,"line_end":1618,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485800,"byte_end":485807,"line_start":1619,"line_end":1619,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485809,"byte_end":485812,"line_start":1620,"line_end":1620,"column_start":2,"column_end":5}},{"value":"/ [`.remove_alias()`]: crate::slice::RSplitNMut::remove_alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485814,"byte_end":485877,"line_start":1621,"line_end":1621,"column_start":2,"column_end":65}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485879,"byte_end":485896,"line_start":1622,"line_end":1622,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485898,"byte_end":485928,"line_start":1623,"line_end":1623,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2662},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487247,"byte_end":487255,"line_start":1664,"line_end":1664,"column_start":9,"column_end":17},"name":"contains","qualname":"<BitSlice<O, T>>::contains","value":"pub fn contains<O2, T2>(&Self, &BitSlice<O2, T2>) -> bool where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the slice contains a subslice that matches the given\n span.","sig":null,"attributes":[{"value":"/ Returns `true` if the slice contains a subslice that matches the given","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486095,"byte_end":486169,"line_start":1629,"line_end":1629,"column_start":2,"column_end":76}},{"value":"/ span.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486171,"byte_end":486180,"line_start":1630,"line_end":1630,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486182,"byte_end":486185,"line_start":1631,"line_end":1631,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486187,"byte_end":486201,"line_start":1632,"line_end":1632,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486203,"byte_end":486206,"line_start":1633,"line_end":1633,"column_start":2,"column_end":5}},{"value":"/ [`slice::contains`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.contains)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486208,"byte_end":486306,"line_start":1634,"line_end":1634,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486308,"byte_end":486311,"line_start":1635,"line_end":1635,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486313,"byte_end":486334,"line_start":1636,"line_end":1636,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486336,"byte_end":486339,"line_start":1637,"line_end":1637,"column_start":2,"column_end":5}},{"value":"/ This searches for a matching subslice (allowing different type","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486341,"byte_end":486407,"line_start":1638,"line_end":1638,"column_start":2,"column_end":68}},{"value":"/ parameters) rather than for a specific bit. Searching for a contained","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486409,"byte_end":486482,"line_start":1639,"line_end":1639,"column_start":2,"column_end":75}},{"value":"/ element with a given value is not as useful on a collection of `bool`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486484,"byte_end":486558,"line_start":1640,"line_end":1640,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486560,"byte_end":486563,"line_start":1641,"line_end":1641,"column_start":2,"column_end":5}},{"value":"/ Furthermore, `BitSlice` defines [`any`] and [`not_all`], which are","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486565,"byte_end":486635,"line_start":1642,"line_end":1642,"column_start":2,"column_end":72}},{"value":"/ optimized searchers for any `true` or `false` bit, respectively, in a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486637,"byte_end":486710,"line_start":1643,"line_end":1643,"column_start":2,"column_end":75}},{"value":"/ sequence.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486712,"byte_end":486725,"line_start":1644,"line_end":1644,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486727,"byte_end":486730,"line_start":1645,"line_end":1645,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486732,"byte_end":486746,"line_start":1646,"line_end":1646,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486748,"byte_end":486751,"line_start":1647,"line_end":1647,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486753,"byte_end":486764,"line_start":1648,"line_end":1648,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486766,"byte_end":486793,"line_start":1649,"line_end":1649,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486795,"byte_end":486798,"line_start":1650,"line_end":1650,"column_start":2,"column_end":5}},{"value":"/ let data = 0b0101_1010u8;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486800,"byte_end":486829,"line_start":1651,"line_end":1651,"column_start":2,"column_end":31}},{"value":"/ let bits_msb = data.view_bits::<Msb0>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486831,"byte_end":486875,"line_start":1652,"line_end":1652,"column_start":2,"column_end":46}},{"value":"/ let bits_lsb = data.view_bits::<Lsb0>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486877,"byte_end":486921,"line_start":1653,"line_end":1653,"column_start":2,"column_end":46}},{"value":"/ assert!(bits_msb.contains(&bits_lsb[1 .. 5]));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486923,"byte_end":486973,"line_start":1654,"line_end":1654,"column_start":2,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486975,"byte_end":486982,"line_start":1655,"line_end":1655,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486984,"byte_end":486987,"line_start":1656,"line_end":1656,"column_start":2,"column_end":5}},{"value":"/ This example uses a palindrome pattern to demonstrate that the slice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486989,"byte_end":487061,"line_start":1657,"line_end":1657,"column_start":2,"column_end":74}},{"value":"/ being searched for does not need to have the same type parameters as the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487063,"byte_end":487139,"line_start":1658,"line_end":1658,"column_start":2,"column_end":78}},{"value":"/ slice being searched.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487141,"byte_end":487166,"line_start":1659,"line_end":1659,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487168,"byte_end":487171,"line_start":1660,"line_end":1660,"column_start":2,"column_end":5}},{"value":"/ [`any`]: Self::any","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487173,"byte_end":487195,"line_start":1661,"line_end":1661,"column_start":2,"column_end":24}},{"value":"/ [`not_all`]: Self::not_all","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487197,"byte_end":487227,"line_start":1662,"line_end":1662,"column_start":2,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487229,"byte_end":487238,"line_start":1663,"line_end":1663,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2666},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488188,"byte_end":488199,"line_start":1705,"line_end":1705,"column_start":9,"column_end":20},"name":"starts_with","qualname":"<BitSlice<O, T>>::starts_with","value":"pub fn starts_with<O2, T2>(&Self, &BitSlice<O2, T2>) -> bool where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `needle` is a prefix of the slice.","sig":null,"attributes":[{"value":"/ Returns `true` if `needle` is a prefix of the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487451,"byte_end":487507,"line_start":1676,"line_end":1676,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487509,"byte_end":487512,"line_start":1677,"line_end":1677,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487514,"byte_end":487528,"line_start":1678,"line_end":1678,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487530,"byte_end":487533,"line_start":1679,"line_end":1679,"column_start":2,"column_end":5}},{"value":"/ [`slice::starts_with`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.starts_with)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487535,"byte_end":487639,"line_start":1680,"line_end":1680,"column_start":2,"column_end":106}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487641,"byte_end":487644,"line_start":1681,"line_end":1681,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487646,"byte_end":487660,"line_start":1682,"line_end":1682,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487662,"byte_end":487665,"line_start":1683,"line_end":1683,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487667,"byte_end":487678,"line_start":1684,"line_end":1684,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487680,"byte_end":487707,"line_start":1685,"line_end":1685,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487709,"byte_end":487712,"line_start":1686,"line_end":1686,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 1, 0, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487714,"byte_end":487744,"line_start":1687,"line_end":1687,"column_start":2,"column_end":32}},{"value":"/ assert!(v.starts_with(bits![0]));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487746,"byte_end":487783,"line_start":1688,"line_end":1688,"column_start":2,"column_end":39}},{"value":"/ assert!(v.starts_with(bits![0, 1]));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487785,"byte_end":487825,"line_start":1689,"line_end":1689,"column_start":2,"column_end":42}},{"value":"/ assert!(!v.starts_with(bits![1]));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487827,"byte_end":487865,"line_start":1690,"line_end":1690,"column_start":2,"column_end":40}},{"value":"/ assert!(!v.starts_with(bits![1, 0]));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487867,"byte_end":487908,"line_start":1691,"line_end":1691,"column_start":2,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487910,"byte_end":487917,"line_start":1692,"line_end":1692,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487919,"byte_end":487922,"line_start":1693,"line_end":1693,"column_start":2,"column_end":5}},{"value":"/ Always returns `true` if `needle` is an empty slice:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487924,"byte_end":487980,"line_start":1694,"line_end":1694,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487982,"byte_end":487985,"line_start":1695,"line_end":1695,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487987,"byte_end":487998,"line_start":1696,"line_end":1696,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488000,"byte_end":488027,"line_start":1697,"line_end":1697,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488029,"byte_end":488032,"line_start":1698,"line_end":1698,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488034,"byte_end":488061,"line_start":1699,"line_end":1699,"column_start":2,"column_end":29}},{"value":"/ assert!(v.starts_with(bits![]));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488063,"byte_end":488099,"line_start":1700,"line_end":1700,"column_start":2,"column_end":38}},{"value":"/ let v = bits![];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488101,"byte_end":488121,"line_start":1701,"line_end":1701,"column_start":2,"column_end":22}},{"value":"/ assert!(v.starts_with(bits![]));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488123,"byte_end":488159,"line_start":1702,"line_end":1702,"column_start":2,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488161,"byte_end":488168,"line_start":1703,"line_end":1703,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488170,"byte_end":488179,"line_start":1704,"line_end":1704,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2669},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489115,"byte_end":489124,"line_start":1743,"line_end":1743,"column_start":9,"column_end":18},"name":"ends_with","qualname":"<BitSlice<O, T>>::ends_with","value":"pub fn ends_with<O2, T2>(&Self, &BitSlice<O2, T2>) -> bool where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `needle` is a suffix of the slice.","sig":null,"attributes":[{"value":"/ Returns `true` if `needle` is a suffix of the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488394,"byte_end":488450,"line_start":1714,"line_end":1714,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488452,"byte_end":488455,"line_start":1715,"line_end":1715,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488457,"byte_end":488471,"line_start":1716,"line_end":1716,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488473,"byte_end":488476,"line_start":1717,"line_end":1717,"column_start":2,"column_end":5}},{"value":"/ [`slice::ends_with`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.ends_with)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488478,"byte_end":488578,"line_start":1718,"line_end":1718,"column_start":2,"column_end":102}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488580,"byte_end":488583,"line_start":1719,"line_end":1719,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488585,"byte_end":488599,"line_start":1720,"line_end":1720,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488601,"byte_end":488604,"line_start":1721,"line_end":1721,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488606,"byte_end":488617,"line_start":1722,"line_end":1722,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488619,"byte_end":488646,"line_start":1723,"line_end":1723,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488648,"byte_end":488651,"line_start":1724,"line_end":1724,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 1, 0, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488653,"byte_end":488683,"line_start":1725,"line_end":1725,"column_start":2,"column_end":32}},{"value":"/ assert!(v.ends_with(bits![0]));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488685,"byte_end":488720,"line_start":1726,"line_end":1726,"column_start":2,"column_end":37}},{"value":"/ assert!(v.ends_with(bits![0; 2]));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488722,"byte_end":488760,"line_start":1727,"line_end":1727,"column_start":2,"column_end":40}},{"value":"/ assert!(!v.ends_with(bits![1]));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488762,"byte_end":488798,"line_start":1728,"line_end":1728,"column_start":2,"column_end":38}},{"value":"/ assert!(!v.ends_with(bits![1, 0]));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488800,"byte_end":488839,"line_start":1729,"line_end":1729,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488841,"byte_end":488848,"line_start":1730,"line_end":1730,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488850,"byte_end":488853,"line_start":1731,"line_end":1731,"column_start":2,"column_end":5}},{"value":"/ Always returns `true` if `needle` is an empty slice:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488855,"byte_end":488911,"line_start":1732,"line_end":1732,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488913,"byte_end":488916,"line_start":1733,"line_end":1733,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488918,"byte_end":488929,"line_start":1734,"line_end":1734,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488931,"byte_end":488958,"line_start":1735,"line_end":1735,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488960,"byte_end":488963,"line_start":1736,"line_end":1736,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488965,"byte_end":488992,"line_start":1737,"line_end":1737,"column_start":2,"column_end":29}},{"value":"/ assert!(v.ends_with(bits![]));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488994,"byte_end":489028,"line_start":1738,"line_end":1738,"column_start":2,"column_end":36}},{"value":"/ let v = bits![];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489030,"byte_end":489050,"line_start":1739,"line_end":1739,"column_start":2,"column_end":22}},{"value":"/ assert!(v.ends_with(bits![]));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489052,"byte_end":489086,"line_start":1740,"line_end":1740,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489088,"byte_end":489095,"line_start":1741,"line_end":1741,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489097,"byte_end":489106,"line_start":1742,"line_end":1742,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2672},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490436,"byte_end":490447,"line_start":1793,"line_end":1793,"column_start":9,"column_end":20},"name":"rotate_left","qualname":"<BitSlice<O, T>>::rotate_left","value":"pub fn rotate_left(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Rotates the slice in-place such that the first `by` bits of the slice\n move to the end while the last `self.len() - by` bits move to the\n front. After calling `.rotate_left()`, the bit previously at index `by`\n will become the first bit in the slice.","sig":null,"attributes":[{"value":"/ Rotates the slice in-place such that the first `by` bits of the slice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489345,"byte_end":489418,"line_start":1753,"line_end":1753,"column_start":2,"column_end":75}},{"value":"/ move to the end while the last `self.len() - by` bits move to the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489420,"byte_end":489489,"line_start":1754,"line_end":1754,"column_start":2,"column_end":71}},{"value":"/ front. After calling `.rotate_left()`, the bit previously at index `by`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489491,"byte_end":489566,"line_start":1755,"line_end":1755,"column_start":2,"column_end":77}},{"value":"/ will become the first bit in the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489568,"byte_end":489611,"line_start":1756,"line_end":1756,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489613,"byte_end":489616,"line_start":1757,"line_end":1757,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489618,"byte_end":489632,"line_start":1758,"line_end":1758,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489634,"byte_end":489637,"line_start":1759,"line_end":1759,"column_start":2,"column_end":5}},{"value":"/ [`slice::rotate_left`](https://doc.rust-lang.org/stable/std/primitive.slice.html#rotate_left)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489639,"byte_end":489736,"line_start":1760,"line_end":1760,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489738,"byte_end":489741,"line_start":1761,"line_end":1761,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489743,"byte_end":489755,"line_start":1762,"line_end":1762,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489757,"byte_end":489760,"line_start":1763,"line_end":1763,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `by` is greater than the length of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489762,"byte_end":489832,"line_start":1764,"line_end":1764,"column_start":2,"column_end":72}},{"value":"/ slice. Note that `by == self.len()` does *not* panic and is a noöp.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489834,"byte_end":489906,"line_start":1765,"line_end":1765,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489908,"byte_end":489911,"line_start":1766,"line_end":1766,"column_start":2,"column_end":5}},{"value":"/ # Complexity","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489913,"byte_end":489929,"line_start":1767,"line_end":1767,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489931,"byte_end":489934,"line_start":1768,"line_end":1768,"column_start":2,"column_end":5}},{"value":"/ Takes linear (in [`self.len()`]) time.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489936,"byte_end":489978,"line_start":1769,"line_end":1769,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489980,"byte_end":489983,"line_start":1770,"line_end":1770,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489985,"byte_end":489999,"line_start":1771,"line_end":1771,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490001,"byte_end":490004,"line_start":1772,"line_end":1772,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490006,"byte_end":490017,"line_start":1773,"line_end":1773,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490019,"byte_end":490046,"line_start":1774,"line_end":1774,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490048,"byte_end":490051,"line_start":1775,"line_end":1775,"column_start":2,"column_end":5}},{"value":"/ let a = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490053,"byte_end":490093,"line_start":1776,"line_end":1776,"column_start":2,"column_end":42}},{"value":"/ a.rotate_left(2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490095,"byte_end":490116,"line_start":1777,"line_end":1777,"column_start":2,"column_end":23}},{"value":"/ assert_eq!(a, bits![1, 0, 1, 0, 0, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490118,"byte_end":490161,"line_start":1778,"line_end":1778,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490163,"byte_end":490170,"line_start":1779,"line_end":1779,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490172,"byte_end":490175,"line_start":1780,"line_end":1780,"column_start":2,"column_end":5}},{"value":"/ Rotating a subslice:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490177,"byte_end":490201,"line_start":1781,"line_end":1781,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490203,"byte_end":490206,"line_start":1782,"line_end":1782,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490208,"byte_end":490219,"line_start":1783,"line_end":1783,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490221,"byte_end":490248,"line_start":1784,"line_end":1784,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490250,"byte_end":490253,"line_start":1785,"line_end":1785,"column_start":2,"column_end":5}},{"value":"/ let a = bits![mut 0, 0, 1, 0, 1, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490255,"byte_end":490295,"line_start":1786,"line_end":1786,"column_start":2,"column_end":42}},{"value":"/ a[1 .. 5].rotate_left(1);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490297,"byte_end":490326,"line_start":1787,"line_end":1787,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(a, bits![0, 1, 0, 1, 0, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490328,"byte_end":490371,"line_start":1788,"line_end":1788,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490373,"byte_end":490380,"line_start":1789,"line_end":1789,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490382,"byte_end":490385,"line_start":1790,"line_end":1790,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490387,"byte_end":490416,"line_start":1791,"line_end":1791,"column_start":2,"column_end":31}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490418,"byte_end":490427,"line_start":1792,"line_end":1792,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2673},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492778,"byte_end":492790,"line_start":1868,"line_end":1868,"column_start":9,"column_end":21},"name":"rotate_right","qualname":"<BitSlice<O, T>>::rotate_right","value":"pub fn rotate_right(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Rotates the slice in-place such that the first `self.len() - by` bits of\n the slice move to the end while the last `by` bits move to the front.\n After calling `.rotate_right()`, the bit previously at index `self.len()\n - by` will become the first bit in the slice.","sig":null,"attributes":[{"value":"/ Rotates the slice in-place such that the first `self.len() - by` bits of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491669,"byte_end":491745,"line_start":1828,"line_end":1828,"column_start":2,"column_end":78}},{"value":"/ the slice move to the end while the last `by` bits move to the front.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491747,"byte_end":491820,"line_start":1829,"line_end":1829,"column_start":2,"column_end":75}},{"value":"/ After calling `.rotate_right()`, the bit previously at index `self.len()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491822,"byte_end":491898,"line_start":1830,"line_end":1830,"column_start":2,"column_end":78}},{"value":"/ - by` will become the first bit in the slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491900,"byte_end":491949,"line_start":1831,"line_end":1831,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491951,"byte_end":491954,"line_start":1832,"line_end":1832,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491956,"byte_end":491970,"line_start":1833,"line_end":1833,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491972,"byte_end":491975,"line_start":1834,"line_end":1834,"column_start":2,"column_end":5}},{"value":"/ [`slice::rotate_right`](https://doc.rust-lang.org/stable/std/primitive.slice.html#rotate_right)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491977,"byte_end":492076,"line_start":1835,"line_end":1835,"column_start":2,"column_end":101}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492078,"byte_end":492081,"line_start":1836,"line_end":1836,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492083,"byte_end":492095,"line_start":1837,"line_end":1837,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492097,"byte_end":492100,"line_start":1838,"line_end":1838,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `by` is greater than the length of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492102,"byte_end":492172,"line_start":1839,"line_end":1839,"column_start":2,"column_end":72}},{"value":"/ slice. Note that `by == self.len()` does *not* panic and is a noöp.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492174,"byte_end":492246,"line_start":1840,"line_end":1840,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492248,"byte_end":492251,"line_start":1841,"line_end":1841,"column_start":2,"column_end":5}},{"value":"/ # Complexity","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492253,"byte_end":492269,"line_start":1842,"line_end":1842,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492271,"byte_end":492274,"line_start":1843,"line_end":1843,"column_start":2,"column_end":5}},{"value":"/ Takes linear (in [`self.len()`]) time.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492276,"byte_end":492318,"line_start":1844,"line_end":1844,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492320,"byte_end":492323,"line_start":1845,"line_end":1845,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492325,"byte_end":492339,"line_start":1846,"line_end":1846,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492341,"byte_end":492344,"line_start":1847,"line_end":1847,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492346,"byte_end":492357,"line_start":1848,"line_end":1848,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492359,"byte_end":492386,"line_start":1849,"line_end":1849,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492388,"byte_end":492391,"line_start":1850,"line_end":1850,"column_start":2,"column_end":5}},{"value":"/ let a = bits![mut 0, 0, 1, 1, 1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492393,"byte_end":492433,"line_start":1851,"line_end":1851,"column_start":2,"column_end":42}},{"value":"/ a.rotate_right(2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492435,"byte_end":492457,"line_start":1852,"line_end":1852,"column_start":2,"column_end":24}},{"value":"/ assert_eq!(a, bits![1, 0, 0, 0, 1, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492459,"byte_end":492502,"line_start":1853,"line_end":1853,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492504,"byte_end":492511,"line_start":1854,"line_end":1854,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492513,"byte_end":492516,"line_start":1855,"line_end":1855,"column_start":2,"column_end":5}},{"value":"/ Rotating a subslice:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492518,"byte_end":492542,"line_start":1856,"line_end":1856,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492544,"byte_end":492547,"line_start":1857,"line_end":1857,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492549,"byte_end":492560,"line_start":1858,"line_end":1858,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492562,"byte_end":492589,"line_start":1859,"line_end":1859,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492591,"byte_end":492594,"line_start":1860,"line_end":1860,"column_start":2,"column_end":5}},{"value":"/ let a = bits![mut 0, 0, 1, 0, 1, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492596,"byte_end":492636,"line_start":1861,"line_end":1861,"column_start":2,"column_end":42}},{"value":"/ a[1 .. 5].rotate_right(1);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492638,"byte_end":492668,"line_start":1862,"line_end":1862,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(a, bits![0, 1, 0, 1, 0, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492670,"byte_end":492713,"line_start":1863,"line_end":1863,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492715,"byte_end":492722,"line_start":1864,"line_end":1864,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492724,"byte_end":492727,"line_start":1865,"line_end":1865,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492729,"byte_end":492758,"line_start":1866,"line_end":1866,"column_start":2,"column_end":31}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492760,"byte_end":492769,"line_start":1867,"line_end":1867,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2674},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493551,"byte_end":493567,"line_start":1896,"line_end":1896,"column_start":9,"column_end":25},"name":"clone_from_slice","qualname":"<BitSlice<O, T>>::clone_from_slice","value":"pub fn clone_from_slice<O2, T2>(&mut Self, &BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493422,"byte_end":493439,"line_start":1893,"line_end":1893,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493441,"byte_end":493471,"line_start":1894,"line_end":1894,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `clone_from_bitslice` to copy between bitslices\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493473,"byte_end":493542,"line_start":1895,"line_end":1895,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2677},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493834,"byte_end":493849,"line_start":1908,"line_end":1908,"column_start":9,"column_end":24},"name":"copy_from_slice","qualname":"<BitSlice<O, T>>::copy_from_slice","value":"pub fn copy_from_slice(&mut Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493706,"byte_end":493723,"line_start":1905,"line_end":1905,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493725,"byte_end":493755,"line_start":1906,"line_end":1906,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `copy_from_bitslice` to copy between bitslices\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493757,"byte_end":493825,"line_start":1907,"line_end":1907,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2678},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494899,"byte_end":494910,"line_start":1944,"line_end":1944,"column_start":9,"column_end":20},"name":"copy_within","qualname":"<BitSlice<O, T>>::copy_within","value":"pub fn copy_within<R>(&mut Self, R, usize) where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Copies bits from one part of the slice to another part of itself.","sig":null,"attributes":[{"value":"/ Copies bits from one part of the slice to another part of itself.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493911,"byte_end":493980,"line_start":1912,"line_end":1912,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493982,"byte_end":493985,"line_start":1913,"line_end":1913,"column_start":2,"column_end":5}},{"value":"/ `src` is the range within `self` to copy from. `dest` is the starting","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493987,"byte_end":494060,"line_start":1914,"line_end":1914,"column_start":2,"column_end":75}},{"value":"/ index of the range within `self` to copy to, which will have the same","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494062,"byte_end":494135,"line_start":1915,"line_end":1915,"column_start":2,"column_end":75}},{"value":"/ length as `src`. The two ranges may overlap. The ends of the two ranges","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494137,"byte_end":494212,"line_start":1916,"line_end":1916,"column_start":2,"column_end":77}},{"value":"/ must be less than or equal to [`self.len()`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494214,"byte_end":494263,"line_start":1917,"line_end":1917,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494265,"byte_end":494268,"line_start":1918,"line_end":1918,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494270,"byte_end":494284,"line_start":1919,"line_end":1919,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494286,"byte_end":494289,"line_start":1920,"line_end":1920,"column_start":2,"column_end":5}},{"value":"/ [`slice::copy_within`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.copy_within)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494291,"byte_end":494395,"line_start":1921,"line_end":1921,"column_start":2,"column_end":106}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494397,"byte_end":494400,"line_start":1922,"line_end":1922,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494402,"byte_end":494414,"line_start":1923,"line_end":1923,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494416,"byte_end":494419,"line_start":1924,"line_end":1924,"column_start":2,"column_end":5}},{"value":"/ This function will panic if either range exceeds the end of the slice,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494421,"byte_end":494495,"line_start":1925,"line_end":1925,"column_start":2,"column_end":76}},{"value":"/ or if the end of `src` is before the start.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494497,"byte_end":494544,"line_start":1926,"line_end":1926,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494546,"byte_end":494549,"line_start":1927,"line_end":1927,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494551,"byte_end":494565,"line_start":1928,"line_end":1928,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494567,"byte_end":494570,"line_start":1929,"line_end":1929,"column_start":2,"column_end":5}},{"value":"/ Copying four bits within a slice:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494572,"byte_end":494609,"line_start":1930,"line_end":1930,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494611,"byte_end":494614,"line_start":1931,"line_end":1931,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494616,"byte_end":494627,"line_start":1932,"line_end":1932,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494629,"byte_end":494656,"line_start":1933,"line_end":1933,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494658,"byte_end":494661,"line_start":1934,"line_end":1934,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494663,"byte_end":494724,"line_start":1935,"line_end":1935,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494726,"byte_end":494729,"line_start":1936,"line_end":1936,"column_start":2,"column_end":5}},{"value":"/ bits.copy_within(1 .. 5, 8);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494731,"byte_end":494763,"line_start":1937,"line_end":1937,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494765,"byte_end":494768,"line_start":1938,"line_end":1938,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits, bits![1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494770,"byte_end":494834,"line_start":1939,"line_end":1939,"column_start":2,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494836,"byte_end":494843,"line_start":1940,"line_end":1940,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494845,"byte_end":494848,"line_start":1941,"line_end":1941,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494850,"byte_end":494879,"line_start":1942,"line_end":1942,"column_start":2,"column_end":31}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494881,"byte_end":494890,"line_start":1943,"line_end":1943,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2680},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495461,"byte_end":495476,"line_start":1961,"line_end":1961,"column_start":9,"column_end":24},"name":"swap_with_slice","qualname":"<BitSlice<O, T>>::swap_with_slice","value":"pub fn swap_with_slice<O2, T2>(&mut Self, &mut BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495333,"byte_end":495350,"line_start":1958,"line_end":1958,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495352,"byte_end":495382,"line_start":1959,"line_end":1959,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `swap_with_bitslice` to swap between bitslices\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495384,"byte_end":495452,"line_start":1960,"line_end":1960,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2683},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498252,"byte_end":498260,"line_start":2038,"line_end":2038,"column_start":16,"column_end":24},"name":"align_to","qualname":"<BitSlice<O, T>>::align_to","value":"pub unsafe fn align_to<U>(&Self) -> (&Self, &BitSlice<O, U>, &Self) where\nU: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Transmute the bit-slice to a bit-slice of another type, ensuring\n alignment of the types is maintained.","sig":null,"attributes":[{"value":"/ Transmute the bit-slice to a bit-slice of another type, ensuring","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495607,"byte_end":495675,"line_start":1969,"line_end":1969,"column_start":2,"column_end":70}},{"value":"/ alignment of the types is maintained.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495677,"byte_end":495718,"line_start":1970,"line_end":1970,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495720,"byte_end":495723,"line_start":1971,"line_end":1971,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495725,"byte_end":495739,"line_start":1972,"line_end":1972,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495741,"byte_end":495744,"line_start":1973,"line_end":1973,"column_start":2,"column_end":5}},{"value":"/ [`slice::align_to`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495746,"byte_end":495769,"line_start":1974,"line_end":1974,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495771,"byte_end":495774,"line_start":1975,"line_end":1975,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495776,"byte_end":495797,"line_start":1976,"line_end":1976,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495799,"byte_end":495802,"line_start":1977,"line_end":1977,"column_start":2,"column_end":5}},{"value":"/ Type `U` is **required** to have the same [`BitStore`] type family as","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495804,"byte_end":495877,"line_start":1978,"line_end":1978,"column_start":2,"column_end":75}},{"value":"/ type `T`. If `T` is a fundamental integer, so must `U` be; if `T` is an","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495879,"byte_end":495954,"line_start":1979,"line_end":1979,"column_start":2,"column_end":77}},{"value":"/ [`::Alias`] type, then so must `U`. Changing the type family with this","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495956,"byte_end":496030,"line_start":1980,"line_end":1980,"column_start":2,"column_end":76}},{"value":"/ method is **unsound** and strictly forbidden. Unfortunately, this cannot","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":496032,"byte_end":496108,"line_start":1981,"line_end":1981,"column_start":2,"column_end":78}},{"value":"/ be encoded in the type system, so you are required to abide by this","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":496110,"byte_end":496181,"line_start":1982,"line_end":1982,"column_start":2,"column_end":73}},{"value":"/ limitation yourself.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":496183,"byte_end":496207,"line_start":1983,"line_end":1983,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":496209,"byte_end":496212,"line_start":1984,"line_end":1984,"column_start":2,"column_end":5}},{"value":"/ # Implementation","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":496214,"byte_end":496234,"line_start":1985,"line_end":1985,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":496236,"byte_end":496239,"line_start":1986,"line_end":1986,"column_start":2,"column_end":5}},{"value":"/ The algorithm used to implement this function attempts to create the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":496241,"byte_end":496313,"line_start":1987,"line_end":1987,"column_start":2,"column_end":74}},{"value":"/ widest possible span for the middle slice. However, the slice divisions","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":496315,"byte_end":496390,"line_start":1988,"line_end":1988,"column_start":2,"column_end":77}},{"value":"/ must abide by the [`Domain`] restrictions: the left and right slices","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":496392,"byte_end":496464,"line_start":1989,"line_end":1989,"column_start":2,"column_end":74}},{"value":"/ produced by this function will include the head and tail elements of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":496466,"byte_end":496542,"line_start":1990,"line_end":1990,"column_start":2,"column_end":78}},{"value":"/ domain (if present), as well as the left and right subslices (if any)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":496544,"byte_end":496617,"line_start":1991,"line_end":1991,"column_start":2,"column_end":75}},{"value":"/ produced by calling [`slice::align_to`] on the domain body (if present).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":496619,"byte_end":496695,"line_start":1992,"line_end":1992,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":496697,"byte_end":496700,"line_start":1993,"line_end":1993,"column_start":2,"column_end":5}},{"value":"/ The standard library implementation currently maximizes the width of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":496702,"byte_end":496778,"line_start":1994,"line_end":1994,"column_start":2,"column_end":78}},{"value":"/ center slice, but its API does not guarantee this property, and retains","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":496780,"byte_end":496855,"line_start":1995,"line_end":1995,"column_start":2,"column_end":77}},{"value":"/ the right to produce pessimal slices. As such, this function cannot","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":496857,"byte_end":496928,"line_start":1996,"line_end":1996,"column_start":2,"column_end":73}},{"value":"/ guarantee maximal center slice width either, and you cannot rely on this","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":496930,"byte_end":497006,"line_start":1997,"line_end":1997,"column_start":2,"column_end":78}},{"value":"/ behavior for *correctness* of your work; it is only a possible","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497008,"byte_end":497074,"line_start":1998,"line_end":1998,"column_start":2,"column_end":68}},{"value":"/ performance improvement.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497076,"byte_end":497104,"line_start":1999,"line_end":1999,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497106,"byte_end":497109,"line_start":2000,"line_end":2000,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497111,"byte_end":497123,"line_start":2001,"line_end":2001,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497125,"byte_end":497128,"line_start":2002,"line_end":2002,"column_start":2,"column_end":5}},{"value":"/ This method is essentially a [`mem::transmute`][mt] with respect to the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497130,"byte_end":497205,"line_start":2003,"line_end":2003,"column_start":2,"column_end":77}},{"value":"/ memory region in the retured middle slice, so all of the usual caveats","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497207,"byte_end":497281,"line_start":2004,"line_end":2004,"column_start":2,"column_end":76}},{"value":"/ pertaining to [`mem::transmute::<T, U>`][mt] also apply here.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497283,"byte_end":497348,"line_start":2005,"line_end":2005,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497350,"byte_end":497353,"line_start":2006,"line_end":2006,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497355,"byte_end":497369,"line_start":2007,"line_end":2007,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497371,"byte_end":497374,"line_start":2008,"line_end":2008,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497376,"byte_end":497392,"line_start":2009,"line_end":2009,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497394,"byte_end":497397,"line_start":2010,"line_end":2010,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497399,"byte_end":497410,"line_start":2011,"line_end":2011,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497412,"byte_end":497439,"line_start":2012,"line_end":2012,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497441,"byte_end":497444,"line_start":2013,"line_end":2013,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497446,"byte_end":497458,"line_start":2014,"line_end":2014,"column_start":2,"column_end":14}},{"value":"/   let bytes: [u8; 7] = [1, 2, 3, 4, 5, 6, 7];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497460,"byte_end":497509,"line_start":2015,"line_end":2015,"column_start":2,"column_end":51}},{"value":"/   let bits = bytes.view_bits::<LocalBits>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497511,"byte_end":497559,"line_start":2016,"line_end":2016,"column_start":2,"column_end":50}},{"value":"/   let (prefix, shorts, suffix) = bits.align_to::<u16>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497561,"byte_end":497621,"line_start":2017,"line_end":2017,"column_start":2,"column_end":62}},{"value":"/   match prefix.len() {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497623,"byte_end":497649,"line_start":2018,"line_end":2018,"column_start":2,"column_end":28}},{"value":"/     0 => {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497651,"byte_end":497665,"line_start":2019,"line_end":2019,"column_start":2,"column_end":16}},{"value":"/       assert_eq!(shorts, bits[.. 48]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497667,"byte_end":497709,"line_start":2020,"line_end":2020,"column_start":2,"column_end":44}},{"value":"/       assert_eq!(suffix, bits[48 ..]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497711,"byte_end":497753,"line_start":2021,"line_end":2021,"column_start":2,"column_end":44}},{"value":"/     },","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497755,"byte_end":497765,"line_start":2022,"line_end":2022,"column_start":2,"column_end":12}},{"value":"/     8 => {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497767,"byte_end":497781,"line_start":2023,"line_end":2023,"column_start":2,"column_end":16}},{"value":"/       assert_eq!(prefix, bits[.. 8]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497783,"byte_end":497824,"line_start":2024,"line_end":2024,"column_start":2,"column_end":43}},{"value":"/       assert_eq!(shorts, bits[8 ..]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497826,"byte_end":497867,"line_start":2025,"line_end":2025,"column_start":2,"column_end":43}},{"value":"/     },","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497869,"byte_end":497879,"line_start":2026,"line_end":2026,"column_start":2,"column_end":12}},{"value":"/     _ => unreachable!(\"This case will not occur\")","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497881,"byte_end":497934,"line_start":2027,"line_end":2027,"column_start":2,"column_end":55}},{"value":"/   }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497936,"byte_end":497943,"line_start":2028,"line_end":2028,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497945,"byte_end":497950,"line_start":2029,"line_end":2029,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497952,"byte_end":497959,"line_start":2030,"line_end":2030,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497961,"byte_end":497964,"line_start":2031,"line_end":2031,"column_start":2,"column_end":5}},{"value":"/ [mt]: core::mem::transmute","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497966,"byte_end":497996,"line_start":2032,"line_end":2032,"column_start":2,"column_end":32}},{"value":"/ [`BitStore`]: crate::store::BitStore","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497998,"byte_end":498038,"line_start":2033,"line_end":2033,"column_start":2,"column_end":42}},{"value":"/ [`Domain`]: crate::domain::Domain","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498040,"byte_end":498077,"line_start":2034,"line_end":2034,"column_start":2,"column_end":39}},{"value":"/ [`slice::align_to`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.align_to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498079,"byte_end":498177,"line_start":2035,"line_end":2035,"column_start":2,"column_end":100}},{"value":"/ [`::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498179,"byte_end":498225,"line_start":2036,"line_end":2036,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498227,"byte_end":498236,"line_start":2037,"line_end":2037,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2685},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500883,"byte_end":500895,"line_start":2108,"line_end":2108,"column_start":16,"column_end":28},"name":"align_to_mut","qualname":"<BitSlice<O, T>>::align_to_mut","value":"pub unsafe fn align_to_mut<U>(&mut Self)\n-> (&mut Self, &mut BitSlice<O, U>, &mut Self) where U: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Transmute the bit-slice to a bit-slice of another type, ensuring\n alignment of the types is maintained.","sig":null,"attributes":[{"value":"/ Transmute the bit-slice to a bit-slice of another type, ensuring","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498465,"byte_end":498533,"line_start":2048,"line_end":2048,"column_start":2,"column_end":70}},{"value":"/ alignment of the types is maintained.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498535,"byte_end":498576,"line_start":2049,"line_end":2049,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498578,"byte_end":498581,"line_start":2050,"line_end":2050,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498583,"byte_end":498597,"line_start":2051,"line_end":2051,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498599,"byte_end":498602,"line_start":2052,"line_end":2052,"column_start":2,"column_end":5}},{"value":"/ [`slice::align_to_mut`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498604,"byte_end":498631,"line_start":2053,"line_end":2053,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498633,"byte_end":498636,"line_start":2054,"line_end":2054,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498638,"byte_end":498659,"line_start":2055,"line_end":2055,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498661,"byte_end":498664,"line_start":2056,"line_end":2056,"column_start":2,"column_end":5}},{"value":"/ Type `U` is **required** to have the same [`BitStore`] type family as","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498666,"byte_end":498739,"line_start":2057,"line_end":2057,"column_start":2,"column_end":75}},{"value":"/ type `T`. If `T` is a fundamental integer, so must `U` be; if `T` is an","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498741,"byte_end":498816,"line_start":2058,"line_end":2058,"column_start":2,"column_end":77}},{"value":"/ [`::Alias`] type, then so must `U`. Changing the type family with this","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498818,"byte_end":498892,"line_start":2059,"line_end":2059,"column_start":2,"column_end":76}},{"value":"/ method is **unsound** and strictly forbidden. Unfortunately, this cannot","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498894,"byte_end":498970,"line_start":2060,"line_end":2060,"column_start":2,"column_end":78}},{"value":"/ be encoded in the type system, so you are required to abide by this","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498972,"byte_end":499043,"line_start":2061,"line_end":2061,"column_start":2,"column_end":73}},{"value":"/ limitation yourself.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499045,"byte_end":499069,"line_start":2062,"line_end":2062,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499071,"byte_end":499074,"line_start":2063,"line_end":2063,"column_start":2,"column_end":5}},{"value":"/ # Implementation","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499076,"byte_end":499096,"line_start":2064,"line_end":2064,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499098,"byte_end":499101,"line_start":2065,"line_end":2065,"column_start":2,"column_end":5}},{"value":"/ The algorithm used to implement this function attempts to create the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499103,"byte_end":499175,"line_start":2066,"line_end":2066,"column_start":2,"column_end":74}},{"value":"/ widest possible span for the middle slice. However, the slice divisions","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499177,"byte_end":499252,"line_start":2067,"line_end":2067,"column_start":2,"column_end":77}},{"value":"/ must abide by the [`DomainMut`] restrictions: the left and right slices","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499254,"byte_end":499329,"line_start":2068,"line_end":2068,"column_start":2,"column_end":77}},{"value":"/ produced by this function will include the head and tail elements of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499331,"byte_end":499407,"line_start":2069,"line_end":2069,"column_start":2,"column_end":78}},{"value":"/ domain (if present), as well as the left and right subslices (if any)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499409,"byte_end":499482,"line_start":2070,"line_end":2070,"column_start":2,"column_end":75}},{"value":"/ produced by calling [`slice::align_to_mut`] on the domain body (if","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499484,"byte_end":499554,"line_start":2071,"line_end":2071,"column_start":2,"column_end":72}},{"value":"/ present).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499556,"byte_end":499569,"line_start":2072,"line_end":2072,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499571,"byte_end":499574,"line_start":2073,"line_end":2073,"column_start":2,"column_end":5}},{"value":"/ The standard library implementation currently maximizes the width of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499576,"byte_end":499652,"line_start":2074,"line_end":2074,"column_start":2,"column_end":78}},{"value":"/ center slice, but its API does not guarantee this property, and retains","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499654,"byte_end":499729,"line_start":2075,"line_end":2075,"column_start":2,"column_end":77}},{"value":"/ the right to produce pessimal slices. As such, this function cannot","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499731,"byte_end":499802,"line_start":2076,"line_end":2076,"column_start":2,"column_end":73}},{"value":"/ guarantee maximal center slice width either, and you cannot rely on this","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499804,"byte_end":499880,"line_start":2077,"line_end":2077,"column_start":2,"column_end":78}},{"value":"/ behavior for *correctness* of your work; it is only a possible","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499882,"byte_end":499948,"line_start":2078,"line_end":2078,"column_start":2,"column_end":68}},{"value":"/ performance improvement.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499950,"byte_end":499978,"line_start":2079,"line_end":2079,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499980,"byte_end":499983,"line_start":2080,"line_end":2080,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499985,"byte_end":499997,"line_start":2081,"line_end":2081,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499999,"byte_end":500002,"line_start":2082,"line_end":2082,"column_start":2,"column_end":5}},{"value":"/ This method is essentially a [`mem::transmute`][mt] with respect to the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500004,"byte_end":500079,"line_start":2083,"line_end":2083,"column_start":2,"column_end":77}},{"value":"/ memory region in the retured middle slice, so all of the usual caveats","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500081,"byte_end":500155,"line_start":2084,"line_end":2084,"column_start":2,"column_end":76}},{"value":"/ pertaining to [`mem::transmute::<T, U>`][mt] also apply here.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500157,"byte_end":500222,"line_start":2085,"line_end":2085,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500224,"byte_end":500227,"line_start":2086,"line_end":2086,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500229,"byte_end":500243,"line_start":2087,"line_end":2087,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500245,"byte_end":500248,"line_start":2088,"line_end":2088,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500250,"byte_end":500266,"line_start":2089,"line_end":2089,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500268,"byte_end":500271,"line_start":2090,"line_end":2090,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500273,"byte_end":500284,"line_start":2091,"line_end":2091,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500286,"byte_end":500313,"line_start":2092,"line_end":2092,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500315,"byte_end":500318,"line_start":2093,"line_end":2093,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500320,"byte_end":500332,"line_start":2094,"line_end":2094,"column_start":2,"column_end":14}},{"value":"/   let mut bytes: [u8; 7] = [1, 2, 3, 4, 5, 6, 7];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500334,"byte_end":500387,"line_start":2095,"line_end":2095,"column_start":2,"column_end":55}},{"value":"/   let bits = bytes.view_bits_mut::<LocalBits>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500389,"byte_end":500441,"line_start":2096,"line_end":2096,"column_start":2,"column_end":54}},{"value":"/   let (prefix, shorts, suffix) = bits.align_to_mut::<u16>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500443,"byte_end":500507,"line_start":2097,"line_end":2097,"column_start":2,"column_end":66}},{"value":"/   //  same access and behavior as in `align_to`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500509,"byte_end":500560,"line_start":2098,"line_end":2098,"column_start":2,"column_end":53}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500562,"byte_end":500567,"line_start":2099,"line_end":2099,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500569,"byte_end":500576,"line_start":2100,"line_end":2100,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500578,"byte_end":500581,"line_start":2101,"line_end":2101,"column_start":2,"column_end":5}},{"value":"/ [mt]: core::mem::transmute","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500583,"byte_end":500613,"line_start":2102,"line_end":2102,"column_start":2,"column_end":32}},{"value":"/ [`BitStore`]: crate::store::BitStore","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500615,"byte_end":500655,"line_start":2103,"line_end":2103,"column_start":2,"column_end":42}},{"value":"/ [`DomainMut`]: crate::domain::DomainMut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500657,"byte_end":500700,"line_start":2104,"line_end":2104,"column_start":2,"column_end":45}},{"value":"/ [`slice::align_to_mut`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.align_to_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500702,"byte_end":500808,"line_start":2105,"line_end":2105,"column_start":2,"column_end":108}},{"value":"/ [`::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500810,"byte_end":500856,"line_start":2106,"line_end":2106,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500858,"byte_end":500867,"line_start":2107,"line_end":2107,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2690},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501417,"byte_end":501423,"line_start":2135,"line_end":2135,"column_start":9,"column_end":15},"name":"to_vec","qualname":"<BitSlice<O, T>>::to_vec","value":"pub fn to_vec(&Self) -> BitVec<O, T::Unalias>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501321,"byte_end":501338,"line_start":2132,"line_end":2132,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501340,"byte_end":501370,"line_start":2133,"line_end":2133,"column_start":2,"column_end":32}},{"value":"deprecated = \"Prefer `to_bitvec`\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501372,"byte_end":501408,"line_start":2134,"line_end":2134,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2691},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502139,"byte_end":502145,"line_start":2168,"line_end":2168,"column_start":9,"column_end":15},"name":"repeat","qualname":"<BitSlice<O, T>>::repeat","value":"pub fn repeat(&Self, usize) -> BitVec<O, T::Unalias>","parent":null,"children":[],"decl_id":null,"docs":" Creates a vector by repeating a slice `n` times.","sig":null,"attributes":[{"value":"/ Creates a vector by repeating a slice `n` times.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501482,"byte_end":501534,"line_start":2139,"line_end":2139,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501536,"byte_end":501539,"line_start":2140,"line_end":2140,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501541,"byte_end":501555,"line_start":2141,"line_end":2141,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501557,"byte_end":501560,"line_start":2142,"line_end":2142,"column_start":2,"column_end":5}},{"value":"/ [`slice::repeat`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.repeat)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501562,"byte_end":501656,"line_start":2143,"line_end":2143,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501658,"byte_end":501661,"line_start":2144,"line_end":2144,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501663,"byte_end":501675,"line_start":2145,"line_end":2145,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501677,"byte_end":501680,"line_start":2146,"line_end":2146,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the capacity would overflow.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501682,"byte_end":501742,"line_start":2147,"line_end":2147,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501744,"byte_end":501747,"line_start":2148,"line_end":2148,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501749,"byte_end":501763,"line_start":2149,"line_end":2149,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501765,"byte_end":501768,"line_start":2150,"line_end":2150,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501770,"byte_end":501786,"line_start":2151,"line_end":2151,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501788,"byte_end":501791,"line_start":2152,"line_end":2152,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501793,"byte_end":501804,"line_start":2153,"line_end":2153,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501806,"byte_end":501833,"line_start":2154,"line_end":2154,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501835,"byte_end":501838,"line_start":2155,"line_end":2155,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![0, 1].repeat(3), bits![0, 1, 0, 1, 0, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501840,"byte_end":501903,"line_start":2156,"line_end":2156,"column_start":2,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501905,"byte_end":501912,"line_start":2157,"line_end":2157,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501914,"byte_end":501917,"line_start":2158,"line_end":2158,"column_start":2,"column_end":5}},{"value":"/ A panic upon overflow:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501919,"byte_end":501945,"line_start":2159,"line_end":2159,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501947,"byte_end":501950,"line_start":2160,"line_end":2160,"column_start":2,"column_end":5}},{"value":"/ ```rust,should_panic","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501952,"byte_end":501976,"line_start":2161,"line_end":2161,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501978,"byte_end":502005,"line_start":2162,"line_end":2162,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502007,"byte_end":502010,"line_start":2163,"line_end":2163,"column_start":2,"column_end":5}},{"value":"/ // this will panic at runtime","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502012,"byte_end":502045,"line_start":2164,"line_end":2164,"column_start":2,"column_end":35}},{"value":"/ bits![0, 1].repeat(BitSlice::<LocalBits, usize>::MAX_BITS);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502047,"byte_end":502110,"line_start":2165,"line_end":2165,"column_start":2,"column_end":65}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502112,"byte_end":502119,"line_start":2166,"line_end":2166,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502121,"byte_end":502130,"line_start":2167,"line_end":2167,"column_start":2,"column_end":11}}]},{"kind":"Function","id":{"krate":0,"index":2692},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503089,"byte_end":503097,"line_start":2201,"line_end":2201,"column_start":8,"column_end":16},"name":"from_ref","qualname":"::slice::api::from_ref","value":"pub fn from_ref<O, T>(&T) -> &BitSlice<O, T> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Converts a reference to `T` into a [`BitSlice`] over one element.","sig":null,"attributes":[{"value":"* Converts a reference to `T` into a [`BitSlice`] over one element.\n\n# Original\n\n[`slice::from_ref`](core::slice::from_ref)\n\n[`BitSlice`]: crate::slice::BitSlice\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502865,"byte_end":503032,"line_start":2191,"line_end":2198,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503033,"byte_end":503050,"line_start":2199,"line_end":2199,"column_start":1,"column_end":18}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503051,"byte_end":503081,"line_start":2200,"line_end":2200,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":2695},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503426,"byte_end":503434,"line_start":2219,"line_end":2219,"column_start":8,"column_end":16},"name":"from_mut","qualname":"::slice::api::from_mut","value":"pub fn from_mut<O, T>(&mut T) -> &mut BitSlice<O, T> where O: BitOrder,\nT: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Converts a reference to `T` into a [`BitSlice`] over one element.","sig":null,"attributes":[{"value":"* Converts a reference to `T` into a [`BitSlice`] over one element.\n\n# Original\n\n[`slice::from_mut`](core::slice::from_mut)\n\n[`BitSlice`]: crate::slice::BitSlice\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503202,"byte_end":503369,"line_start":2209,"line_end":2216,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503370,"byte_end":503387,"line_start":2217,"line_end":2217,"column_start":1,"column_end":18}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503388,"byte_end":503418,"line_start":2218,"line_end":2218,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":2698},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507263,"byte_end":507277,"line_start":2333,"line_end":2333,"column_start":15,"column_end":29},"name":"from_raw_parts","qualname":"::slice::api::from_raw_parts","value":"pub unsafe fn from_raw_parts<'a, O, T>(BitPtr<Const, O, T>, usize)\n-> Result<&'a BitSlice<O, T>, BitSpanError<T>> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Forms a bit-slice from a bit-pointer and a length.","sig":null,"attributes":[{"value":"/ Forms a bit-slice from a bit-pointer and a length.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503784,"byte_end":503838,"line_start":2232,"line_end":2232,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503839,"byte_end":503842,"line_start":2233,"line_end":2233,"column_start":1,"column_end":4}},{"value":"/ The `len` argument is the number of **bits**, not the number of bytes or","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503843,"byte_end":503919,"line_start":2234,"line_end":2234,"column_start":1,"column_end":77}},{"value":"/ elements.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503920,"byte_end":503933,"line_start":2235,"line_end":2235,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503934,"byte_end":503937,"line_start":2236,"line_end":2236,"column_start":1,"column_end":4}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503938,"byte_end":503952,"line_start":2237,"line_end":2237,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503953,"byte_end":503956,"line_start":2238,"line_end":2238,"column_start":1,"column_end":4}},{"value":"/ [`slice::from_raw_parts`](core::slice::from_raw_parts)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503957,"byte_end":504015,"line_start":2239,"line_end":2239,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504016,"byte_end":504019,"line_start":2240,"line_end":2240,"column_start":1,"column_end":4}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504020,"byte_end":504041,"line_start":2241,"line_end":2241,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504042,"byte_end":504045,"line_start":2242,"line_end":2242,"column_start":1,"column_end":4}},{"value":"/ This takes a [`BitPtr`] as its base address, rather than a raw `*Bit`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504046,"byte_end":504119,"line_start":2243,"line_end":2243,"column_start":1,"column_end":74}},{"value":"/ pointer, as `bitvec` does not provide raw pointers to individual bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504120,"byte_end":504194,"line_start":2244,"line_end":2244,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504195,"byte_end":504198,"line_start":2245,"line_end":2245,"column_start":1,"column_end":4}},{"value":"/ It returns a `Result`, because the `len` argument may be invalid to encode","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504199,"byte_end":504277,"line_start":2246,"line_end":2246,"column_start":1,"column_end":79}},{"value":"/ into a `&BitSlice` reference.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504278,"byte_end":504311,"line_start":2247,"line_end":2247,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504312,"byte_end":504315,"line_start":2248,"line_end":2248,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504316,"byte_end":504328,"line_start":2249,"line_end":2249,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504329,"byte_end":504332,"line_start":2250,"line_end":2250,"column_start":1,"column_end":4}},{"value":"/ Behavior is undefined if any of the following conditions are violated:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504333,"byte_end":504407,"line_start":2251,"line_end":2251,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504408,"byte_end":504411,"line_start":2252,"line_end":2252,"column_start":1,"column_end":4}},{"value":"/ - `data` must be valid for reads for `len` many bits, and it must be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504412,"byte_end":504484,"line_start":2253,"line_end":2253,"column_start":1,"column_end":73}},{"value":"/   properly aligned. This means in particular:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504485,"byte_end":504534,"line_start":2254,"line_end":2254,"column_start":1,"column_end":50}},{"value":"/   - The entire memory range of this slice must be contained within a single","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504535,"byte_end":504614,"line_start":2255,"line_end":2255,"column_start":1,"column_end":80}},{"value":"/     allocated object! Slices can never span across multiple allocated","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504615,"byte_end":504688,"line_start":2256,"line_end":2256,"column_start":1,"column_end":74}},{"value":"/     objects. See [below] for an example incorrectly not taking this into","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504689,"byte_end":504765,"line_start":2257,"line_end":2257,"column_start":1,"column_end":77}},{"value":"/     account.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504766,"byte_end":504782,"line_start":2258,"line_end":2258,"column_start":1,"column_end":17}},{"value":"/   - `data` must be non-null, and its `T` portion must be aligned. Both of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504783,"byte_end":504860,"line_start":2259,"line_end":2259,"column_start":1,"column_end":78}},{"value":"/     these conditions are checked during safe construction of the [`BitPtr`],","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504861,"byte_end":504941,"line_start":2260,"line_end":2260,"column_start":1,"column_end":81}},{"value":"/     and `unsafe` construction of it **must not** violate them. Doing so will","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504942,"byte_end":505022,"line_start":2261,"line_end":2261,"column_start":1,"column_end":81}},{"value":"/     cause incorrect behavior in the crate.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505023,"byte_end":505069,"line_start":2262,"line_end":2262,"column_start":1,"column_end":47}},{"value":"/ - `data` must point to `len` consecutive bits within properly initialized","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505070,"byte_end":505147,"line_start":2263,"line_end":2263,"column_start":1,"column_end":78}},{"value":"/   memory elements `T`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505148,"byte_end":505174,"line_start":2264,"line_end":2264,"column_start":1,"column_end":27}},{"value":"/ - The memory referenced by the returned slice must not be mutated for the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505175,"byte_end":505252,"line_start":2265,"line_end":2265,"column_start":1,"column_end":78}},{"value":"/   duration of the lifetime `'a`, except if `T` is an atomic or a `Cell`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505253,"byte_end":505328,"line_start":2266,"line_end":2266,"column_start":1,"column_end":76}},{"value":"/   type.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505329,"byte_end":505340,"line_start":2267,"line_end":2267,"column_start":1,"column_end":12}},{"value":"/ - `len` cannot exceed [`BitSlice::MAX_BITS`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505341,"byte_end":505390,"line_start":2268,"line_end":2268,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505391,"byte_end":505394,"line_start":2269,"line_end":2269,"column_start":1,"column_end":4}},{"value":"/ # Caveat","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505395,"byte_end":505407,"line_start":2270,"line_end":2270,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505408,"byte_end":505411,"line_start":2271,"line_end":2271,"column_start":1,"column_end":4}},{"value":"/ The lifetime for the returned slice is inferred from its usage. To prevent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505412,"byte_end":505490,"line_start":2272,"line_end":2272,"column_start":1,"column_end":79}},{"value":"/ accidental misuse, it’s suggested to tie the lifetime to whichever source","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505491,"byte_end":505570,"line_start":2273,"line_end":2273,"column_start":1,"column_end":78}},{"value":"/ lifetime is safe in the context, such as by providing a helper function","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505571,"byte_end":505646,"line_start":2274,"line_end":2274,"column_start":1,"column_end":76}},{"value":"/ taking the lifetime of a host value for the slice, or by explicit","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505647,"byte_end":505716,"line_start":2275,"line_end":2275,"column_start":1,"column_end":70}},{"value":"/ annotation.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505717,"byte_end":505732,"line_start":2276,"line_end":2276,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505733,"byte_end":505736,"line_start":2277,"line_end":2277,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505737,"byte_end":505751,"line_start":2278,"line_end":2278,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505752,"byte_end":505755,"line_start":2279,"line_end":2279,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505756,"byte_end":505767,"line_start":2280,"line_end":2280,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505768,"byte_end":505795,"line_start":2281,"line_end":2281,"column_start":1,"column_end":28}},{"value":"/ use bitvec::slice as bv_slice;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505796,"byte_end":505830,"line_start":2282,"line_end":2282,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505831,"byte_end":505834,"line_start":2283,"line_end":2283,"column_start":1,"column_end":4}},{"value":"/ let x = 42u8;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505835,"byte_end":505852,"line_start":2284,"line_end":2284,"column_start":1,"column_end":18}},{"value":"/ let bitptr = BitPtr::from(&x);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505853,"byte_end":505887,"line_start":2285,"line_end":2285,"column_start":1,"column_end":35}},{"value":"/ let bits: &BitSlice<LocalBits, _> = unsafe {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505888,"byte_end":505936,"line_start":2286,"line_end":2286,"column_start":1,"column_end":49}},{"value":"/   bv_slice::from_raw_parts(bitptr, 8)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505937,"byte_end":505978,"line_start":2287,"line_end":2287,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505979,"byte_end":505984,"line_start":2288,"line_end":2288,"column_start":1,"column_end":6}},{"value":"/ .unwrap();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505985,"byte_end":505999,"line_start":2289,"line_end":2289,"column_start":1,"column_end":15}},{"value":"/ assert_eq!(bits, x.view_bits::<LocalBits>());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506000,"byte_end":506049,"line_start":2290,"line_end":2290,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506050,"byte_end":506057,"line_start":2291,"line_end":2291,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506058,"byte_end":506061,"line_start":2292,"line_end":2292,"column_start":1,"column_end":4}},{"value":"/ ### Incorrect Usage","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506062,"byte_end":506085,"line_start":2293,"line_end":2293,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506086,"byte_end":506089,"line_start":2294,"line_end":2294,"column_start":1,"column_end":4}},{"value":"/ The following `join_slices` function is **unsound** ⚠️","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506090,"byte_end":506152,"line_start":2295,"line_end":2295,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506153,"byte_end":506156,"line_start":2296,"line_end":2296,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506157,"byte_end":506175,"line_start":2297,"line_end":2297,"column_start":1,"column_end":19}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506176,"byte_end":506203,"line_start":2298,"line_end":2298,"column_start":1,"column_end":28}},{"value":"/ use bitvec::slice as bv_slice;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506204,"byte_end":506238,"line_start":2299,"line_end":2299,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506239,"byte_end":506242,"line_start":2300,"line_end":2300,"column_start":1,"column_end":4}},{"value":"/ fn join_bitslices<'a, O, T>(","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506243,"byte_end":506275,"line_start":2301,"line_end":2301,"column_start":1,"column_end":33}},{"value":"/   fst: &'a BitSlice<O, T>,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506276,"byte_end":506306,"line_start":2302,"line_end":2302,"column_start":1,"column_end":31}},{"value":"/   snd: &'a BitSlice<O, T>,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506307,"byte_end":506337,"line_start":2303,"line_end":2303,"column_start":1,"column_end":31}},{"value":"/ ) -> &'a BitSlice<O, T>","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506338,"byte_end":506365,"line_start":2304,"line_end":2304,"column_start":1,"column_end":28}},{"value":"/ where O: BitOrder, T: BitStore {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506366,"byte_end":506402,"line_start":2305,"line_end":2305,"column_start":1,"column_end":37}},{"value":"/   let fst_end = unsafe {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506403,"byte_end":506431,"line_start":2306,"line_end":2306,"column_start":1,"column_end":29}},{"value":"/     fst.as_bitptr().wrapping_add(fst.len())","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506432,"byte_end":506479,"line_start":2307,"line_end":2307,"column_start":1,"column_end":48}},{"value":"/   };","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506480,"byte_end":506488,"line_start":2308,"line_end":2308,"column_start":1,"column_end":9}},{"value":"/   let snd_start = snd.as_bitptr();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506489,"byte_end":506527,"line_start":2309,"line_end":2309,"column_start":1,"column_end":39}},{"value":"/   assert_eq!(snd_start, fst_end, \"Slices must be adjacent\");","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506528,"byte_end":506592,"line_start":2310,"line_end":2310,"column_start":1,"column_end":65}},{"value":"/   unsafe {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506593,"byte_end":506607,"line_start":2311,"line_end":2311,"column_start":1,"column_end":15}},{"value":"/     bv_slice::from_raw_parts(fst.as_bitptr(), fst.len() + snd.len())","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506608,"byte_end":506680,"line_start":2312,"line_end":2312,"column_start":1,"column_end":73}},{"value":"/   }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506681,"byte_end":506688,"line_start":2313,"line_end":2313,"column_start":1,"column_end":8}},{"value":"/   .unwrap()","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506689,"byte_end":506704,"line_start":2314,"line_end":2314,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506705,"byte_end":506710,"line_start":2315,"line_end":2315,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506711,"byte_end":506714,"line_start":2316,"line_end":2316,"column_start":1,"column_end":4}},{"value":"/ let a = [0u8; 3];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506715,"byte_end":506736,"line_start":2317,"line_end":2317,"column_start":1,"column_end":22}},{"value":"/ let b = [!0u8; 3];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506737,"byte_end":506759,"line_start":2318,"line_end":2318,"column_start":1,"column_end":23}},{"value":"/ let c = join_bitslices(","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506760,"byte_end":506787,"line_start":2319,"line_end":2319,"column_start":1,"column_end":28}},{"value":"/   a.view_bits::<LocalBits>(),","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506788,"byte_end":506821,"line_start":2320,"line_end":2320,"column_start":1,"column_end":34}},{"value":"/   b.view_bits::<LocalBits>(),","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506822,"byte_end":506855,"line_start":2321,"line_end":2321,"column_start":1,"column_end":34}},{"value":"/ );","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506856,"byte_end":506862,"line_start":2322,"line_end":2322,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506863,"byte_end":506870,"line_start":2323,"line_end":2323,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506871,"byte_end":506874,"line_start":2324,"line_end":2324,"column_start":1,"column_end":4}},{"value":"/ In this example, the compiler may elect to place `a` and `b` in adjacent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506875,"byte_end":506951,"line_start":2325,"line_end":2325,"column_start":1,"column_end":77}},{"value":"/ stack slots, but because they are still *separate allocation* regions, it is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506952,"byte_end":507032,"line_start":2326,"line_end":2326,"column_start":1,"column_end":81}},{"value":"/ illegal for a single region descriptor to be created over both of them.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507033,"byte_end":507108,"line_start":2327,"line_end":2327,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507109,"byte_end":507112,"line_start":2328,"line_end":2328,"column_start":1,"column_end":4}},{"value":"/ [below]: #incorrect-usage","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507113,"byte_end":507142,"line_start":2329,"line_end":2329,"column_start":1,"column_end":30}},{"value":"/ [`BitPtr`]: crate::ptr::BitPtr","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507143,"byte_end":507177,"line_start":2330,"line_end":2330,"column_start":1,"column_end":35}},{"value":"/ [`BitSlice::MAX_BITS`]: crate::slice::BitSlice::MAX_BITS","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507178,"byte_end":507238,"line_start":2331,"line_end":2331,"column_start":1,"column_end":61}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507239,"byte_end":507248,"line_start":2332,"line_end":2332,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2702},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":509354,"byte_end":509372,"line_start":2385,"line_end":2385,"column_start":15,"column_end":33},"name":"from_raw_parts_mut","qualname":"::slice::api::from_raw_parts_mut","value":"pub unsafe fn from_raw_parts_mut<'a, O, T>(BitPtr<Mut, O, T>, usize)\n-> Result<&'a mut BitSlice<O, T>, BitSpanError<T>> where O: BitOrder,\nT: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs the same functionality as [`from_raw_parts`], except that a mutable\n slice is returned.","sig":null,"attributes":[{"value":"/ Performs the same functionality as [`from_raw_parts`], except that a mutable","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507464,"byte_end":507544,"line_start":2344,"line_end":2344,"column_start":1,"column_end":81}},{"value":"/ slice is returned.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507545,"byte_end":507567,"line_start":2345,"line_end":2345,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507568,"byte_end":507571,"line_start":2346,"line_end":2346,"column_start":1,"column_end":4}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507572,"byte_end":507586,"line_start":2347,"line_end":2347,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507587,"byte_end":507590,"line_start":2348,"line_end":2348,"column_start":1,"column_end":4}},{"value":"/ [`slice::from_raw_parts_mut`](core::slice::from_raw_parts_mut)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507591,"byte_end":507657,"line_start":2349,"line_end":2349,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507658,"byte_end":507661,"line_start":2350,"line_end":2350,"column_start":1,"column_end":4}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507662,"byte_end":507683,"line_start":2351,"line_end":2351,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507684,"byte_end":507687,"line_start":2352,"line_end":2352,"column_start":1,"column_end":4}},{"value":"/ This takes a [`BitPtr`] as its base address, rather than a raw `*Bit`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507688,"byte_end":507761,"line_start":2353,"line_end":2353,"column_start":1,"column_end":74}},{"value":"/ pointer, as `bitvec` does not provide raw pointers to individual bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507762,"byte_end":507836,"line_start":2354,"line_end":2354,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507837,"byte_end":507840,"line_start":2355,"line_end":2355,"column_start":1,"column_end":4}},{"value":"/ It returns a `Result`, because the `len` argument may be invalid to encode","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507841,"byte_end":507919,"line_start":2356,"line_end":2356,"column_start":1,"column_end":79}},{"value":"/ into a `&BitSlice` reference.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507920,"byte_end":507953,"line_start":2357,"line_end":2357,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507954,"byte_end":507957,"line_start":2358,"line_end":2358,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507958,"byte_end":507970,"line_start":2359,"line_end":2359,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507971,"byte_end":507974,"line_start":2360,"line_end":2360,"column_start":1,"column_end":4}},{"value":"/ Behavior is undefined if any of the following conditions are violated:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507975,"byte_end":508049,"line_start":2361,"line_end":2361,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":508050,"byte_end":508053,"line_start":2362,"line_end":2362,"column_start":1,"column_end":4}},{"value":"/ - `data` must be [valid] for boths reads and writes for `len` many bits, and","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":508054,"byte_end":508134,"line_start":2363,"line_end":2363,"column_start":1,"column_end":81}},{"value":"/   it must be properly aligned. This means in particular:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":508135,"byte_end":508195,"line_start":2364,"line_end":2364,"column_start":1,"column_end":61}},{"value":"/   - The entire memory range of this slice must be contained within a single","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":508196,"byte_end":508275,"line_start":2365,"line_end":2365,"column_start":1,"column_end":80}},{"value":"/     allocated object! Slices can never span across multiple allocated","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":508276,"byte_end":508349,"line_start":2366,"line_end":2366,"column_start":1,"column_end":74}},{"value":"/     objects.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":508350,"byte_end":508366,"line_start":2367,"line_end":2367,"column_start":1,"column_end":17}},{"value":"/   - `data` must be non-null, and its `T` portion must be aligned. Both of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":508367,"byte_end":508444,"line_start":2368,"line_end":2368,"column_start":1,"column_end":78}},{"value":"/     these conditions are checked during safe construction of the [`BitPtr`],","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":508445,"byte_end":508525,"line_start":2369,"line_end":2369,"column_start":1,"column_end":81}},{"value":"/     and `unsafe` construction of it **must not** violate them. Doing so will","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":508526,"byte_end":508606,"line_start":2370,"line_end":2370,"column_start":1,"column_end":81}},{"value":"/     cause incorrect behavior in the crate.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":508607,"byte_end":508653,"line_start":2371,"line_end":2371,"column_start":1,"column_end":47}},{"value":"/ - `data` must point to `len` consecutive bits within properly initialized","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":508654,"byte_end":508731,"line_start":2372,"line_end":2372,"column_start":1,"column_end":78}},{"value":"/   memory elements `T`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":508732,"byte_end":508758,"line_start":2373,"line_end":2373,"column_start":1,"column_end":27}},{"value":"/ - The memory referenced by the returned slice must not be accessed through","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":508759,"byte_end":508837,"line_start":2374,"line_end":2374,"column_start":1,"column_end":79}},{"value":"/   any other pointer (not derived from the return value) for the duration of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":508838,"byte_end":508917,"line_start":2375,"line_end":2375,"column_start":1,"column_end":80}},{"value":"/   lifetime `'a`. Both read and write accesses are forbidden. This is true","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":508918,"byte_end":508995,"line_start":2376,"line_end":2376,"column_start":1,"column_end":78}},{"value":"/   even if `T` supports aliased mutation! An `&mut` reference requires","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":508996,"byte_end":509069,"line_start":2377,"line_end":2377,"column_start":1,"column_end":74}},{"value":"/   **exclusive** access for its lifetime.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":509070,"byte_end":509114,"line_start":2378,"line_end":2378,"column_start":1,"column_end":45}},{"value":"/ - `len` cannot exceed [`BitSlice::MAX_BITS`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":509115,"byte_end":509164,"line_start":2379,"line_end":2379,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":509165,"byte_end":509168,"line_start":2380,"line_end":2380,"column_start":1,"column_end":4}},{"value":"/ [valid]: https://doc.rust-lang.org/stable/core/ptr/index.html#safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":509169,"byte_end":509241,"line_start":2381,"line_end":2381,"column_start":1,"column_end":73}},{"value":"/ [`BitPtr`]: crate::ptr::BitPtr","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":509242,"byte_end":509276,"line_start":2382,"line_end":2382,"column_start":1,"column_end":35}},{"value":"/ [`from_raw_parts`]: crate::slice::from_raw_parts","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":509277,"byte_end":509329,"line_start":2383,"line_end":2383,"column_start":1,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":509330,"byte_end":509339,"line_start":2384,"line_end":2384,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":2706},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":510489,"byte_end":510502,"line_start":2421,"line_end":2421,"column_start":11,"column_end":24},"name":"BitSliceIndex","qualname":"::slice::api::BitSliceIndex","value":"BitSliceIndex<'a, O, T>","parent":null,"children":[{"krate":0,"index":2710},{"krate":0,"index":2711},{"krate":0,"index":2712},{"krate":0,"index":2713},{"krate":0,"index":2714},{"krate":0,"index":2715},{"krate":0,"index":2716},{"krate":0,"index":2717}],"decl_id":null,"docs":" A helper trait used for indexing operations.","sig":null,"attributes":[{"value":"* A helper trait used for indexing operations.\n\nThis trait has its definition stabilized, but has not stabilized its associated\nmethods. This means it cannot be implemented outside of the distribution\nlibraries. *Furthermore*, since [`bitvec`] cannot create `&mut bool` references,\nit is insufficient for `bitvec`’s uses.\n\nThere is no tracking issue for `feature(slice_index_methods)`.\n\n# Original\n\n[`slice::SliceIndex`](core::slice::SliceIndex)\n\n# API Differences\n\n[`SliceIndex::Output`] is not usable here, because the `usize` implementation\ncannot produce `&mut bool`. Instead, two output types `Immut` and `Mut` are\ndefined. The range implementations define these to be the appropriately mutable\n[`BitSlice`] reference; the `usize` implementation defines them to be `&bool`\nand the proxy type.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`SliceIndex::Output`]: core::slice::SliceIndex::Output\n[`bitvec`]: crate\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":509561,"byte_end":510478,"line_start":2396,"line_end":2420,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":2710},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":510601,"byte_end":510606,"line_start":2427,"line_end":2427,"column_start":7,"column_end":12},"name":"Immut","qualname":"::slice::api::BitSliceIndex::Immut","value":"type Immut;","parent":{"krate":0,"index":2706},"children":[],"decl_id":null,"docs":" The output type for immutable accessors.\n","sig":null,"attributes":[{"value":"/ The output type for immutable accessors.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":510550,"byte_end":510594,"line_start":2426,"line_end":2426,"column_start":2,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":2711},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":510659,"byte_end":510662,"line_start":2430,"line_end":2430,"column_start":7,"column_end":10},"name":"Mut","qualname":"::slice::api::BitSliceIndex::Mut","value":"type Mut;","parent":{"krate":0,"index":2706},"children":[],"decl_id":null,"docs":" The output type for mutable accessors.\n","sig":null,"attributes":[{"value":"/ The output type for mutable accessors.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":510610,"byte_end":510652,"line_start":2429,"line_end":2429,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2712},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":510828,"byte_end":510831,"line_start":2437,"line_end":2437,"column_start":5,"column_end":8},"name":"get","qualname":"::slice::api::BitSliceIndex::get","value":"pub fn get(Self, &'a BitSlice<O, T>) -> Option<Self::Immut>","parent":{"krate":0,"index":2706},"children":[],"decl_id":null,"docs":" Returns a shared reference to the output at this location, if in bounds.","sig":null,"attributes":[{"value":"/ Returns a shared reference to the output at this location, if in bounds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":510666,"byte_end":510742,"line_start":2432,"line_end":2432,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":510744,"byte_end":510747,"line_start":2433,"line_end":2433,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":510749,"byte_end":510763,"line_start":2434,"line_end":2434,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":510765,"byte_end":510768,"line_start":2435,"line_end":2435,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get`](core::slice::SliceIndex::get)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":510770,"byte_end":510823,"line_start":2436,"line_end":2436,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2713},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":511067,"byte_end":511074,"line_start":2445,"line_end":2445,"column_start":5,"column_end":12},"name":"get_mut","qualname":"::slice::api::BitSliceIndex::get_mut","value":"pub fn get_mut(Self, &'a mut BitSlice<O, T>) -> Option<Self::Mut>","parent":{"krate":0,"index":2706},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, if in\n bounds.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, if in","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":510891,"byte_end":510960,"line_start":2439,"line_end":2439,"column_start":2,"column_end":71}},{"value":"/ bounds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":510962,"byte_end":510973,"line_start":2440,"line_end":2440,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":510975,"byte_end":510978,"line_start":2441,"line_end":2441,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":510980,"byte_end":510994,"line_start":2442,"line_end":2442,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":510996,"byte_end":510999,"line_start":2443,"line_end":2443,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_mut`](core::slice::SliceIndex::get_mut)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":511001,"byte_end":511062,"line_start":2444,"line_end":2444,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2714},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":511850,"byte_end":511863,"line_start":2464,"line_end":2464,"column_start":12,"column_end":25},"name":"get_unchecked","qualname":"::slice::api::BitSliceIndex::get_unchecked","value":"pub unsafe fn get_unchecked(Self, &'a BitSlice<O, T>) -> Self::Immut","parent":{"krate":0,"index":2706},"children":[],"decl_id":null,"docs":" Returns a shared reference to the output at this location, without\n performing any bounds checking. Calling this method with an\n out-of-bounds index is [undefined behavior] even if the resulting\n reference is not used.","sig":null,"attributes":[{"value":"/ Returns a shared reference to the output at this location, without","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":511136,"byte_end":511206,"line_start":2447,"line_end":2447,"column_start":2,"column_end":72}},{"value":"/ performing any bounds checking. Calling this method with an","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":511208,"byte_end":511271,"line_start":2448,"line_end":2448,"column_start":2,"column_end":65}},{"value":"/ out-of-bounds index is [undefined behavior] even if the resulting","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":511273,"byte_end":511342,"line_start":2449,"line_end":2449,"column_start":2,"column_end":71}},{"value":"/ reference is not used.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":511344,"byte_end":511370,"line_start":2450,"line_end":2450,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":511372,"byte_end":511375,"line_start":2451,"line_end":2451,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":511377,"byte_end":511391,"line_start":2452,"line_end":2452,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":511393,"byte_end":511396,"line_start":2453,"line_end":2453,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_unchecked`](core::slice::SliceIndex::get_unchecked)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":511398,"byte_end":511471,"line_start":2454,"line_end":2454,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":511473,"byte_end":511476,"line_start":2455,"line_end":2455,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":511478,"byte_end":511490,"line_start":2456,"line_end":2456,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":511492,"byte_end":511495,"line_start":2457,"line_end":2457,"column_start":2,"column_end":5}},{"value":"/ As this function does not perform boundary checking, the caller must","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":511497,"byte_end":511569,"line_start":2458,"line_end":2458,"column_start":2,"column_end":74}},{"value":"/ ensure that `self` is an index within the boundaries of `slice` before","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":511571,"byte_end":511645,"line_start":2459,"line_end":2459,"column_start":2,"column_end":76}},{"value":"/ calling in order to prevent boundary escapes and the ensuing safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":511647,"byte_end":511718,"line_start":2460,"line_end":2460,"column_start":2,"column_end":73}},{"value":"/ violations.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":511720,"byte_end":511735,"line_start":2461,"line_end":2461,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":511737,"byte_end":511740,"line_start":2462,"line_end":2462,"column_start":2,"column_end":5}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":511742,"byte_end":511838,"line_start":2463,"line_end":2463,"column_start":2,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":2715},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512656,"byte_end":512673,"line_start":2484,"line_end":2484,"column_start":12,"column_end":29},"name":"get_unchecked_mut","qualname":"::slice::api::BitSliceIndex::get_unchecked_mut","value":"pub unsafe fn get_unchecked_mut(Self, &'a mut BitSlice<O, T>) -> Self::Mut","parent":{"krate":0,"index":2706},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, without\n performing any bounds checking. Calling this method with an\n out-of-bounds index is [undefined behavior] even if the resulting\n reference is not used.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, without","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":511915,"byte_end":511986,"line_start":2466,"line_end":2466,"column_start":2,"column_end":73}},{"value":"/ performing any bounds checking. Calling this method with an","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":511988,"byte_end":512051,"line_start":2467,"line_end":2467,"column_start":2,"column_end":65}},{"value":"/ out-of-bounds index is [undefined behavior] even if the resulting","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512053,"byte_end":512122,"line_start":2468,"line_end":2468,"column_start":2,"column_end":71}},{"value":"/ reference is not used.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512124,"byte_end":512150,"line_start":2469,"line_end":2469,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512152,"byte_end":512155,"line_start":2470,"line_end":2470,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512157,"byte_end":512171,"line_start":2471,"line_end":2471,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512173,"byte_end":512176,"line_start":2472,"line_end":2472,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_unchecked_mut`][orig]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512178,"byte_end":512221,"line_start":2473,"line_end":2473,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512223,"byte_end":512226,"line_start":2474,"line_end":2474,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512228,"byte_end":512240,"line_start":2475,"line_end":2475,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512242,"byte_end":512245,"line_start":2476,"line_end":2476,"column_start":2,"column_end":5}},{"value":"/ As this function does not perform boundary checking, the caller must","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512247,"byte_end":512319,"line_start":2477,"line_end":2477,"column_start":2,"column_end":74}},{"value":"/ ensure that `self` is an index within the boundaries of `slice` before","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512321,"byte_end":512395,"line_start":2478,"line_end":2478,"column_start":2,"column_end":76}},{"value":"/ calling in order to prevent boundary escapes and the ensuing safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512397,"byte_end":512468,"line_start":2479,"line_end":2479,"column_start":2,"column_end":73}},{"value":"/ violations.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512470,"byte_end":512485,"line_start":2480,"line_end":2480,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512487,"byte_end":512490,"line_start":2481,"line_end":2481,"column_start":2,"column_end":5}},{"value":"/ [orig]: core::slice::SliceIndex::get_unchecked_mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512492,"byte_end":512546,"line_start":2482,"line_end":2482,"column_start":2,"column_end":56}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512548,"byte_end":512644,"line_start":2483,"line_end":2483,"column_start":2,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":2716},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512920,"byte_end":512925,"line_start":2495,"line_end":2495,"column_start":5,"column_end":10},"name":"index","qualname":"::slice::api::BitSliceIndex::index","value":"pub fn index(Self, &'a BitSlice<O, T>) -> Self::Immut","parent":{"krate":0,"index":2706},"children":[],"decl_id":null,"docs":" Returns a shared reference to the output at this location, panicking if\n out of bounds.","sig":null,"attributes":[{"value":"/ Returns a shared reference to the output at this location, panicking if","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512735,"byte_end":512810,"line_start":2489,"line_end":2489,"column_start":2,"column_end":77}},{"value":"/ out of bounds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512812,"byte_end":512830,"line_start":2490,"line_end":2490,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512832,"byte_end":512835,"line_start":2491,"line_end":2491,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512837,"byte_end":512851,"line_start":2492,"line_end":2492,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512853,"byte_end":512856,"line_start":2493,"line_end":2493,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::index`](core::slice::SliceIndex::index)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512858,"byte_end":512915,"line_start":2494,"line_end":2494,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2717},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":513171,"byte_end":513180,"line_start":2503,"line_end":2503,"column_start":5,"column_end":14},"name":"index_mut","qualname":"::slice::api::BitSliceIndex::index_mut","value":"pub fn index_mut(Self, &'a mut BitSlice<O, T>) -> Self::Mut","parent":{"krate":0,"index":2706},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, panicking if\n out of bounds.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, panicking if","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":512977,"byte_end":513053,"line_start":2497,"line_end":2497,"column_start":2,"column_end":78}},{"value":"/ out of bounds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":513055,"byte_end":513073,"line_start":2498,"line_end":2498,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":513075,"byte_end":513078,"line_start":2499,"line_end":2499,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":513080,"byte_end":513094,"line_start":2500,"line_end":2500,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":513096,"byte_end":513099,"line_start":2501,"line_end":2501,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::index_mut`](core::slice::SliceIndex::index_mut)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":513101,"byte_end":513166,"line_start":2502,"line_end":2502,"column_start":2,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":2821},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":520006,"byte_end":520010,"line_start":89,"line_end":89,"column_start":12,"column_end":16},"name":"Iter","qualname":"::slice::iter::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":2825},{"krate":0,"index":2826}],"decl_id":null,"docs":" Immutable [`BitSlice`] iterator.","sig":null,"attributes":[{"value":"* Immutable [`BitSlice`] iterator.\n\nThis struct is created by the [`.iter()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::Iter`](core::slice::Iter)\n\n# Examples\n\nBasic usage:\n\n```rust\nuse bitvec::prelude::*;\n\nlet bits = bits![0, 1];\nfor bit in bits.iter() {\n  # #[cfg(feature = \"std\")]\n  println!(\"{}\", bit);\n}\n```\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.iter()`]: crate::slice::BitSlice::iter\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":519581,"byte_end":519983,"line_start":63,"line_end":87,"column_start":1,"column_end":4}},{"value":"repr(C)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":519984,"byte_end":519994,"line_start":88,"line_end":88,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2832},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521736,"byte_end":521747,"line_start":156,"line_end":156,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<Iter>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ Views the underlying data as a subslice of the original data.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":520730,"byte_end":520795,"line_start":118,"line_end":118,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":520797,"byte_end":520800,"line_start":119,"line_end":119,"column_start":2,"column_end":5}},{"value":"/ This has the same lifetime as the original [`BitSlice`], and so the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":520802,"byte_end":520873,"line_start":120,"line_end":120,"column_start":2,"column_end":73}},{"value":"/ iterator can continue to be used while this exists.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":520875,"byte_end":520930,"line_start":121,"line_end":121,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":520932,"byte_end":520935,"line_start":122,"line_end":122,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":520937,"byte_end":520951,"line_start":123,"line_end":123,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":520953,"byte_end":520956,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ [`Iter::as_slice`](core::slice::Iter::as_slice)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":520958,"byte_end":521009,"line_start":125,"line_end":125,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521011,"byte_end":521014,"line_start":126,"line_end":126,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521016,"byte_end":521037,"line_start":127,"line_end":127,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521039,"byte_end":521042,"line_start":128,"line_end":128,"column_start":2,"column_end":5}},{"value":"/ As this views a [`BitSlice`], rather than a `[T]` or `[bool]` slice, it","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521044,"byte_end":521119,"line_start":129,"line_end":129,"column_start":2,"column_end":77}},{"value":"/ has been renamed.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521121,"byte_end":521142,"line_start":130,"line_end":130,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521144,"byte_end":521147,"line_start":131,"line_end":131,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521149,"byte_end":521163,"line_start":132,"line_end":132,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521165,"byte_end":521168,"line_start":133,"line_end":133,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521170,"byte_end":521186,"line_start":134,"line_end":134,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521188,"byte_end":521191,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521193,"byte_end":521204,"line_start":136,"line_end":136,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521206,"byte_end":521237,"line_start":137,"line_end":137,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521239,"byte_end":521266,"line_start":138,"line_end":138,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521268,"byte_end":521271,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 1, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521273,"byte_end":521306,"line_start":140,"line_end":140,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521308,"byte_end":521311,"line_start":141,"line_end":141,"column_start":2,"column_end":5}},{"value":"/ // Get the iterator:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521313,"byte_end":521337,"line_start":142,"line_end":142,"column_start":2,"column_end":26}},{"value":"/ let mut iter = bits.iter();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521339,"byte_end":521370,"line_start":143,"line_end":143,"column_start":2,"column_end":33}},{"value":"/ // So if we print what `as_bitslice` returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521372,"byte_end":521420,"line_start":144,"line_end":144,"column_start":2,"column_end":50}},{"value":"/ // here, we have \"[0011]\":","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521422,"byte_end":521452,"line_start":145,"line_end":145,"column_start":2,"column_end":32}},{"value":"/ println!(\"{:b}\", iter.as_bitslice());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521454,"byte_end":521495,"line_start":146,"line_end":146,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521497,"byte_end":521500,"line_start":147,"line_end":147,"column_start":2,"column_end":5}},{"value":"/ // Next, we move to the second element of the slice:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521502,"byte_end":521558,"line_start":148,"line_end":148,"column_start":2,"column_end":58}},{"value":"/ iter.next();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521560,"byte_end":521576,"line_start":149,"line_end":149,"column_start":2,"column_end":18}},{"value":"/ // Now `as_bitslice` returns \"[011]\":","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521578,"byte_end":521619,"line_start":150,"line_end":150,"column_start":2,"column_end":43}},{"value":"/ println!(\"{:b}\", iter.as_bitslice());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521621,"byte_end":521662,"line_start":151,"line_end":151,"column_start":2,"column_end":43}},{"value":"/ # }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521664,"byte_end":521671,"line_start":152,"line_end":152,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521673,"byte_end":521680,"line_start":153,"line_end":153,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521682,"byte_end":521685,"line_start":154,"line_end":154,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521687,"byte_end":521727,"line_start":155,"line_end":155,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2833},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521978,"byte_end":521986,"line_start":164,"line_end":164,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<Iter>::as_slice","value":"pub fn as_slice(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521854,"byte_end":521871,"line_start":161,"line_end":161,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521873,"byte_end":521903,"line_start":162,"line_end":162,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_bitslice` to view the underlying slice\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521905,"byte_end":521969,"line_start":163,"line_end":163,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2834},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522895,"byte_end":522901,"line_start":198,"line_end":198,"column_start":9,"column_end":15},"name":"by_ref","qualname":"<Iter>::by_ref","value":"pub fn by_ref(Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Adapts the iterator to yield `&bool` references rather than `BitRef`\n proxies.","sig":null,"attributes":[{"value":"/ Adapts the iterator to yield `&bool` references rather than `BitRef`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522044,"byte_end":522116,"line_start":168,"line_end":168,"column_start":2,"column_end":74}},{"value":"/ proxies.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522118,"byte_end":522130,"line_start":169,"line_end":169,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522132,"byte_end":522135,"line_start":170,"line_end":170,"column_start":2,"column_end":5}},{"value":"/ This allows the iterator to be used in APIs that expect ordinary","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522137,"byte_end":522205,"line_start":171,"line_end":171,"column_start":2,"column_end":70}},{"value":"/ references and are not easily modified to receive the proxy structure.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522207,"byte_end":522281,"line_start":172,"line_end":172,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522283,"byte_end":522286,"line_start":173,"line_end":173,"column_start":2,"column_end":5}},{"value":"/ It works by yielding `&'static` references to hidden statics; these","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522288,"byte_end":522359,"line_start":174,"line_end":174,"column_start":2,"column_end":73}},{"value":"/ references will **not** have an address value that fits in the context","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522361,"byte_end":522435,"line_start":175,"line_end":175,"column_start":2,"column_end":76}},{"value":"/ of the iterator.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522437,"byte_end":522457,"line_start":176,"line_end":176,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522459,"byte_end":522462,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522464,"byte_end":522480,"line_start":178,"line_end":178,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522482,"byte_end":522485,"line_start":179,"line_end":179,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522487,"byte_end":522499,"line_start":180,"line_end":180,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522501,"byte_end":522504,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522506,"byte_end":522519,"line_start":182,"line_end":182,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522521,"byte_end":522524,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ An iterator equivalent to `self`, that yields `&bool` instead of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522526,"byte_end":522594,"line_start":184,"line_end":184,"column_start":2,"column_end":70}},{"value":"/ `BitRef`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522596,"byte_end":522609,"line_start":185,"line_end":185,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522611,"byte_end":522614,"line_start":186,"line_end":186,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522616,"byte_end":522630,"line_start":187,"line_end":187,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522632,"byte_end":522635,"line_start":188,"line_end":188,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522637,"byte_end":522648,"line_start":189,"line_end":189,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522650,"byte_end":522677,"line_start":190,"line_end":190,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522679,"byte_end":522682,"line_start":191,"line_end":191,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522684,"byte_end":522711,"line_start":192,"line_end":192,"column_start":2,"column_end":29}},{"value":"/ let mut iter = bits.iter().by_ref();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522713,"byte_end":522753,"line_start":193,"line_end":193,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(iter.next(), Some(&false));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522755,"byte_end":522797,"line_start":194,"line_end":194,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(iter.next(), Some(&true));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522799,"byte_end":522840,"line_start":195,"line_end":195,"column_start":2,"column_end":43}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522842,"byte_end":522877,"line_start":196,"line_end":196,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522879,"byte_end":522886,"line_start":197,"line_end":197,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2837},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523959,"byte_end":523965,"line_start":242,"line_end":242,"column_start":9,"column_end":15},"name":"by_val","qualname":"<Iter>::by_val","value":"pub fn by_val(Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Adapts the iterator to yield `bool` values rather than `BitRef` proxy\n references.","sig":null,"attributes":[{"value":"/ Adapts the iterator to yield `bool` values rather than `BitRef` proxy","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523095,"byte_end":523168,"line_start":211,"line_end":211,"column_start":2,"column_end":75}},{"value":"/ references.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523170,"byte_end":523185,"line_start":212,"line_end":212,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523187,"byte_end":523190,"line_start":213,"line_end":213,"column_start":2,"column_end":5}},{"value":"/ This allows the iterator to be used in APIs that expect ordinary values.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523192,"byte_end":523268,"line_start":214,"line_end":214,"column_start":2,"column_end":78}},{"value":"/ It dereferences the proxy and produces the proxied `bool` directly.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523270,"byte_end":523341,"line_start":215,"line_end":215,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523343,"byte_end":523346,"line_start":216,"line_end":216,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to `[bool].iter().copied()`, as [`Iterator::copied`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523348,"byte_end":523423,"line_start":217,"line_end":217,"column_start":2,"column_end":77}},{"value":"/ is not available on this iterator.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523425,"byte_end":523463,"line_start":218,"line_end":218,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523465,"byte_end":523468,"line_start":219,"line_end":219,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523470,"byte_end":523486,"line_start":220,"line_end":220,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523488,"byte_end":523491,"line_start":221,"line_end":221,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523493,"byte_end":523505,"line_start":222,"line_end":222,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523507,"byte_end":523510,"line_start":223,"line_end":223,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523512,"byte_end":523525,"line_start":224,"line_end":224,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523527,"byte_end":523530,"line_start":225,"line_end":225,"column_start":2,"column_end":5}},{"value":"/ An iterator equivalent to `self`, that yields `bool` instead of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523532,"byte_end":523599,"line_start":226,"line_end":226,"column_start":2,"column_end":69}},{"value":"/ `BitRef`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523601,"byte_end":523614,"line_start":227,"line_end":227,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523616,"byte_end":523619,"line_start":228,"line_end":228,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523621,"byte_end":523635,"line_start":229,"line_end":229,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523637,"byte_end":523640,"line_start":230,"line_end":230,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523642,"byte_end":523653,"line_start":231,"line_end":231,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523655,"byte_end":523682,"line_start":232,"line_end":232,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523684,"byte_end":523687,"line_start":233,"line_end":233,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523689,"byte_end":523716,"line_start":234,"line_end":234,"column_start":2,"column_end":29}},{"value":"/ let mut iter = bits.iter().by_val();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523718,"byte_end":523758,"line_start":235,"line_end":235,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(iter.next(), Some(false));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523760,"byte_end":523801,"line_start":236,"line_end":236,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(iter.next(), Some(true));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523803,"byte_end":523843,"line_start":237,"line_end":237,"column_start":2,"column_end":42}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523845,"byte_end":523880,"line_start":238,"line_end":238,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523882,"byte_end":523889,"line_start":239,"line_end":239,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523891,"byte_end":523894,"line_start":240,"line_end":240,"column_start":2,"column_end":5}},{"value":"/ [`Iterator::copied`]: core::iter::Iterator::copied","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523896,"byte_end":523950,"line_start":241,"line_end":241,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2840},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":524742,"byte_end":524748,"line_start":266,"line_end":266,"column_start":9,"column_end":15},"name":"copied","qualname":"<Iter>::copied","value":"pub fn copied(Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Forwards to [`by_val`].","sig":null,"attributes":[{"value":"/ Forwards to [`by_val`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":524105,"byte_end":524132,"line_start":252,"line_end":252,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":524134,"byte_end":524137,"line_start":253,"line_end":253,"column_start":2,"column_end":5}},{"value":"/ This exists to allow ported code to continue to compile when","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":524139,"byte_end":524203,"line_start":254,"line_end":254,"column_start":2,"column_end":66}},{"value":"/ `[bool].iter().copied()` is replaced with `BitSlice.iter().copied()`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":524205,"byte_end":524278,"line_start":255,"line_end":255,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":524280,"byte_end":524283,"line_start":256,"line_end":256,"column_start":2,"column_end":5}},{"value":"/ However, because [`Iterator::copied`] is not available on this iterator,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":524285,"byte_end":524361,"line_start":257,"line_end":257,"column_start":2,"column_end":78}},{"value":"/ this name raises a deprecation warning and encourages the user to use","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":524363,"byte_end":524436,"line_start":258,"line_end":258,"column_start":2,"column_end":75}},{"value":"/ the correct inherent method instead of the overloaded method name.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":524438,"byte_end":524508,"line_start":259,"line_end":259,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":524510,"byte_end":524513,"line_start":260,"line_end":260,"column_start":2,"column_end":5}},{"value":"/ [`by_val`]: Self::by_val","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":524515,"byte_end":524543,"line_start":261,"line_end":261,"column_start":2,"column_end":30}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":524545,"byte_end":524562,"line_start":262,"line_end":262,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":524564,"byte_end":524594,"line_start":263,"line_end":263,"column_start":2,"column_end":32}},{"value":"deprecated =\n  \"`Iterator::copied` does not exist on this iterator. Use \\\n\t                `by_val` instead to achieve the same effect.\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":524596,"byte_end":524733,"line_start":264,"line_end":265,"column_start":2,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":2854},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":525868,"byte_end":525875,"line_start":337,"line_end":337,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::slice::iter::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":2858},{"krate":0,"index":2859}],"decl_id":null,"docs":" Mutable [`BitSlice`] iterator.","sig":null,"attributes":[{"value":"* Mutable [`BitSlice`] iterator.\n\nThis struct is created by the [`.iter_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::IterMut`](crate::slice::IterMut)\n\n# Examples\n\nBasic usage:\n\n```rust\nuse bitvec::prelude::*;\n\nlet bits = bits![mut 0; 2];\nfor mut bit in bits.iter_mut() {\n  *bit = true;\n}\nassert_eq!(bits, bits![1; 2]);\n```\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.iter_mut()`]: crate::slice::BitSlice::iter_mut\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":525419,"byte_end":525845,"line_start":311,"line_end":335,"column_start":1,"column_end":4}},{"value":"repr(C)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":525846,"byte_end":525856,"line_start":336,"line_end":336,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2865},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527929,"byte_end":527942,"line_start":415,"line_end":415,"column_start":9,"column_end":22},"name":"into_bitslice","qualname":"<IterMut>::into_bitslice","value":"pub fn into_bitslice(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ Views the underlying data as a subslice of the original data.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":526680,"byte_end":526745,"line_start":367,"line_end":367,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":526747,"byte_end":526750,"line_start":368,"line_end":368,"column_start":2,"column_end":5}},{"value":"/ To avoid creating `&mut` references that alias, this is forced to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":526752,"byte_end":526821,"line_start":369,"line_end":369,"column_start":2,"column_end":71}},{"value":"/ consume the iterator.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":526823,"byte_end":526848,"line_start":370,"line_end":370,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":526850,"byte_end":526853,"line_start":371,"line_end":371,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":526855,"byte_end":526869,"line_start":372,"line_end":372,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":526871,"byte_end":526874,"line_start":373,"line_end":373,"column_start":2,"column_end":5}},{"value":"/ [`IterMut::into_slice`](core::slice::IterMut::into_slice)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":526876,"byte_end":526937,"line_start":374,"line_end":374,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":526939,"byte_end":526942,"line_start":375,"line_end":375,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":526944,"byte_end":526965,"line_start":376,"line_end":376,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":526967,"byte_end":526970,"line_start":377,"line_end":377,"column_start":2,"column_end":5}},{"value":"/ As this views a [`BitSlice`], rather than a `[T]` or `[bool]` slice, it","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":526972,"byte_end":527047,"line_start":378,"line_end":378,"column_start":2,"column_end":77}},{"value":"/ has been renamed.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527049,"byte_end":527070,"line_start":379,"line_end":379,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527072,"byte_end":527075,"line_start":380,"line_end":380,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527077,"byte_end":527091,"line_start":381,"line_end":381,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527093,"byte_end":527096,"line_start":382,"line_end":382,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527098,"byte_end":527114,"line_start":383,"line_end":383,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527116,"byte_end":527119,"line_start":384,"line_end":384,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527121,"byte_end":527132,"line_start":385,"line_end":385,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527134,"byte_end":527165,"line_start":386,"line_end":386,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527167,"byte_end":527194,"line_start":387,"line_end":387,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527196,"byte_end":527199,"line_start":388,"line_end":388,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0, 1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527201,"byte_end":527235,"line_start":389,"line_end":389,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527237,"byte_end":527240,"line_start":390,"line_end":390,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527242,"byte_end":527247,"line_start":391,"line_end":391,"column_start":2,"column_end":7}},{"value":"/   // Get the iterator:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527249,"byte_end":527275,"line_start":392,"line_end":392,"column_start":2,"column_end":28}},{"value":"/   let mut iter = bits.iter_mut();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527277,"byte_end":527314,"line_start":393,"line_end":393,"column_start":2,"column_end":39}},{"value":"/   // We move to the next element:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527316,"byte_end":527353,"line_start":394,"line_end":394,"column_start":2,"column_end":39}},{"value":"/   iter.next();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527355,"byte_end":527373,"line_start":395,"line_end":395,"column_start":2,"column_end":20}},{"value":"/   // So if we print what `into_bitslice`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527375,"byte_end":527419,"line_start":396,"line_end":396,"column_start":2,"column_end":46}},{"value":"/   // returns here, we have \"[10]\":","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527421,"byte_end":527459,"line_start":397,"line_end":397,"column_start":2,"column_end":40}},{"value":"/   println!(\"{:b}\", iter.into_slice());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527461,"byte_end":527503,"line_start":398,"line_end":398,"column_start":2,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527505,"byte_end":527510,"line_start":399,"line_end":399,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527512,"byte_end":527515,"line_start":400,"line_end":400,"column_start":2,"column_end":5}},{"value":"/ // Now let’s modify a value of the slice:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527517,"byte_end":527564,"line_start":401,"line_end":401,"column_start":2,"column_end":47}},{"value":"/ {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527566,"byte_end":527571,"line_start":402,"line_end":402,"column_start":2,"column_end":7}},{"value":"/   // First we get back the iterator:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527573,"byte_end":527613,"line_start":403,"line_end":403,"column_start":2,"column_end":42}},{"value":"/   let mut iter = bits.iter_mut();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527615,"byte_end":527652,"line_start":404,"line_end":404,"column_start":2,"column_end":39}},{"value":"/   // We change the value of the first bit of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527654,"byte_end":527702,"line_start":405,"line_end":405,"column_start":2,"column_end":50}},{"value":"/   // the slice returned by the `next` method:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527704,"byte_end":527753,"line_start":406,"line_end":406,"column_start":2,"column_end":51}},{"value":"/   *iter.next().unwrap() = true;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527755,"byte_end":527790,"line_start":407,"line_end":407,"column_start":2,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527792,"byte_end":527797,"line_start":408,"line_end":408,"column_start":2,"column_end":7}},{"value":"/ // Now bits is \"[110]\":","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527799,"byte_end":527826,"line_start":409,"line_end":409,"column_start":2,"column_end":29}},{"value":"/ println!(\"{:b}\", bits);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527828,"byte_end":527855,"line_start":410,"line_end":410,"column_start":2,"column_end":29}},{"value":"/ # }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527857,"byte_end":527864,"line_start":411,"line_end":411,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527866,"byte_end":527873,"line_start":412,"line_end":412,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527875,"byte_end":527878,"line_start":413,"line_end":413,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":527880,"byte_end":527920,"line_start":414,"line_end":414,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2866},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":528177,"byte_end":528187,"line_start":423,"line_end":423,"column_start":9,"column_end":19},"name":"into_slice","qualname":"<IterMut>::into_slice","value":"pub fn into_slice(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":528051,"byte_end":528068,"line_start":420,"line_end":420,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":528070,"byte_end":528100,"line_start":421,"line_end":421,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `into_bitslice` to view the underlying slice\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":528102,"byte_end":528168,"line_start":422,"line_end":422,"column_start":2,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":5670},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":531840,"byte_end":531847,"line_start":619,"line_end":619,"column_start":12,"column_end":19},"name":"Windows","qualname":"::slice::iter::Windows","value":"Windows {  }","parent":null,"children":[{"krate":0,"index":5674},{"krate":0,"index":5675}],"decl_id":null,"docs":" An iterator over overlapping subslices of length `size`.","sig":null,"attributes":[{"value":"* An iterator over overlapping subslices of length `size`.\n\nThis struct is created by the [`.windows()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::Windows`](core::slice::Windows)\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.windows()`]: crate::slice::BitSlice::windows\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":531529,"byte_end":531804,"line_start":607,"line_end":617,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":5709},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":533987,"byte_end":533993,"line_start":709,"line_end":709,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::slice::iter::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":5713},{"krate":0,"index":5714}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the beginning of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`.chunks()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::Chunks`](core::slice::Chunks)\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.chunks()`]: crate::slice::BitSlice::chunks\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":533488,"byte_end":533951,"line_start":693,"line_end":707,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":5748},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":536711,"byte_end":536720,"line_start":818,"line_end":818,"column_start":12,"column_end":21},"name":"ChunksMut","qualname":"::slice::iter::ChunksMut","value":"ChunksMut {  }","parent":null,"children":[{"krate":0,"index":5752},{"krate":0,"index":5753}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`.chunks_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::ChunksMut`](core::slice::ChunksMut)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.chunks_mut()`]: crate::slice::BitSlice::chunks_mut\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":536112,"byte_end":536682,"line_start":798,"line_end":816,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":5782},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":539609,"byte_end":539620,"line_start":927,"line_end":927,"column_start":12,"column_end":23},"name":"ChunksExact","qualname":"::slice::iter::ChunksExact","value":"ChunksExact {  }","parent":null,"children":[{"krate":0,"index":5786},{"krate":0,"index":5787},{"krate":0,"index":5788}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the beginning of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be ommitted but can be retrieved from the\n[`.remainder()`] function from the iterator.\n\nThis struct is created by the [`.chunks_exact()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::ChunksExact`](core::slice::ChunksExact)\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.chunks_exact()`]: crate::slice::BitSlice::chunks_exact\n[`.remainder()`]: Self::remainder\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":538976,"byte_end":539573,"line_start":909,"line_end":925,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2879},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":540623,"byte_end":540632,"line_start":969,"line_end":969,"column_start":9,"column_end":18},"name":"remainder","qualname":"<ChunksExact>::remainder","value":"pub fn remainder(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original [`BitSlice`] that is not going to\n be returned by the iterator. The returned `BitSlice` has at most\n `chunk_size-1` bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original [`BitSlice`] that is not going to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":540294,"byte_end":540369,"line_start":960,"line_end":960,"column_start":2,"column_end":77}},{"value":"/ be returned by the iterator. The returned `BitSlice` has at most","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":540371,"byte_end":540439,"line_start":961,"line_end":961,"column_start":2,"column_end":70}},{"value":"/ `chunk_size-1` bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":540441,"byte_end":540465,"line_start":962,"line_end":962,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":540467,"byte_end":540470,"line_start":963,"line_end":963,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":540472,"byte_end":540486,"line_start":964,"line_end":964,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":540488,"byte_end":540491,"line_start":965,"line_end":965,"column_start":2,"column_end":5}},{"value":"/ [`slice::ChunksExact::remainder`](core::slice::ChunksExact::remainder)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":540493,"byte_end":540567,"line_start":966,"line_end":966,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":540569,"byte_end":540572,"line_start":967,"line_end":967,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":540574,"byte_end":540614,"line_start":968,"line_end":968,"column_start":2,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":5822},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":542702,"byte_end":542716,"line_start":1053,"line_end":1053,"column_start":12,"column_end":26},"name":"ChunksExactMut","qualname":"::slice::iter::ChunksExactMut","value":"ChunksExactMut {  }","parent":null,"children":[{"krate":0,"index":5826},{"krate":0,"index":5827},{"krate":0,"index":5828}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be omitted but can be retrieved from the\n[`.into_remainder()`] function from the iterator.\n\nThis struct is created by the [`.chunks_exact_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::ChunksExactMut`](core::slice::ChunksExactMut)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.chunks_exact_mut()`]: crate::slice::BitSlice::chunks_exact_mut\n[`.into_remainder()`]: Self::into_remainder\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":541955,"byte_end":542673,"line_start":1031,"line_end":1051,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2885},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":543919,"byte_end":543933,"line_start":1101,"line_end":1101,"column_start":9,"column_end":23},"name":"into_remainder","qualname":"<ChunksExactMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original [`BitSlice`] that is not going to\n be returned by the iterator. The returned `BitSlice` has at most\n `chunk_size-1` bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original [`BitSlice`] that is not going to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":543423,"byte_end":543498,"line_start":1086,"line_end":1086,"column_start":2,"column_end":77}},{"value":"/ be returned by the iterator. The returned `BitSlice` has at most","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":543500,"byte_end":543568,"line_start":1087,"line_end":1087,"column_start":2,"column_end":70}},{"value":"/ `chunk_size-1` bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":543570,"byte_end":543594,"line_start":1088,"line_end":1088,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":543596,"byte_end":543599,"line_start":1089,"line_end":1089,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":543601,"byte_end":543615,"line_start":1090,"line_end":1090,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":543617,"byte_end":543620,"line_start":1091,"line_end":1091,"column_start":2,"column_end":5}},{"value":"/ [`slice::ChunksExactMut::into_remainder`][orig]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":543622,"byte_end":543673,"line_start":1092,"line_end":1092,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":543675,"byte_end":543678,"line_start":1093,"line_end":1093,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":543680,"byte_end":543701,"line_start":1094,"line_end":1094,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":543703,"byte_end":543706,"line_start":1095,"line_end":1095,"column_start":2,"column_end":5}},{"value":"/ The remainder slice, as with all slices yielded from this iterator, is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":543708,"byte_end":543782,"line_start":1096,"line_end":1096,"column_start":2,"column_end":76}},{"value":"/ marked as aliased.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":543784,"byte_end":543806,"line_start":1097,"line_end":1097,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":543808,"byte_end":543811,"line_start":1098,"line_end":1098,"column_start":2,"column_end":5}},{"value":"/ [orig]: core::slice::ChunksExactMut::into_remainder","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":543813,"byte_end":543868,"line_start":1099,"line_end":1099,"column_start":2,"column_end":57}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":543870,"byte_end":543910,"line_start":1100,"line_end":1100,"column_start":2,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":5857},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":545888,"byte_end":545895,"line_start":1180,"line_end":1180,"column_start":12,"column_end":19},"name":"RChunks","qualname":"::slice::iter::RChunks","value":"RChunks {  }","parent":null,"children":[{"krate":0,"index":5861},{"krate":0,"index":5862}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the end of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last\nslice of the iteration will be the remainder.\n\nThis struct is created by the [`.rchunks()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RChunks`](core::slice::RChunks)\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.rchunks()`]: crate::slice::BitSlice::rchunks\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":545390,"byte_end":545852,"line_start":1164,"line_end":1178,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":5896},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":549296,"byte_end":549306,"line_start":1301,"line_end":1301,"column_start":12,"column_end":22},"name":"RChunksMut","qualname":"::slice::iter::RChunksMut","value":"RChunksMut {  }","parent":null,"children":[{"krate":0,"index":5900},{"krate":0,"index":5901}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the end of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`.rchunks_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RChunksMut`](core::slice::RChunksMut)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.rchunks_mut()`]: crate::slice::BitSlice::rchunks_mut\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":548698,"byte_end":549267,"line_start":1281,"line_end":1299,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":5930},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":551984,"byte_end":551996,"line_start":1403,"line_end":1403,"column_start":12,"column_end":24},"name":"RChunksExact","qualname":"::slice::iter::RChunksExact","value":"RChunksExact {  }","parent":null,"children":[{"krate":0,"index":5934},{"krate":0,"index":5935},{"krate":0,"index":5936}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the end of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be omitted but can be retrieved from the\n[`.remainder()`] function from the iterator.\n\nThis struct is created by the [`.rchunks_exact()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RChunksExact`](core::slice::RChunksExact)\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.rchunks_exact()`]: crate::slice::BitSlice::rchunks_exact\n[`.remainder()`]: Self::remainder\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":551353,"byte_end":551948,"line_start":1385,"line_end":1401,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2891},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":552965,"byte_end":552974,"line_start":1444,"line_end":1444,"column_start":9,"column_end":18},"name":"remainder","qualname":"<RChunksExact>::remainder","value":"pub fn remainder(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original [`BitSlice`] that is not going to\n be returned by the iterator. The returned `BitSlice` has at most\n `chunk_size-1` bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original [`BitSlice`] that is not going to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":552634,"byte_end":552709,"line_start":1435,"line_end":1435,"column_start":2,"column_end":77}},{"value":"/ be returned by the iterator. The returned `BitSlice` has at most","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":552711,"byte_end":552779,"line_start":1436,"line_end":1436,"column_start":2,"column_end":70}},{"value":"/ `chunk_size-1` bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":552781,"byte_end":552805,"line_start":1437,"line_end":1437,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":552807,"byte_end":552810,"line_start":1438,"line_end":1438,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":552812,"byte_end":552826,"line_start":1439,"line_end":1439,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":552828,"byte_end":552831,"line_start":1440,"line_end":1440,"column_start":2,"column_end":5}},{"value":"/ [`slice::RChunksExact::remainder`](core::slice::RChunksExact::remainder)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":552833,"byte_end":552909,"line_start":1441,"line_end":1441,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":552911,"byte_end":552914,"line_start":1442,"line_end":1442,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":552916,"byte_end":552956,"line_start":1443,"line_end":1443,"column_start":2,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":5970},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":555167,"byte_end":555182,"line_start":1529,"line_end":1529,"column_start":12,"column_end":27},"name":"RChunksExactMut","qualname":"::slice::iter::RChunksExactMut","value":"RChunksExactMut {  }","parent":null,"children":[{"krate":0,"index":5974},{"krate":0,"index":5975},{"krate":0,"index":5976}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the end of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be omitted but can be retrieved from the\n[`.into_remainder()`] function from the iterator.\n\nThis struct is created by the [`.rchunks_exact_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RChunksExactMut`](core::slice::RChunksExactMut)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.into_remainder()`]: Self::into_remainder\n[`.rchunks_exact_mut()`]: crate::slice::BitSlice::rchunks_exact_mut\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":554421,"byte_end":555138,"line_start":1507,"line_end":1527,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2897},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":556351,"byte_end":556365,"line_start":1576,"line_end":1576,"column_start":9,"column_end":23},"name":"into_remainder","qualname":"<RChunksExactMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original [`BitSlice`] that is not going to\n be returned by the iterator. The returned `BitSlice` has at most\n `chunk_size-1` bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original [`BitSlice`] that is not going to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":555853,"byte_end":555928,"line_start":1561,"line_end":1561,"column_start":2,"column_end":77}},{"value":"/ be returned by the iterator. The returned `BitSlice` has at most","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":555930,"byte_end":555998,"line_start":1562,"line_end":1562,"column_start":2,"column_end":70}},{"value":"/ `chunk_size-1` bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":556000,"byte_end":556024,"line_start":1563,"line_end":1563,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":556026,"byte_end":556029,"line_start":1564,"line_end":1564,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":556031,"byte_end":556045,"line_start":1565,"line_end":1565,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":556047,"byte_end":556050,"line_start":1566,"line_end":1566,"column_start":2,"column_end":5}},{"value":"/ [`slice::RChunksExactMut::into_remainder`][orig]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":556052,"byte_end":556104,"line_start":1567,"line_end":1567,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":556106,"byte_end":556109,"line_start":1568,"line_end":1568,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":556111,"byte_end":556132,"line_start":1569,"line_end":1569,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":556134,"byte_end":556137,"line_start":1570,"line_end":1570,"column_start":2,"column_end":5}},{"value":"/ The remainder slice, as with all slices yielded from this iterator, is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":556139,"byte_end":556213,"line_start":1571,"line_end":1571,"column_start":2,"column_end":76}},{"value":"/ marked as aliased.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":556215,"byte_end":556237,"line_start":1572,"line_end":1572,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":556239,"byte_end":556242,"line_start":1573,"line_end":1573,"column_start":2,"column_end":5}},{"value":"/ [orig]: core::slice::RChunksExactMut::into_remainder","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":556244,"byte_end":556300,"line_start":1574,"line_end":1574,"column_start":2,"column_end":58}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":556302,"byte_end":556342,"line_start":1575,"line_end":1575,"column_start":2,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":6030},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":560512,"byte_end":560517,"line_start":1776,"line_end":1776,"column_start":12,"column_end":17},"name":"Split","qualname":"::slice::iter::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":6035},{"krate":0,"index":6036},{"krate":0,"index":6037}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction.\n\nThis struct is created by the [`.split()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::Split`](core::slice::Split)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.split()`]: crate::slice::BitSlice::split\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":560034,"byte_end":560483,"line_start":1758,"line_end":1774,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2900},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":562117,"byte_end":562125,"line_start":1849,"line_end":1849,"column_start":12,"column_end":20},"name":"SplitMut","qualname":"::slice::iter::SplitMut","value":"SplitMut {  }","parent":null,"children":[{"krate":0,"index":2905},{"krate":0,"index":2906},{"krate":0,"index":2907}],"decl_id":null,"docs":" An iterator over the mutable subslices which are separated by bits that\nmatch `pred`.","sig":null,"attributes":[{"value":"* An iterator over the mutable subslices which are separated by bits that\nmatch `pred`.\n\nThis struct is created by the [`.split_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::SplitMut`](core::slice::SplitMut)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.split_mut()`]: crate::slice::BitSlice::split_mut\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":561630,"byte_end":562105,"line_start":1832,"line_end":1848,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":6120},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":563842,"byte_end":563848,"line_start":1928,"line_end":1928,"column_start":12,"column_end":18},"name":"RSplit","qualname":"::slice::iter::RSplit","value":"RSplit {  }","parent":null,"children":[{"krate":0,"index":6125},{"krate":0,"index":6126},{"krate":0,"index":6127}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the [`BitSlice`].","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the [`BitSlice`].\n\nThis struct is created by the [`.rsplit()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RSplit`](core::slice::RSplit)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.rsplit()`]: crate::slice::BitSlice::rsplit\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":563316,"byte_end":563813,"line_start":1910,"line_end":1926,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2908},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":565311,"byte_end":565320,"line_start":1987,"line_end":1987,"column_start":12,"column_end":21},"name":"RSplitMut","qualname":"::slice::iter::RSplitMut","value":"RSplitMut {  }","parent":null,"children":[{"krate":0,"index":2913},{"krate":0,"index":2914},{"krate":0,"index":2915}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the [`BitSlice`].","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the [`BitSlice`].\n\nThis struct is created by the [`.rsplit_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RSplitMut`](core::slice::RSplitMut)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.rsplit_mut()`]: crate::slice::BitSlice::rsplit_mut\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":564784,"byte_end":565299,"line_start":1970,"line_end":1986,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2918},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":567116,"byte_end":567122,"line_start":2055,"line_end":2055,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::slice::iter::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":2923},{"krate":0,"index":2924}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.\n\nThis struct is created by the [`.splitn()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::SplitN`](core::slice::SplitN)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.splitn()`]: crate::slice::BitSlice::splitn\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":566613,"byte_end":567104,"line_start":2038,"line_end":2054,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2925},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":567885,"byte_end":567894,"line_start":2086,"line_end":2086,"column_start":12,"column_end":21},"name":"SplitNMut","qualname":"::slice::iter::SplitNMut","value":"SplitNMut {  }","parent":null,"children":[{"krate":0,"index":2930},{"krate":0,"index":2931}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.\n\nThis struct is created by the [`splitn_mut`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::SplitNMut`](core::slice::SplitNMut)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`splitn_mut`]: crate::slice::BitSlice::splitn_mut\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":567370,"byte_end":567873,"line_start":2069,"line_end":2085,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2932},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":568690,"byte_end":568697,"line_start":2118,"line_end":2118,"column_start":12,"column_end":19},"name":"RSplitN","qualname":"::slice::iter::RSplitN","value":"RSplitN {  }","parent":null,"children":[{"krate":0,"index":2937},{"krate":0,"index":2938}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\n[`BitSlice`].","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\n[`BitSlice`].\n\nThis struct is created by the [`rsplitn`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RSplitN`](core::slice::RSplitN)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`rsplitn`]: crate::slice::BitSlice::rsplitn\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":568145,"byte_end":568678,"line_start":2100,"line_end":2117,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2939},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":569509,"byte_end":569519,"line_start":2150,"line_end":2150,"column_start":12,"column_end":22},"name":"RSplitNMut","qualname":"::slice::iter::RSplitNMut","value":"RSplitNMut {  }","parent":null,"children":[{"krate":0,"index":2944},{"krate":0,"index":2945}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\n[`BitSlice`].","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\n[`BitSlice`].\n\nThis struct is created by the [`rsplitn_mut`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RSplitNMut`](core::slice::RSplitNMut)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`rsplitn_mut`]: crate::slice::BitSlice::rsplitn_mut\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":568946,"byte_end":569497,"line_start":2132,"line_end":2149,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":6302},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":571903,"byte_end":571911,"line_start":2250,"line_end":2250,"column_start":12,"column_end":20},"name":"IterOnes","qualname":"::slice::iter::IterOnes","value":"IterOnes {  }","parent":null,"children":[{"krate":0,"index":6306},{"krate":0,"index":6307}],"decl_id":null,"docs":" Enumerates bits in a [`BitSlice`] that are set to `1`.","sig":null,"attributes":[{"value":"* Enumerates bits in a [`BitSlice`] that are set to `1`.\n\nThis struct is created by the [`.iter_ones()`] method on [`BitSlice`]s.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.iter_ones()`]: crate::slice::BitSlice::iter_ones\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":571604,"byte_end":571829,"line_start":2242,"line_end":2248,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":6351},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":574956,"byte_end":574965,"line_start":2404,"line_end":2404,"column_start":12,"column_end":21},"name":"IterZeros","qualname":"::slice::iter::IterZeros","value":"IterZeros {  }","parent":null,"children":[{"krate":0,"index":6355},{"krate":0,"index":6356}],"decl_id":null,"docs":" Enumerates bits in a [`BitSlice`] that are cleared to `0`.","sig":null,"attributes":[{"value":"* Enumerates bits in a [`BitSlice`] that are cleared to `0`.\n\nThis struct is created by the [`.iter_zeros()`] method on [`BitSlice`]s.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.iter_zeros()`]: crate::slice::BitSlice::iter_zeros\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":574650,"byte_end":574882,"line_start":2396,"line_end":2402,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":6400},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":582892,"byte_end":582906,"line_start":2727,"line_end":2727,"column_start":5,"column_end":19},"name":"IterMutNoAlias","qualname":"::slice::iter::IterMutNoAlias","value":"IterMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":6404}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578207,"byte_end":578279,"line_start":2565,"line_end":2565,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578282,"byte_end":578300,"line_start":2566,"line_end":2566,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578303,"byte_end":578306,"line_start":2567,"line_end":2567,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578309,"byte_end":578379,"line_start":2568,"line_end":2568,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578382,"byte_end":578453,"line_start":2569,"line_end":2569,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578456,"byte_end":578521,"line_start":2570,"line_end":2570,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578524,"byte_end":578595,"line_start":2571,"line_end":2571,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578598,"byte_end":578669,"line_start":2572,"line_end":2572,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578672,"byte_end":578675,"line_start":2573,"line_end":2573,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578678,"byte_end":578749,"line_start":2574,"line_end":2574,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578752,"byte_end":578824,"line_start":2575,"line_end":2575,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578827,"byte_end":578897,"line_start":2576,"line_end":2576,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578900,"byte_end":578968,"line_start":2577,"line_end":2577,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578971,"byte_end":578981,"line_start":2578,"line_end":2578,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578984,"byte_end":578987,"line_start":2579,"line_end":2579,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578990,"byte_end":579037,"line_start":2580,"line_end":2580,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":579040,"byte_end":579083,"line_start":2581,"line_end":2581,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6450},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":583025,"byte_end":583041,"line_start":2731,"line_end":2731,"column_start":5,"column_end":21},"name":"ChunksMutNoAlias","qualname":"::slice::iter::ChunksMutNoAlias","value":"ChunksMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":6454}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578207,"byte_end":578279,"line_start":2565,"line_end":2565,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578282,"byte_end":578300,"line_start":2566,"line_end":2566,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578303,"byte_end":578306,"line_start":2567,"line_end":2567,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578309,"byte_end":578379,"line_start":2568,"line_end":2568,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578382,"byte_end":578453,"line_start":2569,"line_end":2569,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578456,"byte_end":578521,"line_start":2570,"line_end":2570,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578524,"byte_end":578595,"line_start":2571,"line_end":2571,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578598,"byte_end":578669,"line_start":2572,"line_end":2572,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578672,"byte_end":578675,"line_start":2573,"line_end":2573,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578678,"byte_end":578749,"line_start":2574,"line_end":2574,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578752,"byte_end":578824,"line_start":2575,"line_end":2575,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578827,"byte_end":578897,"line_start":2576,"line_end":2576,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578900,"byte_end":578968,"line_start":2577,"line_end":2577,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578971,"byte_end":578981,"line_start":2578,"line_end":2578,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578984,"byte_end":578987,"line_start":2579,"line_end":2579,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578990,"byte_end":579037,"line_start":2580,"line_end":2580,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":579040,"byte_end":579083,"line_start":2581,"line_end":2581,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6500},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":583149,"byte_end":583170,"line_start":2735,"line_end":2735,"column_start":5,"column_end":26},"name":"ChunksExactMutNoAlias","qualname":"::slice::iter::ChunksExactMutNoAlias","value":"ChunksExactMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":6504}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578207,"byte_end":578279,"line_start":2565,"line_end":2565,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578282,"byte_end":578300,"line_start":2566,"line_end":2566,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578303,"byte_end":578306,"line_start":2567,"line_end":2567,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578309,"byte_end":578379,"line_start":2568,"line_end":2568,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578382,"byte_end":578453,"line_start":2569,"line_end":2569,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578456,"byte_end":578521,"line_start":2570,"line_end":2570,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578524,"byte_end":578595,"line_start":2571,"line_end":2571,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578598,"byte_end":578669,"line_start":2572,"line_end":2572,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578672,"byte_end":578675,"line_start":2573,"line_end":2573,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578678,"byte_end":578749,"line_start":2574,"line_end":2574,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578752,"byte_end":578824,"line_start":2575,"line_end":2575,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578827,"byte_end":578897,"line_start":2576,"line_end":2576,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578900,"byte_end":578968,"line_start":2577,"line_end":2577,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578971,"byte_end":578981,"line_start":2578,"line_end":2578,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578984,"byte_end":578987,"line_start":2579,"line_end":2579,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578990,"byte_end":579037,"line_start":2580,"line_end":2580,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":579040,"byte_end":579083,"line_start":2581,"line_end":2581,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6550},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":583274,"byte_end":583291,"line_start":2739,"line_end":2739,"column_start":5,"column_end":22},"name":"RChunksMutNoAlias","qualname":"::slice::iter::RChunksMutNoAlias","value":"RChunksMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":6554}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578207,"byte_end":578279,"line_start":2565,"line_end":2565,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578282,"byte_end":578300,"line_start":2566,"line_end":2566,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578303,"byte_end":578306,"line_start":2567,"line_end":2567,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578309,"byte_end":578379,"line_start":2568,"line_end":2568,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578382,"byte_end":578453,"line_start":2569,"line_end":2569,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578456,"byte_end":578521,"line_start":2570,"line_end":2570,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578524,"byte_end":578595,"line_start":2571,"line_end":2571,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578598,"byte_end":578669,"line_start":2572,"line_end":2572,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578672,"byte_end":578675,"line_start":2573,"line_end":2573,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578678,"byte_end":578749,"line_start":2574,"line_end":2574,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578752,"byte_end":578824,"line_start":2575,"line_end":2575,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578827,"byte_end":578897,"line_start":2576,"line_end":2576,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578900,"byte_end":578968,"line_start":2577,"line_end":2577,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578971,"byte_end":578981,"line_start":2578,"line_end":2578,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578984,"byte_end":578987,"line_start":2579,"line_end":2579,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578990,"byte_end":579037,"line_start":2580,"line_end":2580,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":579040,"byte_end":579083,"line_start":2581,"line_end":2581,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6600},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":583400,"byte_end":583422,"line_start":2743,"line_end":2743,"column_start":5,"column_end":27},"name":"RChunksExactMutNoAlias","qualname":"::slice::iter::RChunksExactMutNoAlias","value":"RChunksExactMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":6604}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578207,"byte_end":578279,"line_start":2565,"line_end":2565,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578282,"byte_end":578300,"line_start":2566,"line_end":2566,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578303,"byte_end":578306,"line_start":2567,"line_end":2567,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578309,"byte_end":578379,"line_start":2568,"line_end":2568,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578382,"byte_end":578453,"line_start":2569,"line_end":2569,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578456,"byte_end":578521,"line_start":2570,"line_end":2570,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578524,"byte_end":578595,"line_start":2571,"line_end":2571,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578598,"byte_end":578669,"line_start":2572,"line_end":2572,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578672,"byte_end":578675,"line_start":2573,"line_end":2573,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578678,"byte_end":578749,"line_start":2574,"line_end":2574,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578752,"byte_end":578824,"line_start":2575,"line_end":2575,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578827,"byte_end":578897,"line_start":2576,"line_end":2576,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578900,"byte_end":578968,"line_start":2577,"line_end":2577,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578971,"byte_end":578981,"line_start":2578,"line_end":2578,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578984,"byte_end":578987,"line_start":2579,"line_end":2579,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578990,"byte_end":579037,"line_start":2580,"line_end":2580,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":579040,"byte_end":579083,"line_start":2581,"line_end":2581,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6650},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":583528,"byte_end":583543,"line_start":2747,"line_end":2747,"column_start":5,"column_end":20},"name":"SplitMutNoAlias","qualname":"::slice::iter::SplitMutNoAlias","value":"SplitMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":6655}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578207,"byte_end":578279,"line_start":2565,"line_end":2565,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578282,"byte_end":578300,"line_start":2566,"line_end":2566,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578303,"byte_end":578306,"line_start":2567,"line_end":2567,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578309,"byte_end":578379,"line_start":2568,"line_end":2568,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578382,"byte_end":578453,"line_start":2569,"line_end":2569,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578456,"byte_end":578521,"line_start":2570,"line_end":2570,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578524,"byte_end":578595,"line_start":2571,"line_end":2571,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578598,"byte_end":578669,"line_start":2572,"line_end":2572,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578672,"byte_end":578675,"line_start":2573,"line_end":2573,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578678,"byte_end":578749,"line_start":2574,"line_end":2574,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578752,"byte_end":578824,"line_start":2575,"line_end":2575,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578827,"byte_end":578897,"line_start":2576,"line_end":2576,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578900,"byte_end":578968,"line_start":2577,"line_end":2577,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578971,"byte_end":578981,"line_start":2578,"line_end":2578,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578984,"byte_end":578987,"line_start":2579,"line_end":2579,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578990,"byte_end":579037,"line_start":2580,"line_end":2580,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":579040,"byte_end":579083,"line_start":2581,"line_end":2581,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6709},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":583650,"byte_end":583666,"line_start":2751,"line_end":2751,"column_start":5,"column_end":21},"name":"RSplitMutNoAlias","qualname":"::slice::iter::RSplitMutNoAlias","value":"RSplitMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":6714}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578207,"byte_end":578279,"line_start":2565,"line_end":2565,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578282,"byte_end":578300,"line_start":2566,"line_end":2566,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578303,"byte_end":578306,"line_start":2567,"line_end":2567,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578309,"byte_end":578379,"line_start":2568,"line_end":2568,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578382,"byte_end":578453,"line_start":2569,"line_end":2569,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578456,"byte_end":578521,"line_start":2570,"line_end":2570,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578524,"byte_end":578595,"line_start":2571,"line_end":2571,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578598,"byte_end":578669,"line_start":2572,"line_end":2572,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578672,"byte_end":578675,"line_start":2573,"line_end":2573,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578678,"byte_end":578749,"line_start":2574,"line_end":2574,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578752,"byte_end":578824,"line_start":2575,"line_end":2575,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578827,"byte_end":578897,"line_start":2576,"line_end":2576,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578900,"byte_end":578968,"line_start":2577,"line_end":2577,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578971,"byte_end":578981,"line_start":2578,"line_end":2578,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578984,"byte_end":578987,"line_start":2579,"line_end":2579,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578990,"byte_end":579037,"line_start":2580,"line_end":2580,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":579040,"byte_end":579083,"line_start":2581,"line_end":2581,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6768},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":583773,"byte_end":583789,"line_start":2755,"line_end":2755,"column_start":5,"column_end":21},"name":"SplitNMutNoAlias","qualname":"::slice::iter::SplitNMutNoAlias","value":"SplitNMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":6773}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578207,"byte_end":578279,"line_start":2565,"line_end":2565,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578282,"byte_end":578300,"line_start":2566,"line_end":2566,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578303,"byte_end":578306,"line_start":2567,"line_end":2567,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578309,"byte_end":578379,"line_start":2568,"line_end":2568,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578382,"byte_end":578453,"line_start":2569,"line_end":2569,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578456,"byte_end":578521,"line_start":2570,"line_end":2570,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578524,"byte_end":578595,"line_start":2571,"line_end":2571,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578598,"byte_end":578669,"line_start":2572,"line_end":2572,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578672,"byte_end":578675,"line_start":2573,"line_end":2573,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578678,"byte_end":578749,"line_start":2574,"line_end":2574,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578752,"byte_end":578824,"line_start":2575,"line_end":2575,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578827,"byte_end":578897,"line_start":2576,"line_end":2576,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578900,"byte_end":578968,"line_start":2577,"line_end":2577,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578971,"byte_end":578981,"line_start":2578,"line_end":2578,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578984,"byte_end":578987,"line_start":2579,"line_end":2579,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578990,"byte_end":579037,"line_start":2580,"line_end":2580,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":579040,"byte_end":579083,"line_start":2581,"line_end":2581,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6827},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":583897,"byte_end":583914,"line_start":2759,"line_end":2759,"column_start":5,"column_end":22},"name":"RSplitNMutNoAlias","qualname":"::slice::iter::RSplitNMutNoAlias","value":"RSplitNMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":6832}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578207,"byte_end":578279,"line_start":2565,"line_end":2565,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578282,"byte_end":578300,"line_start":2566,"line_end":2566,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578303,"byte_end":578306,"line_start":2567,"line_end":2567,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578309,"byte_end":578379,"line_start":2568,"line_end":2568,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578382,"byte_end":578453,"line_start":2569,"line_end":2569,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578456,"byte_end":578521,"line_start":2570,"line_end":2570,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578524,"byte_end":578595,"line_start":2571,"line_end":2571,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578598,"byte_end":578669,"line_start":2572,"line_end":2572,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578672,"byte_end":578675,"line_start":2573,"line_end":2573,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578678,"byte_end":578749,"line_start":2574,"line_end":2574,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578752,"byte_end":578824,"line_start":2575,"line_end":2575,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578827,"byte_end":578897,"line_start":2576,"line_end":2576,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578900,"byte_end":578968,"line_start":2577,"line_end":2577,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578971,"byte_end":578981,"line_start":2578,"line_end":2578,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578984,"byte_end":578987,"line_start":2579,"line_end":2579,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578990,"byte_end":579037,"line_start":2580,"line_end":2580,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":579040,"byte_end":579083,"line_start":2581,"line_end":2581,"column_start":3,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":3448},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"store","qualname":"::store","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","parent":null,"children":[{"krate":0,"index":3449},{"krate":0,"index":3450},{"krate":0,"index":3451},{"krate":0,"index":3452},{"krate":0,"index":3455},{"krate":0,"index":3458},{"krate":0,"index":3459},{"krate":0,"index":3462},{"krate":0,"index":3465},{"krate":0,"index":3468},{"krate":0,"index":3469},{"krate":0,"index":3472},{"krate":0,"index":3473},{"krate":0,"index":3475},{"krate":0,"index":3478},{"krate":0,"index":3491},{"krate":0,"index":7004},{"krate":0,"index":7017},{"krate":0,"index":7030},{"krate":0,"index":7042},{"krate":0,"index":7043},{"krate":0,"index":7044},{"krate":0,"index":7045},{"krate":0,"index":7058},{"krate":0,"index":7071},{"krate":0,"index":7083},{"krate":0,"index":7084},{"krate":0,"index":7085},{"krate":0,"index":7086},{"krate":0,"index":7099},{"krate":0,"index":7112},{"krate":0,"index":7124},{"krate":0,"index":7125},{"krate":0,"index":7126},{"krate":0,"index":7127},{"krate":0,"index":7140},{"krate":0,"index":7153},{"krate":0,"index":7165},{"krate":0,"index":7166},{"krate":0,"index":7167},{"krate":0,"index":7168},{"krate":0,"index":7181},{"krate":0,"index":7194},{"krate":0,"index":7206},{"krate":0,"index":7207},{"krate":0,"index":7208},{"krate":0,"index":3492},{"krate":0,"index":7209},{"krate":0,"index":7212},{"krate":0,"index":7224},{"krate":0,"index":7225},{"krate":0,"index":7228},{"krate":0,"index":7240},{"krate":0,"index":7241},{"krate":0,"index":7244},{"krate":0,"index":7256},{"krate":0,"index":7257},{"krate":0,"index":7260},{"krate":0,"index":7272},{"krate":0,"index":7273},{"krate":0,"index":7276},{"krate":0,"index":7288},{"krate":0,"index":3493}],"decl_id":null,"docs":" Memory modeling.","sig":null,"attributes":[{"value":"* Memory modeling.\n\nThis module provides the [`BitStore`] trait, which contains all of the logic\nrequired to perform memory accesses from a data structure handle.\n\n# `bitvec` Memory Model\n\n`bitvec` considers all memory within [`BitSlice`] regions as if it were composed\nof discrete bits, each divisible and indipendent from its neighbors, just as the\nRust memory model considers elements `T` in a slice `[T]`. Much as ordinary byte\nslices `[u8]` provide an API where each byte is distinct and independent from\nits neighbors, but the underlying processor silicon clusters them in words and\ncachelines, both the processor silicon *and* the Rust compiler require that bits\nin a `BitSlice` be grouped into memory elements, and collectively subjected to\naliasing rules within their batch.\n\n`bitvec` manages this through the [`BitStore`] trait. It is implemented on three\ntype families available from the Rust standard libraries:\n\n- [unsigned integers]\n- [atomic] unsigned integers\n- [`Cell`] wrappers of unsigned integers\n\n`bitvec` receives a memory region typed with one of these three families and\nwraps it in one of its data structures based on [`BitSlice`]. The target\nprocessor is responsible for handling any contention between memory elements;\nthis is irrelevant to the `bitvec` model. `bitvec` is solely responsible for\nproving to the Rust compiler that all memory accesses through its types are\ncorrectly managed according to the `&`/`&mut` shared/exclusion reference model,\nand the [`UnsafeCell`] shared-mutation model.\n\nThrough [`BitStore`], `bitvec` is able to demonstrate that `&mut BitSlice`\nreferences to a region of *bits* have no other `BitSlice` references capable of\nviewing those bits. However, `&mut BitSlice` references *may* have other\n`&BitSlice` references capable of viewing the memory elements at locations that\nit modifies, and the Rust compiler considers it undefined behavior for such\nconditions to allow racing writes and reads without synchronization.\n\nAs such, [`BitStore`] provides a closed type-system graph that the [`BitSlice`]\nAPI uses to mark events that can induce aliases to memory locations. When a\n`&mut BitSlice<_, T>` typed with an ordinary unsigned integer use any of the\nAPIs that call [`.split_at_mut()`], it transitions to\n`&mut BitSlice<_, T::Alias>`. The [`::Alias`] associated type is always a type\nthat manages aliasing references to a single memory location: either an [atomic]\nunsigned integer `T` or a [`Cell`] of the unsigned integer `T`. The Rust\nstandard library guarantees that these types will behave correctly when multiple\nreferences to a single location attempt to read from and write to it.\n\nThe [atomic] and [`Cell`] types stay as themselves when [`BitSlice`] introduces\naliasing conditions, as they are already alias-aware.\n\nLastly, the `bitvec` memory description model as implemented in the [`domain`]\nmodule is able to perform the inverse transition: where it can demonstrate a\nstatic awareness that the `&`/`&mut` exclusion rules are satisfied for a\nparticular element slice `[T]`, it may apply the [`::Unalias`] marker to undo\nany `::Alias`ing, and present a type that has no more aliasing protection than\nthat with which the memory region was initially declared.\n\nNamely, this means that the [atomic] and [`Cell`] wrappers will never be removed\nfrom a region that had them before it was given to `bitvec`, while a region of\nordinary integers may regain the ability to be viewed without synchrony guards\nif `bitvec` can prove safety in the [`domain`] module.\n\nIn order to retain `bitvec`’s promise that an `&mut BitSlice<_, T>` has the sole\nright of observation for all bits in its region, the unsigned integers alias to\na crate-internal wrapper over the alias-capable standard-library types. This\nwrapper forbids mutation through shared references, so two [`BitSlice`]\nreferences that alias a memory location, but do not overlap in bits, may not be\ncoërced to interfere with each other.\n\n[atomic]: core::sync::atomic\n[unsigned integers]: core::primitive\n[`BitSlice`]: crate::slice::BitSlice\n[`BitStore`]: crate::store::BitStore\n[`Cell`]: core::cell::Cell\n[`UnsafeCell`]: core::cell::UnsafeCell\n[`domain`]: crate::domain\n[`::Alias`]: crate::store::BitStore::Alias\n[`::Unalias`]: crate::store::BitStore::Unalias\n[`.split_at_mut()`]: crate::slice::BitSlice::split_at_mut\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":618196,"byte_end":622540,"line_start":1,"line_end":81,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":3478},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":625103,"byte_end":625111,"line_start":149,"line_end":149,"column_start":11,"column_end":19},"name":"BitStore","qualname":"::store::BitStore","value":"BitStore: 'static + seal::Sealed + Debug","parent":null,"children":[{"krate":0,"index":3479},{"krate":0,"index":3480},{"krate":0,"index":3481},{"krate":0,"index":3482},{"krate":0,"index":3483},{"krate":0,"index":3484},{"krate":0,"index":3485},{"krate":0,"index":3487},{"krate":0,"index":3489}],"decl_id":null,"docs":" Common interface for memory regions.","sig":null,"attributes":[{"value":"* Common interface for memory regions.\n\nThis trait is used to describe how [`BitSlice`] regions interact with the memory\nbus when reading to or writing from locations. It manages the behavior required\nwhen locations are contended for write permissions by multiple handles, and\nensures that Rust’s `&`/`&mut` shared/exclusion system, as well as its\n[`UnsafeCell`] shared-mutation system, are upheld for individual bits as well as\nfor the memory operations that power the slice.\n\nThis trait is publicly implemented on the unsigned integers that implement\n[`BitRegister`], their [`Cell`] wrappers, and (if present) their [atomic]\nvariants. You may freely construct [`BitSlice`] regions over elements or slices\nof any of these types.\n\nShared [`BitSlice`] references (`&BitSlice<_, T: BitStore>`) permit multiple\nhandles to view the bits they describe. When `T` is a [`Cell`] or [atom], these\nhandles may use the methods [`.set_aliased()`] and [`.set_aliased_unchecked()`]\nto modify memory; when `T` is an ordinary integer, they may not.\n\nExclusive [`BitSlice`] references (`&mut BitSlice<_, T: BitStore>`) do not allow\nany other handle to view the bits they describe. However, other handles may view\nthe **memory locations** containing their bits! When `T` is a [`Cell`] or\n[atom], no special behavior occurs. When `T` is an ordinary integer, [`bitvec`]\ndetects the creation of multiple `&mut BitSlice<_, T>` handles that do not alias\nbits but *do* alias memory, and enforces that these handles use `Cell` or atomic\nbehavior to access the underlying memory, even though individual bits in the\nslices are not contended.\n\n# Integer Width Restricitons\n\nCurrently, [`bitvec`] is only tested on 32- and 64- bit architectures. This\nmeans that `u8`, `u16`, `u32`, and `usize` unconditionally implement `BitStore`,\nbut `u64` will only do so on 64-bit targets. This is a necessary restriction of\n`bitvec` internals. Please comment on [Issue #76] if this affects you.\n\n[Issue #76]: https://github.com/myrrlyn/bitvec/issues/76\n[atom]: core::sync::atomic\n[atomic]: core::sync::atomic\n[`BitSlice`]: crate::slice::BitSlice\n[`BitRegister`]: crate::mem::BitRegister\n[`Cell`]: core::cell::Cell\n[`UnsafeCell`]: core::cell::UnsafeCell\n[`bitvec`]: crate\n[`.set_aliased()`]: crate::slice::BitSlice::set_aliased\n[`.set_aliased_unchecked()`]: crate::slice::BitSlice::set_aliased_unchecked\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":622723,"byte_end":625092,"line_start":103,"line_end":148,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":3479},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":625320,"byte_end":625323,"line_start":154,"line_end":154,"column_start":7,"column_end":10},"name":"Mem","qualname":"::store::BitStore::Mem","value":"type Mem: BitRegister + BitStore<Mem = Self::Mem>;","parent":{"krate":0,"index":3478},"children":[],"decl_id":null,"docs":" The register type used in the slice region underlying a [`BitSlice`]\n handle. It is always an unsigned integer.","sig":null,"attributes":[{"value":"/ The register type used in the slice region underlying a [`BitSlice`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":625147,"byte_end":625219,"line_start":150,"line_end":150,"column_start":2,"column_end":74}},{"value":"/ handle. It is always an unsigned integer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":625221,"byte_end":625266,"line_start":151,"line_end":151,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":625268,"byte_end":625271,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":625273,"byte_end":625313,"line_start":153,"line_end":153,"column_start":2,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":3480},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":625596,"byte_end":625602,"line_start":158,"line_end":158,"column_start":7,"column_end":13},"name":"Access","qualname":"::store::BitStore::Access","value":"type Access: BitAccess<Item = Self::Mem> + BitStore<Mem = Self::Mem>;","parent":{"krate":0,"index":3478},"children":[],"decl_id":null,"docs":" A type that selects appropriate load/store instructions used for\n accessing the memory bus. It determines what instructions are used when\n moving a `Self::Mem` value between the processor and the memory system.\n","sig":null,"attributes":[{"value":"/ A type that selects appropriate load/store instructions used for","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":625367,"byte_end":625435,"line_start":155,"line_end":155,"column_start":2,"column_end":70}},{"value":"/ accessing the memory bus. It determines what instructions are used when","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":625437,"byte_end":625512,"line_start":156,"line_end":156,"column_start":2,"column_end":77}},{"value":"/ moving a `Self::Mem` value between the processor and the memory system.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":625514,"byte_end":625589,"line_start":157,"line_end":157,"column_start":2,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":3481},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":625911,"byte_end":625916,"line_start":164,"line_end":164,"column_start":7,"column_end":12},"name":"Alias","qualname":"::store::BitStore::Alias","value":"type Alias: BitStore<Mem = Self::Mem>;","parent":{"krate":0,"index":3478},"children":[],"decl_id":null,"docs":" A sibling `BitStore` implementor. It is used when a [`BitSlice`]\n introduces multiple handles that view the same memory location, and at\n least one of them has write permission to it.","sig":null,"attributes":[{"value":"/ A sibling `BitStore` implementor. It is used when a [`BitSlice`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":625662,"byte_end":625730,"line_start":159,"line_end":159,"column_start":2,"column_end":70}},{"value":"/ introduces multiple handles that view the same memory location, and at","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":625732,"byte_end":625806,"line_start":160,"line_end":160,"column_start":2,"column_end":76}},{"value":"/ least one of them has write permission to it.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":625808,"byte_end":625857,"line_start":161,"line_end":161,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":625859,"byte_end":625862,"line_start":162,"line_end":162,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":625864,"byte_end":625904,"line_start":163,"line_end":163,"column_start":2,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":3482},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626130,"byte_end":626137,"line_start":169,"line_end":169,"column_start":7,"column_end":14},"name":"Unalias","qualname":"::store::BitStore::Unalias","value":"type Unalias: BitStore<Mem = Self::Mem>;","parent":{"krate":0,"index":3478},"children":[],"decl_id":null,"docs":" The inverse of `Alias`. It is used when a [`BitSlice`] removes the\n conditions that required a `T -> T::Alias` transition.","sig":null,"attributes":[{"value":"/ The inverse of `Alias`. It is used when a [`BitSlice`] removes the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":625946,"byte_end":626016,"line_start":165,"line_end":165,"column_start":2,"column_end":72}},{"value":"/ conditions that required a `T -> T::Alias` transition.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626018,"byte_end":626076,"line_start":166,"line_end":166,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626078,"byte_end":626081,"line_start":167,"line_end":167,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626083,"byte_end":626123,"line_start":168,"line_end":168,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3483},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626255,"byte_end":626265,"line_start":173,"line_end":173,"column_start":5,"column_end":15},"name":"load_value","qualname":"::store::BitStore::load_value","value":"pub fn load_value(&Self) -> Self::Mem","parent":{"krate":0,"index":3478},"children":[],"decl_id":null,"docs":" Loads a value out of the memory system according to the `::Access`\n rules.\n","sig":null,"attributes":[{"value":"/ Loads a value out of the memory system according to the `::Access`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626168,"byte_end":626238,"line_start":171,"line_end":171,"column_start":2,"column_end":72}},{"value":"/ rules.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626240,"byte_end":626250,"line_start":172,"line_end":172,"column_start":2,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3484},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626370,"byte_end":626381,"line_start":176,"line_end":176,"column_start":5,"column_end":16},"name":"store_value","qualname":"::store::BitStore::store_value","value":"pub fn store_value(&mut Self, Self::Mem)","parent":{"krate":0,"index":3478},"children":[],"decl_id":null,"docs":" Stores a value into the memory system according to the `::Access` rules.\n","sig":null,"attributes":[{"value":"/ Stores a value into the memory system according to the `::Access` rules.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626289,"byte_end":626365,"line_start":175,"line_end":175,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":3485},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626971,"byte_end":626978,"line_start":197,"line_end":197,"column_start":5,"column_end":12},"name":"get_bit","qualname":"::store::BitStore::get_bit","value":"pub fn get_bit<O>(&Self, BitIdx<Self::Mem>) -> bool where O: BitOrder","parent":{"krate":0,"index":3478},"children":[],"decl_id":null,"docs":" Reads a single bit out of the memory system according to the `::Access`\n rules. This is lifted from [`BitAccess`] so that it can be used\n elsewhere without additional casts.","sig":null,"attributes":[{"value":"/ Reads a single bit out of the memory system according to the `::Access`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626414,"byte_end":626489,"line_start":178,"line_end":178,"column_start":2,"column_end":77}},{"value":"/ rules. This is lifted from [`BitAccess`] so that it can be used","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626491,"byte_end":626558,"line_start":179,"line_end":179,"column_start":2,"column_end":69}},{"value":"/ elsewhere without additional casts.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626560,"byte_end":626599,"line_start":180,"line_end":180,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626601,"byte_end":626604,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626606,"byte_end":626627,"line_start":182,"line_end":182,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626629,"byte_end":626632,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ - `O`: The ordering of bits within `Self::Mem` to use for looking up the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626634,"byte_end":626710,"line_start":184,"line_end":184,"column_start":2,"column_end":78}},{"value":"/   bit at `index`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626712,"byte_end":626733,"line_start":185,"line_end":185,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626735,"byte_end":626738,"line_start":186,"line_end":186,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626740,"byte_end":626756,"line_start":187,"line_end":187,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626758,"byte_end":626761,"line_start":188,"line_end":188,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626763,"byte_end":626776,"line_start":189,"line_end":189,"column_start":2,"column_end":15}},{"value":"/ - `index`: The semantic index of the bit in `*self` to read.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626778,"byte_end":626842,"line_start":190,"line_end":190,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626844,"byte_end":626847,"line_start":191,"line_end":191,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626849,"byte_end":626862,"line_start":192,"line_end":192,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626864,"byte_end":626867,"line_start":193,"line_end":193,"column_start":2,"column_end":5}},{"value":"/ The value of the bit in `*self` at `index`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626869,"byte_end":626916,"line_start":194,"line_end":194,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626918,"byte_end":626921,"line_start":195,"line_end":195,"column_start":2,"column_end":5}},{"value":"/ [`BitAccess`]: crate::access::BitAccess","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626923,"byte_end":626966,"line_start":196,"line_end":196,"column_start":2,"column_end":45}}]},{"kind":"Const","id":{"krate":0,"index":3487},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":627207,"byte_end":627224,"line_start":206,"line_end":206,"column_start":8,"column_end":25},"name":"__ALIGNED_TO_SIZE","qualname":"::store::BitStore::__ALIGNED_TO_SIZE","value":"[(); ]","parent":{"krate":0,"index":3478},"children":[],"decl_id":null,"docs":" Require that all implementors are aligned to their width.\n","sig":null,"attributes":[{"value":"/ Require that all implementors are aligned to their width.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":627122,"byte_end":627183,"line_start":204,"line_end":204,"column_start":2,"column_end":63}}]},{"kind":"Const","id":{"krate":0,"index":3489},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":627356,"byte_end":627369,"line_start":211,"line_end":211,"column_start":8,"column_end":21},"name":"__ALIAS_WIDTH","qualname":"::store::BitStore::__ALIAS_WIDTH","value":"[(); ]","parent":{"krate":0,"index":3478},"children":[],"decl_id":null,"docs":" Require that the `::Alias` associated type has the same width and\n alignment as `Self`.\n","sig":null,"attributes":[{"value":"/ Require that the `::Alias` associated type has the same width and","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":627237,"byte_end":627306,"line_start":208,"line_end":208,"column_start":2,"column_end":71}},{"value":"/ alignment as `Self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":627308,"byte_end":627332,"line_start":209,"line_end":209,"column_start":2,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":3494},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":631275,"byte_end":631281,"line_start":373,"line_end":373,"column_start":12,"column_end":18},"name":"Sealed","qualname":"::store::seal::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Marker trait to seal `BitStore` against downstream implementation.","sig":null,"attributes":[{"value":"/ Marker trait to seal `BitStore` against downstream implementation.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":630907,"byte_end":630977,"line_start":366,"line_end":366,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":630979,"byte_end":630982,"line_start":367,"line_end":367,"column_start":2,"column_end":5}},{"value":"/ This trait is public in the module, so that other modules in the crate","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":630984,"byte_end":631058,"line_start":368,"line_end":368,"column_start":2,"column_end":76}},{"value":"/ can use it, but so long as it is not exported by the crate root and this","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":631060,"byte_end":631136,"line_start":369,"line_end":369,"column_start":2,"column_end":78}},{"value":"/ module is private, this trait effectively forbids downstream","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":631138,"byte_end":631202,"line_start":370,"line_end":370,"column_start":2,"column_end":66}},{"value":"/ implementation of the `BitStore` trait.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":631204,"byte_end":631247,"line_start":371,"line_end":371,"column_start":2,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":3495},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"view","qualname":"::view","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","parent":null,"children":[{"krate":0,"index":3496},{"krate":0,"index":3497},{"krate":0,"index":3498},{"krate":0,"index":3501},{"krate":0,"index":3504},{"krate":0,"index":3507},{"krate":0,"index":3510},{"krate":0,"index":3511},{"krate":0,"index":3514},{"krate":0,"index":3517},{"krate":0,"index":3520},{"krate":0,"index":3523},{"krate":0,"index":3531},{"krate":0,"index":3539},{"krate":0,"index":3547},{"krate":0,"index":3556},{"krate":0,"index":7289},{"krate":0,"index":7298},{"krate":0,"index":7307},{"krate":0,"index":7316},{"krate":0,"index":7325},{"krate":0,"index":7334},{"krate":0,"index":7343},{"krate":0,"index":7352},{"krate":0,"index":7361},{"krate":0,"index":7370},{"krate":0,"index":7379},{"krate":0,"index":7388},{"krate":0,"index":7397},{"krate":0,"index":7406},{"krate":0,"index":7415},{"krate":0,"index":7424},{"krate":0,"index":7433},{"krate":0,"index":7442},{"krate":0,"index":7451},{"krate":0,"index":7460},{"krate":0,"index":7469},{"krate":0,"index":7478},{"krate":0,"index":7487},{"krate":0,"index":7496},{"krate":0,"index":7505},{"krate":0,"index":7514},{"krate":0,"index":7523},{"krate":0,"index":7532},{"krate":0,"index":7541},{"krate":0,"index":7550},{"krate":0,"index":7559},{"krate":0,"index":7568},{"krate":0,"index":7577},{"krate":0,"index":7586},{"krate":0,"index":7595},{"krate":0,"index":7604},{"krate":0,"index":7613},{"krate":0,"index":7622},{"krate":0,"index":7631},{"krate":0,"index":7640},{"krate":0,"index":7649},{"krate":0,"index":7658},{"krate":0,"index":7667},{"krate":0,"index":7676},{"krate":0,"index":7685},{"krate":0,"index":7694},{"krate":0,"index":7703},{"krate":0,"index":7712},{"krate":0,"index":7721},{"krate":0,"index":7730},{"krate":0,"index":7739},{"krate":0,"index":7748},{"krate":0,"index":7757},{"krate":0,"index":7766},{"krate":0,"index":7775},{"krate":0,"index":7784},{"krate":0,"index":7793},{"krate":0,"index":7802},{"krate":0,"index":7811},{"krate":0,"index":7820},{"krate":0,"index":7829},{"krate":0,"index":7838},{"krate":0,"index":7847},{"krate":0,"index":7856},{"krate":0,"index":3557},{"krate":0,"index":3561},{"krate":0,"index":3565},{"krate":0,"index":3570}],"decl_id":null,"docs":" [`BitSlice`] view adapters for memory regions.","sig":null,"attributes":[{"value":"* [`BitSlice`] view adapters for memory regions.\n\nThe [`&BitSlice`][`BitSlice`] type is a referential view over existing memory.\nThe inherent constructor functions are awkward to call, as they require function\nsyntax rather than method syntax, and must provide a token for the memory type\nargument even though this is informed by the already-existing reference being\nused.\n\nThis module provides an extension trait, [`BitView`], which provides methods on\nmany memory types (all [`BitRegister`] integers, and slices and arrays of them)\nto construct [`BitSlice`] over those values.\n\nIn addition, the traits [`AsBits`] and [`AsBitsMut`] are analogues of [`AsRef`]\nand [`AsMut`], respectively. These traits have a blanket implementation for all\n`A: As{Ref,Mut}<[T: BitRegister]>`, so that any type that implements a view to a\nsuitable memory region automatically implements a view to that region’s bits.\n\nThese traits are distinct because [`BitView`] combines the im/mutable view\nfunctions into one trait, and can provide specialized implementations with a\nslight performance increase over the generic, but `AsBits{,Mut}` can fit in the\ngeneric type system of any library without undue effort.\n\n[`AsBits`]: crate::view::AsBits\n[`AsBitsMut`]: crate::view::AsBitsMut\n[`AsMut`]: core::convert::AsMut\n[`AsRef`]: core::convert::AsRef\n[`BitRegister`]: crate::mem::BitRegister\n[`BitSlice`]: crate::slice::BitSlice\n[`BitView`]: crate::view::BitView\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":633708,"byte_end":635151,"line_start":1,"line_end":30,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":3523},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636024,"byte_end":636031,"line_start":63,"line_end":63,"column_start":11,"column_end":18},"name":"BitView","qualname":"::view::BitView","value":"BitView","parent":null,"children":[{"krate":0,"index":3524},{"krate":0,"index":3525},{"krate":0,"index":3527},{"krate":0,"index":3529},{"krate":0,"index":3530}],"decl_id":null,"docs":" Creates a [`BitSlice`] view over some type that supports it.","sig":null,"attributes":[{"value":"* Creates a [`BitSlice`] view over some type that supports it.\n\nThis trait is implemented on all [`BitRegister`] types, and the arrays and slices\nof them that are supported by the standard library.\n\nThis means that until type-level integers are stabilized, only arrays in\n`[T: BitRegister; 0 ..= 64]` will implement the trait; wider arrays will need to\nreborrow as slices `[T]` in order to use the slice implementation.\n\nIf you have a type that contains a [`BitRegister`] type that can be viewed with\nthis trait, then you can implement this trait by forwarding to the interior\nview.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`BitRegister`]: crate::mem::BitRegister\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":635346,"byte_end":636013,"line_start":47,"line_end":62,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":3524},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636074,"byte_end":636079,"line_start":65,"line_end":65,"column_start":7,"column_end":12},"name":"Store","qualname":"::view::BitView::Store","value":"type Store: BitStore;","parent":{"krate":0,"index":3523},"children":[],"decl_id":null,"docs":" The region’s storage type.\n","sig":null,"attributes":[{"value":"/ The region’s storage type.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636035,"byte_end":636067,"line_start":64,"line_end":64,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3525},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636432,"byte_end":636441,"line_start":82,"line_end":82,"column_start":5,"column_end":14},"name":"view_bits","qualname":"::view::BitView::view_bits","value":"pub fn view_bits<O>(&Self) -> &BitSlice<O, Self::Store> where O: BitOrder","parent":{"krate":0,"index":3523},"children":[],"decl_id":null,"docs":" Views a memory region as a [`BitSlice`].","sig":null,"attributes":[{"value":"/ Views a memory region as a [`BitSlice`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636093,"byte_end":636137,"line_start":67,"line_end":67,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636139,"byte_end":636142,"line_start":68,"line_end":68,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636144,"byte_end":636165,"line_start":69,"line_end":69,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636167,"byte_end":636170,"line_start":70,"line_end":70,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636172,"byte_end":636220,"line_start":71,"line_end":71,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636222,"byte_end":636225,"line_start":72,"line_end":72,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636227,"byte_end":636243,"line_start":73,"line_end":73,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636245,"byte_end":636248,"line_start":74,"line_end":74,"column_start":2,"column_end":5}},{"value":"/ - `&self`: The region to view as individual bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636250,"byte_end":636303,"line_start":75,"line_end":75,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636305,"byte_end":636308,"line_start":76,"line_end":76,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636310,"byte_end":636323,"line_start":77,"line_end":77,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636325,"byte_end":636328,"line_start":78,"line_end":78,"column_start":2,"column_end":5}},{"value":"/ A `&BitSlice` view over the region at `*self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636330,"byte_end":636380,"line_start":79,"line_end":79,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636382,"byte_end":636385,"line_start":80,"line_end":80,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636387,"byte_end":636427,"line_start":81,"line_end":81,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3527},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636866,"byte_end":636879,"line_start":100,"line_end":100,"column_start":5,"column_end":18},"name":"view_bits_mut","qualname":"::view::BitView::view_bits_mut","value":"pub fn view_bits_mut<O>(&mut Self) -> &mut BitSlice<O, Self::Store> where\nO: BitOrder","parent":{"krate":0,"index":3523},"children":[],"decl_id":null,"docs":" Views a memory region as a mutable [`BitSlice`].","sig":null,"attributes":[{"value":"/ Views a memory region as a mutable [`BitSlice`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636503,"byte_end":636555,"line_start":85,"line_end":85,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636557,"byte_end":636560,"line_start":86,"line_end":86,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636562,"byte_end":636583,"line_start":87,"line_end":87,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636585,"byte_end":636588,"line_start":88,"line_end":88,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636590,"byte_end":636638,"line_start":89,"line_end":89,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636640,"byte_end":636643,"line_start":90,"line_end":90,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636645,"byte_end":636661,"line_start":91,"line_end":91,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636663,"byte_end":636666,"line_start":92,"line_end":92,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: The region to view as individual mutable bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636668,"byte_end":636733,"line_start":93,"line_end":93,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636735,"byte_end":636738,"line_start":94,"line_end":94,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636740,"byte_end":636753,"line_start":95,"line_end":95,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636755,"byte_end":636758,"line_start":96,"line_end":96,"column_start":2,"column_end":5}},{"value":"/ A `&mut BitSlice` view over the region at `*self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636760,"byte_end":636814,"line_start":97,"line_end":97,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636816,"byte_end":636819,"line_start":98,"line_end":98,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636821,"byte_end":636861,"line_start":99,"line_end":99,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3529},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637049,"byte_end":637059,"line_start":106,"line_end":106,"column_start":5,"column_end":15},"name":"const_bits","qualname":"::view::BitView::const_bits","value":"pub fn const_bits() -> usize where Self: Sized","parent":{"krate":0,"index":3523},"children":[],"decl_id":null,"docs":" Produces the number of bits that the implementing type can hold.\n","sig":null,"attributes":[{"value":"/ Produces the number of bits that the implementing type can hold.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636949,"byte_end":637017,"line_start":103,"line_end":103,"column_start":2,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637035,"byte_end":637044,"line_start":105,"line_end":105,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3530},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637281,"byte_end":637291,"line_start":114,"line_end":114,"column_start":5,"column_end":15},"name":"const_elts","qualname":"::view::BitView::const_elts","value":"pub fn const_elts() -> usize where Self: Sized","parent":{"krate":0,"index":3523},"children":[],"decl_id":null,"docs":" Produces the number of memory elements that the implementing type holds.\n","sig":null,"attributes":[{"value":"/ Produces the number of memory elements that the implementing type holds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637184,"byte_end":637260,"line_start":112,"line_end":112,"column_start":2,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":3557},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":640688,"byte_end":640694,"line_start":263,"line_end":263,"column_start":11,"column_end":17},"name":"AsBits","qualname":"::view::AsBits","value":"AsBits<T>","parent":null,"children":[{"krate":0,"index":3559}],"decl_id":null,"docs":" Views a region as an immutable [`BitSlice`] only.","sig":null,"attributes":[{"value":"* Views a region as an immutable [`BitSlice`] only.\n\nThis trait is an analogue to the [`AsRef`] trait, in that it enables any type to\nprovide an immutable-only view of a bit slice.\n\nIt does not require an `AsRef<[T: BitStore]>` implementation, and a blanket\nimplementation for all such types is provided. This allows you to choose whether\nto implement only one of `AsBits<T>` or `AsRef<[T]>`, and gain a [`BitSlice`]\nview with either choice.\n\n# Type Parameters\n\n- `T`: The underlying storage region.\n\n# Notes\n\nYou are not *forbidden* from creating multiple views with different element\ntypes to the same region, but doing so is likely to cause inconsistent and\nsurprising behavior.\n\nRefrain from implementing this trait with more than one storage argument unless\nyou are sure that you can uphold the memory region requirements of all of them,\nand are aware of the behavior conflicts that may arise.\n\n[`AsRef`]: core::convert::AsRef\n[`BitSlice`]: crate::slice::BitSlice\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":639703,"byte_end":640677,"line_start":236,"line_end":262,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":3559},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":641057,"byte_end":641064,"line_start":281,"line_end":281,"column_start":5,"column_end":12},"name":"as_bits","qualname":"::view::AsBits::as_bits","value":"pub fn as_bits<O>(&Self) -> &BitSlice<O, T> where O: BitOrder","parent":{"krate":0,"index":3557},"children":[],"decl_id":null,"docs":" Views memory as a slice of immutable bits.","sig":null,"attributes":[{"value":"/ Views memory as a slice of immutable bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":640719,"byte_end":640765,"line_start":266,"line_end":266,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":640767,"byte_end":640770,"line_start":267,"line_end":267,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":640772,"byte_end":640793,"line_start":268,"line_end":268,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":640795,"byte_end":640798,"line_start":269,"line_end":269,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":640800,"byte_end":640848,"line_start":270,"line_end":270,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":640850,"byte_end":640853,"line_start":271,"line_end":271,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":640855,"byte_end":640871,"line_start":272,"line_end":272,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":640873,"byte_end":640876,"line_start":273,"line_end":273,"column_start":2,"column_end":5}},{"value":"/ - `&self`: The value that is providing a [`BitSlice`] view.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":640878,"byte_end":640941,"line_start":274,"line_end":274,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":640943,"byte_end":640946,"line_start":275,"line_end":275,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":640948,"byte_end":640961,"line_start":276,"line_end":276,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":640963,"byte_end":640966,"line_start":277,"line_end":277,"column_start":2,"column_end":5}},{"value":"/ An immutable view into some bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":640968,"byte_end":641005,"line_start":278,"line_end":278,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":641007,"byte_end":641010,"line_start":279,"line_end":279,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":641012,"byte_end":641052,"line_start":280,"line_end":280,"column_start":2,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":3561},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":642089,"byte_end":642098,"line_start":312,"line_end":312,"column_start":11,"column_end":20},"name":"AsBitsMut","qualname":"::view::AsBitsMut","value":"AsBitsMut<T>","parent":null,"children":[{"krate":0,"index":3563}],"decl_id":null,"docs":" Views a region as a mutable [`BitSlice`].","sig":null,"attributes":[{"value":"* Views a region as a mutable [`BitSlice`].\n\nThis trait is an analogue to the [`AsMut`] trait, in that it enables any type to\nprovide a mutable view of a bit slice.\n\nIt does not require an `AsMut<[T: BitStore]>` implementation, and a blanket\nimplementation for all such types is provided. This allows you to choose whether\nto implement only one of `AsBitsMut<T>` or `AsMut<[T]>`, and gain a [`BitSlice`]\nview with either choice.\n\n# Type Parameters\n\n- `T`: The underlying storage region.\n\n# Notes\n\nYou are not *forbidden* from creating multiple views with different element\ntypes to the same region, but doing so is likely to cause inconsistent and\nsurprising behavior.\n\nRefrain from implementing this trait with more than one storage argument unless\nyou are sure that you can uphold the memory region requirements of all of them,\nand are aware of the behavior conflicts that may arise.\n\n[`AsMut`]: core::convert::AsMut\n[`BitSlice`]: crate::slice::BitSlice\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":641117,"byte_end":642078,"line_start":285,"line_end":311,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":3563},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":642460,"byte_end":642471,"line_start":330,"line_end":330,"column_start":5,"column_end":16},"name":"as_bits_mut","qualname":"::view::AsBitsMut::as_bits_mut","value":"pub fn as_bits_mut<O>(&mut Self) -> &mut BitSlice<O, T> where O: BitOrder","parent":{"krate":0,"index":3561},"children":[],"decl_id":null,"docs":" Views memory as a slice of mutable bits.","sig":null,"attributes":[{"value":"/ Views memory as a slice of mutable bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":642123,"byte_end":642167,"line_start":315,"line_end":315,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":642169,"byte_end":642172,"line_start":316,"line_end":316,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":642174,"byte_end":642195,"line_start":317,"line_end":317,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":642197,"byte_end":642200,"line_start":318,"line_end":318,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":642202,"byte_end":642250,"line_start":319,"line_end":319,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":642252,"byte_end":642255,"line_start":320,"line_end":320,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":642257,"byte_end":642273,"line_start":321,"line_end":321,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":642275,"byte_end":642278,"line_start":322,"line_end":322,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: The value that is providing a [`BitSlice`] view.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":642280,"byte_end":642347,"line_start":323,"line_end":323,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":642349,"byte_end":642352,"line_start":324,"line_end":324,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":642354,"byte_end":642367,"line_start":325,"line_end":325,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":642369,"byte_end":642372,"line_start":326,"line_end":326,"column_start":2,"column_end":5}},{"value":"/ A mutable view into some bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":642374,"byte_end":642408,"line_start":327,"line_end":327,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":642410,"byte_end":642413,"line_start":328,"line_end":328,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":642415,"byte_end":642455,"line_start":329,"line_end":329,"column_start":2,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":3575},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"boxed","qualname":"::boxed","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","parent":null,"children":[{"krate":0,"index":3576},{"krate":0,"index":3577},{"krate":0,"index":3580},{"krate":0,"index":3583},{"krate":0,"index":3584},{"krate":0,"index":3586},{"krate":0,"index":3587},{"krate":0,"index":3590},{"krate":0,"index":3591},{"krate":0,"index":3593},{"krate":0,"index":3594},{"krate":0,"index":3597},{"krate":0,"index":3600},{"krate":0,"index":3603},{"krate":0,"index":3606},{"krate":0,"index":3609},{"krate":0,"index":3612},{"krate":0,"index":3613},{"krate":0,"index":3616},{"krate":0,"index":3619},{"krate":0,"index":3622},{"krate":0,"index":3626},{"krate":0,"index":3647},{"krate":0,"index":3690},{"krate":0,"index":3805}],"decl_id":null,"docs":" A dynamically-allocated, fixed-size, buffer containing a [`BitSlice`]\nregion.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11326,"byte_end":11351,"line_start":291,"line_end":291,"column_start":1,"column_end":26}},{"value":"* A dynamically-allocated, fixed-size, buffer containing a [`BitSlice`]\nregion.\n\nYou can read the standard library’s [`alloc::boxed` module documentation][std]\nhere.\n\nThis module defines the [`BitBox`] buffer, and all of its associated support\ncode.\n\n[`BitBox`] is equivalent to `Box<[bool]>`, in its operation and in its\nrelationship to the [`BitSlice`] and [`BitVec`] types. Most of the interesting\nwork to be done on a bit-sequence is implemented in `BitSlice`, to which\n`BitBox` dereferences, and the box container itself only exists to maintain\nwonership and provide some specializations that cannot safely be done on\n`BitSlice` alone.\n\nThere is almost never a reason to use this type, as it is a mixture of\n[`BitArray`]’s fixed width and [`BitVec`]’s heap allocation. You should only use\nit when you have a bit-sequence whose width is either unknowable at compile-time\nor inexpressable in `BitArray`, and are constructing the sequence in a `BitVec`\nbefore freezing it.\n\n[`BitArray`]: crate::array::BitArray\n[`BitBox`]: crate::boxed::BitBox\n[`BitSlice`]: crate::slice::BitSlice\n[`BitVec`]: crate::vec::BitVec\n[std]: alloc::boxed\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":643851,"byte_end":644996,"line_start":1,"line_end":28,"column_start":1,"column_end":4}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":644998,"byte_end":645024,"line_start":30,"line_end":30,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":3622},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648102,"byte_end":648108,"line_start":126,"line_end":126,"column_start":12,"column_end":18},"name":"BitBox","qualname":"::boxed::BitBox","value":"BitBox {  }","parent":null,"children":[{"krate":0,"index":3625}],"decl_id":null,"docs":" A frozen heap-allocated buffer of individual bits.","sig":null,"attributes":[{"value":"* A frozen heap-allocated buffer of individual bits.\n\nThis is essentially a [`BitVec`] that has frozen its allocation, and given up\nthe ability to change size. It is analagous to `Box<[bool]>`. You should prefer\n[`BitArray`] over `BitBox` where possible, and may freely box it if you need the\nindirection.\n\n# Documentation\n\nAll APIs that mirror something in the standard library will have an `Original`\nsection linking to the corresponding item. All APIs that have a different\nsignature or behavior than the original will have an `API Differences` section\nexplaining what has changed, and how to adapt your existing code to the change.\n\nThese sections look like this:\n\n# Original\n\n[`Box<[T]>`](alloc::boxed::Box)\n\n# API Differences\n\nThe buffer type `Box<[bool]>` has no type parameters. `BitBox<O, T>` has the\nsame two type parameters as `BitSlice<O, T>`. Otherwise, `BitBox` is able to\nimplement the full API surface of `Box<[bool]>`.\n\n# Behavior\n\nBecause `BitBox` is a fully-owned buffer, it is able to operate on its memory\nwithout concern for any other views that may alias. This enables it to\nspecialize some [`BitSlice`] behavior to be faster or more efficient.\n\n# Type Parameters\n\nThis takes the same [`BitOrder`] and [`BitStore`] parameters as [`BitSlice`].\nUnlike `BitSlice`, it is restricted to only accept the fundamental integers as\nits `BitStore` arguments; `BitBox` buffers can never be aliased by other\n`BitBox`es, and do not need to share memory access.\n\n# Safety\n\n`BitBox` is a wrapper over a `NonNull<BitSlice<O, T>>` pointer; this allows it\nto remain exactly two words in size, and means that it is subject to the same\nrepresentational incompatibility restrictions as [`BitSlice`] references. You\nmust never attempt to type-cast between `Box<[bool]>` and `BitBox` in any way,\nnor may you attempt to modify the memory value of a `BitBox` handle. Doing so\nwill cause allocator and memory errors in your program, likely inducing a panic.\n\nEverything in the `BitBox` public API, even the `unsafe` parts, are guaranteed\nto have no more unsafety or potential for incorrectness than their equivalent\nitems in the standard library. All `unsafe` APIs will have documentation\nexplicitly detailing what the API requires you to uphold in order for it to\nfunction safely and correctly. All safe APIs will do so themselves.\n\n# Macro Construction\n\nHeap allocation can only occur at runtime, but the [`bitbox!`] macro will\nconstruct an appropriate [`BitSlice`] buffer at compile-time, and at run-time,\nonly copy the buffer into a heap allocation.\n\n[`BitArray`]: crate::array::BitArray\n[`BitOrder`]: crate::order::BitOrder\n[`BitSlice`]: crate::slice::BitSlice\n[`BitStore`]: crate::store::BitStore\n[`BitVec`]: crate::vec::BitVec\n[`bitbox!`]: macro@crate::bitbox\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":645301,"byte_end":648069,"line_start":58,"line_end":124,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648070,"byte_end":648090,"line_start":125,"line_end":125,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":3629},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648837,"byte_end":648850,"line_start":159,"line_end":159,"column_start":9,"column_end":22},"name":"from_bitslice","qualname":"<BitBox<O, T>>::from_bitslice","value":"pub fn from_bitslice(&BitSlice<O, T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Copies a [`BitSlice`] region into a new `BitBox` allocation.","sig":null,"attributes":[{"value":"/ Copies a [`BitSlice`] region into a new `BitBox` allocation.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648317,"byte_end":648381,"line_start":140,"line_end":140,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648383,"byte_end":648386,"line_start":141,"line_end":141,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648388,"byte_end":648401,"line_start":142,"line_end":142,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648403,"byte_end":648406,"line_start":143,"line_end":143,"column_start":2,"column_end":5}},{"value":"/ This delegates to [`BitVec::from_bitslice`], then discards the excess","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648408,"byte_end":648481,"line_start":144,"line_end":144,"column_start":2,"column_end":75}},{"value":"/ capacity.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648483,"byte_end":648496,"line_start":145,"line_end":145,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648498,"byte_end":648501,"line_start":146,"line_end":146,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648503,"byte_end":648517,"line_start":147,"line_end":147,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648519,"byte_end":648522,"line_start":148,"line_end":148,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648524,"byte_end":648535,"line_start":149,"line_end":149,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648537,"byte_end":648564,"line_start":150,"line_end":150,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648566,"byte_end":648569,"line_start":151,"line_end":151,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 1, 1, 0, 1, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648571,"byte_end":648616,"line_start":152,"line_end":152,"column_start":2,"column_end":47}},{"value":"/ let bb = BitBox::from_bitslice(&bits[2 ..]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648618,"byte_end":648666,"line_start":153,"line_end":153,"column_start":2,"column_end":50}},{"value":"/ assert_eq!(bb, bits[2 ..]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648668,"byte_end":648699,"line_start":154,"line_end":154,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(bb.as_slice(), bits.as_slice());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648701,"byte_end":648748,"line_start":155,"line_end":155,"column_start":2,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648750,"byte_end":648757,"line_start":156,"line_end":156,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648759,"byte_end":648762,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ [`BitVec::from_bitslice`]: crate::vec::BitVec::from_bitslice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648764,"byte_end":648828,"line_start":158,"line_end":158,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":3630},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649666,"byte_end":649682,"line_start":191,"line_end":191,"column_start":9,"column_end":25},"name":"from_boxed_slice","qualname":"<BitBox<O, T>>::from_boxed_slice","value":"pub fn from_boxed_slice(Box<[T]>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Box<[T]>` into a `BitBox`<O, T>` without copying its buffer.","sig":null,"attributes":[{"value":"/ Converts a `Box<[T]>` into a `BitBox`<O, T>` without copying its buffer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648943,"byte_end":649019,"line_start":163,"line_end":163,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649021,"byte_end":649024,"line_start":164,"line_end":164,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649026,"byte_end":649042,"line_start":165,"line_end":165,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649044,"byte_end":649047,"line_start":166,"line_end":166,"column_start":2,"column_end":5}},{"value":"/ - `boxed`: A boxed slice to view as bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649049,"byte_end":649094,"line_start":167,"line_end":167,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649096,"byte_end":649099,"line_start":168,"line_end":168,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649101,"byte_end":649114,"line_start":169,"line_end":169,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649116,"byte_end":649119,"line_start":170,"line_end":170,"column_start":2,"column_end":5}},{"value":"/ A `BitBox` over the `boxed` buffer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649121,"byte_end":649160,"line_start":171,"line_end":171,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649162,"byte_end":649165,"line_start":172,"line_end":172,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649167,"byte_end":649179,"line_start":173,"line_end":173,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649181,"byte_end":649184,"line_start":174,"line_end":174,"column_start":2,"column_end":5}},{"value":"/ This panics if `boxed` is too long to convert into a `BitBox`. See","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649186,"byte_end":649256,"line_start":175,"line_end":175,"column_start":2,"column_end":72}},{"value":"/ [`BitSlice::MAX_ELTS`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649258,"byte_end":649285,"line_start":176,"line_end":176,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649287,"byte_end":649290,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649292,"byte_end":649306,"line_start":178,"line_end":178,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649308,"byte_end":649311,"line_start":179,"line_end":179,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649313,"byte_end":649324,"line_start":180,"line_end":180,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649326,"byte_end":649353,"line_start":181,"line_end":181,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649355,"byte_end":649358,"line_start":182,"line_end":182,"column_start":2,"column_end":5}},{"value":"/ let boxed: Box<[u8]> = Box::new([0; 4]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649360,"byte_end":649404,"line_start":183,"line_end":183,"column_start":2,"column_end":46}},{"value":"/ let addr = boxed.as_ptr();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649406,"byte_end":649436,"line_start":184,"line_end":184,"column_start":2,"column_end":32}},{"value":"/ let bb = BitBox::<LocalBits, _>::from_boxed_slice(boxed);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649438,"byte_end":649499,"line_start":185,"line_end":185,"column_start":2,"column_end":63}},{"value":"/ assert_eq!(bb, bits![0; 32]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649501,"byte_end":649534,"line_start":186,"line_end":186,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(addr, bb.as_slice().as_ptr());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649536,"byte_end":649581,"line_start":187,"line_end":187,"column_start":2,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649583,"byte_end":649590,"line_start":188,"line_end":188,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649592,"byte_end":649595,"line_start":189,"line_end":189,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice::MAX_ELTS`]: crate::slice::BitSlice::MAX_ELTS","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649597,"byte_end":649657,"line_start":190,"line_end":190,"column_start":2,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":3631},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650781,"byte_end":650801,"line_start":224,"line_end":224,"column_start":9,"column_end":29},"name":"try_from_boxed_slice","qualname":"<BitBox<O, T>>::try_from_boxed_slice","value":"pub fn try_from_boxed_slice(Box<[T]>) -> Result<Self, Box<[T]>>","parent":null,"children":[],"decl_id":null,"docs":" Converts a `Box<[T]>` into a `BitBox<O, T>` without copying its buffer.","sig":null,"attributes":[{"value":"/ Converts a `Box<[T]>` into a `BitBox<O, T>` without copying its buffer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649816,"byte_end":649891,"line_start":196,"line_end":196,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649893,"byte_end":649896,"line_start":197,"line_end":197,"column_start":2,"column_end":5}},{"value":"/ This method takes ownership of a memory buffer and enables it to be used","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649898,"byte_end":649974,"line_start":198,"line_end":198,"column_start":2,"column_end":78}},{"value":"/ as a bit-box. Because `Box<[T]>` can be longer than `BitBox`es, this is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":649976,"byte_end":650051,"line_start":199,"line_end":199,"column_start":2,"column_end":77}},{"value":"/ a fallible method, and the original box will be returned if it cannot be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650053,"byte_end":650129,"line_start":200,"line_end":200,"column_start":2,"column_end":78}},{"value":"/ converted.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650131,"byte_end":650145,"line_start":201,"line_end":201,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650147,"byte_end":650150,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650152,"byte_end":650168,"line_start":203,"line_end":203,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650170,"byte_end":650173,"line_start":204,"line_end":204,"column_start":2,"column_end":5}},{"value":"/ - `boxed`: Some boxed slice of memory, to be viewed as bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650175,"byte_end":650239,"line_start":205,"line_end":205,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650241,"byte_end":650244,"line_start":206,"line_end":206,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650246,"byte_end":650259,"line_start":207,"line_end":207,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650261,"byte_end":650264,"line_start":208,"line_end":208,"column_start":2,"column_end":5}},{"value":"/ If `boxed` is short enough to be viewed as a `BitBox`, then this returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650266,"byte_end":650342,"line_start":209,"line_end":209,"column_start":2,"column_end":78}},{"value":"/ a `BitBox` over the `boxed` buffer. If `boxed` is too long, then this","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650344,"byte_end":650417,"line_start":210,"line_end":210,"column_start":2,"column_end":75}},{"value":"/ returns `boxed` unmodified.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650419,"byte_end":650450,"line_start":211,"line_end":211,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650452,"byte_end":650455,"line_start":212,"line_end":212,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650457,"byte_end":650471,"line_start":213,"line_end":213,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650473,"byte_end":650476,"line_start":214,"line_end":214,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650478,"byte_end":650489,"line_start":215,"line_end":215,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650491,"byte_end":650518,"line_start":216,"line_end":216,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650520,"byte_end":650523,"line_start":217,"line_end":217,"column_start":2,"column_end":5}},{"value":"/ let boxed: Box<[u8]> = Box::new([0; 4]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650525,"byte_end":650569,"line_start":218,"line_end":218,"column_start":2,"column_end":46}},{"value":"/ let addr = boxed.as_ptr();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650571,"byte_end":650601,"line_start":219,"line_end":219,"column_start":2,"column_end":32}},{"value":"/ let bb = BitBox::<LocalBits, _>::try_from_boxed_slice(boxed).unwrap();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650603,"byte_end":650677,"line_start":220,"line_end":220,"column_start":2,"column_end":76}},{"value":"/ assert_eq!(bb[..], bits![0; 32]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650679,"byte_end":650716,"line_start":221,"line_end":221,"column_start":2,"column_end":39}},{"value":"/ assert_eq!(addr, bb.as_slice().as_ptr());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650718,"byte_end":650763,"line_start":222,"line_end":222,"column_start":2,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":650765,"byte_end":650772,"line_start":223,"line_end":223,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":3634},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651656,"byte_end":651672,"line_start":257,"line_end":257,"column_start":9,"column_end":25},"name":"into_boxed_slice","qualname":"<BitBox<O, T>>::into_boxed_slice","value":"pub fn into_boxed_slice(Self) -> Box<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Converts the slice back into an ordinary slice of memory elements.","sig":null,"attributes":[{"value":"/ Converts the slice back into an ordinary slice of memory elements.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651069,"byte_end":651139,"line_start":233,"line_end":233,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651141,"byte_end":651144,"line_start":234,"line_end":234,"column_start":2,"column_end":5}},{"value":"/ This does not affect the slice’s buffer, only the handle used to control","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651146,"byte_end":651224,"line_start":235,"line_end":235,"column_start":2,"column_end":78}},{"value":"/ it.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651226,"byte_end":651233,"line_start":236,"line_end":236,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651235,"byte_end":651238,"line_start":237,"line_end":237,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651240,"byte_end":651256,"line_start":238,"line_end":238,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651258,"byte_end":651261,"line_start":239,"line_end":239,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651263,"byte_end":651275,"line_start":240,"line_end":240,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651277,"byte_end":651280,"line_start":241,"line_end":241,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651282,"byte_end":651295,"line_start":242,"line_end":242,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651297,"byte_end":651300,"line_start":243,"line_end":243,"column_start":2,"column_end":5}},{"value":"/ An ordinary boxed slice containing all of the bit-slice’s memory buffer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651302,"byte_end":651380,"line_start":244,"line_end":244,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651382,"byte_end":651385,"line_start":245,"line_end":245,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651387,"byte_end":651401,"line_start":246,"line_end":246,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651403,"byte_end":651406,"line_start":247,"line_end":247,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651408,"byte_end":651419,"line_start":248,"line_end":248,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651421,"byte_end":651448,"line_start":249,"line_end":249,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651450,"byte_end":651453,"line_start":250,"line_end":250,"column_start":2,"column_end":5}},{"value":"/ let bb = bitbox![0; 5];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651455,"byte_end":651482,"line_start":251,"line_end":251,"column_start":2,"column_end":29}},{"value":"/ let addr = bb.as_slice().as_ptr();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651484,"byte_end":651522,"line_start":252,"line_end":252,"column_start":2,"column_end":40}},{"value":"/ let boxed = bb.into_boxed_slice();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651524,"byte_end":651562,"line_start":253,"line_end":253,"column_start":2,"column_end":40}},{"value":"/ assert_eq!(boxed[..], [0][..]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651564,"byte_end":651599,"line_start":254,"line_end":254,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(addr, boxed.as_ptr());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651601,"byte_end":651638,"line_start":255,"line_end":255,"column_start":2,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651640,"byte_end":651647,"line_start":256,"line_end":256,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":3636},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652962,"byte_end":652973,"line_start":303,"line_end":303,"column_start":9,"column_end":20},"name":"into_bitvec","qualname":"<BitBox<O, T>>::into_bitvec","value":"pub fn into_bitvec(Self) -> BitVec<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Converts `self` into a vector without clones or allocation.","sig":null,"attributes":[{"value":"/ Converts `self` into a vector without clones or allocation.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651798,"byte_end":651861,"line_start":263,"line_end":263,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651863,"byte_end":651866,"line_start":264,"line_end":264,"column_start":2,"column_end":5}},{"value":"/ The resulting vector can be converted back into a box via [`BitVec<O,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651868,"byte_end":651941,"line_start":265,"line_end":265,"column_start":2,"column_end":75}},{"value":"/ T>`]’s [`.into_boxed_bitslice()`] method.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651943,"byte_end":651990,"line_start":266,"line_end":266,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651992,"byte_end":651995,"line_start":267,"line_end":267,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":651997,"byte_end":652011,"line_start":268,"line_end":268,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652013,"byte_end":652016,"line_start":269,"line_end":269,"column_start":2,"column_end":5}},{"value":"/ [`slice::into_vec`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.into_vec)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652018,"byte_end":652116,"line_start":270,"line_end":270,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652118,"byte_end":652121,"line_start":271,"line_end":271,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652123,"byte_end":652144,"line_start":272,"line_end":272,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652146,"byte_end":652149,"line_start":273,"line_end":273,"column_start":2,"column_end":5}},{"value":"/ Despite taking a `Box<[T]>` receiver, this function is written in an","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652151,"byte_end":652223,"line_start":274,"line_end":274,"column_start":2,"column_end":74}},{"value":"/ `impl<T> [T]` block.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652225,"byte_end":652249,"line_start":275,"line_end":275,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652251,"byte_end":652254,"line_start":276,"line_end":276,"column_start":2,"column_end":5}},{"value":"/ Rust does not allow the text","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652256,"byte_end":652288,"line_start":277,"line_end":277,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652290,"byte_end":652293,"line_start":278,"line_end":278,"column_start":2,"column_end":5}},{"value":"/ ```rust,ignore","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652295,"byte_end":652313,"line_start":279,"line_end":279,"column_start":2,"column_end":20}},{"value":"/ impl<O, T> BitSlice<O, T> {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652315,"byte_end":652346,"line_start":280,"line_end":280,"column_start":2,"column_end":33}},{"value":"/   fn into_bitvec(self: BitBox<O, T>);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652348,"byte_end":652389,"line_start":281,"line_end":281,"column_start":2,"column_end":43}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652391,"byte_end":652396,"line_start":282,"line_end":282,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652398,"byte_end":652405,"line_start":283,"line_end":283,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652407,"byte_end":652410,"line_start":284,"line_end":284,"column_start":2,"column_end":5}},{"value":"/ to be written, and `BitBox` exists specifically because","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652412,"byte_end":652471,"line_start":285,"line_end":285,"column_start":2,"column_end":61}},{"value":"/ `Box<BitSlice<>>` cannot be written either, so this function must be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652473,"byte_end":652545,"line_start":286,"line_end":286,"column_start":2,"column_end":74}},{"value":"/ implemented directly on `BitBox` rather than on `BitSlice` with a boxed","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652547,"byte_end":652622,"line_start":287,"line_end":287,"column_start":2,"column_end":77}},{"value":"/ receiver.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652624,"byte_end":652637,"line_start":288,"line_end":288,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652639,"byte_end":652642,"line_start":289,"line_end":289,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652644,"byte_end":652658,"line_start":290,"line_end":290,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652660,"byte_end":652663,"line_start":291,"line_end":291,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652665,"byte_end":652676,"line_start":292,"line_end":292,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652678,"byte_end":652705,"line_start":293,"line_end":293,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652707,"byte_end":652710,"line_start":294,"line_end":294,"column_start":2,"column_end":5}},{"value":"/ let bb = bitbox![0, 1, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652712,"byte_end":652745,"line_start":295,"line_end":295,"column_start":2,"column_end":35}},{"value":"/ let bv = bb.into_bitvec();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652747,"byte_end":652777,"line_start":296,"line_end":296,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652779,"byte_end":652782,"line_start":297,"line_end":297,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bv, bitvec![0, 1, 0, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652784,"byte_end":652824,"line_start":298,"line_end":298,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652826,"byte_end":652833,"line_start":299,"line_end":299,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652835,"byte_end":652838,"line_start":300,"line_end":300,"column_start":2,"column_end":5}},{"value":"/ [`BitVec<O, T>`]: crate::vec::BitVec","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652840,"byte_end":652880,"line_start":301,"line_end":301,"column_start":2,"column_end":42}},{"value":"/ [`.into_boxed_bitslice()`]: crate::vec::BitVec::into_boxed_bitslice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":652882,"byte_end":652953,"line_start":302,"line_end":302,"column_start":2,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":3638},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654463,"byte_end":654474,"line_start":344,"line_end":344,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<BitBox<O, T>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Views the buffer’s contents as a `BitSlice`.","sig":null,"attributes":[{"value":"/ Views the buffer’s contents as a `BitSlice`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654210,"byte_end":654260,"line_start":332,"line_end":332,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654262,"byte_end":654265,"line_start":333,"line_end":333,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to `&bb[..]`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654267,"byte_end":654303,"line_start":334,"line_end":334,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654305,"byte_end":654308,"line_start":335,"line_end":335,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654310,"byte_end":654324,"line_start":336,"line_end":336,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654326,"byte_end":654329,"line_start":337,"line_end":337,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654331,"byte_end":654342,"line_start":338,"line_end":338,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654344,"byte_end":654371,"line_start":339,"line_end":339,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654373,"byte_end":654376,"line_start":340,"line_end":340,"column_start":2,"column_end":5}},{"value":"/ let bb = bitbox![0, 1, 1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654378,"byte_end":654411,"line_start":341,"line_end":341,"column_start":2,"column_end":35}},{"value":"/ let bits = bb.as_bitslice();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654413,"byte_end":654445,"line_start":342,"line_end":342,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654447,"byte_end":654454,"line_start":343,"line_end":343,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":3639},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654826,"byte_end":654841,"line_start":361,"line_end":361,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<BitBox<O, T>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Extracts a mutable bit-slice of the entire vector.","sig":null,"attributes":[{"value":"/ Extracts a mutable bit-slice of the entire vector.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654541,"byte_end":654595,"line_start":348,"line_end":348,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654597,"byte_end":654600,"line_start":349,"line_end":349,"column_start":2,"column_end":5}},{"value":"/ Equivalent to `&mut bv[..]`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654602,"byte_end":654634,"line_start":350,"line_end":350,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654636,"byte_end":654639,"line_start":351,"line_end":351,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654641,"byte_end":654655,"line_start":352,"line_end":352,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654657,"byte_end":654660,"line_start":353,"line_end":353,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654662,"byte_end":654673,"line_start":354,"line_end":354,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654675,"byte_end":654702,"line_start":355,"line_end":355,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654704,"byte_end":654707,"line_start":356,"line_end":356,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654709,"byte_end":654746,"line_start":357,"line_end":357,"column_start":2,"column_end":39}},{"value":"/ let bits = bv.as_mut_bitslice();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654748,"byte_end":654784,"line_start":358,"line_end":358,"column_start":2,"column_end":38}},{"value":"/ bits.set(0, true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654786,"byte_end":654808,"line_start":359,"line_end":359,"column_start":2,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654810,"byte_end":654817,"line_start":360,"line_end":360,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":3640},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655387,"byte_end":655395,"line_start":383,"line_end":383,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<BitBox<O, T>>::as_slice","value":"pub fn as_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Extracts an element slice containing the entire box.","sig":null,"attributes":[{"value":"/ Extracts an element slice containing the entire box.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654916,"byte_end":654972,"line_start":365,"line_end":365,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654974,"byte_end":654977,"line_start":366,"line_end":366,"column_start":2,"column_end":5}},{"value":"/ # Analogue","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654979,"byte_end":654993,"line_start":367,"line_end":367,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":654995,"byte_end":654998,"line_start":368,"line_end":368,"column_start":2,"column_end":5}},{"value":"/ See [`.as_bitslice()`] for a `&BitBox -> &BitSlice` transform.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655000,"byte_end":655066,"line_start":369,"line_end":369,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655068,"byte_end":655071,"line_start":370,"line_end":370,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655073,"byte_end":655087,"line_start":371,"line_end":371,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655089,"byte_end":655092,"line_start":372,"line_end":372,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655094,"byte_end":655105,"line_start":373,"line_end":373,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655107,"byte_end":655138,"line_start":374,"line_end":374,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655140,"byte_end":655167,"line_start":375,"line_end":375,"column_start":2,"column_end":29}},{"value":"/ use std::io::{self, Write};","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655169,"byte_end":655200,"line_start":376,"line_end":376,"column_start":2,"column_end":33}},{"value":"/ let buffer = bitbox![Msb0, u8; 0, 1, 0, 1, 1, 0, 0, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655202,"byte_end":655261,"line_start":377,"line_end":377,"column_start":2,"column_end":61}},{"value":"/ io::sink().write(buffer.as_slice()).unwrap();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655263,"byte_end":655312,"line_start":378,"line_end":378,"column_start":2,"column_end":51}},{"value":"/ # }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655314,"byte_end":655321,"line_start":379,"line_end":379,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655323,"byte_end":655330,"line_start":380,"line_end":380,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655332,"byte_end":655335,"line_start":381,"line_end":381,"column_start":2,"column_end":5}},{"value":"/ [`.as_bitslice()`]: Self::as_bitslice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655337,"byte_end":655378,"line_start":382,"line_end":382,"column_start":2,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":3641},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656038,"byte_end":656050,"line_start":408,"line_end":408,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<BitBox<O, T>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Extracts a mutable slice of the entire box.","sig":null,"attributes":[{"value":"/ Extracts a mutable slice of the entire box.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655549,"byte_end":655596,"line_start":389,"line_end":389,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655598,"byte_end":655601,"line_start":390,"line_end":390,"column_start":2,"column_end":5}},{"value":"/ # Analogue","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655603,"byte_end":655617,"line_start":391,"line_end":391,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655619,"byte_end":655622,"line_start":392,"line_end":392,"column_start":2,"column_end":5}},{"value":"/ See [`.as_mut_bitslice()`] for a `&mut BitBox -> &mut BitSlice`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655624,"byte_end":655691,"line_start":393,"line_end":393,"column_start":2,"column_end":69}},{"value":"/ transform.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655693,"byte_end":655707,"line_start":394,"line_end":394,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655709,"byte_end":655712,"line_start":395,"line_end":395,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655714,"byte_end":655728,"line_start":396,"line_end":396,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655730,"byte_end":655733,"line_start":397,"line_end":397,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655735,"byte_end":655746,"line_start":398,"line_end":398,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655748,"byte_end":655779,"line_start":399,"line_end":399,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655781,"byte_end":655808,"line_start":400,"line_end":400,"column_start":2,"column_end":29}},{"value":"/ use std::io::{self, Read};","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655810,"byte_end":655840,"line_start":401,"line_end":401,"column_start":2,"column_end":32}},{"value":"/ let mut buffer = bitbox![Msb0, u8; 0; 24];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655842,"byte_end":655888,"line_start":402,"line_end":402,"column_start":2,"column_end":48}},{"value":"/ io::repeat(0b101).read_exact(buffer.as_mut_slice()).unwrap();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655890,"byte_end":655955,"line_start":403,"line_end":403,"column_start":2,"column_end":67}},{"value":"/ # }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655957,"byte_end":655964,"line_start":404,"line_end":404,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655966,"byte_end":655973,"line_start":405,"line_end":405,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655975,"byte_end":655978,"line_start":406,"line_end":406,"column_start":2,"column_end":5}},{"value":"/ [`.as_mut_bitslice()`]: Self::as_mut_bitslice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":655980,"byte_end":656029,"line_start":407,"line_end":407,"column_start":2,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3642},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656983,"byte_end":657000,"line_start":436,"line_end":436,"column_start":9,"column_end":26},"name":"set_uninitialized","qualname":"<BitBox<O, T>>::set_uninitialized","value":"pub fn set_uninitialized(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets the uninitialized bits of the vector to a fixed value.","sig":null,"attributes":[{"value":"/ Sets the uninitialized bits of the vector to a fixed value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656214,"byte_end":656277,"line_start":414,"line_end":414,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656279,"byte_end":656282,"line_start":415,"line_end":415,"column_start":2,"column_end":5}},{"value":"/ This method modifies all bits in the allocated buffer that are outside","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656284,"byte_end":656358,"line_start":416,"line_end":416,"column_start":2,"column_end":76}},{"value":"/ the `self.as_bitslice()` view so that they have a consistent value. This","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656360,"byte_end":656436,"line_start":417,"line_end":417,"column_start":2,"column_end":78}},{"value":"/ can be used to zero the uninitialized memory so that when viewed as a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656438,"byte_end":656511,"line_start":418,"line_end":418,"column_start":2,"column_end":75}},{"value":"/ raw memory slice, bits outside the live region have a predictable value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656513,"byte_end":656589,"line_start":419,"line_end":419,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656591,"byte_end":656594,"line_start":420,"line_end":420,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656596,"byte_end":656610,"line_start":421,"line_end":421,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656612,"byte_end":656615,"line_start":422,"line_end":422,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656617,"byte_end":656628,"line_start":423,"line_end":423,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656630,"byte_end":656657,"line_start":424,"line_end":424,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656659,"byte_end":656662,"line_start":425,"line_end":425,"column_start":2,"column_end":5}},{"value":"/ let mut bb = BitBox::new(&220u8.view_bits::<Lsb0>()[.. 4]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656664,"byte_end":656727,"line_start":426,"line_end":426,"column_start":2,"column_end":65}},{"value":"/ assert_eq!(bb.count_ones(), 2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656729,"byte_end":656764,"line_start":427,"line_end":427,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(bb.as_slice(), &[220u8]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656766,"byte_end":656806,"line_start":428,"line_end":428,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656808,"byte_end":656811,"line_start":429,"line_end":429,"column_start":2,"column_end":5}},{"value":"/ bb.set_uninitialized(false);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656813,"byte_end":656845,"line_start":430,"line_end":430,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bb.as_slice(), &[12u8]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656847,"byte_end":656886,"line_start":431,"line_end":431,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656888,"byte_end":656891,"line_start":432,"line_end":432,"column_start":2,"column_end":5}},{"value":"/ bb.set_uninitialized(true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656893,"byte_end":656924,"line_start":433,"line_end":433,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(bb.as_slice(), &[!3u8]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656926,"byte_end":656965,"line_start":434,"line_end":434,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":656967,"byte_end":656974,"line_start":435,"line_end":435,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":3683},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659423,"byte_end":659426,"line_start":49,"line_end":49,"column_start":9,"column_end":12},"name":"new","qualname":"<BitBox<O, T>>::new","value":"pub fn new(&BitSlice<O, T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates memory on the heap and then copies `x` into it.","sig":null,"attributes":[{"value":"/ Allocates memory on the heap and then copies `x` into it.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":658802,"byte_end":658863,"line_start":25,"line_end":25,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":658865,"byte_end":658868,"line_start":26,"line_end":26,"column_start":2,"column_end":5}},{"value":"/ This doesn’t actually allocate if `x` is zero-length.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":658870,"byte_end":658929,"line_start":27,"line_end":27,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":658931,"byte_end":658934,"line_start":28,"line_end":28,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":658936,"byte_end":658950,"line_start":29,"line_end":29,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":658952,"byte_end":658955,"line_start":30,"line_end":30,"column_start":2,"column_end":5}},{"value":"/ [`Box::new`](alloc::boxed::Box::new)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":658957,"byte_end":658997,"line_start":31,"line_end":31,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":658999,"byte_end":659002,"line_start":32,"line_end":32,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659004,"byte_end":659025,"line_start":33,"line_end":33,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659027,"byte_end":659030,"line_start":34,"line_end":34,"column_start":2,"column_end":5}},{"value":"/ `Box::<[T]>::new` does not exist, because unsized types cannot be taken","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659032,"byte_end":659107,"line_start":35,"line_end":35,"column_start":2,"column_end":77}},{"value":"/ by value. Instead, this takes a slice reference, and boxes the referent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659109,"byte_end":659184,"line_start":36,"line_end":36,"column_start":2,"column_end":77}},{"value":"/ slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659186,"byte_end":659196,"line_start":37,"line_end":37,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659198,"byte_end":659201,"line_start":38,"line_end":38,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659203,"byte_end":659217,"line_start":39,"line_end":39,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659219,"byte_end":659222,"line_start":40,"line_end":40,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659224,"byte_end":659235,"line_start":41,"line_end":41,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659237,"byte_end":659264,"line_start":42,"line_end":42,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659266,"byte_end":659269,"line_start":43,"line_end":43,"column_start":2,"column_end":5}},{"value":"/ let boxed = BitBox::new(bits![0; 5]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659271,"byte_end":659312,"line_start":44,"line_end":44,"column_start":2,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659314,"byte_end":659321,"line_start":45,"line_end":45,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659323,"byte_end":659340,"line_start":46,"line_end":46,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659342,"byte_end":659372,"line_start":47,"line_end":47,"column_start":2,"column_end":32}},{"value":"deprecated = \"Prefer `from_bitslice`\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659374,"byte_end":659414,"line_start":48,"line_end":48,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3684},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659999,"byte_end":660002,"line_start":71,"line_end":71,"column_start":9,"column_end":12},"name":"pin","qualname":"<BitBox<O, T>>::pin","value":"pub fn pin(&BitSlice<O, T>) -> Pin<Self> where O: Unpin, T: Unpin","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Pin<BitBox<O, T>>`.","sig":null,"attributes":[{"value":"/ Constructs a new `Pin<BitBox<O, T>>`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659487,"byte_end":659528,"line_start":53,"line_end":53,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659530,"byte_end":659533,"line_start":54,"line_end":54,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`] is always [`Unpin`], so this has no actual effect.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659535,"byte_end":659602,"line_start":55,"line_end":55,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659604,"byte_end":659607,"line_start":56,"line_end":56,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659609,"byte_end":659623,"line_start":57,"line_end":57,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659625,"byte_end":659628,"line_start":58,"line_end":58,"column_start":2,"column_end":5}},{"value":"/ [`Box::pin`](alloc::boxed::Box::pin)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659630,"byte_end":659670,"line_start":59,"line_end":59,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659672,"byte_end":659675,"line_start":60,"line_end":60,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659677,"byte_end":659698,"line_start":61,"line_end":61,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659700,"byte_end":659703,"line_start":62,"line_end":62,"column_start":2,"column_end":5}},{"value":"/ As with [`new`], this only exists on `Box` when `T` is not unsized. This","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659705,"byte_end":659781,"line_start":63,"line_end":63,"column_start":2,"column_end":78}},{"value":"/ takes a slice reference, and pins the referent slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659783,"byte_end":659840,"line_start":64,"line_end":64,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659842,"byte_end":659845,"line_start":65,"line_end":65,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659847,"byte_end":659887,"line_start":66,"line_end":66,"column_start":2,"column_end":42}},{"value":"/ [`Unpin`]: core::marker::Unpin","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659889,"byte_end":659923,"line_start":67,"line_end":67,"column_start":2,"column_end":36}},{"value":"/ [`new`]: Self::new","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659925,"byte_end":659947,"line_start":68,"line_end":68,"column_start":2,"column_end":24}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659949,"byte_end":659958,"line_start":69,"line_end":69,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":659960,"byte_end":659990,"line_start":70,"line_end":70,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3685},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":661247,"byte_end":661255,"line_start":113,"line_end":113,"column_start":16,"column_end":24},"name":"from_raw","qualname":"<BitBox<O, T>>::from_raw","value":"pub unsafe fn from_raw(*mut BitSlice<O, T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a bit-box from a raw bit-slice pointer.","sig":null,"attributes":[{"value":"/ Constructs a bit-box from a raw bit-slice pointer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660120,"byte_end":660174,"line_start":79,"line_end":79,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660176,"byte_end":660179,"line_start":80,"line_end":80,"column_start":2,"column_end":5}},{"value":"/ After calling this function, the raw bit-slice pointer is owned by the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660181,"byte_end":660255,"line_start":81,"line_end":81,"column_start":2,"column_end":76}},{"value":"/ resulting `BitBox`. Specifically, the `BitBox` destructor will free the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660257,"byte_end":660332,"line_start":82,"line_end":82,"column_start":2,"column_end":77}},{"value":"/ memory allocation at the bit-slice pointer’s address. For this to be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660334,"byte_end":660408,"line_start":83,"line_end":83,"column_start":2,"column_end":74}},{"value":"/ safe, the bit-slice pointer can only have been produced by a `BitBox`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660410,"byte_end":660483,"line_start":84,"line_end":84,"column_start":2,"column_end":75}},{"value":"/ previously destroyed using [`into_raw`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660485,"byte_end":660529,"line_start":85,"line_end":85,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660531,"byte_end":660534,"line_start":86,"line_end":86,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660536,"byte_end":660550,"line_start":87,"line_end":87,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660552,"byte_end":660555,"line_start":88,"line_end":88,"column_start":2,"column_end":5}},{"value":"/ [`Box::from_raw`](alloc::boxed::Box::from_raw)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660557,"byte_end":660607,"line_start":89,"line_end":89,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660609,"byte_end":660612,"line_start":90,"line_end":90,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660614,"byte_end":660626,"line_start":91,"line_end":91,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660628,"byte_end":660631,"line_start":92,"line_end":92,"column_start":2,"column_end":5}},{"value":"/ This function is unsafe because improper use may lead to memory","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660633,"byte_end":660700,"line_start":93,"line_end":93,"column_start":2,"column_end":69}},{"value":"/ problems. For example, a double-free may occur if the function is called","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660702,"byte_end":660778,"line_start":94,"line_end":94,"column_start":2,"column_end":78}},{"value":"/ twice on the same raw bit-slice pointer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660780,"byte_end":660824,"line_start":95,"line_end":95,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660826,"byte_end":660829,"line_start":96,"line_end":96,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660831,"byte_end":660845,"line_start":97,"line_end":97,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660847,"byte_end":660850,"line_start":98,"line_end":98,"column_start":2,"column_end":5}},{"value":"/ Recreate a `BitBox` which was previously converted to a raw bit-slice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660852,"byte_end":660925,"line_start":99,"line_end":99,"column_start":2,"column_end":75}},{"value":"/ pointer using [`BitBox::into_raw`]:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660927,"byte_end":660966,"line_start":100,"line_end":100,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660968,"byte_end":660971,"line_start":101,"line_end":101,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660973,"byte_end":660984,"line_start":102,"line_end":102,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":660986,"byte_end":661013,"line_start":103,"line_end":103,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":661015,"byte_end":661018,"line_start":104,"line_end":104,"column_start":2,"column_end":5}},{"value":"/ let x = bitbox![0; 10];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":661020,"byte_end":661047,"line_start":105,"line_end":105,"column_start":2,"column_end":29}},{"value":"/ let ptr = BitBox::into_raw(x);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":661049,"byte_end":661083,"line_start":106,"line_end":106,"column_start":2,"column_end":36}},{"value":"/ let x = unsafe { BitBox::from_raw(ptr) };","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":661085,"byte_end":661130,"line_start":107,"line_end":107,"column_start":2,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":661132,"byte_end":661139,"line_start":108,"line_end":108,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":661141,"byte_end":661144,"line_start":109,"line_end":109,"column_start":2,"column_end":5}},{"value":"/ [`BitBox::into_raw`]: Self::into_raw","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":661146,"byte_end":661186,"line_start":110,"line_end":110,"column_start":2,"column_end":42}},{"value":"/ [`into_raw`]: Self::into_raw","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":661188,"byte_end":661220,"line_start":111,"line_end":111,"column_start":2,"column_end":34}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":661222,"byte_end":661231,"line_start":112,"line_end":112,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3686},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662817,"byte_end":662825,"line_start":160,"line_end":160,"column_start":9,"column_end":17},"name":"into_raw","qualname":"<BitBox<O, T>>::into_raw","value":"pub fn into_raw(Self) -> *mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the `BitBox`, returning a raw bit-slice pointer.","sig":null,"attributes":[{"value":"/ Consumes the `BitBox`, returning a raw bit-slice pointer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":661359,"byte_end":661420,"line_start":119,"line_end":119,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":661422,"byte_end":661425,"line_start":120,"line_end":120,"column_start":2,"column_end":5}},{"value":"/ The bit-slice pointer will be properly encoded and non-null.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":661427,"byte_end":661491,"line_start":121,"line_end":121,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":661493,"byte_end":661496,"line_start":122,"line_end":122,"column_start":2,"column_end":5}},{"value":"/ After calling this function, the caller is responsible for the memory","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":661498,"byte_end":661571,"line_start":123,"line_end":123,"column_start":2,"column_end":75}},{"value":"/ previously managed by the `BitBox`. In particular, the caller should","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":661573,"byte_end":661645,"line_start":124,"line_end":124,"column_start":2,"column_end":74}},{"value":"/ properly release the memory by converting the bit-slice pointer back","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":661647,"byte_end":661719,"line_start":125,"line_end":125,"column_start":2,"column_end":74}},{"value":"/ into a `BitBox` with the [`from_raw`] function, allowing the `BitBox`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":661721,"byte_end":661794,"line_start":126,"line_end":126,"column_start":2,"column_end":75}},{"value":"/ destructor to perform the cleanup.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":661796,"byte_end":661834,"line_start":127,"line_end":127,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":661836,"byte_end":661839,"line_start":128,"line_end":128,"column_start":2,"column_end":5}},{"value":"/ Note: this is an associated function, which means that you have to call","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":661841,"byte_end":661916,"line_start":129,"line_end":129,"column_start":2,"column_end":77}},{"value":"/ it as `BitBox::into_raw(b)` instead of `b.into_raw()`. This is to match","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":661918,"byte_end":661993,"line_start":130,"line_end":130,"column_start":2,"column_end":77}},{"value":"/ signatures with the standard library’s [`Box`] API; there will never be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":661995,"byte_end":662072,"line_start":131,"line_end":131,"column_start":2,"column_end":77}},{"value":"/ a name conflict with [`BitSlice`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662074,"byte_end":662112,"line_start":132,"line_end":132,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662114,"byte_end":662117,"line_start":133,"line_end":133,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662119,"byte_end":662133,"line_start":134,"line_end":134,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662135,"byte_end":662138,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ [`Box::into_raw`](alloc::boxed::Box::into_raw)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662140,"byte_end":662190,"line_start":136,"line_end":136,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662192,"byte_end":662195,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662197,"byte_end":662211,"line_start":138,"line_end":138,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662213,"byte_end":662216,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ Converting the raw bit-slice pointer back into a `BitBox` with","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662218,"byte_end":662284,"line_start":140,"line_end":140,"column_start":2,"column_end":68}},{"value":"/ [`BitBox::from_raw`] for automatic cleanup:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662286,"byte_end":662333,"line_start":141,"line_end":141,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662335,"byte_end":662338,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662340,"byte_end":662351,"line_start":143,"line_end":143,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662353,"byte_end":662380,"line_start":144,"line_end":144,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662382,"byte_end":662385,"line_start":145,"line_end":145,"column_start":2,"column_end":5}},{"value":"/ let x = bitbox![0; 50];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662387,"byte_end":662414,"line_start":146,"line_end":146,"column_start":2,"column_end":29}},{"value":"/ let p = BitBox::into_raw(x);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662416,"byte_end":662448,"line_start":147,"line_end":147,"column_start":2,"column_end":34}},{"value":"/ let x = unsafe { BitBox::from_raw(p) };","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662450,"byte_end":662493,"line_start":148,"line_end":148,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662495,"byte_end":662502,"line_start":149,"line_end":149,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662504,"byte_end":662507,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ You may not deällocate pointers produced by this function through any","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662509,"byte_end":662583,"line_start":151,"line_end":151,"column_start":2,"column_end":75}},{"value":"/ other manner.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662585,"byte_end":662602,"line_start":152,"line_end":152,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662604,"byte_end":662607,"line_start":153,"line_end":153,"column_start":2,"column_end":5}},{"value":"/ [`BitBox::from_raw`]: Self::from_raw","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662609,"byte_end":662649,"line_start":154,"line_end":154,"column_start":2,"column_end":42}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662651,"byte_end":662691,"line_start":155,"line_end":155,"column_start":2,"column_end":42}},{"value":"/ [`Box`]: alloc::boxed::Box","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662693,"byte_end":662723,"line_start":156,"line_end":156,"column_start":2,"column_end":32}},{"value":"/ [`from_raw`]: Self::from_raw","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662725,"byte_end":662757,"line_start":157,"line_end":157,"column_start":2,"column_end":34}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662759,"byte_end":662776,"line_start":158,"line_end":158,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662778,"byte_end":662808,"line_start":159,"line_end":159,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3687},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":664301,"byte_end":664305,"line_start":206,"line_end":206,"column_start":9,"column_end":13},"name":"leak","qualname":"<BitBox<O, T>>::leak","value":"pub fn leak<'a>(Self) -> &'a mut BitSlice<O, T> where T: 'a","parent":null,"children":[],"decl_id":null,"docs":" Consumes and leaks the `BitBox`, returning a mutable reference, `&'a mut\n BitSlice<O, T>`. This is eligible to be promoted to the `'static`\n lifetime.","sig":null,"attributes":[{"value":"/ Consumes and leaks the `BitBox`, returning a mutable reference, `&'a mut","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662887,"byte_end":662963,"line_start":164,"line_end":164,"column_start":2,"column_end":78}},{"value":"/ BitSlice<O, T>`. This is eligible to be promoted to the `'static`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":662965,"byte_end":663034,"line_start":165,"line_end":165,"column_start":2,"column_end":71}},{"value":"/ lifetime.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663036,"byte_end":663049,"line_start":166,"line_end":166,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663051,"byte_end":663054,"line_start":167,"line_end":167,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663056,"byte_end":663070,"line_start":168,"line_end":168,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663072,"byte_end":663075,"line_start":169,"line_end":169,"column_start":2,"column_end":5}},{"value":"/ [`Box::leak`](alloc::boxed::Box::leak)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663077,"byte_end":663119,"line_start":170,"line_end":170,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663121,"byte_end":663124,"line_start":171,"line_end":171,"column_start":2,"column_end":5}},{"value":"/ This function is mainly useful for data that lives for the remainder","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663126,"byte_end":663198,"line_start":172,"line_end":172,"column_start":2,"column_end":74}},{"value":"/ of the program’s life. Dropping the returned reference will cause a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663200,"byte_end":663273,"line_start":173,"line_end":173,"column_start":2,"column_end":73}},{"value":"/ memory leak. If this is not acceptable, the reference should first be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663275,"byte_end":663348,"line_start":174,"line_end":174,"column_start":2,"column_end":75}},{"value":"/ wrapped with the [`BitBox::from_raw`] function producing a `BitBox`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663350,"byte_end":663422,"line_start":175,"line_end":175,"column_start":2,"column_end":74}},{"value":"/ This `BitBox` can then be dropped which will properly deällocate the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663424,"byte_end":663497,"line_start":176,"line_end":176,"column_start":2,"column_end":74}},{"value":"/ memory.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663499,"byte_end":663510,"line_start":177,"line_end":177,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663512,"byte_end":663515,"line_start":178,"line_end":178,"column_start":2,"column_end":5}},{"value":"/ Note: this is an associated function, which means that you have to call","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663517,"byte_end":663592,"line_start":179,"line_end":179,"column_start":2,"column_end":77}},{"value":"/ it as `BitBox::leak(b)` instead of `b.leak()`. This is to match","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663594,"byte_end":663661,"line_start":180,"line_end":180,"column_start":2,"column_end":69}},{"value":"/ signatures with the standard library’s [`Box`] API; there will never be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663663,"byte_end":663740,"line_start":181,"line_end":181,"column_start":2,"column_end":77}},{"value":"/ a name conflict with [`BitSlice`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663742,"byte_end":663780,"line_start":182,"line_end":182,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663782,"byte_end":663785,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663787,"byte_end":663801,"line_start":184,"line_end":184,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663803,"byte_end":663806,"line_start":185,"line_end":185,"column_start":2,"column_end":5}},{"value":"/ [`Box::leak`](alloc::boxed::Box::leak)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663808,"byte_end":663850,"line_start":186,"line_end":186,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663852,"byte_end":663855,"line_start":187,"line_end":187,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663857,"byte_end":663871,"line_start":188,"line_end":188,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663873,"byte_end":663876,"line_start":189,"line_end":189,"column_start":2,"column_end":5}},{"value":"/ Simple usage:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663878,"byte_end":663895,"line_start":190,"line_end":190,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663897,"byte_end":663900,"line_start":191,"line_end":191,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663902,"byte_end":663913,"line_start":192,"line_end":192,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663915,"byte_end":663942,"line_start":193,"line_end":193,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663944,"byte_end":663947,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ let b = bitbox![0; 50];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663949,"byte_end":663976,"line_start":195,"line_end":195,"column_start":2,"column_end":29}},{"value":"/ let static_ref: &'static mut BitSlice = BitBox::leak(b);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":663978,"byte_end":664038,"line_start":196,"line_end":196,"column_start":2,"column_end":62}},{"value":"/ static_ref.set(0, true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":664040,"byte_end":664068,"line_start":197,"line_end":197,"column_start":2,"column_end":30}},{"value":"/ assert!(static_ref[0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":664070,"byte_end":664097,"line_start":198,"line_end":198,"column_start":2,"column_end":29}},{"value":"/ # drop(unsafe { BitBox::from_raw(static_ref) });","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":664099,"byte_end":664151,"line_start":199,"line_end":199,"column_start":2,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":664153,"byte_end":664160,"line_start":200,"line_end":200,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":664162,"byte_end":664165,"line_start":201,"line_end":201,"column_start":2,"column_end":5}},{"value":"/ [`BitBox::from_raw`]: Self::from_raw","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":664167,"byte_end":664207,"line_start":202,"line_end":202,"column_start":2,"column_end":42}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":664209,"byte_end":664249,"line_start":203,"line_end":203,"column_start":2,"column_end":42}},{"value":"/ [`Box`]: alloc::boxed::Box","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":664251,"byte_end":664281,"line_start":204,"line_end":204,"column_start":2,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":664283,"byte_end":664292,"line_start":205,"line_end":205,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3689},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":664553,"byte_end":664561,"line_start":217,"line_end":217,"column_start":9,"column_end":17},"name":"into_vec","qualname":"<BitBox<O, T>>::into_vec","value":"pub fn into_vec(Self) -> BitVec<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":664455,"byte_end":664472,"line_start":214,"line_end":214,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":664474,"byte_end":664504,"line_start":215,"line_end":215,"column_start":2,"column_end":32}},{"value":"deprecated = \"Prefer `into_bitvec`\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":664506,"byte_end":664544,"line_start":216,"line_end":216,"column_start":2,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":4028},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vec","qualname":"::vec","value":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","parent":null,"children":[{"krate":0,"index":4029},{"krate":0,"index":4030},{"krate":0,"index":4033},{"krate":0,"index":4036},{"krate":0,"index":4039},{"krate":0,"index":4040},{"krate":0,"index":4043},{"krate":0,"index":4046},{"krate":0,"index":4047},{"krate":0,"index":4048},{"krate":0,"index":4050},{"krate":0,"index":4051},{"krate":0,"index":4053},{"krate":0,"index":4054},{"krate":0,"index":4057},{"krate":0,"index":4058},{"krate":0,"index":4060},{"krate":0,"index":4061},{"krate":0,"index":4064},{"krate":0,"index":4067},{"krate":0,"index":4070},{"krate":0,"index":4073},{"krate":0,"index":4076},{"krate":0,"index":4077},{"krate":0,"index":4078},{"krate":0,"index":4081},{"krate":0,"index":4084},{"krate":0,"index":4087},{"krate":0,"index":4090},{"krate":0,"index":4091},{"krate":0,"index":4094},{"krate":0,"index":4097},{"krate":0,"index":4102},{"krate":0,"index":4141},{"krate":0,"index":4257},{"krate":0,"index":4557},{"krate":0,"index":4672},{"krate":0,"index":4883},{"krate":0,"index":4884},{"krate":0,"index":4887},{"krate":0,"index":4890}],"decl_id":null,"docs":" A dynamically-allocated buffer containing a [`BitSlice`] region.","sig":null,"attributes":[{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11368,"byte_end":11393,"line_start":294,"line_end":294,"column_start":1,"column_end":26}},{"value":"* A dynamically-allocated buffer containing a [`BitSlice`] region.\n\nYou can read the standard library’s [`alloc::vec` module documentation][std]\nhere.\n\nThis module defines the [`BitVec`] buffer, and all of its associated support\ncode.\n\n[`BitVec`] is equivalent to [`Vec<bool>`], in its operation and in its\nrelationship to the [`BitSlice`] type. Most of the interesting work to be done\non a bit-sequence is implemented in `BitSlice`, to which `BitVec` dereferences,\nand the vector container itself only exists to maintain ownership, implement\ndynamic resizing, and provide some specializations that cannot safely be done on\n`BitSlice` alone.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`BitVec`]: crate::vec::BitVec\n[`Vec<bool>`]: alloc::vec::Vec\n[std]: mod@alloc::vec\n!*/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":675146,"byte_end":675917,"line_start":1,"line_end":20,"column_start":1,"column_end":4}},{"value":"cfg(feature = \"alloc\")","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":675919,"byte_end":675945,"line_start":22,"line_end":22,"column_start":1,"column_end":27}}]},{"kind":"Struct","id":{"krate":0,"index":4097},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683094,"byte_end":683100,"line_start":253,"line_end":253,"column_start":12,"column_end":18},"name":"BitVec","qualname":"::vec::BitVec","value":"BitVec {  }","parent":null,"children":[{"krate":0,"index":4100},{"krate":0,"index":4101}],"decl_id":null,"docs":" A contiguous growable array of bits.","sig":null,"attributes":[{"value":"* A contiguous growable array of bits.\n\nThis is a managed, heap-allocated, buffer that contains a [`BitSlice`] region.\nIt is analagous to [`Vec<bool>`], and is written to be very nearly a drop-in\nreplacement for it. This type contains little interesting behavior in its own\nright; most of its behavior is provided by dereferencing to its managed\n[`BitSlice`] buffer. It instead serves primarily as an interface to the\nallocator, and has some specialized behaviors for its fully-owned memory buffer.\n\n# Documentation\n\nAll APIs that mirror something in the standard library will have an `Original`\nsection linking to the corresponding item. All APIs that have a different\nsignature or behavior than the original will have an `API Differences` section\nexplaining what has changed, and how to adapt your existing code to the change.\n\nThese sections look like this:\n\n# Original\n\n[`Vec<T>`](alloc::vec::Vec)\n\n# API Differences\n\nThe buffer type [`Vec<bool>`] has no type parameters. `BitVec<O, T>` has the\nsame two type parameters as [`BitSlice<O, T>`][`BitSlice`]. Otherwise, `BitVec`\nis able to implement the full API surface of `Vec<bool>`.\n\n# Examples\n\nBecause `BitVec` takes type parameters, but has default type arguments for them,\nyou will need to specify its type parameters when using its associated\nfunctions. The easiest way to do this is to declare bindings type as `: BitVec`,\nwhich uses the default type arguments.\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut bv: BitVec = BitVec::new();\nbv.push(false);\nbv.push(true);\n\nassert_eq!(bv.len(), 2);\nassert_eq!(bv[0], false);\n\nassert_eq!(bv.pop(), Some(true));\nassert_eq!(bv.len(), 1);\n\n// `BitVec` cannot yet support `[]=` write indexing.\n*bv.get_mut(0).unwrap() = true;\nassert_eq!(bv[0], true);\n\nbv.extend(bits![0, 1, 0]);\n\nfor bit in &bv {\n  println!(\"{}\", bit);\n}\nassert_eq!(bv, bits![1, 0, 1, 0]);\n```\n\nThe [`bitvec!`] macro is provided to make initialization more convenient:\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut bv = bitvec![0, 0, 1];\nbv.push(true);\nassert_eq!(bv, bits![0, 0, 1, 1]);\n```\n\nIt has the same argument syntax as [`vec!`]. In addition, it can take type\narguments for ordering and storage:\n\n```rust\nuse bitvec::prelude::*;\n\nlet bv = bitvec![Msb0, u16; 1; 30];\nassert!(bv.all());\nassert_eq!(bv.len(), 30);\n```\n\n# Indexing\n\nThe `BitVec` type allows you to access bits by index, because it implements the\n[`Index`] trait. However, because [`IndexMut`] requires producing an `&mut bool`\nreference, it cannot implement `[]=` index assignment syntax. Instead, you must\nuse [`get_mut`] or [`get_unchecked_mut`] to produce proxy types that can serve\nthe same purpose.\n\n# Slicing\n\nA `BitVec` is resizable, while [`BitSlice`] is a fixed-size view of a buffer.\nJust as with ordinary [`Vec`]s and slices, you can get a `BitSlice` from a\n`BitVec` by borrowing it:\n\n```rust\nuse bitvec::prelude::*;\n\nfn read_bitslice(slice: &BitSlice) {\n  // …\n}\n\nlet bv = bitvec![0; 30];\nread_bitslice(&bv);\n\n// … and that’s all!\n// you can also do it like this:\nlet x: &BitSlice = &bv;\n```\n\nAs with ordinary Rust types, you should prefer passing bit-slices rather than\nbuffers when you just want to inspect the data, and not manage the underlying\nmemory region.\n\n# Behavior\n\nBecause `BitVec` is a fully-owned buffer, it is able to operate on its memory\nwithout concern for any other views that may alias. This enables it to\nspecialize some [`BitSlice`] behavior to be faster or more efficient. However,\n`BitVec` is *not* restricted to only using unaliased integer storage, and\ntechnically permits the construction of `BitVec<_, AtomicType>`.\n\nThis restriction is extremely awkward and constraining to write in the library,\nand clients will probably never attempt to construct them, but the possibility\nis still present. Be aware of this possibility when using generic code to\nconvert from `BitSlice` to `BitVec`. Fully-typed code does not need to be\nconcerned with this possibility.\n\n# Capacity and Reällocation\n\nThe capacity of a bit-vector is the amount of space allocated for any future\nbits that will be added onto the vector. This is not to be confused with the\n*length* of a vector, which specifies the number of actual bits within the\nvector. If a vector’s length exceeds its capacity, its capacity will\nautomatically be increased, but its buffer will have to be reällocated\n\nFor example, a bit-vector with capacity 64 and length 0 would be an empty vector\nwith space for 64 more bits. Pushing 64 or fewer bits onto the vector will not\nchange its capacity or cause reällocation to occur. However, if the vector’s\nlength is increased to 65, it *may* have to reällocate, which can be slow. For\nthis reason, it is recommended to use [`BitVec::with_capacity`] whenever\npossible to specify how big the vector is expected to get.\n\n# Safety\n\nLike [`BitSlice`], `BitVec` is exactly equal in size to [`Vec`], and is also\nabsolutely representation-incompatible with it. You must never attempt to\ntype-cast between `Vec<T>` and `BitVec` in any way, nor attempt to modify the\nmemory value of a `BitVec` handle. Doing so will cause allocator and memory\nerrors in your program, likely inducing a panic.\n\nEverything in the `BitVec` public API, even the `unsafe` parts, are guaranteed\nto have no more unsafety than their equivalent items in the standard library.\nAll `unsafe` APIs will have documentation explicitly detailing what the API\nrequires you to uphold in order for it to function safely and correctly. All\nsafe APIs will do so themselves.\n\n# Performance\n\nThe choice of [`BitStore`] type parameter can impact your vector’s performance,\nas the allocator operates in units of `T` rather than in bits. This means that\nlarger register types will increase the amount of memory reserved in each call\nto the allocator, meaning fewer calls to [`push`] will actually cause a\nreällocation. In addition, iteration over the vector is governed by the\n[`BitSlice`] characteristics on the type parameter. You are generally better off\nusing larger types when your vector is a data collection rather than a specific\nI/O protocol buffer.\n\n# Macro Construction\n\nHeap allocation can only occur at runtime, but the [`bitvec!`] macro will\nconstruct an appropriate [`BitSlice`] buffer at compile-time, and at run-time,\nonly copy the buffer into a heap allocation.\n\n[`BitStore`]: crate::store::BitStore\n[`BitSlice`]: crate::slice::BitSlice\n[`BitVec::with_capacity`]: Self::with_capacity\n[`Index`]: core::ops::Index\n[`IndexMut`]: core::ops::IndexMut\n[`Vec`]: alloc::vec::Vec\n[`Vec<bool>`]: alloc::vec::Vec\n[`bitvec!`]: macro@crate::bitvec\n[`vec!`]: macro@alloc::vec\n[`get_mut`]: crate::slice::BitSlice::get_mut\n[`get_unchecked_mut`]: crate::slice::BitSlice::get_unchecked_mut\n[`push`]: Self::push\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":676335,"byte_end":683071,"line_start":65,"line_end":251,"column_start":1,"column_end":4}},{"value":"repr(C)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683072,"byte_end":683082,"line_start":252,"line_end":252,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4105},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":684141,"byte_end":684147,"line_start":295,"line_end":295,"column_start":9,"column_end":15},"name":"repeat","qualname":"<BitVec<O, T>>::repeat","value":"pub fn repeat(bool, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitVec` from a value repeated many times.","sig":null,"attributes":[{"value":"/ Constructs a `BitVec` from a value repeated many times.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683457,"byte_end":683516,"line_start":270,"line_end":270,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683518,"byte_end":683521,"line_start":271,"line_end":271,"column_start":2,"column_end":5}},{"value":"/ This function is equivalent to the `bitvec![O, T; bit; len]` [macro]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683523,"byte_end":683595,"line_start":272,"line_end":272,"column_start":2,"column_end":74}},{"value":"/ call, and is in fact the implementation of that macro syntax.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683597,"byte_end":683662,"line_start":273,"line_end":273,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683664,"byte_end":683667,"line_start":274,"line_end":274,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683669,"byte_end":683685,"line_start":275,"line_end":275,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683687,"byte_end":683690,"line_start":276,"line_end":276,"column_start":2,"column_end":5}},{"value":"/ - `bit`: The bit value to which all `len` allocated bits will be set.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683692,"byte_end":683765,"line_start":277,"line_end":277,"column_start":2,"column_end":75}},{"value":"/ - `len`: The number of live bits in the constructed `BitVec`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683767,"byte_end":683832,"line_start":278,"line_end":278,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683834,"byte_end":683837,"line_start":279,"line_end":279,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683839,"byte_end":683852,"line_start":280,"line_end":280,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683854,"byte_end":683857,"line_start":281,"line_end":281,"column_start":2,"column_end":5}},{"value":"/ A `BitVec` with `len` live bits, all set to `bit`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683859,"byte_end":683913,"line_start":282,"line_end":282,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683915,"byte_end":683918,"line_start":283,"line_end":283,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683920,"byte_end":683934,"line_start":284,"line_end":284,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683936,"byte_end":683939,"line_start":285,"line_end":285,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683941,"byte_end":683952,"line_start":286,"line_end":286,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683954,"byte_end":683981,"line_start":287,"line_end":287,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683983,"byte_end":683986,"line_start":288,"line_end":288,"column_start":2,"column_end":5}},{"value":"/ let bv = BitVec::<Msb0, u8>::repeat(true, 20);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683988,"byte_end":684038,"line_start":289,"line_end":289,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(bv, bits![1; 20]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":684040,"byte_end":684073,"line_start":290,"line_end":290,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":684075,"byte_end":684082,"line_start":291,"line_end":291,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":684084,"byte_end":684087,"line_start":292,"line_end":292,"column_start":2,"column_end":5}},{"value":"/ [macro]: macro@crate::bitvec","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":684089,"byte_end":684121,"line_start":293,"line_end":293,"column_start":2,"column_end":34}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":684123,"byte_end":684132,"line_start":294,"line_end":294,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4106},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":685211,"byte_end":685224,"line_start":328,"line_end":328,"column_start":9,"column_end":22},"name":"from_bitslice","qualname":"<BitVec<O, T>>::from_bitslice","value":"pub fn from_bitslice(&BitSlice<O, T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Copies the contents of a [`BitSlice`] into a new allocation.","sig":null,"attributes":[{"value":"/ Copies the contents of a [`BitSlice`] into a new allocation.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":684336,"byte_end":684400,"line_start":304,"line_end":304,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":684402,"byte_end":684405,"line_start":305,"line_end":305,"column_start":2,"column_end":5}},{"value":"/ This is an exact copy: the newly-created bit-vector is initialized with","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":684407,"byte_end":684482,"line_start":306,"line_end":306,"column_start":2,"column_end":77}},{"value":"/ a direct copy of the `slice`’s underlying contents, and its handle is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":684484,"byte_end":684559,"line_start":307,"line_end":307,"column_start":2,"column_end":75}},{"value":"/ set to use `slice`’s head index. Slices that do not begin at the zeroth","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":684561,"byte_end":684638,"line_start":308,"line_end":308,"column_start":2,"column_end":77}},{"value":"/ bit of the base element will thus create misaligned vectors.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":684640,"byte_end":684704,"line_start":309,"line_end":309,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":684706,"byte_end":684709,"line_start":310,"line_end":310,"column_start":2,"column_end":5}},{"value":"/ You can move the bit-vector contents down to begin at the zero index of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":684711,"byte_end":684786,"line_start":311,"line_end":311,"column_start":2,"column_end":77}},{"value":"/ the bit-vector’s buffer with [`force_align`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":684788,"byte_end":684839,"line_start":312,"line_end":312,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":684841,"byte_end":684844,"line_start":313,"line_end":313,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":684846,"byte_end":684860,"line_start":314,"line_end":314,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":684862,"byte_end":684865,"line_start":315,"line_end":315,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":684867,"byte_end":684878,"line_start":316,"line_end":316,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":684880,"byte_end":684907,"line_start":317,"line_end":317,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":684909,"byte_end":684912,"line_start":318,"line_end":318,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 1, 1, 0, 1, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":684914,"byte_end":684959,"line_start":319,"line_end":319,"column_start":2,"column_end":47}},{"value":"/ let bv = BitVec::from_bitslice(&bits[2 ..]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":684961,"byte_end":685009,"line_start":320,"line_end":320,"column_start":2,"column_end":50}},{"value":"/ assert_eq!(bv, bits[2 ..]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":685011,"byte_end":685042,"line_start":321,"line_end":321,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(bits.as_slice(), bv.as_raw_slice());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":685044,"byte_end":685095,"line_start":322,"line_end":322,"column_start":2,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":685097,"byte_end":685104,"line_start":323,"line_end":323,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":685106,"byte_end":685109,"line_start":324,"line_end":324,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":685111,"byte_end":685151,"line_start":325,"line_end":325,"column_start":2,"column_end":42}},{"value":"/ [`force_align`]: Self::force_align","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":685153,"byte_end":685191,"line_start":326,"line_end":326,"column_start":2,"column_end":40}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":685193,"byte_end":685202,"line_start":327,"line_end":327,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4107},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686570,"byte_end":686578,"line_start":386,"line_end":386,"column_start":9,"column_end":17},"name":"from_vec","qualname":"<BitVec<O, T>>::from_vec","value":"pub fn from_vec(Vec<T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`Vec<T>`] into a `BitVec<O, T>` without copying its buffer.","sig":null,"attributes":[{"value":"/ Converts a [`Vec<T>`] into a `BitVec<O, T>` without copying its buffer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":685921,"byte_end":685996,"line_start":358,"line_end":358,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":685998,"byte_end":686001,"line_start":359,"line_end":359,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686003,"byte_end":686019,"line_start":360,"line_end":360,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686021,"byte_end":686024,"line_start":361,"line_end":361,"column_start":2,"column_end":5}},{"value":"/ - `vec`: A vector to view as bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686026,"byte_end":686064,"line_start":362,"line_end":362,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686066,"byte_end":686069,"line_start":363,"line_end":363,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686071,"byte_end":686084,"line_start":364,"line_end":364,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686086,"byte_end":686089,"line_start":365,"line_end":365,"column_start":2,"column_end":5}},{"value":"/ A `BitVec` over the `vec` buffer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686091,"byte_end":686128,"line_start":366,"line_end":366,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686130,"byte_end":686133,"line_start":367,"line_end":367,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686135,"byte_end":686147,"line_start":368,"line_end":368,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686149,"byte_end":686152,"line_start":369,"line_end":369,"column_start":2,"column_end":5}},{"value":"/ This panics if `vec` is too long to convert into a `BitVec`. See","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686154,"byte_end":686222,"line_start":370,"line_end":370,"column_start":2,"column_end":70}},{"value":"/ [`BitSlice::MAX_ELTS`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686224,"byte_end":686251,"line_start":371,"line_end":371,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686253,"byte_end":686256,"line_start":372,"line_end":372,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686258,"byte_end":686272,"line_start":373,"line_end":373,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686274,"byte_end":686277,"line_start":374,"line_end":374,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686279,"byte_end":686290,"line_start":375,"line_end":375,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686292,"byte_end":686319,"line_start":376,"line_end":376,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686321,"byte_end":686324,"line_start":377,"line_end":377,"column_start":2,"column_end":5}},{"value":"/ let vec = vec![0u8; 4];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686326,"byte_end":686353,"line_start":378,"line_end":378,"column_start":2,"column_end":29}},{"value":"/ let bv = BitVec::<LocalBits, _>::from_vec(vec);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686355,"byte_end":686406,"line_start":379,"line_end":379,"column_start":2,"column_end":53}},{"value":"/ assert_eq!(bv, bits![0; 32]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686408,"byte_end":686441,"line_start":380,"line_end":380,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686443,"byte_end":686450,"line_start":381,"line_end":381,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686452,"byte_end":686455,"line_start":382,"line_end":382,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice::MAX_ELTS`]: crate::slice::BitSlice::MAX_ELTS","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686457,"byte_end":686517,"line_start":383,"line_end":383,"column_start":2,"column_end":62}},{"value":"/ [`Vec<T>`]: alloc::vec::Vec","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686519,"byte_end":686550,"line_start":384,"line_end":384,"column_start":2,"column_end":33}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686552,"byte_end":686561,"line_start":385,"line_end":385,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4108},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687776,"byte_end":687788,"line_start":424,"line_end":424,"column_start":9,"column_end":21},"name":"try_from_vec","qualname":"<BitVec<O, T>>::try_from_vec","value":"pub fn try_from_vec(Vec<T>) -> Result<Self, Vec<T>>","parent":null,"children":[],"decl_id":null,"docs":" Converts a [`Vec<T>`] into a `BitVec<O, T>` without copying its buffer.","sig":null,"attributes":[{"value":"/ Converts a [`Vec<T>`] into a `BitVec<O, T>` without copying its buffer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686699,"byte_end":686774,"line_start":391,"line_end":391,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686776,"byte_end":686779,"line_start":392,"line_end":392,"column_start":2,"column_end":5}},{"value":"/ This method takes ownership of a memory buffer and enables it to be used","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686781,"byte_end":686857,"line_start":393,"line_end":393,"column_start":2,"column_end":78}},{"value":"/ as a bit-vector. Because [`Vec`] can be longer than `BitVec`s, this is a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686859,"byte_end":686935,"line_start":394,"line_end":394,"column_start":2,"column_end":78}},{"value":"/ fallible method, and the original vector will be returned if it cannot","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":686937,"byte_end":687011,"line_start":395,"line_end":395,"column_start":2,"column_end":76}},{"value":"/ be converted.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687013,"byte_end":687030,"line_start":396,"line_end":396,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687032,"byte_end":687035,"line_start":397,"line_end":397,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687037,"byte_end":687053,"line_start":398,"line_end":398,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687055,"byte_end":687058,"line_start":399,"line_end":399,"column_start":2,"column_end":5}},{"value":"/ - `vec`: Some vector of memory, to be viewed as bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687060,"byte_end":687117,"line_start":400,"line_end":400,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687119,"byte_end":687122,"line_start":401,"line_end":401,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687124,"byte_end":687137,"line_start":402,"line_end":402,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687139,"byte_end":687142,"line_start":403,"line_end":403,"column_start":2,"column_end":5}},{"value":"/ If `vec` is short enough to be viewed as a `BitVec`, then this returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687144,"byte_end":687218,"line_start":404,"line_end":404,"column_start":2,"column_end":76}},{"value":"/ a `BitVec` over the `vec` buffer. If `vec` is too long, then this","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687220,"byte_end":687289,"line_start":405,"line_end":405,"column_start":2,"column_end":71}},{"value":"/ returns `vec` unmodified.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687291,"byte_end":687320,"line_start":406,"line_end":406,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687322,"byte_end":687325,"line_start":407,"line_end":407,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687327,"byte_end":687341,"line_start":408,"line_end":408,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687343,"byte_end":687346,"line_start":409,"line_end":409,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687348,"byte_end":687359,"line_start":410,"line_end":410,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687361,"byte_end":687388,"line_start":411,"line_end":411,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687390,"byte_end":687393,"line_start":412,"line_end":412,"column_start":2,"column_end":5}},{"value":"/ let vec = vec![0u8; 4];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687395,"byte_end":687422,"line_start":413,"line_end":413,"column_start":2,"column_end":29}},{"value":"/ let bv = BitVec::<LocalBits, _>::try_from_vec(vec).unwrap();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687424,"byte_end":687488,"line_start":414,"line_end":414,"column_start":2,"column_end":66}},{"value":"/ assert_eq!(bv, bits![0; 32]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687490,"byte_end":687523,"line_start":415,"line_end":415,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687525,"byte_end":687532,"line_start":416,"line_end":416,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687534,"byte_end":687537,"line_start":417,"line_end":417,"column_start":2,"column_end":5}},{"value":"/ An example showing this function failing would require an allocation","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687539,"byte_end":687611,"line_start":418,"line_end":418,"column_start":2,"column_end":74}},{"value":"/ exceeding `!0usize >> 3` bytes in size, which is infeasible to produce.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687613,"byte_end":687688,"line_start":419,"line_end":419,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687690,"byte_end":687693,"line_start":420,"line_end":420,"column_start":2,"column_end":5}},{"value":"/ [`Vec`]: alloc::vec::Vec","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687695,"byte_end":687723,"line_start":421,"line_end":421,"column_start":2,"column_end":30}},{"value":"/ [`Vec<T>`]: alloc::vec::Vec","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687725,"byte_end":687756,"line_start":422,"line_end":422,"column_start":2,"column_end":33}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":687758,"byte_end":687767,"line_start":423,"line_end":423,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4111},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":689172,"byte_end":689192,"line_start":466,"line_end":466,"column_start":9,"column_end":29},"name":"extend_from_bitslice","qualname":"<BitVec<O, T>>::extend_from_bitslice","value":"pub fn extend_from_bitslice<O2, T2>(&mut Self, &BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies all bits in a [`BitSlice`] into the `BitVec`.","sig":null,"attributes":[{"value":"/ Copies all bits in a [`BitSlice`] into the `BitVec`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688089,"byte_end":688145,"line_start":434,"line_end":434,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688147,"byte_end":688150,"line_start":435,"line_end":435,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688152,"byte_end":688166,"line_start":436,"line_end":436,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688168,"byte_end":688171,"line_start":437,"line_end":437,"column_start":2,"column_end":5}},{"value":"/ [`Vec::extend_from_slice`](alloc::vec::Vec::extend_from_slice)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688173,"byte_end":688239,"line_start":438,"line_end":438,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688241,"byte_end":688244,"line_start":439,"line_end":439,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688246,"byte_end":688267,"line_start":440,"line_end":440,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688269,"byte_end":688272,"line_start":441,"line_end":441,"column_start":2,"column_end":5}},{"value":"/ This can extend from a [`BitSlice`] of any type arguments. Where the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688274,"byte_end":688346,"line_start":442,"line_end":442,"column_start":2,"column_end":74}},{"value":"/ source `&BitSlice` matches `self`’s type parameters, the implementation","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688348,"byte_end":688425,"line_start":443,"line_end":443,"column_start":2,"column_end":77}},{"value":"/ is able to attempt to accelerate the copy; however, if the type","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688427,"byte_end":688494,"line_start":444,"line_end":444,"column_start":2,"column_end":69}},{"value":"/ parameters do not match, then the implementation falls back to a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688496,"byte_end":688564,"line_start":445,"line_end":445,"column_start":2,"column_end":70}},{"value":"/ bit-by-bit iteration and is equivalent to the `Extend` implementation.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688566,"byte_end":688640,"line_start":446,"line_end":446,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688642,"byte_end":688645,"line_start":447,"line_end":447,"column_start":2,"column_end":5}},{"value":"/ You should only use this method when the type parameters match and there","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688647,"byte_end":688723,"line_start":448,"line_end":448,"column_start":2,"column_end":78}},{"value":"/ is a possibility of copy acceleration. Otherwise, `.extend()` is the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688725,"byte_end":688797,"line_start":449,"line_end":449,"column_start":2,"column_end":74}},{"value":"/ correct API.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688799,"byte_end":688815,"line_start":450,"line_end":450,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688817,"byte_end":688820,"line_start":451,"line_end":451,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688822,"byte_end":688836,"line_start":452,"line_end":452,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688838,"byte_end":688841,"line_start":453,"line_end":453,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688843,"byte_end":688854,"line_start":454,"line_end":454,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688856,"byte_end":688883,"line_start":455,"line_end":455,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688885,"byte_end":688888,"line_start":456,"line_end":456,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688890,"byte_end":688921,"line_start":457,"line_end":457,"column_start":2,"column_end":33}},{"value":"/ bv.extend_from_bitslice(bits![1, 1, 0, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688923,"byte_end":688970,"line_start":458,"line_end":458,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688972,"byte_end":688975,"line_start":459,"line_end":459,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bv, bits![0, 1, 1, 1, 0, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":688977,"byte_end":689021,"line_start":460,"line_end":460,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":689023,"byte_end":689030,"line_start":461,"line_end":461,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":689032,"byte_end":689035,"line_start":462,"line_end":462,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":689037,"byte_end":689077,"line_start":463,"line_end":463,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":689154,"byte_end":689163,"line_start":465,"line_end":465,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4114},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":689714,"byte_end":689735,"line_start":486,"line_end":486,"column_start":9,"column_end":30},"name":"extend_from_raw_slice","qualname":"<BitVec<O, T>>::extend_from_raw_slice","value":"pub fn extend_from_raw_slice(&mut Self, &[T])","parent":null,"children":[],"decl_id":null,"docs":" Appends a slice of elements `T` to the `BitVec`.","sig":null,"attributes":[{"value":"/ Appends a slice of elements `T` to the `BitVec`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":689441,"byte_end":689493,"line_start":477,"line_end":477,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":689495,"byte_end":689498,"line_start":478,"line_end":478,"column_start":2,"column_end":5}},{"value":"/ The `slice` is interpreted as a `BitSlice<O, T>`, then appended directly","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":689500,"byte_end":689576,"line_start":479,"line_end":479,"column_start":2,"column_end":78}},{"value":"/ to the bit-vector.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":689578,"byte_end":689600,"line_start":480,"line_end":480,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":689602,"byte_end":689605,"line_start":481,"line_end":481,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":689607,"byte_end":689621,"line_start":482,"line_end":482,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":689623,"byte_end":689626,"line_start":483,"line_end":483,"column_start":2,"column_end":5}},{"value":"/ [`Vec::extend_from_slice`](alloc::vec::Vec::extend_from_slice)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":689628,"byte_end":689694,"line_start":484,"line_end":484,"column_start":2,"column_end":68}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":689696,"byte_end":689705,"line_start":485,"line_end":485,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4115},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690163,"byte_end":690171,"line_start":505,"line_end":505,"column_start":9,"column_end":17},"name":"elements","qualname":"<BitVec<O, T>>::elements","value":"pub fn elements(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the number of elements `T` that contain live bits of the\n bit-vector.","sig":null,"attributes":[{"value":"/ Gets the number of elements `T` that contain live bits of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":689898,"byte_end":689963,"line_start":493,"line_end":493,"column_start":2,"column_end":67}},{"value":"/ bit-vector.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":689965,"byte_end":689980,"line_start":494,"line_end":494,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":689982,"byte_end":689985,"line_start":495,"line_end":495,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":689987,"byte_end":690001,"line_start":496,"line_end":496,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690003,"byte_end":690006,"line_start":497,"line_end":497,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690008,"byte_end":690019,"line_start":498,"line_end":498,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690021,"byte_end":690048,"line_start":499,"line_end":499,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690050,"byte_end":690053,"line_start":500,"line_end":500,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![LocalBits, u16; 1; 50];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690055,"byte_end":690099,"line_start":501,"line_end":501,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bv.elements(), 4);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690101,"byte_end":690134,"line_start":502,"line_end":502,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690136,"byte_end":690143,"line_start":503,"line_end":503,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690145,"byte_end":690154,"line_start":504,"line_end":504,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4116},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691218,"byte_end":691237,"line_start":547,"line_end":547,"column_start":9,"column_end":28},"name":"into_boxed_bitslice","qualname":"<BitVec<O, T>>::into_boxed_bitslice","value":"pub fn into_boxed_bitslice(Self) -> BitBox<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Converts the bit-vector into [`BitBox<O, T>`].","sig":null,"attributes":[{"value":"/ Converts the bit-vector into [`BitBox<O, T>`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690226,"byte_end":690276,"line_start":509,"line_end":509,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690278,"byte_end":690281,"line_start":510,"line_end":510,"column_start":2,"column_end":5}},{"value":"/ Note that this will drop any excess capacity.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690283,"byte_end":690332,"line_start":511,"line_end":511,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690334,"byte_end":690337,"line_start":512,"line_end":512,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690339,"byte_end":690353,"line_start":513,"line_end":513,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690355,"byte_end":690358,"line_start":514,"line_end":514,"column_start":2,"column_end":5}},{"value":"/ [`Vec::into_boxed_slice`](alloc::vec::Vec::into_boxed_slice)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690360,"byte_end":690424,"line_start":515,"line_end":515,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690426,"byte_end":690429,"line_start":516,"line_end":516,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690431,"byte_end":690452,"line_start":517,"line_end":517,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690454,"byte_end":690457,"line_start":518,"line_end":518,"column_start":2,"column_end":5}},{"value":"/ This returns a `bitvec` boxed bit-slice, not a standard boxed slice. To","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690459,"byte_end":690534,"line_start":519,"line_end":519,"column_start":2,"column_end":77}},{"value":"/ convert the underlying buffer into a boxed element slice, use","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690536,"byte_end":690601,"line_start":520,"line_end":520,"column_start":2,"column_end":67}},{"value":"/ `.into_boxed_bitslice().into_boxed_slice()`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690603,"byte_end":690651,"line_start":521,"line_end":521,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690653,"byte_end":690656,"line_start":522,"line_end":522,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690658,"byte_end":690672,"line_start":523,"line_end":523,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690674,"byte_end":690677,"line_start":524,"line_end":524,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690679,"byte_end":690690,"line_start":525,"line_end":525,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690692,"byte_end":690719,"line_start":526,"line_end":526,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690721,"byte_end":690724,"line_start":527,"line_end":527,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690726,"byte_end":690762,"line_start":528,"line_end":528,"column_start":2,"column_end":38}},{"value":"/ let bitslice = bv.into_boxed_slice();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690764,"byte_end":690805,"line_start":529,"line_end":529,"column_start":2,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690807,"byte_end":690814,"line_start":530,"line_end":530,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690816,"byte_end":690819,"line_start":531,"line_end":531,"column_start":2,"column_end":5}},{"value":"/ Any excess capacity is removed:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690821,"byte_end":690856,"line_start":532,"line_end":532,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690858,"byte_end":690861,"line_start":533,"line_end":533,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690863,"byte_end":690874,"line_start":534,"line_end":534,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690876,"byte_end":690903,"line_start":535,"line_end":535,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690905,"byte_end":690908,"line_start":536,"line_end":536,"column_start":2,"column_end":5}},{"value":"/ let mut bv: BitVec = BitVec::with_capacity(100);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690910,"byte_end":690962,"line_start":537,"line_end":537,"column_start":2,"column_end":54}},{"value":"/ bv.extend([0, 1, 0, 0, 1].iter().copied());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":690964,"byte_end":691011,"line_start":538,"line_end":538,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691013,"byte_end":691016,"line_start":539,"line_end":539,"column_start":2,"column_end":5}},{"value":"/ assert!(bv.capacity() >= 100);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691018,"byte_end":691052,"line_start":540,"line_end":540,"column_start":2,"column_end":36}},{"value":"/ let bs = bv.into_boxed_bitslice();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691054,"byte_end":691092,"line_start":541,"line_end":541,"column_start":2,"column_end":40}},{"value":"/ assert!(bs.into_bitvec().capacity() >= 5);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691094,"byte_end":691140,"line_start":542,"line_end":542,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691142,"byte_end":691149,"line_start":543,"line_end":543,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691151,"byte_end":691154,"line_start":544,"line_end":544,"column_start":2,"column_end":5}},{"value":"/ [`BitBox<O, T>`]: crate::boxed::BitBox","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691156,"byte_end":691198,"line_start":545,"line_end":545,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691200,"byte_end":691209,"line_start":546,"line_end":546,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4117},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691818,"byte_end":691826,"line_start":571,"line_end":571,"column_start":9,"column_end":17},"name":"into_vec","qualname":"<BitVec<O, T>>::into_vec","value":"pub fn into_vec(Self) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the bit-precision view, returning the underlying [`Vec`].","sig":null,"attributes":[{"value":"/ Removes the bit-precision view, returning the underlying [`Vec`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691505,"byte_end":691574,"line_start":557,"line_end":557,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691576,"byte_end":691579,"line_start":558,"line_end":558,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691581,"byte_end":691595,"line_start":559,"line_end":559,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691597,"byte_end":691600,"line_start":560,"line_end":560,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691602,"byte_end":691613,"line_start":561,"line_end":561,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691615,"byte_end":691642,"line_start":562,"line_end":562,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691644,"byte_end":691647,"line_start":563,"line_end":563,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![Lsb0, u8; 0, 1, 0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691649,"byte_end":691695,"line_start":564,"line_end":564,"column_start":2,"column_end":48}},{"value":"/ let vec = bv.into_vec();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691697,"byte_end":691725,"line_start":565,"line_end":565,"column_start":2,"column_end":30}},{"value":"/ assert_eq!(vec, &[18]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691727,"byte_end":691754,"line_start":566,"line_end":566,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691756,"byte_end":691763,"line_start":567,"line_end":567,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691765,"byte_end":691768,"line_start":568,"line_end":568,"column_start":2,"column_end":5}},{"value":"/ [`Vec`]: alloc::vec::Vec","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691770,"byte_end":691798,"line_start":569,"line_end":569,"column_start":2,"column_end":30}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":691800,"byte_end":691809,"line_start":570,"line_end":570,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4118},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692887,"byte_end":692899,"line_start":609,"line_end":609,"column_start":9,"column_end":21},"name":"set_elements","qualname":"<BitVec<O, T>>::set_elements","value":"pub fn set_elements(&mut Self, T::Mem)","parent":null,"children":[],"decl_id":null,"docs":" Writes a value into every element that the bit-vector considers live.","sig":null,"attributes":[{"value":"/ Writes a value into every element that the bit-vector considers live.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692044,"byte_end":692117,"line_start":583,"line_end":583,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692119,"byte_end":692122,"line_start":584,"line_end":584,"column_start":2,"column_end":5}},{"value":"/ This unconditionally writes `element` into each live location in the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692124,"byte_end":692196,"line_start":585,"line_end":585,"column_start":2,"column_end":74}},{"value":"/ backing buffer, without altering the `BitVec`’s length or capacity.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692198,"byte_end":692271,"line_start":586,"line_end":586,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692273,"byte_end":692276,"line_start":587,"line_end":587,"column_start":2,"column_end":5}},{"value":"/ It is unspecified what effects this has on the allocated but dead","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692278,"byte_end":692347,"line_start":588,"line_end":588,"column_start":2,"column_end":71}},{"value":"/ elements in the buffer. You may not rely on them being zeroed *or* being","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692349,"byte_end":692425,"line_start":589,"line_end":589,"column_start":2,"column_end":78}},{"value":"/ set to the `value` integer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692427,"byte_end":692458,"line_start":590,"line_end":590,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692460,"byte_end":692463,"line_start":591,"line_end":591,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692465,"byte_end":692481,"line_start":592,"line_end":592,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692483,"byte_end":692486,"line_start":593,"line_end":593,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692488,"byte_end":692505,"line_start":594,"line_end":594,"column_start":2,"column_end":19}},{"value":"/ - `element`: The value which will be written to each live location in","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692507,"byte_end":692580,"line_start":595,"line_end":595,"column_start":2,"column_end":75}},{"value":"/   the bit-vector’s buffer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692582,"byte_end":692614,"line_start":596,"line_end":596,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692616,"byte_end":692619,"line_start":597,"line_end":597,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692621,"byte_end":692635,"line_start":598,"line_end":598,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692637,"byte_end":692640,"line_start":599,"line_end":599,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692642,"byte_end":692653,"line_start":600,"line_end":600,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692655,"byte_end":692682,"line_start":601,"line_end":601,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692684,"byte_end":692687,"line_start":602,"line_end":602,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![LocalBits, u8; 0; 10];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692689,"byte_end":692736,"line_start":603,"line_end":603,"column_start":2,"column_end":49}},{"value":"/ assert_eq!(bv.as_raw_slice(), [0, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692738,"byte_end":692780,"line_start":604,"line_end":604,"column_start":2,"column_end":44}},{"value":"/ bv.set_elements(0xA5);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692782,"byte_end":692808,"line_start":605,"line_end":605,"column_start":2,"column_end":28}},{"value":"/ assert_eq!(bv.as_raw_slice(), [0xA5, 0xA5]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692810,"byte_end":692858,"line_start":606,"line_end":606,"column_start":2,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692860,"byte_end":692867,"line_start":607,"line_end":607,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":692869,"byte_end":692878,"line_start":608,"line_end":608,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4120},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693922,"byte_end":693939,"line_start":643,"line_end":643,"column_start":9,"column_end":26},"name":"set_uninitialized","qualname":"<BitVec<O, T>>::set_uninitialized","value":"pub fn set_uninitialized(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets the uninitialized bits of the bit-vector to a fixed value.","sig":null,"attributes":[{"value":"/ Sets the uninitialized bits of the bit-vector to a fixed value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693022,"byte_end":693089,"line_start":615,"line_end":615,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693091,"byte_end":693094,"line_start":616,"line_end":616,"column_start":2,"column_end":5}},{"value":"/ This method modifies all bits in the allocated buffer that are outside","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693096,"byte_end":693170,"line_start":617,"line_end":617,"column_start":2,"column_end":76}},{"value":"/ the [`as_bitslice`] view so that they have a consistent value. This can","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693172,"byte_end":693247,"line_start":618,"line_end":618,"column_start":2,"column_end":77}},{"value":"/ be used to zero the uninitialized memory so that when viewed as a raw","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693249,"byte_end":693322,"line_start":619,"line_end":619,"column_start":2,"column_end":75}},{"value":"/ memory slice, bits outside the live region have a predictable value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693324,"byte_end":693396,"line_start":620,"line_end":620,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693398,"byte_end":693401,"line_start":621,"line_end":621,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693403,"byte_end":693417,"line_start":622,"line_end":622,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693419,"byte_end":693422,"line_start":623,"line_end":623,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693424,"byte_end":693435,"line_start":624,"line_end":624,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693437,"byte_end":693464,"line_start":625,"line_end":625,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693466,"byte_end":693469,"line_start":626,"line_end":626,"column_start":2,"column_end":5}},{"value":"/ let mut bv = 220u8.view_bits::<Lsb0>().to_bitvec();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693471,"byte_end":693526,"line_start":627,"line_end":627,"column_start":2,"column_end":57}},{"value":"/ assert_eq!(bv.as_raw_slice(), &[220u8]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693528,"byte_end":693572,"line_start":628,"line_end":628,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693574,"byte_end":693577,"line_start":629,"line_end":629,"column_start":2,"column_end":5}},{"value":"/ bv.truncate(4);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693579,"byte_end":693598,"line_start":630,"line_end":630,"column_start":2,"column_end":21}},{"value":"/ assert_eq!(bv.count_ones(), 2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693600,"byte_end":693635,"line_start":631,"line_end":631,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(bv.as_raw_slice(), &[220u8]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693637,"byte_end":693681,"line_start":632,"line_end":632,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693683,"byte_end":693686,"line_start":633,"line_end":633,"column_start":2,"column_end":5}},{"value":"/ bv.set_uninitialized(false);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693688,"byte_end":693720,"line_start":634,"line_end":634,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bv.as_raw_slice(), &[12u8]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693722,"byte_end":693765,"line_start":635,"line_end":635,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693767,"byte_end":693770,"line_start":636,"line_end":636,"column_start":2,"column_end":5}},{"value":"/ bv.set_uninitialized(true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693772,"byte_end":693803,"line_start":637,"line_end":637,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(bv.as_raw_slice(), &[!3u8]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693805,"byte_end":693848,"line_start":638,"line_end":638,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693850,"byte_end":693857,"line_start":639,"line_end":639,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693859,"byte_end":693862,"line_start":640,"line_end":640,"column_start":2,"column_end":5}},{"value":"/ [`as_bitslice`]: Self::as_bitslice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693864,"byte_end":693902,"line_start":641,"line_end":641,"column_start":2,"column_end":40}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":693904,"byte_end":693913,"line_start":642,"line_end":642,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4121},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":694935,"byte_end":694946,"line_start":679,"line_end":679,"column_start":9,"column_end":20},"name":"force_align","qualname":"<BitVec<O, T>>::force_align","value":"pub fn force_align(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Ensures that the live region of the bit-vector’s contents begins at the\n leading edge of the buffer.","sig":null,"attributes":[{"value":"/ Ensures that the live region of the bit-vector’s contents begins at the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":694331,"byte_end":694408,"line_start":657,"line_end":657,"column_start":2,"column_end":77}},{"value":"/ leading edge of the buffer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":694410,"byte_end":694441,"line_start":658,"line_end":658,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":694443,"byte_end":694446,"line_start":659,"line_end":659,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":694448,"byte_end":694462,"line_start":660,"line_end":660,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":694464,"byte_end":694467,"line_start":661,"line_end":661,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":694469,"byte_end":694480,"line_start":662,"line_end":662,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":694482,"byte_end":694509,"line_start":663,"line_end":663,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":694511,"byte_end":694514,"line_start":664,"line_end":664,"column_start":2,"column_end":5}},{"value":"/ let data = 0x3Cu8;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":694516,"byte_end":694538,"line_start":665,"line_end":665,"column_start":2,"column_end":24}},{"value":"/ let bits = data.view_bits::<Msb0>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":694540,"byte_end":694580,"line_start":666,"line_end":666,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":694582,"byte_end":694585,"line_start":667,"line_end":667,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bits[2 .. 6].to_bitvec();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":694587,"byte_end":694629,"line_start":668,"line_end":668,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(bv, bits[2 .. 6]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":694631,"byte_end":694664,"line_start":669,"line_end":669,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(bv.as_raw_slice()[0], data);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":694666,"byte_end":694709,"line_start":670,"line_end":670,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":694711,"byte_end":694714,"line_start":671,"line_end":671,"column_start":2,"column_end":5}},{"value":"/ bv.force_align();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":694716,"byte_end":694737,"line_start":672,"line_end":672,"column_start":2,"column_end":23}},{"value":"/ assert_eq!(bv, bits[2 .. 6]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":694739,"byte_end":694772,"line_start":673,"line_end":673,"column_start":2,"column_end":35}},{"value":"/ // It is not specified what happens","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":694774,"byte_end":694813,"line_start":674,"line_end":674,"column_start":2,"column_end":41}},{"value":"/ // to bits that are no longer used.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":694815,"byte_end":694854,"line_start":675,"line_end":675,"column_start":2,"column_end":41}},{"value":"/ assert_eq!(bv.as_raw_slice()[0] & 0xF0, 0xF0);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":694856,"byte_end":694906,"line_start":676,"line_end":676,"column_start":2,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":694908,"byte_end":694915,"line_start":677,"line_end":677,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":694917,"byte_end":694926,"line_start":678,"line_end":678,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4124},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696163,"byte_end":696174,"line_start":726,"line_end":726,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<BitVec<O, T>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Extracts a bit-slice containing the entire bit-vector.","sig":null,"attributes":[{"value":"/ Extracts a bit-slice containing the entire bit-vector.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":695570,"byte_end":695628,"line_start":702,"line_end":702,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":695630,"byte_end":695633,"line_start":703,"line_end":703,"column_start":2,"column_end":5}},{"value":"/ Equivalent to `&bv[..]`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":695635,"byte_end":695663,"line_start":704,"line_end":704,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":695665,"byte_end":695668,"line_start":705,"line_end":705,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":695670,"byte_end":695684,"line_start":706,"line_end":706,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":695686,"byte_end":695689,"line_start":707,"line_end":707,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_slice`](alloc::vec::Vec::as_slice)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":695691,"byte_end":695739,"line_start":708,"line_end":708,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":695741,"byte_end":695744,"line_start":709,"line_end":709,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":695746,"byte_end":695767,"line_start":710,"line_end":710,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":695769,"byte_end":695772,"line_start":711,"line_end":711,"column_start":2,"column_end":5}},{"value":"/ This returns a `bitvec` bit-slice, not a standard slice. To view the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":695774,"byte_end":695846,"line_start":712,"line_end":712,"column_start":2,"column_end":74}},{"value":"/ underlying element buffer, use [`as_raw_slice`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":695848,"byte_end":695900,"line_start":713,"line_end":713,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":695902,"byte_end":695905,"line_start":714,"line_end":714,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":695907,"byte_end":695921,"line_start":715,"line_end":715,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":695923,"byte_end":695926,"line_start":716,"line_end":716,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":695928,"byte_end":695939,"line_start":717,"line_end":717,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":695941,"byte_end":695968,"line_start":718,"line_end":718,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":695970,"byte_end":695973,"line_start":719,"line_end":719,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":695975,"byte_end":696011,"line_start":720,"line_end":720,"column_start":2,"column_end":38}},{"value":"/ let bits = bv.as_bitslice();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696013,"byte_end":696045,"line_start":721,"line_end":721,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696047,"byte_end":696054,"line_start":722,"line_end":722,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696056,"byte_end":696059,"line_start":723,"line_end":723,"column_start":2,"column_end":5}},{"value":"/ [`as_raw_slice`]: Self::as_raw_slice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696061,"byte_end":696101,"line_start":724,"line_end":724,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696138,"byte_end":696152,"line_start":725,"line_end":725,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":4125},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696866,"byte_end":696881,"line_start":754,"line_end":754,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<BitVec<O, T>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Extracts a mutable bit-slice of the entire bit-vector.","sig":null,"attributes":[{"value":"/ Extracts a mutable bit-slice of the entire bit-vector.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696241,"byte_end":696299,"line_start":730,"line_end":730,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696301,"byte_end":696304,"line_start":731,"line_end":731,"column_start":2,"column_end":5}},{"value":"/ Equivalent to `&mut bv[..]`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696306,"byte_end":696338,"line_start":732,"line_end":732,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696340,"byte_end":696343,"line_start":733,"line_end":733,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696345,"byte_end":696359,"line_start":734,"line_end":734,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696361,"byte_end":696364,"line_start":735,"line_end":735,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_mut_slice`](alloc::vec::Vec::as_mut_slice)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696366,"byte_end":696422,"line_start":736,"line_end":736,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696424,"byte_end":696427,"line_start":737,"line_end":737,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696429,"byte_end":696450,"line_start":738,"line_end":738,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696452,"byte_end":696455,"line_start":739,"line_end":739,"column_start":2,"column_end":5}},{"value":"/ This returns a `bitvec` bit-slice, not a standard slice. To view the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696457,"byte_end":696529,"line_start":740,"line_end":740,"column_start":2,"column_end":74}},{"value":"/ underlying element buffer, use [`as_mut_raw_slice`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696531,"byte_end":696587,"line_start":741,"line_end":741,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696589,"byte_end":696592,"line_start":742,"line_end":742,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696594,"byte_end":696608,"line_start":743,"line_end":743,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696610,"byte_end":696613,"line_start":744,"line_end":744,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696615,"byte_end":696626,"line_start":745,"line_end":745,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696628,"byte_end":696655,"line_start":746,"line_end":746,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696657,"byte_end":696660,"line_start":747,"line_end":747,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696662,"byte_end":696702,"line_start":748,"line_end":748,"column_start":2,"column_end":42}},{"value":"/ let bits = bv.as_mut_bitslice();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696704,"byte_end":696740,"line_start":749,"line_end":749,"column_start":2,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696742,"byte_end":696749,"line_start":750,"line_end":750,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696751,"byte_end":696754,"line_start":751,"line_end":751,"column_start":2,"column_end":5}},{"value":"/ [`as_mut_raw_slice`]: Self::as_mut_raw_slice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696756,"byte_end":696804,"line_start":752,"line_end":752,"column_start":2,"column_end":50}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696841,"byte_end":696855,"line_start":753,"line_end":753,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":4126},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698260,"byte_end":698269,"line_start":799,"line_end":799,"column_start":9,"column_end":18},"name":"as_bitptr","qualname":"<BitVec<O, T>>::as_bitptr","value":"pub fn as_bitptr(&Self) -> BitPtr<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the bit-vector’s buffer.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the bit-vector’s buffer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":696956,"byte_end":697011,"line_start":758,"line_end":758,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697013,"byte_end":697016,"line_start":759,"line_end":759,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the bit-vector outlives the bit-pointer this","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697018,"byte_end":697094,"line_start":760,"line_end":760,"column_start":2,"column_end":78}},{"value":"/ function returns, or else it will end up pointing to garbage. Modifying","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697096,"byte_end":697171,"line_start":761,"line_end":761,"column_start":2,"column_end":77}},{"value":"/ the bit-vector may cause its buffer to be reällocated, which would also","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697173,"byte_end":697249,"line_start":762,"line_end":762,"column_start":2,"column_end":77}},{"value":"/ make any bit-pointers to it invalid.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697251,"byte_end":697291,"line_start":763,"line_end":763,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697293,"byte_end":697296,"line_start":764,"line_end":764,"column_start":2,"column_end":5}},{"value":"/ The caller must also ensure that the memory the bit-pointer","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697298,"byte_end":697361,"line_start":765,"line_end":765,"column_start":2,"column_end":65}},{"value":"/ (non-transitively) points to is never written to (except inside an","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697363,"byte_end":697433,"line_start":766,"line_end":766,"column_start":2,"column_end":72}},{"value":"/ [`UnsafeCell`]) using this bit-pointer or any bit-pointer derived from","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697435,"byte_end":697509,"line_start":767,"line_end":767,"column_start":2,"column_end":76}},{"value":"/ it. If you need to mutate the contents of the buffer, use","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697511,"byte_end":697572,"line_start":768,"line_end":768,"column_start":2,"column_end":63}},{"value":"/ [`as_mut_bitptr`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697574,"byte_end":697596,"line_start":769,"line_end":769,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697598,"byte_end":697601,"line_start":770,"line_end":770,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697603,"byte_end":697617,"line_start":771,"line_end":771,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697619,"byte_end":697622,"line_start":772,"line_end":772,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_ptr`](alloc::vec::Vec::as_ptr)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697624,"byte_end":697668,"line_start":773,"line_end":773,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697670,"byte_end":697673,"line_start":774,"line_end":774,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697675,"byte_end":697696,"line_start":775,"line_end":775,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697698,"byte_end":697701,"line_start":776,"line_end":776,"column_start":2,"column_end":5}},{"value":"/ This returns a `bitvec` bit-pointer, not a standard pointer. To take the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697703,"byte_end":697779,"line_start":777,"line_end":777,"column_start":2,"column_end":78}},{"value":"/ address of the underlying element buffer, use [`as_raw_ptr`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697781,"byte_end":697846,"line_start":778,"line_end":778,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697848,"byte_end":697851,"line_start":779,"line_end":779,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697853,"byte_end":697867,"line_start":780,"line_end":780,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697869,"byte_end":697872,"line_start":781,"line_end":781,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697874,"byte_end":697885,"line_start":782,"line_end":782,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697887,"byte_end":697914,"line_start":783,"line_end":783,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697916,"byte_end":697919,"line_start":784,"line_end":784,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697921,"byte_end":697957,"line_start":785,"line_end":785,"column_start":2,"column_end":38}},{"value":"/ let bp = bv.as_bitptr();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697959,"byte_end":697987,"line_start":786,"line_end":786,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697989,"byte_end":697992,"line_start":787,"line_end":787,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":697994,"byte_end":698006,"line_start":788,"line_end":788,"column_start":2,"column_end":14}},{"value":"/   for i in 0 .. bv.len() {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698008,"byte_end":698038,"line_start":789,"line_end":789,"column_start":2,"column_end":32}},{"value":"/     assert_eq!(bp.add(i).read(), bv[i]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698040,"byte_end":698084,"line_start":790,"line_end":790,"column_start":2,"column_end":46}},{"value":"/   }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698086,"byte_end":698093,"line_start":791,"line_end":791,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698095,"byte_end":698100,"line_start":792,"line_end":792,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698102,"byte_end":698109,"line_start":793,"line_end":793,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698111,"byte_end":698114,"line_start":794,"line_end":794,"column_start":2,"column_end":5}},{"value":"/ [`UnsafeCell`]: core::cell::UnsafeCell","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698116,"byte_end":698158,"line_start":795,"line_end":795,"column_start":2,"column_end":44}},{"value":"/ [`as_raw_ptr`]: Self::as_raw_ptr","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698160,"byte_end":698196,"line_start":796,"line_end":796,"column_start":2,"column_end":38}},{"value":"/ [`as_mut_bitptr`]: Self::as_mut_bitptr","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698198,"byte_end":698240,"line_start":797,"line_end":797,"column_start":2,"column_end":44}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698242,"byte_end":698251,"line_start":798,"line_end":798,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4127},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699383,"byte_end":699396,"line_start":837,"line_end":837,"column_start":9,"column_end":22},"name":"as_mut_bitptr","qualname":"<BitVec<O, T>>::as_mut_bitptr","value":"pub fn as_mut_bitptr(&mut Self) -> BitPtr<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an unsafe mutable bit-pointer to the bit-vector’s region.","sig":null,"attributes":[{"value":"/ Returns an unsafe mutable bit-pointer to the bit-vector’s region.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698342,"byte_end":698413,"line_start":803,"line_end":803,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698415,"byte_end":698418,"line_start":804,"line_end":804,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the bit-vector outlives the bit-pointer this","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698420,"byte_end":698496,"line_start":805,"line_end":805,"column_start":2,"column_end":78}},{"value":"/ function returns, or else it will end up pointing to garbage. Modifying","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698498,"byte_end":698573,"line_start":806,"line_end":806,"column_start":2,"column_end":77}},{"value":"/ the bit-vector may cause its buffer to be reällocated, which would also","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698575,"byte_end":698651,"line_start":807,"line_end":807,"column_start":2,"column_end":77}},{"value":"/ make any bit-pointers to it invalid.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698653,"byte_end":698693,"line_start":808,"line_end":808,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698695,"byte_end":698698,"line_start":809,"line_end":809,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698700,"byte_end":698714,"line_start":810,"line_end":810,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698716,"byte_end":698719,"line_start":811,"line_end":811,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_mut_ptr`](alloc::vec::Vec::as_mut_ptr)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698721,"byte_end":698773,"line_start":812,"line_end":812,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698775,"byte_end":698778,"line_start":813,"line_end":813,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698780,"byte_end":698801,"line_start":814,"line_end":814,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698803,"byte_end":698806,"line_start":815,"line_end":815,"column_start":2,"column_end":5}},{"value":"/ This returns a `bitvec` bit-pointer, not a standard pointer. To take the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698808,"byte_end":698884,"line_start":816,"line_end":816,"column_start":2,"column_end":78}},{"value":"/ address of the underlying element buffer, use [`as_mut_raw_ptr`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698886,"byte_end":698955,"line_start":817,"line_end":817,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698957,"byte_end":698960,"line_start":818,"line_end":818,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698962,"byte_end":698976,"line_start":819,"line_end":819,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698978,"byte_end":698981,"line_start":820,"line_end":820,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698983,"byte_end":698994,"line_start":821,"line_end":821,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":698996,"byte_end":699023,"line_start":822,"line_end":822,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699025,"byte_end":699028,"line_start":823,"line_end":823,"column_start":2,"column_end":5}},{"value":"/ let mut bv = BitVec::<Msb0, u8>::with_capacity(4);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699030,"byte_end":699084,"line_start":824,"line_end":824,"column_start":2,"column_end":56}},{"value":"/ let bp = bv.as_mut_bitptr();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699086,"byte_end":699118,"line_start":825,"line_end":825,"column_start":2,"column_end":34}},{"value":"/ unsafe {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699120,"byte_end":699132,"line_start":826,"line_end":826,"column_start":2,"column_end":14}},{"value":"/   for i in 0 .. 4 {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699134,"byte_end":699157,"line_start":827,"line_end":827,"column_start":2,"column_end":25}},{"value":"/     bp.add(i).write(true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699159,"byte_end":699189,"line_start":828,"line_end":828,"column_start":2,"column_end":32}},{"value":"/   }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699191,"byte_end":699198,"line_start":829,"line_end":829,"column_start":2,"column_end":9}},{"value":"/   bv.set_len(4);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699200,"byte_end":699220,"line_start":830,"line_end":830,"column_start":2,"column_end":22}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699222,"byte_end":699227,"line_start":831,"line_end":831,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bv, bits![1; 4]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699229,"byte_end":699261,"line_start":832,"line_end":832,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699263,"byte_end":699270,"line_start":833,"line_end":833,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699272,"byte_end":699275,"line_start":834,"line_end":834,"column_start":2,"column_end":5}},{"value":"/ [`as_mut_raw_ptr`]: Self::as_mut_raw_ptr","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699277,"byte_end":699321,"line_start":835,"line_end":835,"column_start":2,"column_end":46}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699358,"byte_end":699372,"line_start":836,"line_end":836,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":4128},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700048,"byte_end":700060,"line_start":863,"line_end":863,"column_start":9,"column_end":21},"name":"as_raw_slice","qualname":"<BitVec<O, T>>::as_raw_slice","value":"pub fn as_raw_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying buffer as a shared element slice.","sig":null,"attributes":[{"value":"/ Views the underlying buffer as a shared element slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699463,"byte_end":699521,"line_start":841,"line_end":841,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699523,"byte_end":699526,"line_start":842,"line_end":842,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699528,"byte_end":699542,"line_start":843,"line_end":843,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699544,"byte_end":699547,"line_start":844,"line_end":844,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_slice`](alloc::vec::Vec::as_slice)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699549,"byte_end":699597,"line_start":845,"line_end":845,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699599,"byte_end":699602,"line_start":846,"line_end":846,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699604,"byte_end":699625,"line_start":847,"line_end":847,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699627,"byte_end":699630,"line_start":848,"line_end":848,"column_start":2,"column_end":5}},{"value":"/ This method is renamed in order to emphasize the semantic distinction","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699632,"byte_end":699705,"line_start":849,"line_end":849,"column_start":2,"column_end":75}},{"value":"/ between borrowing the bit-vector contents, and borrowing the memory that","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699707,"byte_end":699783,"line_start":850,"line_end":850,"column_start":2,"column_end":78}},{"value":"/ implements the collection contents.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699785,"byte_end":699824,"line_start":851,"line_end":851,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699826,"byte_end":699829,"line_start":852,"line_end":852,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699831,"byte_end":699845,"line_start":853,"line_end":853,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699847,"byte_end":699850,"line_start":854,"line_end":854,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699852,"byte_end":699863,"line_start":855,"line_end":855,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699865,"byte_end":699892,"line_start":856,"line_end":856,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699894,"byte_end":699897,"line_start":857,"line_end":857,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![Msb0, u8; 0, 1, 0, 0, 1, 1, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699899,"byte_end":699954,"line_start":858,"line_end":858,"column_start":2,"column_end":57}},{"value":"/ let raw = bv.as_raw_slice();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699956,"byte_end":699988,"line_start":859,"line_end":859,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(raw, &[0x4D]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":699990,"byte_end":700019,"line_start":860,"line_end":860,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700021,"byte_end":700028,"line_start":861,"line_end":861,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700030,"byte_end":700039,"line_start":862,"line_end":862,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4129},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700874,"byte_end":700890,"line_start":896,"line_end":896,"column_start":9,"column_end":25},"name":"as_mut_raw_slice","qualname":"<BitVec<O, T>>::as_mut_raw_slice","value":"pub fn as_mut_raw_slice(&mut Self) -> &mut [T]","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying buffer as an exclusive element slice.","sig":null,"attributes":[{"value":"/ Views the underlying buffer as an exclusive element slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700197,"byte_end":700259,"line_start":872,"line_end":872,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700261,"byte_end":700264,"line_start":873,"line_end":873,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700266,"byte_end":700280,"line_start":874,"line_end":874,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700282,"byte_end":700285,"line_start":875,"line_end":875,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_mut_slice`](alloc::vec::Vec::as_mut_slice)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700287,"byte_end":700343,"line_start":876,"line_end":876,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700345,"byte_end":700348,"line_start":877,"line_end":877,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700350,"byte_end":700371,"line_start":878,"line_end":878,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700373,"byte_end":700376,"line_start":879,"line_end":879,"column_start":2,"column_end":5}},{"value":"/ This method is renamed in order to emphasize the semantic distinction","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700378,"byte_end":700451,"line_start":880,"line_end":880,"column_start":2,"column_end":75}},{"value":"/ between borrowing the bit-vector contents, and borrowing the memory that","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700453,"byte_end":700529,"line_start":881,"line_end":881,"column_start":2,"column_end":78}},{"value":"/ implements the collection contents.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700531,"byte_end":700570,"line_start":882,"line_end":882,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700572,"byte_end":700575,"line_start":883,"line_end":883,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700577,"byte_end":700591,"line_start":884,"line_end":884,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700593,"byte_end":700596,"line_start":885,"line_end":885,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700598,"byte_end":700609,"line_start":886,"line_end":886,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700611,"byte_end":700638,"line_start":887,"line_end":887,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700640,"byte_end":700643,"line_start":888,"line_end":888,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![Msb0, u8; 0, 1, 0, 0, 1, 1, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700645,"byte_end":700704,"line_start":889,"line_end":889,"column_start":2,"column_end":61}},{"value":"/ let raw = bv.as_mut_raw_slice();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700706,"byte_end":700742,"line_start":890,"line_end":890,"column_start":2,"column_end":38}},{"value":"/ assert_eq!(raw, &[0x4D]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700744,"byte_end":700773,"line_start":891,"line_end":891,"column_start":2,"column_end":31}},{"value":"/ raw[0] = 0xD4;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700775,"byte_end":700793,"line_start":892,"line_end":892,"column_start":2,"column_end":20}},{"value":"/ assert_eq!(bv, bits![1, 1, 0, 1, 0, 1, 0, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700795,"byte_end":700845,"line_start":893,"line_end":893,"column_start":2,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700847,"byte_end":700854,"line_start":894,"line_end":894,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":700856,"byte_end":700865,"line_start":895,"line_end":895,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4130},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701623,"byte_end":701633,"line_start":927,"line_end":927,"column_start":9,"column_end":19},"name":"as_raw_ptr","qualname":"<BitVec<O, T>>::as_raw_ptr","value":"pub fn as_raw_ptr(&Self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw pointer to the bit-vector’s buffer.","sig":null,"attributes":[{"value":"/ Returns a raw pointer to the bit-vector’s buffer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701037,"byte_end":701092,"line_start":905,"line_end":905,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701094,"byte_end":701097,"line_start":906,"line_end":906,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701099,"byte_end":701113,"line_start":907,"line_end":907,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701115,"byte_end":701118,"line_start":908,"line_end":908,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_ptr`](alloc::vec::Vec::as_ptr)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701120,"byte_end":701164,"line_start":909,"line_end":909,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701166,"byte_end":701169,"line_start":910,"line_end":910,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701171,"byte_end":701192,"line_start":911,"line_end":911,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701194,"byte_end":701197,"line_start":912,"line_end":912,"column_start":2,"column_end":5}},{"value":"/ This method is renamed in order to emphasize the semantic distinction","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701199,"byte_end":701272,"line_start":913,"line_end":913,"column_start":2,"column_end":75}},{"value":"/ between taking a pointer to the start of the bit-vector contents, and","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701274,"byte_end":701347,"line_start":914,"line_end":914,"column_start":2,"column_end":75}},{"value":"/ taking a pointer to the underlying memory that implements the collection","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701349,"byte_end":701425,"line_start":915,"line_end":915,"column_start":2,"column_end":78}},{"value":"/ contents.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701427,"byte_end":701440,"line_start":916,"line_end":916,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701442,"byte_end":701445,"line_start":917,"line_end":917,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701447,"byte_end":701461,"line_start":918,"line_end":918,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701463,"byte_end":701466,"line_start":919,"line_end":919,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701468,"byte_end":701479,"line_start":920,"line_end":920,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701481,"byte_end":701508,"line_start":921,"line_end":921,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701510,"byte_end":701513,"line_start":922,"line_end":922,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![Msb0, u8; 0, 1, 0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701515,"byte_end":701561,"line_start":923,"line_end":923,"column_start":2,"column_end":48}},{"value":"/ let addr = bv.as_raw_ptr();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701563,"byte_end":701594,"line_start":924,"line_end":924,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701596,"byte_end":701603,"line_start":925,"line_end":925,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701605,"byte_end":701614,"line_start":926,"line_end":926,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4131},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":702300,"byte_end":702314,"line_start":953,"line_end":953,"column_start":9,"column_end":23},"name":"as_mut_raw_ptr","qualname":"<BitVec<O, T>>::as_mut_raw_ptr","value":"pub fn as_mut_raw_ptr(&mut Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns an unsafe mutable pointer to the bit-vector’s buffer.","sig":null,"attributes":[{"value":"/ Returns an unsafe mutable pointer to the bit-vector’s buffer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701696,"byte_end":701763,"line_start":931,"line_end":931,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701765,"byte_end":701768,"line_start":932,"line_end":932,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701770,"byte_end":701784,"line_start":933,"line_end":933,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701786,"byte_end":701789,"line_start":934,"line_end":934,"column_start":2,"column_end":5}},{"value":"/ [`Vec::as_mut_ptr`](alloc::vec::Vec::as_mut_ptr)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701791,"byte_end":701843,"line_start":935,"line_end":935,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701845,"byte_end":701848,"line_start":936,"line_end":936,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701850,"byte_end":701871,"line_start":937,"line_end":937,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701873,"byte_end":701876,"line_start":938,"line_end":938,"column_start":2,"column_end":5}},{"value":"/ This method is renamed in order to emphasize the semantic distinction","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701878,"byte_end":701951,"line_start":939,"line_end":939,"column_start":2,"column_end":75}},{"value":"/ between taking a pointer to the start of the bit-vector contents, and","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":701953,"byte_end":702026,"line_start":940,"line_end":940,"column_start":2,"column_end":75}},{"value":"/ taking a pointer to the underlying memory that implements the collection","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":702028,"byte_end":702104,"line_start":941,"line_end":941,"column_start":2,"column_end":78}},{"value":"/ contents.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":702106,"byte_end":702119,"line_start":942,"line_end":942,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":702121,"byte_end":702124,"line_start":943,"line_end":943,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":702126,"byte_end":702140,"line_start":944,"line_end":944,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":702142,"byte_end":702145,"line_start":945,"line_end":945,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":702147,"byte_end":702158,"line_start":946,"line_end":946,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":702160,"byte_end":702187,"line_start":947,"line_end":947,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":702189,"byte_end":702192,"line_start":948,"line_end":948,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":702194,"byte_end":702234,"line_start":949,"line_end":949,"column_start":2,"column_end":42}},{"value":"/ let addr = bv.as_mut_raw_ptr();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":702236,"byte_end":702271,"line_start":950,"line_end":950,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":702273,"byte_end":702280,"line_start":951,"line_end":951,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":702282,"byte_end":702291,"line_start":952,"line_end":952,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4209},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706297,"byte_end":706300,"line_start":62,"line_end":62,"column_start":9,"column_end":12},"name":"new","qualname":"<BitVec<O, T>>::new","value":"pub fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty, `BitVec<O, T>`.","sig":null,"attributes":[{"value":"/ Constructs a new, empty, `BitVec<O, T>`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":705928,"byte_end":705972,"line_start":46,"line_end":46,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":705974,"byte_end":705977,"line_start":47,"line_end":47,"column_start":2,"column_end":5}},{"value":"/ The bit-vector will not allocate until bits are pushed onto it.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":705979,"byte_end":706046,"line_start":48,"line_end":48,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706048,"byte_end":706051,"line_start":49,"line_end":49,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706053,"byte_end":706067,"line_start":50,"line_end":50,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706069,"byte_end":706072,"line_start":51,"line_end":51,"column_start":2,"column_end":5}},{"value":"/ [`Vec::new`](alloc::vec::Vec::new)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706074,"byte_end":706112,"line_start":52,"line_end":52,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706114,"byte_end":706117,"line_start":53,"line_end":53,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706119,"byte_end":706133,"line_start":54,"line_end":54,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706135,"byte_end":706138,"line_start":55,"line_end":55,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706140,"byte_end":706151,"line_start":56,"line_end":56,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706153,"byte_end":706180,"line_start":57,"line_end":57,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706182,"byte_end":706185,"line_start":58,"line_end":58,"column_start":2,"column_end":5}},{"value":"/ let mut bv: BitVec = BitVec::new();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706187,"byte_end":706226,"line_start":59,"line_end":59,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706228,"byte_end":706235,"line_start":60,"line_end":60,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706272,"byte_end":706286,"line_start":61,"line_end":61,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":4210},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707799,"byte_end":707812,"line_start":117,"line_end":117,"column_start":9,"column_end":22},"name":"with_capacity","qualname":"<BitVec<O, T>>::with_capacity","value":"pub fn with_capacity(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty, `BitVec<O, T>` with the specified capacity (in\n bits).","sig":null,"attributes":[{"value":"/ Constructs a new, empty, `BitVec<O, T>` with the specified capacity (in","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706375,"byte_end":706450,"line_start":69,"line_end":69,"column_start":2,"column_end":77}},{"value":"/ bits).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706452,"byte_end":706462,"line_start":70,"line_end":70,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706464,"byte_end":706467,"line_start":71,"line_end":71,"column_start":2,"column_end":5}},{"value":"/ The bit-vector will be able to hold at least `capacity` bits without","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706469,"byte_end":706541,"line_start":72,"line_end":72,"column_start":2,"column_end":74}},{"value":"/ reällocating. If `capacity` is 0, the bit-vector will not allocate.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706543,"byte_end":706615,"line_start":73,"line_end":73,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706617,"byte_end":706620,"line_start":74,"line_end":74,"column_start":2,"column_end":5}},{"value":"/ It is important to note that although the returned bit-vector has the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706622,"byte_end":706695,"line_start":75,"line_end":75,"column_start":2,"column_end":75}},{"value":"/ *capacity* specified, the bit-vector will have a zero *length*. For an","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706697,"byte_end":706771,"line_start":76,"line_end":76,"column_start":2,"column_end":76}},{"value":"/ explanation of the difference between length and capacity, see","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706773,"byte_end":706839,"line_start":77,"line_end":77,"column_start":2,"column_end":68}},{"value":"/ *[Capacity and reällocation]*.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706841,"byte_end":706876,"line_start":78,"line_end":78,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706878,"byte_end":706881,"line_start":79,"line_end":79,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706883,"byte_end":706897,"line_start":80,"line_end":80,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706899,"byte_end":706902,"line_start":81,"line_end":81,"column_start":2,"column_end":5}},{"value":"/ [`Vec::with_capacity`](alloc::vec::Vec::with_capacity)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706904,"byte_end":706962,"line_start":82,"line_end":82,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706964,"byte_end":706967,"line_start":83,"line_end":83,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706969,"byte_end":706981,"line_start":84,"line_end":84,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706983,"byte_end":706986,"line_start":85,"line_end":85,"column_start":2,"column_end":5}},{"value":"/ Panics if the requested capacity exceeds the bit-vector’s limits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":706988,"byte_end":707059,"line_start":86,"line_end":86,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707061,"byte_end":707064,"line_start":87,"line_end":87,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707066,"byte_end":707080,"line_start":88,"line_end":88,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707082,"byte_end":707085,"line_start":89,"line_end":89,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707087,"byte_end":707098,"line_start":90,"line_end":90,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707100,"byte_end":707127,"line_start":91,"line_end":91,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707129,"byte_end":707132,"line_start":92,"line_end":92,"column_start":2,"column_end":5}},{"value":"/ let mut bv: BitVec = BitVec::with_capacity(128);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707134,"byte_end":707186,"line_start":93,"line_end":93,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707188,"byte_end":707191,"line_start":94,"line_end":94,"column_start":2,"column_end":5}},{"value":"/ // The bit-vector contains no bits, even","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707193,"byte_end":707237,"line_start":95,"line_end":95,"column_start":2,"column_end":46}},{"value":"/ // though it has the capacity for more.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707239,"byte_end":707282,"line_start":96,"line_end":96,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bv.len(), 0);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707284,"byte_end":707312,"line_start":97,"line_end":97,"column_start":2,"column_end":30}},{"value":"/ assert!(bv.capacity() >= 128);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707314,"byte_end":707348,"line_start":98,"line_end":98,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707350,"byte_end":707353,"line_start":99,"line_end":99,"column_start":2,"column_end":5}},{"value":"/ // These are all done","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707355,"byte_end":707380,"line_start":100,"line_end":100,"column_start":2,"column_end":27}},{"value":"/ // without reällocating…","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707382,"byte_end":707413,"line_start":101,"line_end":101,"column_start":2,"column_end":30}},{"value":"/ for i in 0 .. 128 {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707415,"byte_end":707438,"line_start":102,"line_end":102,"column_start":2,"column_end":25}},{"value":"/   bv.push(i & 0xC0 == i);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707440,"byte_end":707469,"line_start":103,"line_end":103,"column_start":2,"column_end":31}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707471,"byte_end":707476,"line_start":104,"line_end":104,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bv.len(), 128);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707478,"byte_end":707508,"line_start":105,"line_end":105,"column_start":2,"column_end":32}},{"value":"/ assert!(bv.capacity() >= 128);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707510,"byte_end":707544,"line_start":106,"line_end":106,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707546,"byte_end":707549,"line_start":107,"line_end":107,"column_start":2,"column_end":5}},{"value":"/ // …but this may make the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707551,"byte_end":707582,"line_start":108,"line_end":108,"column_start":2,"column_end":31}},{"value":"/ // bit-vector reällocate.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707584,"byte_end":707614,"line_start":109,"line_end":109,"column_start":2,"column_end":31}},{"value":"/ bv.push(false);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707616,"byte_end":707635,"line_start":110,"line_end":110,"column_start":2,"column_end":21}},{"value":"/ assert_eq!(bv.len(), 129);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707637,"byte_end":707667,"line_start":111,"line_end":111,"column_start":2,"column_end":32}},{"value":"/ assert!(bv.capacity() >= 129);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707669,"byte_end":707703,"line_start":112,"line_end":112,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707705,"byte_end":707712,"line_start":113,"line_end":113,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707714,"byte_end":707717,"line_start":114,"line_end":114,"column_start":2,"column_end":5}},{"value":"/ [Capacity and reällocation]: #capacity-and-reallocation","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707719,"byte_end":707779,"line_start":115,"line_end":115,"column_start":2,"column_end":61}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":707781,"byte_end":707790,"line_start":116,"line_end":116,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4211},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709811,"byte_end":709825,"line_start":180,"line_end":180,"column_start":9,"column_end":23},"name":"into_raw_parts","qualname":"<BitVec<O, T>>::into_raw_parts","value":"pub fn into_raw_parts(Self) -> (BitPtr<Mut, O, T>, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Decomposes a `BitVec<O, T>` into its raw components.","sig":null,"attributes":[{"value":"/ Decomposes a `BitVec<O, T>` into its raw components.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":708296,"byte_end":708352,"line_start":136,"line_end":136,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":708354,"byte_end":708357,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ Returns the raw bit-pointer to the underlying data, the length of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":708359,"byte_end":708432,"line_start":138,"line_end":138,"column_start":2,"column_end":75}},{"value":"/ bit-vector (in bits), and the allocated capacity of the buffer (in","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":708434,"byte_end":708504,"line_start":139,"line_end":139,"column_start":2,"column_end":72}},{"value":"/ bits). These are the same arguments in the same order as the arguments","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":708506,"byte_end":708580,"line_start":140,"line_end":140,"column_start":2,"column_end":76}},{"value":"/ to [`from_raw_parts`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":708582,"byte_end":708608,"line_start":141,"line_end":141,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":708610,"byte_end":708613,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ After calling this function, the caller is responsible for the memory","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":708615,"byte_end":708688,"line_start":143,"line_end":143,"column_start":2,"column_end":75}},{"value":"/ previously managed by the `BitVec`. The only way to do this is to","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":708690,"byte_end":708759,"line_start":144,"line_end":144,"column_start":2,"column_end":71}},{"value":"/ convert the raw bit-pointer, length, and capacity back into a `BitVec`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":708761,"byte_end":708835,"line_start":145,"line_end":145,"column_start":2,"column_end":76}},{"value":"/ with the [`from_raw_parts`] function, allowing the destructor to perform","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":708837,"byte_end":708913,"line_start":146,"line_end":146,"column_start":2,"column_end":78}},{"value":"/ the cleanup.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":708915,"byte_end":708931,"line_start":147,"line_end":147,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":708933,"byte_end":708936,"line_start":148,"line_end":148,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":708938,"byte_end":708952,"line_start":149,"line_end":149,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":708954,"byte_end":708957,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ [`Vec::into_raw_parts`](alloc::vec::Vec::into_raw_parts)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":708959,"byte_end":709019,"line_start":151,"line_end":151,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709021,"byte_end":709024,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709026,"byte_end":709047,"line_start":153,"line_end":153,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709049,"byte_end":709052,"line_start":154,"line_end":154,"column_start":2,"column_end":5}},{"value":"/ This returns a `BitPtr`, rather than a `*mut T`. If you need the actual","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709054,"byte_end":709129,"line_start":155,"line_end":155,"column_start":2,"column_end":77}},{"value":"/ memory address, [`BitPtr::pointer`] will produce it.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709131,"byte_end":709187,"line_start":156,"line_end":156,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709189,"byte_end":709192,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709194,"byte_end":709208,"line_start":158,"line_end":158,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709210,"byte_end":709213,"line_start":159,"line_end":159,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709215,"byte_end":709226,"line_start":160,"line_end":160,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709228,"byte_end":709255,"line_start":161,"line_end":161,"column_start":2,"column_end":29}},{"value":"/ use core::cell::Cell;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709257,"byte_end":709282,"line_start":162,"line_end":162,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709284,"byte_end":709287,"line_start":163,"line_end":163,"column_start":2,"column_end":5}},{"value":"/ let bv: BitVec = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709289,"byte_end":709333,"line_start":164,"line_end":164,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709335,"byte_end":709338,"line_start":165,"line_end":165,"column_start":2,"column_end":5}},{"value":"/ let (ptr, len, cap) = bv.into_raw_parts();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709340,"byte_end":709386,"line_start":166,"line_end":166,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709388,"byte_end":709391,"line_start":167,"line_end":167,"column_start":2,"column_end":5}},{"value":"/ let rebuilt = unsafe {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709393,"byte_end":709419,"line_start":168,"line_end":168,"column_start":2,"column_end":28}},{"value":"/   // We can now make changes to the components, such","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709421,"byte_end":709477,"line_start":169,"line_end":169,"column_start":2,"column_end":58}},{"value":"/   // as casting the pointer to a compatible type.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709479,"byte_end":709532,"line_start":170,"line_end":170,"column_start":2,"column_end":55}},{"value":"/   let ptr = ptr.cast::<Cell<usize>>();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709534,"byte_end":709576,"line_start":171,"line_end":171,"column_start":2,"column_end":44}},{"value":"/   BitVec::from_raw_parts(ptr, len, cap)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709578,"byte_end":709621,"line_start":172,"line_end":172,"column_start":2,"column_end":45}},{"value":"/ };","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709623,"byte_end":709629,"line_start":173,"line_end":173,"column_start":2,"column_end":8}},{"value":"/ assert_eq!(rebuilt, bits![0, 1, 0, 0, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709631,"byte_end":709677,"line_start":174,"line_end":174,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709679,"byte_end":709686,"line_start":175,"line_end":175,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709688,"byte_end":709691,"line_start":176,"line_end":176,"column_start":2,"column_end":5}},{"value":"/ [`BitPtr::pointer`]: crate::ptr::BitPtr::pointer","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709693,"byte_end":709745,"line_start":177,"line_end":177,"column_start":2,"column_end":54}},{"value":"/ [`from_raw_parts`]: Self::from_raw_parts","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709747,"byte_end":709791,"line_start":178,"line_end":178,"column_start":2,"column_end":46}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":709793,"byte_end":709802,"line_start":179,"line_end":179,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4212},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712832,"byte_end":712846,"line_start":258,"line_end":258,"column_start":16,"column_end":30},"name":"from_raw_parts","qualname":"<BitVec<O, T>>::from_raw_parts","value":"pub unsafe fn from_raw_parts(BitPtr<Mut, O, T>, usize, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a `BitVec<O, T>` directly from the raw components of another\n bit-vector.","sig":null,"attributes":[{"value":"/ Creates a `BitVec<O, T>` directly from the raw components of another","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710007,"byte_end":710079,"line_start":186,"line_end":186,"column_start":2,"column_end":74}},{"value":"/ bit-vector.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710081,"byte_end":710096,"line_start":187,"line_end":187,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710098,"byte_end":710101,"line_start":188,"line_end":188,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710103,"byte_end":710117,"line_start":189,"line_end":189,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710119,"byte_end":710122,"line_start":190,"line_end":190,"column_start":2,"column_end":5}},{"value":"/ [`Vec::from_raw_parts`](alloc::vec::Vec::from_raw_parts)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710124,"byte_end":710184,"line_start":191,"line_end":191,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710186,"byte_end":710189,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710191,"byte_end":710212,"line_start":193,"line_end":193,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710214,"byte_end":710217,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ This takes a `BitPtr`, rather than a `*mut T`. If you only have a","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710219,"byte_end":710288,"line_start":195,"line_end":195,"column_start":2,"column_end":71}},{"value":"/ pointer, you can construct a `BitPtr` to its zeroth bit before calling","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710290,"byte_end":710364,"line_start":196,"line_end":196,"column_start":2,"column_end":76}},{"value":"/ this.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710366,"byte_end":710375,"line_start":197,"line_end":197,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710377,"byte_end":710380,"line_start":198,"line_end":198,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710382,"byte_end":710394,"line_start":199,"line_end":199,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710396,"byte_end":710399,"line_start":200,"line_end":200,"column_start":2,"column_end":5}},{"value":"/ This is highly unsafe, due to the number of invariants that aren’t","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710401,"byte_end":710473,"line_start":201,"line_end":201,"column_start":2,"column_end":72}},{"value":"/ checked:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710475,"byte_end":710487,"line_start":202,"line_end":202,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710489,"byte_end":710492,"line_start":203,"line_end":203,"column_start":2,"column_end":5}},{"value":"/ - `bitptr` needs to have been previously allocated by `BitVec<O, T>`, or","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710494,"byte_end":710570,"line_start":204,"line_end":204,"column_start":2,"column_end":78}},{"value":"/   constructed from a pointer allocated by [`Vec<T>`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710572,"byte_end":710629,"line_start":205,"line_end":205,"column_start":2,"column_end":59}},{"value":"/ - `T` needs to have the same size and alignment as what `bitptr` was","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710631,"byte_end":710703,"line_start":206,"line_end":206,"column_start":2,"column_end":74}},{"value":"/   allocated with. (`T` having a less strict alignment is not sufficient;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710705,"byte_end":710781,"line_start":207,"line_end":207,"column_start":2,"column_end":78}},{"value":"/   the alignment really needs to be equal to satisf the [`dealloc`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710783,"byte_end":710853,"line_start":208,"line_end":208,"column_start":2,"column_end":72}},{"value":"/   requirement that memory must be allocated and deällocated with the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710855,"byte_end":710928,"line_start":209,"line_end":209,"column_start":2,"column_end":74}},{"value":"/   same layout.) However, you can safely cast between bare integers,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":710930,"byte_end":711001,"line_start":210,"line_end":210,"column_start":2,"column_end":73}},{"value":"/   `BitSafe` integers, `Cell` wrappers, and atomic integers, as long as","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":711003,"byte_end":711077,"line_start":211,"line_end":211,"column_start":2,"column_end":76}},{"value":"/   they all have the same width.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":711079,"byte_end":711114,"line_start":212,"line_end":212,"column_start":2,"column_end":37}},{"value":"/ - `length` needs to be less than or equal to capacity.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":711116,"byte_end":711174,"line_start":213,"line_end":213,"column_start":2,"column_end":60}},{"value":"/ - `capacity` needs to be the capacity (in bits) that the bit-pointer was","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":711176,"byte_end":711252,"line_start":214,"line_end":214,"column_start":2,"column_end":78}},{"value":"/   allocated with (less any head offset in `bitptr`).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":711254,"byte_end":711310,"line_start":215,"line_end":215,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":711312,"byte_end":711315,"line_start":216,"line_end":216,"column_start":2,"column_end":5}},{"value":"/ Violating these **will** cause problems. For example, it is **not** safe","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":711317,"byte_end":711393,"line_start":217,"line_end":217,"column_start":2,"column_end":78}},{"value":"/ to build a `BitVec<_, u8>` from a pointer to a `u16` sequence and twice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":711395,"byte_end":711470,"line_start":218,"line_end":218,"column_start":2,"column_end":77}},{"value":"/ its original length, because the allocator cares about the alignment,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":711472,"byte_end":711545,"line_start":219,"line_end":219,"column_start":2,"column_end":75}},{"value":"/ and these two types have different alignments. The buffer was allocated","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":711547,"byte_end":711622,"line_start":220,"line_end":220,"column_start":2,"column_end":77}},{"value":"/ with alignment 2 (for `u16`), but after turning it into a `BitVec<_,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":711624,"byte_end":711696,"line_start":221,"line_end":221,"column_start":2,"column_end":74}},{"value":"/ u8>`, it’ll be deällocated with alignment 1.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":711698,"byte_end":711749,"line_start":222,"line_end":222,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":711751,"byte_end":711754,"line_start":223,"line_end":223,"column_start":2,"column_end":5}},{"value":"/ The ownership of `bitptr`is effectively transferred to the `BitVec<O,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":711756,"byte_end":711829,"line_start":224,"line_end":224,"column_start":2,"column_end":75}},{"value":"/ T>` which may then deällocate, reällocate, or change the contents of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":711831,"byte_end":711905,"line_start":225,"line_end":225,"column_start":2,"column_end":74}},{"value":"/ memory pointed to by the bit-pointer at will. Ensure that nothing else","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":711907,"byte_end":711981,"line_start":226,"line_end":226,"column_start":2,"column_end":76}},{"value":"/ uses the pointer after calling this function.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":711983,"byte_end":712032,"line_start":227,"line_end":227,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712034,"byte_end":712037,"line_start":228,"line_end":228,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712039,"byte_end":712053,"line_start":229,"line_end":229,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712055,"byte_end":712058,"line_start":230,"line_end":230,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712060,"byte_end":712071,"line_start":231,"line_end":231,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712073,"byte_end":712100,"line_start":232,"line_end":232,"column_start":2,"column_end":29}},{"value":"/ use bitvec::ptr as bv_ptr;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712102,"byte_end":712132,"line_start":233,"line_end":233,"column_start":2,"column_end":32}},{"value":"/ use core::mem::ManuallyDrop;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712134,"byte_end":712166,"line_start":234,"line_end":234,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712168,"byte_end":712171,"line_start":235,"line_end":235,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712173,"byte_end":712209,"line_start":236,"line_end":236,"column_start":2,"column_end":38}},{"value":"/ let mut bv = ManuallyDrop::new(bv);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712211,"byte_end":712250,"line_start":237,"line_end":237,"column_start":2,"column_end":41}},{"value":"/ let bp = bv.as_mut_bitptr();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712252,"byte_end":712284,"line_start":238,"line_end":238,"column_start":2,"column_end":34}},{"value":"/ let len = bv.len();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712286,"byte_end":712309,"line_start":239,"line_end":239,"column_start":2,"column_end":25}},{"value":"/ let cap = bv.capacity();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712311,"byte_end":712339,"line_start":240,"line_end":240,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712341,"byte_end":712344,"line_start":241,"line_end":241,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712346,"byte_end":712358,"line_start":242,"line_end":242,"column_start":2,"column_end":14}},{"value":"/   // Overwrite memory with the inverse bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712360,"byte_end":712408,"line_start":243,"line_end":243,"column_start":2,"column_end":50}},{"value":"/   for i in 0 .. len {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712410,"byte_end":712435,"line_start":244,"line_end":244,"column_start":2,"column_end":27}},{"value":"/     let bp = bp.add(i);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712437,"byte_end":712464,"line_start":245,"line_end":245,"column_start":2,"column_end":29}},{"value":"/     bv_ptr::write(bp, !bv_ptr::read(bp.immut()));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712466,"byte_end":712519,"line_start":246,"line_end":246,"column_start":2,"column_end":55}},{"value":"/   }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712521,"byte_end":712528,"line_start":247,"line_end":247,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712530,"byte_end":712533,"line_start":248,"line_end":248,"column_start":2,"column_end":5}},{"value":"/   // Put everything back together into a `BitVec`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712535,"byte_end":712589,"line_start":249,"line_end":249,"column_start":2,"column_end":56}},{"value":"/   let rebuilt = BitVec::from_raw_parts(bp, len, cap);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712591,"byte_end":712648,"line_start":250,"line_end":250,"column_start":2,"column_end":59}},{"value":"/   assert_eq!(rebuilt, bits![1, 0, 1, 1, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712650,"byte_end":712698,"line_start":251,"line_end":251,"column_start":2,"column_end":50}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712700,"byte_end":712705,"line_start":252,"line_end":252,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712707,"byte_end":712714,"line_start":253,"line_end":253,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712716,"byte_end":712719,"line_start":254,"line_end":254,"column_start":2,"column_end":5}},{"value":"/ [`Vec<T>`]: alloc::vec::Vec","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712721,"byte_end":712752,"line_start":255,"line_end":255,"column_start":2,"column_end":33}},{"value":"/ [`dealloc`]: alloc::alloc::GlobalAlloc::dealloc","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712754,"byte_end":712805,"line_start":256,"line_end":256,"column_start":2,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":712807,"byte_end":712816,"line_start":257,"line_end":257,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4213},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":713374,"byte_end":713382,"line_start":284,"line_end":284,"column_start":9,"column_end":17},"name":"capacity","qualname":"<BitVec<O, T>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits the bit-vector can hold without reällocating.","sig":null,"attributes":[{"value":"/ Returns the number of bits the bit-vector can hold without reällocating.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":713033,"byte_end":713110,"line_start":269,"line_end":269,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":713112,"byte_end":713115,"line_start":270,"line_end":270,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":713117,"byte_end":713131,"line_start":271,"line_end":271,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":713133,"byte_end":713136,"line_start":272,"line_end":272,"column_start":2,"column_end":5}},{"value":"/ [`Vec::capacity`](alloc::vec::Vec::capacity)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":713138,"byte_end":713186,"line_start":273,"line_end":273,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":713188,"byte_end":713191,"line_start":274,"line_end":274,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":713193,"byte_end":713207,"line_start":275,"line_end":275,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":713209,"byte_end":713212,"line_start":276,"line_end":276,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":713214,"byte_end":713225,"line_start":277,"line_end":277,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":713227,"byte_end":713254,"line_start":278,"line_end":278,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":713256,"byte_end":713259,"line_start":279,"line_end":279,"column_start":2,"column_end":5}},{"value":"/ let bv: BitVec = BitVec::with_capacity(100);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":713261,"byte_end":713309,"line_start":280,"line_end":280,"column_start":2,"column_end":50}},{"value":"/ assert!(bv.capacity() >= 100);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":713311,"byte_end":713345,"line_start":281,"line_end":281,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":713347,"byte_end":713354,"line_start":282,"line_end":282,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":713356,"byte_end":713365,"line_start":283,"line_end":283,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4214},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714462,"byte_end":714469,"line_start":318,"line_end":318,"column_start":9,"column_end":16},"name":"reserve","qualname":"<BitVec<O, T>>::reserve","value":"pub fn reserve(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more bits to be inserted in\n the given `BitVec<O, T>`. The collection may reserve more space to avoid\n frequent reällocations. After calling `reserve`, capacity will be\n greater than or equal to `self.len() + additional`. Does nothing if\n capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Reserves capacity for at least `additional` more bits to be inserted in","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":713730,"byte_end":713805,"line_start":294,"line_end":294,"column_start":2,"column_end":77}},{"value":"/ the given `BitVec<O, T>`. The collection may reserve more space to avoid","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":713807,"byte_end":713883,"line_start":295,"line_end":295,"column_start":2,"column_end":78}},{"value":"/ frequent reällocations. After calling `reserve`, capacity will be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":713885,"byte_end":713955,"line_start":296,"line_end":296,"column_start":2,"column_end":71}},{"value":"/ greater than or equal to `self.len() + additional`. Does nothing if","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":713957,"byte_end":714028,"line_start":297,"line_end":297,"column_start":2,"column_end":73}},{"value":"/ capacity is already sufficient.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714030,"byte_end":714065,"line_start":298,"line_end":298,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714067,"byte_end":714070,"line_start":299,"line_end":299,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714072,"byte_end":714086,"line_start":300,"line_end":300,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714088,"byte_end":714091,"line_start":301,"line_end":301,"column_start":2,"column_end":5}},{"value":"/ [`Vec::reserve`](alloc::vec::Vec::reserve)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714093,"byte_end":714139,"line_start":302,"line_end":302,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714141,"byte_end":714144,"line_start":303,"line_end":303,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714146,"byte_end":714158,"line_start":304,"line_end":304,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714160,"byte_end":714163,"line_start":305,"line_end":305,"column_start":2,"column_end":5}},{"value":"/ Panics if the new capacity exceeds the bit-vector’s limits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714165,"byte_end":714230,"line_start":306,"line_end":306,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714232,"byte_end":714235,"line_start":307,"line_end":307,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714237,"byte_end":714251,"line_start":308,"line_end":308,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714253,"byte_end":714256,"line_start":309,"line_end":309,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714258,"byte_end":714269,"line_start":310,"line_end":310,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714271,"byte_end":714298,"line_start":311,"line_end":311,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714300,"byte_end":714303,"line_start":312,"line_end":312,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714305,"byte_end":714333,"line_start":313,"line_end":313,"column_start":2,"column_end":30}},{"value":"/ bv.reserve(100);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714335,"byte_end":714355,"line_start":314,"line_end":314,"column_start":2,"column_end":22}},{"value":"/ assert!(bv.capacity() >= 101);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714357,"byte_end":714391,"line_start":315,"line_end":315,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714393,"byte_end":714400,"line_start":316,"line_end":316,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714437,"byte_end":714451,"line_start":317,"line_end":317,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":4215},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715468,"byte_end":715481,"line_start":349,"line_end":349,"column_start":9,"column_end":22},"name":"reserve_exact","qualname":"<BitVec<O, T>>::reserve_exact","value":"pub fn reserve_exact(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Reserves the minimum capacity for exactly `additional` more bits to be\n inserted in the given `BitVec<O, T>`. After calling `reserve_exact`,\n capacity will be greater than or equal to `self.len() + additional`.\n Does nothing if the capacity is already sufficient.","sig":null,"attributes":[{"value":"/ Reserves the minimum capacity for exactly `additional` more bits to be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714561,"byte_end":714635,"line_start":322,"line_end":322,"column_start":2,"column_end":76}},{"value":"/ inserted in the given `BitVec<O, T>`. After calling `reserve_exact`,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714637,"byte_end":714709,"line_start":323,"line_end":323,"column_start":2,"column_end":74}},{"value":"/ capacity will be greater than or equal to `self.len() + additional`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714711,"byte_end":714783,"line_start":324,"line_end":324,"column_start":2,"column_end":74}},{"value":"/ Does nothing if the capacity is already sufficient.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714785,"byte_end":714840,"line_start":325,"line_end":325,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714842,"byte_end":714845,"line_start":326,"line_end":326,"column_start":2,"column_end":5}},{"value":"/ Note that the allocator may give the collection more space than it","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714847,"byte_end":714917,"line_start":327,"line_end":327,"column_start":2,"column_end":72}},{"value":"/ requests. Therefore, capacity can not be relied upon to be precisely","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714919,"byte_end":714991,"line_start":328,"line_end":328,"column_start":2,"column_end":74}},{"value":"/ minimal. Prefer `reserve` if future insertions are expected.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":714993,"byte_end":715057,"line_start":329,"line_end":329,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715059,"byte_end":715062,"line_start":330,"line_end":330,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715064,"byte_end":715078,"line_start":331,"line_end":331,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715080,"byte_end":715083,"line_start":332,"line_end":332,"column_start":2,"column_end":5}},{"value":"/ [`Vec::reserve_exact`](alloc::vec::Vec::reserve_exact)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715085,"byte_end":715143,"line_start":333,"line_end":333,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715145,"byte_end":715148,"line_start":334,"line_end":334,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715150,"byte_end":715162,"line_start":335,"line_end":335,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715164,"byte_end":715167,"line_start":336,"line_end":336,"column_start":2,"column_end":5}},{"value":"/ Panics if the new capacity exceeds the vector’s limits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715169,"byte_end":715230,"line_start":337,"line_end":337,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715232,"byte_end":715235,"line_start":338,"line_end":338,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715237,"byte_end":715251,"line_start":339,"line_end":339,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715253,"byte_end":715256,"line_start":340,"line_end":340,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715258,"byte_end":715269,"line_start":341,"line_end":341,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715271,"byte_end":715298,"line_start":342,"line_end":342,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715300,"byte_end":715303,"line_start":343,"line_end":343,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715305,"byte_end":715333,"line_start":344,"line_end":344,"column_start":2,"column_end":30}},{"value":"/ bv.reserve_exact(100);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715335,"byte_end":715361,"line_start":345,"line_end":345,"column_start":2,"column_end":28}},{"value":"/ assert!(bv.capacity() >= 101);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715363,"byte_end":715397,"line_start":346,"line_end":346,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715399,"byte_end":715406,"line_start":347,"line_end":347,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715443,"byte_end":715457,"line_start":348,"line_end":348,"column_start":37,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":4216},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716192,"byte_end":716205,"line_start":374,"line_end":374,"column_start":9,"column_end":22},"name":"shrink_to_fit","qualname":"<BitVec<O, T>>::shrink_to_fit","value":"pub fn shrink_to_fit(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the bit-vector as much as possible.","sig":null,"attributes":[{"value":"/ Shrinks the capacity of the bit-vector as much as possible.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715579,"byte_end":715642,"line_start":353,"line_end":353,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715644,"byte_end":715647,"line_start":354,"line_end":354,"column_start":2,"column_end":5}},{"value":"/ It will drop down as close as possible to the length but the allocator","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715649,"byte_end":715723,"line_start":355,"line_end":355,"column_start":2,"column_end":76}},{"value":"/ may still inform the bit-vector that there is space for a few more bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715725,"byte_end":715801,"line_start":356,"line_end":356,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715803,"byte_end":715806,"line_start":357,"line_end":357,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715808,"byte_end":715822,"line_start":358,"line_end":358,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715824,"byte_end":715827,"line_start":359,"line_end":359,"column_start":2,"column_end":5}},{"value":"/ [`Vec::shrink_to_fit`](alloc::vec::Vec::shrink_to_fit)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715829,"byte_end":715887,"line_start":360,"line_end":360,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715889,"byte_end":715892,"line_start":361,"line_end":361,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715894,"byte_end":715908,"line_start":362,"line_end":362,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715910,"byte_end":715913,"line_start":363,"line_end":363,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715915,"byte_end":715926,"line_start":364,"line_end":364,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715928,"byte_end":715955,"line_start":365,"line_end":365,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715957,"byte_end":715960,"line_start":366,"line_end":366,"column_start":2,"column_end":5}},{"value":"/ let mut bv: BitVec = BitVec::with_capacity(100);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":715962,"byte_end":716014,"line_start":367,"line_end":367,"column_start":2,"column_end":54}},{"value":"/ bv.extend([false, true, false].iter().copied());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716016,"byte_end":716068,"line_start":368,"line_end":368,"column_start":2,"column_end":54}},{"value":"/ assert!(bv.capacity() >= 100);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716070,"byte_end":716104,"line_start":369,"line_end":369,"column_start":2,"column_end":36}},{"value":"/ bv.shrink_to_fit();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716106,"byte_end":716129,"line_start":370,"line_end":370,"column_start":2,"column_end":25}},{"value":"/ assert!(bv.capacity() >= 3);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716131,"byte_end":716163,"line_start":371,"line_end":371,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716165,"byte_end":716172,"line_start":372,"line_end":372,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716174,"byte_end":716183,"line_start":373,"line_end":373,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4218},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716390,"byte_end":716406,"line_start":382,"line_end":382,"column_start":9,"column_end":25},"name":"into_boxed_slice","qualname":"<BitVec<O, T>>::into_boxed_slice","value":"pub fn into_boxed_slice(Self) -> BitBox<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716284,"byte_end":716301,"line_start":379,"line_end":379,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716303,"byte_end":716333,"line_start":380,"line_end":380,"column_start":2,"column_end":32}},{"value":"deprecated = \"Prefer `into_boxed_bitslice`\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716335,"byte_end":716381,"line_start":381,"line_end":381,"column_start":2,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":4219},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":718002,"byte_end":718010,"line_start":443,"line_end":443,"column_start":9,"column_end":17},"name":"truncate","qualname":"<BitVec<O, T>>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens the bit-vector, keeping the first `len` bits and dropping the\n rest.","sig":null,"attributes":[{"value":"/ Shortens the bit-vector, keeping the first `len` bits and dropping the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716465,"byte_end":716539,"line_start":386,"line_end":386,"column_start":2,"column_end":76}},{"value":"/ rest.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716541,"byte_end":716550,"line_start":387,"line_end":387,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716552,"byte_end":716555,"line_start":388,"line_end":388,"column_start":2,"column_end":5}},{"value":"/ If `len` is greater than the bit-vector’s current length, this has no","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716557,"byte_end":716632,"line_start":389,"line_end":389,"column_start":2,"column_end":75}},{"value":"/ effect.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716634,"byte_end":716645,"line_start":390,"line_end":390,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716647,"byte_end":716650,"line_start":391,"line_end":391,"column_start":2,"column_end":5}},{"value":"/ The [`drain`] method can emulate `truncate`, but causes the excess bits","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716652,"byte_end":716727,"line_start":392,"line_end":392,"column_start":2,"column_end":77}},{"value":"/ to be returned instead of dropped.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716729,"byte_end":716767,"line_start":393,"line_end":393,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716769,"byte_end":716772,"line_start":394,"line_end":394,"column_start":2,"column_end":5}},{"value":"/ Note that this method has no effect on the allocated capacity of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716774,"byte_end":716846,"line_start":395,"line_end":395,"column_start":2,"column_end":74}},{"value":"/ bit-vector, **nor does it erase truncated memory**. Bits in the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716848,"byte_end":716915,"line_start":396,"line_end":396,"column_start":2,"column_end":69}},{"value":"/ allocated memory that are outside of the [`as_bitslice`] view always","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716917,"byte_end":716989,"line_start":397,"line_end":397,"column_start":2,"column_end":74}},{"value":"/ have **unspecified** values, and cannot be relied upon to be zero.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":716991,"byte_end":717061,"line_start":398,"line_end":398,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717063,"byte_end":717066,"line_start":399,"line_end":399,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717068,"byte_end":717082,"line_start":400,"line_end":400,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717084,"byte_end":717087,"line_start":401,"line_end":401,"column_start":2,"column_end":5}},{"value":"/ [`Vec::truncate`](alloc::vec::Vec::truncate)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717089,"byte_end":717137,"line_start":402,"line_end":402,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717139,"byte_end":717142,"line_start":403,"line_end":403,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717144,"byte_end":717158,"line_start":404,"line_end":404,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717160,"byte_end":717163,"line_start":405,"line_end":405,"column_start":2,"column_end":5}},{"value":"/ Truncating a five-bit vector to two bits:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717165,"byte_end":717210,"line_start":406,"line_end":406,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717212,"byte_end":717215,"line_start":407,"line_end":407,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717217,"byte_end":717228,"line_start":408,"line_end":408,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717230,"byte_end":717257,"line_start":409,"line_end":409,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717259,"byte_end":717262,"line_start":410,"line_end":410,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1; 5];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717264,"byte_end":717295,"line_start":411,"line_end":411,"column_start":2,"column_end":33}},{"value":"/ bv.truncate(2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717297,"byte_end":717316,"line_start":412,"line_end":412,"column_start":2,"column_end":21}},{"value":"/ assert_eq!(bv.len(), 2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717318,"byte_end":717346,"line_start":413,"line_end":413,"column_start":2,"column_end":30}},{"value":"/ assert!(bv.as_raw_slice()[0].count_ones() >= 5);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717348,"byte_end":717400,"line_start":414,"line_end":414,"column_start":2,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717402,"byte_end":717409,"line_start":415,"line_end":415,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717411,"byte_end":717414,"line_start":416,"line_end":416,"column_start":2,"column_end":5}},{"value":"/ No truncation occurs when `len` is greater than the vector’s current","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717416,"byte_end":717490,"line_start":417,"line_end":417,"column_start":2,"column_end":74}},{"value":"/ length:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717492,"byte_end":717503,"line_start":418,"line_end":418,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717505,"byte_end":717508,"line_start":419,"line_end":419,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717510,"byte_end":717521,"line_start":420,"line_end":420,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717523,"byte_end":717550,"line_start":421,"line_end":421,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717552,"byte_end":717555,"line_start":422,"line_end":422,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1; 3];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717557,"byte_end":717588,"line_start":423,"line_end":423,"column_start":2,"column_end":33}},{"value":"/ bv.truncate(8);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717590,"byte_end":717609,"line_start":424,"line_end":424,"column_start":2,"column_end":21}},{"value":"/ assert_eq!(bv.len(), 3);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717611,"byte_end":717639,"line_start":425,"line_end":425,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717641,"byte_end":717648,"line_start":426,"line_end":426,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717650,"byte_end":717653,"line_start":427,"line_end":427,"column_start":2,"column_end":5}},{"value":"/ Truncating when `len == 0` is equivalent to calling the [`clear`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717655,"byte_end":717724,"line_start":428,"line_end":428,"column_start":2,"column_end":71}},{"value":"/ method.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717726,"byte_end":717737,"line_start":429,"line_end":429,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717739,"byte_end":717742,"line_start":430,"line_end":430,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717744,"byte_end":717755,"line_start":431,"line_end":431,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717757,"byte_end":717784,"line_start":432,"line_end":432,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717786,"byte_end":717789,"line_start":433,"line_end":433,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0; 3];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717791,"byte_end":717822,"line_start":434,"line_end":434,"column_start":2,"column_end":33}},{"value":"/ bv.truncate(0);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717824,"byte_end":717843,"line_start":435,"line_end":435,"column_start":2,"column_end":21}},{"value":"/ assert!(bv.is_empty());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717845,"byte_end":717872,"line_start":436,"line_end":436,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717874,"byte_end":717881,"line_start":437,"line_end":437,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717883,"byte_end":717886,"line_start":438,"line_end":438,"column_start":2,"column_end":5}},{"value":"/ [`as_bitslice`]: Self::as_bitslice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717888,"byte_end":717926,"line_start":439,"line_end":439,"column_start":2,"column_end":40}},{"value":"/ [`clear`]: Self::clear","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717928,"byte_end":717954,"line_start":440,"line_end":440,"column_start":2,"column_end":28}},{"value":"/ [`drain`]: Self::drain","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717956,"byte_end":717982,"line_start":441,"line_end":441,"column_start":2,"column_end":28}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":717984,"byte_end":717993,"line_start":442,"line_end":442,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4220},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":718293,"byte_end":718301,"line_start":454,"line_end":454,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<BitVec<O, T>>::as_slice","value":"pub fn as_slice(&Self) -> &BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":718127,"byte_end":718144,"line_start":450,"line_end":450,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":718146,"byte_end":718176,"line_start":451,"line_end":451,"column_start":2,"column_end":32}},{"value":"deprecated =\n  \"Prefer `as_bitslice`, or `as_raw_slice` to view the \\\n\t                underlying memory\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":718178,"byte_end":718284,"line_start":452,"line_end":453,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":4221},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":718546,"byte_end":718558,"line_start":463,"line_end":463,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<BitVec<O, T>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":718372,"byte_end":718389,"line_start":459,"line_end":459,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":718391,"byte_end":718421,"line_start":460,"line_end":460,"column_start":2,"column_end":32}},{"value":"deprecated =\n  \"Prefer `as_mut_bitslice`, or `as_mut_raw_slice` to view the \\\n\t                underlying memory\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":718423,"byte_end":718537,"line_start":461,"line_end":462,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":4222},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":718818,"byte_end":718824,"line_start":472,"line_end":472,"column_start":9,"column_end":15},"name":"as_ptr","qualname":"<BitVec<O, T>>::as_ptr","value":"pub fn as_ptr(&Self) -> BitPtr<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":718641,"byte_end":718658,"line_start":468,"line_end":468,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":718660,"byte_end":718690,"line_start":469,"line_end":469,"column_start":2,"column_end":32}},{"value":"deprecated =\n  \"Prefer `as_bitptr`, or `as_raw_ptr` to take the address of \\\n\t                the underlying memory\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":718692,"byte_end":718809,"line_start":470,"line_end":471,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":4223},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719082,"byte_end":719092,"line_start":481,"line_end":481,"column_start":9,"column_end":19},"name":"as_mut_ptr","qualname":"<BitVec<O, T>>::as_mut_ptr","value":"pub fn as_mut_ptr(&mut Self) -> BitPtr<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":718897,"byte_end":718914,"line_start":477,"line_end":477,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":718916,"byte_end":718946,"line_start":478,"line_end":478,"column_start":2,"column_end":32}},{"value":"deprecated =\n  \"Prefer `as_mut_bitptr`, or `as_mut_raw_ptr` to take the \\\n\t                address of the underlying memory\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":718948,"byte_end":719073,"line_start":479,"line_end":480,"column_start":2,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":4224},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721158,"byte_end":721165,"line_start":547,"line_end":547,"column_start":16,"column_end":23},"name":"set_len","qualname":"<BitVec<O, T>>::set_len","value":"pub unsafe fn set_len(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Forces the length of the bit-vector to `new_len`.","sig":null,"attributes":[{"value":"/ Forces the length of the bit-vector to `new_len`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719155,"byte_end":719208,"line_start":485,"line_end":485,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719210,"byte_end":719213,"line_start":486,"line_end":486,"column_start":2,"column_end":5}},{"value":"/ This is a low-level operation that maintains none of the normal","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719215,"byte_end":719282,"line_start":487,"line_end":487,"column_start":2,"column_end":69}},{"value":"/ invariants of the type. Normall changing the length of a bit-vector is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719284,"byte_end":719358,"line_start":488,"line_end":488,"column_start":2,"column_end":76}},{"value":"/ done using one of the safe operations instead, such as [`truncate`],","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719360,"byte_end":719432,"line_start":489,"line_end":489,"column_start":2,"column_end":74}},{"value":"/ [`resize`], [`extend`], or [`clear`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719434,"byte_end":719475,"line_start":490,"line_end":490,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719477,"byte_end":719480,"line_start":491,"line_end":491,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719482,"byte_end":719496,"line_start":492,"line_end":492,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719498,"byte_end":719501,"line_start":493,"line_end":493,"column_start":2,"column_end":5}},{"value":"/ [`Vec::set_len`](alloc::vec::Vec::set_len)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719503,"byte_end":719549,"line_start":494,"line_end":494,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719551,"byte_end":719554,"line_start":495,"line_end":495,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719556,"byte_end":719568,"line_start":496,"line_end":496,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719570,"byte_end":719573,"line_start":497,"line_end":497,"column_start":2,"column_end":5}},{"value":"/ - `new_len` must be less than or equal to [`self.capacity()`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719575,"byte_end":719641,"line_start":498,"line_end":498,"column_start":2,"column_end":68}},{"value":"/ - The memory elements underlying `old_len .. new_len` must be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719643,"byte_end":719708,"line_start":499,"line_end":499,"column_start":2,"column_end":67}},{"value":"/   initialized.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719710,"byte_end":719728,"line_start":500,"line_end":500,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719730,"byte_end":719733,"line_start":501,"line_end":501,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719735,"byte_end":719749,"line_start":502,"line_end":502,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719751,"byte_end":719754,"line_start":503,"line_end":503,"column_start":2,"column_end":5}},{"value":"/ This method can be useful for situations in which the bit-vector is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719756,"byte_end":719827,"line_start":504,"line_end":504,"column_start":2,"column_end":73}},{"value":"/ serving as a buffer for other code, particularly over FFI:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719829,"byte_end":719891,"line_start":505,"line_end":505,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719893,"byte_end":719896,"line_start":506,"line_end":506,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719898,"byte_end":719909,"line_start":507,"line_end":507,"column_start":2,"column_end":13}},{"value":"/ # #![allow(dead_code)]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719911,"byte_end":719937,"line_start":508,"line_end":508,"column_start":2,"column_end":28}},{"value":"/ # #![allow(improper_ctypes)]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719939,"byte_end":719971,"line_start":509,"line_end":509,"column_start":2,"column_end":34}},{"value":"/ # const ERL_OK: i32 = 0;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":719973,"byte_end":720001,"line_start":510,"line_end":510,"column_start":2,"column_end":30}},{"value":"/ # extern \"C\" {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720003,"byte_end":720021,"line_start":511,"line_end":511,"column_start":2,"column_end":20}},{"value":"/ #   fn erl_read_bits(","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720023,"byte_end":720048,"line_start":512,"line_end":512,"column_start":2,"column_end":27}},{"value":"/ #     bv: *mut BitVec<Msb0, u8>,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720050,"byte_end":720086,"line_start":513,"line_end":513,"column_start":2,"column_end":38}},{"value":"/ #     bits_reqd: usize,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720088,"byte_end":720115,"line_start":514,"line_end":514,"column_start":2,"column_end":29}},{"value":"/ #     bits_read: *mut usize,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720117,"byte_end":720149,"line_start":515,"line_end":515,"column_start":2,"column_end":34}},{"value":"/ #   ) -> i32;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720151,"byte_end":720168,"line_start":516,"line_end":516,"column_start":2,"column_end":19}},{"value":"/ # }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720170,"byte_end":720177,"line_start":517,"line_end":517,"column_start":2,"column_end":9}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720179,"byte_end":720206,"line_start":518,"line_end":518,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720208,"byte_end":720211,"line_start":519,"line_end":519,"column_start":2,"column_end":5}},{"value":"/ // `bitvec` could pair with `rustler` for a better bitstream","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720213,"byte_end":720277,"line_start":520,"line_end":520,"column_start":2,"column_end":66}},{"value":"/ type ErlBitstring = BitVec<Msb0, u8>;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720279,"byte_end":720320,"line_start":521,"line_end":521,"column_start":2,"column_end":43}},{"value":"/ # pub fn _test() {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720322,"byte_end":720344,"line_start":522,"line_end":522,"column_start":2,"column_end":24}},{"value":"/ let mut bits_read = 0;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720346,"byte_end":720372,"line_start":523,"line_end":523,"column_start":2,"column_end":28}},{"value":"/ // An imaginary Erlang function wants a large bit buffer.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720374,"byte_end":720435,"line_start":524,"line_end":524,"column_start":2,"column_end":63}},{"value":"/ let mut buf = ErlBitstring::with_capacity(32_768);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720437,"byte_end":720491,"line_start":525,"line_end":525,"column_start":2,"column_end":56}},{"value":"/ // SAFETY: When `erl_read_bits` returns `ERL_OK`, it holds that:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720493,"byte_end":720561,"line_start":526,"line_end":526,"column_start":2,"column_end":70}},{"value":"/ // 1. `bits_read` bits were initialized.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720563,"byte_end":720607,"line_start":527,"line_end":527,"column_start":2,"column_end":46}},{"value":"/ // 2. `bits_read` <= the capacity (32_768)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720609,"byte_end":720655,"line_start":528,"line_end":528,"column_start":2,"column_end":48}},{"value":"/ // which makes `set_len` safe to call.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720657,"byte_end":720699,"line_start":529,"line_end":529,"column_start":2,"column_end":44}},{"value":"/ unsafe {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720701,"byte_end":720713,"line_start":530,"line_end":530,"column_start":2,"column_end":14}},{"value":"/   // Make the FFI call…","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720715,"byte_end":720744,"line_start":531,"line_end":531,"column_start":2,"column_end":29}},{"value":"/   let status = erl_read_bits(&mut buf, 10, &mut bits_read);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720746,"byte_end":720809,"line_start":532,"line_end":532,"column_start":2,"column_end":65}},{"value":"/   if status == ERL_OK {","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720811,"byte_end":720838,"line_start":533,"line_end":533,"column_start":2,"column_end":29}},{"value":"/     // …and update the length to what was read in.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720840,"byte_end":720896,"line_start":534,"line_end":534,"column_start":2,"column_end":56}},{"value":"/     buf.set_len(bits_read);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720898,"byte_end":720929,"line_start":535,"line_end":535,"column_start":2,"column_end":33}},{"value":"/   }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720931,"byte_end":720938,"line_start":536,"line_end":536,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720940,"byte_end":720945,"line_start":537,"line_end":537,"column_start":2,"column_end":7}},{"value":"/ # }","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720947,"byte_end":720954,"line_start":538,"line_end":538,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720956,"byte_end":720963,"line_start":539,"line_end":539,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720965,"byte_end":720968,"line_start":540,"line_end":540,"column_start":2,"column_end":5}},{"value":"/ [`clear`]: Self::clear","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720970,"byte_end":720996,"line_start":541,"line_end":541,"column_start":2,"column_end":28}},{"value":"/ [`extend`]: Self::extend","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":720998,"byte_end":721026,"line_start":542,"line_end":542,"column_start":2,"column_end":30}},{"value":"/ [`resize`]: Self::resize","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721028,"byte_end":721056,"line_start":543,"line_end":543,"column_start":2,"column_end":30}},{"value":"/ [`self.capacity()`]: Self::capacity","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721058,"byte_end":721097,"line_start":544,"line_end":544,"column_start":2,"column_end":41}},{"value":"/ [`truncate`]: Self::truncate","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721099,"byte_end":721131,"line_start":545,"line_end":545,"column_start":2,"column_end":34}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721133,"byte_end":721142,"line_start":546,"line_end":546,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4225},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722131,"byte_end":722142,"line_start":591,"line_end":591,"column_start":9,"column_end":20},"name":"swap_remove","qualname":"<BitVec<O, T>>::swap_remove","value":"pub fn swap_remove(&mut Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes a bit from the bit-vector and returns it.","sig":null,"attributes":[{"value":"/ Removes a bit from the bit-vector and returns it.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721508,"byte_end":721561,"line_start":564,"line_end":564,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721563,"byte_end":721566,"line_start":565,"line_end":565,"column_start":2,"column_end":5}},{"value":"/ The removed bit is replaced by the last bit of the bit-vector.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721568,"byte_end":721634,"line_start":566,"line_end":566,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721636,"byte_end":721639,"line_start":567,"line_end":567,"column_start":2,"column_end":5}},{"value":"/ This does not preserve ordering, but is O(1).","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721641,"byte_end":721690,"line_start":568,"line_end":568,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721692,"byte_end":721695,"line_start":569,"line_end":569,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721697,"byte_end":721711,"line_start":570,"line_end":570,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721713,"byte_end":721716,"line_start":571,"line_end":571,"column_start":2,"column_end":5}},{"value":"/ [`Vec::swap_remove`](alloc::vec::Vec::swap_remove)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721718,"byte_end":721772,"line_start":572,"line_end":572,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721774,"byte_end":721777,"line_start":573,"line_end":573,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721779,"byte_end":721791,"line_start":574,"line_end":574,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721793,"byte_end":721796,"line_start":575,"line_end":575,"column_start":2,"column_end":5}},{"value":"/ Panics if `index` is out of bounds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721798,"byte_end":721837,"line_start":576,"line_end":576,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721839,"byte_end":721842,"line_start":577,"line_end":577,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721844,"byte_end":721858,"line_start":578,"line_end":578,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721860,"byte_end":721863,"line_start":579,"line_end":579,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721865,"byte_end":721876,"line_start":580,"line_end":580,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721878,"byte_end":721905,"line_start":581,"line_end":581,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721907,"byte_end":721910,"line_start":582,"line_end":582,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 0, 1, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721912,"byte_end":721952,"line_start":583,"line_end":583,"column_start":2,"column_end":42}},{"value":"/ assert!(!bv.swap_remove(1));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721954,"byte_end":721986,"line_start":584,"line_end":584,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bv, bits![0, 1, 1, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":721988,"byte_end":722026,"line_start":585,"line_end":585,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722028,"byte_end":722031,"line_start":586,"line_end":586,"column_start":2,"column_end":5}},{"value":"/ assert!(!bv.swap_remove(0));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722033,"byte_end":722065,"line_start":587,"line_end":587,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bv, bits![0, 1, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722067,"byte_end":722102,"line_start":588,"line_end":588,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722104,"byte_end":722111,"line_start":589,"line_end":589,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722113,"byte_end":722122,"line_start":590,"line_end":590,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4226},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722860,"byte_end":722866,"line_start":624,"line_end":624,"column_start":9,"column_end":15},"name":"insert","qualname":"<BitVec<O, T>>::insert","value":"pub fn insert(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Inserts a bit at position `index` within the bit-vector, shifting all\n bits after it to the right.","sig":null,"attributes":[{"value":"/ Inserts a bit at position `index` within the bit-vector, shifting all","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722348,"byte_end":722421,"line_start":601,"line_end":601,"column_start":2,"column_end":75}},{"value":"/ bits after it to the right.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722423,"byte_end":722454,"line_start":602,"line_end":602,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722456,"byte_end":722459,"line_start":603,"line_end":603,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722461,"byte_end":722475,"line_start":604,"line_end":604,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722477,"byte_end":722480,"line_start":605,"line_end":605,"column_start":2,"column_end":5}},{"value":"/ [`Vec::insert`](alloc::vec::Vec::insert)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722482,"byte_end":722526,"line_start":606,"line_end":606,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722528,"byte_end":722531,"line_start":607,"line_end":607,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722533,"byte_end":722545,"line_start":608,"line_end":608,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722547,"byte_end":722550,"line_start":609,"line_end":609,"column_start":2,"column_end":5}},{"value":"/ Panics if `index > len`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722552,"byte_end":722580,"line_start":610,"line_end":610,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722582,"byte_end":722585,"line_start":611,"line_end":611,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722587,"byte_end":722601,"line_start":612,"line_end":612,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722603,"byte_end":722606,"line_start":613,"line_end":613,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722608,"byte_end":722619,"line_start":614,"line_end":614,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722621,"byte_end":722648,"line_start":615,"line_end":615,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722650,"byte_end":722653,"line_start":616,"line_end":616,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0; 5];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722655,"byte_end":722686,"line_start":617,"line_end":617,"column_start":2,"column_end":33}},{"value":"/ bv.insert(4, true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722688,"byte_end":722711,"line_start":618,"line_end":618,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(bv, bits![0, 0, 0, 0, 1, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722713,"byte_end":722757,"line_start":619,"line_end":619,"column_start":2,"column_end":46}},{"value":"/ bv.insert(2, true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722759,"byte_end":722782,"line_start":620,"line_end":620,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(bv, bits![0, 0, 1, 0, 0, 1, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722784,"byte_end":722831,"line_start":621,"line_end":621,"column_start":2,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722833,"byte_end":722840,"line_start":622,"line_end":622,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":722842,"byte_end":722851,"line_start":623,"line_end":623,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4227},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723483,"byte_end":723489,"line_start":651,"line_end":651,"column_start":9,"column_end":15},"name":"remove","qualname":"<BitVec<O, T>>::remove","value":"pub fn remove(&mut Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the bit at position `index` within the bit-vector,\n shifting all bits after it to the left.","sig":null,"attributes":[{"value":"/ Removes and returns the bit at position `index` within the bit-vector,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723027,"byte_end":723101,"line_start":630,"line_end":630,"column_start":2,"column_end":76}},{"value":"/ shifting all bits after it to the left.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723103,"byte_end":723146,"line_start":631,"line_end":631,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723148,"byte_end":723151,"line_start":632,"line_end":632,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723153,"byte_end":723167,"line_start":633,"line_end":633,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723169,"byte_end":723172,"line_start":634,"line_end":634,"column_start":2,"column_end":5}},{"value":"/ [`Vec::remove`](alloc::vec::Vec::remove)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723174,"byte_end":723218,"line_start":635,"line_end":635,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723220,"byte_end":723223,"line_start":636,"line_end":636,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723225,"byte_end":723237,"line_start":637,"line_end":637,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723239,"byte_end":723242,"line_start":638,"line_end":638,"column_start":2,"column_end":5}},{"value":"/ Panics if `index` is out of bounds.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723244,"byte_end":723283,"line_start":639,"line_end":639,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723285,"byte_end":723288,"line_start":640,"line_end":640,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723290,"byte_end":723304,"line_start":641,"line_end":641,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723306,"byte_end":723309,"line_start":642,"line_end":642,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723311,"byte_end":723322,"line_start":643,"line_end":643,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723324,"byte_end":723351,"line_start":644,"line_end":644,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723353,"byte_end":723356,"line_start":645,"line_end":645,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723358,"byte_end":723392,"line_start":646,"line_end":646,"column_start":2,"column_end":36}},{"value":"/ assert!(bv.remove(1));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723394,"byte_end":723420,"line_start":647,"line_end":647,"column_start":2,"column_end":28}},{"value":"/ assert_eq!(bv, bits![0, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723422,"byte_end":723454,"line_start":648,"line_end":648,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723456,"byte_end":723463,"line_start":649,"line_end":649,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723465,"byte_end":723474,"line_start":650,"line_end":650,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4228},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":724491,"byte_end":724497,"line_start":687,"line_end":687,"column_start":9,"column_end":15},"name":"retain","qualname":"<BitVec<O, T>>::retain","value":"pub fn retain<F>(&mut Self, F) where F: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Retains only the bits specified by the predicate.","sig":null,"attributes":[{"value":"/ Retains only the bits specified by the predicate.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723710,"byte_end":723763,"line_start":661,"line_end":661,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723765,"byte_end":723768,"line_start":662,"line_end":662,"column_start":2,"column_end":5}},{"value":"/ In other words, remove all bits `b` such that `func(idx(b), &b)` returns","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723770,"byte_end":723846,"line_start":663,"line_end":663,"column_start":2,"column_end":78}},{"value":"/ `false`. This method operates in place, visiting each bit exactly once","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723848,"byte_end":723922,"line_start":664,"line_end":664,"column_start":2,"column_end":76}},{"value":"/ in the original order, and preserves the order of the retained bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723924,"byte_end":723996,"line_start":665,"line_end":665,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":723998,"byte_end":724001,"line_start":666,"line_end":666,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":724003,"byte_end":724017,"line_start":667,"line_end":667,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":724019,"byte_end":724022,"line_start":668,"line_end":668,"column_start":2,"column_end":5}},{"value":"/ [`Vec::retain`](alloc::vec::Vec::retain)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":724024,"byte_end":724068,"line_start":669,"line_end":669,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":724070,"byte_end":724073,"line_start":670,"line_end":670,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":724075,"byte_end":724096,"line_start":671,"line_end":671,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":724098,"byte_end":724101,"line_start":672,"line_end":672,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the retention","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":724103,"byte_end":724175,"line_start":673,"line_end":673,"column_start":2,"column_end":74}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":724177,"byte_end":724251,"line_start":674,"line_end":674,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":724253,"byte_end":724263,"line_start":675,"line_end":675,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":724265,"byte_end":724268,"line_start":676,"line_end":676,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":724270,"byte_end":724284,"line_start":677,"line_end":677,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":724286,"byte_end":724289,"line_start":678,"line_end":678,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":724291,"byte_end":724302,"line_start":679,"line_end":679,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":724304,"byte_end":724331,"line_start":680,"line_end":680,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":724333,"byte_end":724336,"line_start":681,"line_end":681,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 1, 0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":724338,"byte_end":724381,"line_start":682,"line_end":682,"column_start":2,"column_end":45}},{"value":"/ bv.retain(|i, b| (i % 2 == 0) ^ b);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":724383,"byte_end":724422,"line_start":683,"line_end":683,"column_start":2,"column_end":41}},{"value":"/ assert_eq!(bv, bits![0, 1, 0, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":724424,"byte_end":724462,"line_start":684,"line_end":684,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":724464,"byte_end":724471,"line_start":685,"line_end":685,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":724473,"byte_end":724482,"line_start":686,"line_end":686,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4230},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":725652,"byte_end":725656,"line_start":732,"line_end":732,"column_start":9,"column_end":13},"name":"push","qualname":"<BitVec<O, T>>::push","value":"pub fn push(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Appends a bit to the back of a collection.","sig":null,"attributes":[{"value":"/ Appends a bit to the back of a collection.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":725224,"byte_end":725270,"line_start":711,"line_end":711,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":725272,"byte_end":725275,"line_start":712,"line_end":712,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":725277,"byte_end":725291,"line_start":713,"line_end":713,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":725293,"byte_end":725296,"line_start":714,"line_end":714,"column_start":2,"column_end":5}},{"value":"/ [`Vec::push`](alloc::vec::Vec::push)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":725298,"byte_end":725338,"line_start":715,"line_end":715,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":725340,"byte_end":725343,"line_start":716,"line_end":716,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":725345,"byte_end":725357,"line_start":717,"line_end":717,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":725359,"byte_end":725362,"line_start":718,"line_end":718,"column_start":2,"column_end":5}},{"value":"/ Panics if the number of bits in the bit-vector exceeds the maximum","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":725364,"byte_end":725434,"line_start":719,"line_end":719,"column_start":2,"column_end":72}},{"value":"/ bit-vector capacity.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":725436,"byte_end":725460,"line_start":720,"line_end":720,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":725462,"byte_end":725465,"line_start":721,"line_end":721,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":725467,"byte_end":725481,"line_start":722,"line_end":722,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":725483,"byte_end":725486,"line_start":723,"line_end":723,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":725488,"byte_end":725499,"line_start":724,"line_end":724,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":725501,"byte_end":725528,"line_start":725,"line_end":725,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":725530,"byte_end":725533,"line_start":726,"line_end":726,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":725535,"byte_end":725566,"line_start":727,"line_end":727,"column_start":2,"column_end":33}},{"value":"/ bv.push(true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":725568,"byte_end":725586,"line_start":728,"line_end":728,"column_start":2,"column_end":20}},{"value":"/ assert_eq!(bv.count_ones(), 1);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":725588,"byte_end":725623,"line_start":729,"line_end":729,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":725625,"byte_end":725632,"line_start":730,"line_end":730,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":725634,"byte_end":725643,"line_start":731,"line_end":731,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4232},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726596,"byte_end":726599,"line_start":770,"line_end":770,"column_start":9,"column_end":12},"name":"pop","qualname":"<BitVec<O, T>>::pop","value":"pub fn pop(&mut Self) -> Option<bool>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last bit from a bit-vector and returns it, or [`None`] if it\n is empty.","sig":null,"attributes":[{"value":"/ Removes the last bit from a bit-vector and returns it, or [`None`] if it","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726181,"byte_end":726257,"line_start":751,"line_end":751,"column_start":2,"column_end":78}},{"value":"/ is empty.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726259,"byte_end":726272,"line_start":752,"line_end":752,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726274,"byte_end":726277,"line_start":753,"line_end":753,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726279,"byte_end":726293,"line_start":754,"line_end":754,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726295,"byte_end":726298,"line_start":755,"line_end":755,"column_start":2,"column_end":5}},{"value":"/ [`Vec::pop`](alloc::vec::Vec::pop)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726300,"byte_end":726338,"line_start":756,"line_end":756,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726340,"byte_end":726343,"line_start":757,"line_end":757,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726345,"byte_end":726359,"line_start":758,"line_end":758,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726361,"byte_end":726364,"line_start":759,"line_end":759,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726366,"byte_end":726377,"line_start":760,"line_end":760,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726379,"byte_end":726406,"line_start":761,"line_end":761,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726408,"byte_end":726411,"line_start":762,"line_end":762,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726413,"byte_end":726447,"line_start":763,"line_end":763,"column_start":2,"column_end":36}},{"value":"/ assert_eq!(bv.pop(), Some(true));","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726449,"byte_end":726486,"line_start":764,"line_end":764,"column_start":2,"column_end":39}},{"value":"/ assert_eq!(bv, bits![0, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726488,"byte_end":726520,"line_start":765,"line_end":765,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726522,"byte_end":726529,"line_start":766,"line_end":766,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726531,"byte_end":726534,"line_start":767,"line_end":767,"column_start":2,"column_end":5}},{"value":"/ [`None`]: core::option::Option::None","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726536,"byte_end":726576,"line_start":768,"line_end":768,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726578,"byte_end":726587,"line_start":769,"line_end":769,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4233},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727503,"byte_end":727509,"line_start":810,"line_end":810,"column_start":9,"column_end":15},"name":"append","qualname":"<BitVec<O, T>>::append","value":"pub fn append<O2, T2>(&mut Self, &mut BitVec<O2, T2>) where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Moves all the bits of `other` into `self`, leaving `other` empty.","sig":null,"attributes":[{"value":"/ Moves all the bits of `other` into `self`, leaving `other` empty.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726797,"byte_end":726866,"line_start":781,"line_end":781,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726868,"byte_end":726871,"line_start":782,"line_end":782,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726873,"byte_end":726887,"line_start":783,"line_end":783,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726889,"byte_end":726892,"line_start":784,"line_end":784,"column_start":2,"column_end":5}},{"value":"/ [`Vec::append`](alloc::vec::Vec::append)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726894,"byte_end":726938,"line_start":785,"line_end":785,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726940,"byte_end":726943,"line_start":786,"line_end":786,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726945,"byte_end":726966,"line_start":787,"line_end":787,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726968,"byte_end":726971,"line_start":788,"line_end":788,"column_start":2,"column_end":5}},{"value":"/ This permits `other` to have different type parameters than `self`, and","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":726973,"byte_end":727048,"line_start":789,"line_end":789,"column_start":2,"column_end":77}},{"value":"/ does not require that it be of literally `Self`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727050,"byte_end":727102,"line_start":790,"line_end":790,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727104,"byte_end":727107,"line_start":791,"line_end":791,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727109,"byte_end":727121,"line_start":792,"line_end":792,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727123,"byte_end":727126,"line_start":793,"line_end":793,"column_start":2,"column_end":5}},{"value":"/ Panics if the number of bits overflows the maximum bit-vector capacity.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727128,"byte_end":727203,"line_start":794,"line_end":794,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727205,"byte_end":727208,"line_start":795,"line_end":795,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727210,"byte_end":727224,"line_start":796,"line_end":796,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727226,"byte_end":727229,"line_start":797,"line_end":797,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727231,"byte_end":727242,"line_start":798,"line_end":798,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727244,"byte_end":727271,"line_start":799,"line_end":799,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727273,"byte_end":727276,"line_start":800,"line_end":800,"column_start":2,"column_end":5}},{"value":"/ let mut bv1 = bitvec![Msb0, u16; 0; 10];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727278,"byte_end":727322,"line_start":801,"line_end":801,"column_start":2,"column_end":46}},{"value":"/ let mut bv2 = bitvec![Lsb0, u32; 1; 10];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727324,"byte_end":727368,"line_start":802,"line_end":802,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727370,"byte_end":727373,"line_start":803,"line_end":803,"column_start":2,"column_end":5}},{"value":"/ bv1.append(&mut bv2);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727375,"byte_end":727400,"line_start":804,"line_end":804,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727402,"byte_end":727405,"line_start":805,"line_end":805,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bv1.count_ones(), 10);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727407,"byte_end":727444,"line_start":806,"line_end":806,"column_start":2,"column_end":39}},{"value":"/ assert!(bv2.is_empty());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727446,"byte_end":727474,"line_start":807,"line_end":807,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727476,"byte_end":727483,"line_start":808,"line_end":808,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727485,"byte_end":727494,"line_start":809,"line_end":809,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4236},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728854,"byte_end":728859,"line_start":856,"line_end":856,"column_start":9,"column_end":14},"name":"drain","qualname":"<BitVec<O, T>>::drain","value":"pub fn drain<R>(&mut Self, R) -> Drain<, O, T> where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Creates a draining iterator that removes the specified range in the\n bit-vector and yields the removed bits.","sig":null,"attributes":[{"value":"/ Creates a draining iterator that removes the specified range in the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727824,"byte_end":727895,"line_start":823,"line_end":823,"column_start":2,"column_end":73}},{"value":"/ bit-vector and yields the removed bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727897,"byte_end":727940,"line_start":824,"line_end":824,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727942,"byte_end":727945,"line_start":825,"line_end":825,"column_start":2,"column_end":5}},{"value":"/ When the iterator **is** dropped, all bits in the range are removed from","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":727947,"byte_end":728023,"line_start":826,"line_end":826,"column_start":2,"column_end":78}},{"value":"/ the bit-vector, even if the iterator was not fully consumed. If the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728025,"byte_end":728096,"line_start":827,"line_end":827,"column_start":2,"column_end":73}},{"value":"/ iterator **is not** dropped (with [`mem::forget`] for example), it is","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728098,"byte_end":728171,"line_start":828,"line_end":828,"column_start":2,"column_end":75}},{"value":"/ unspecified how many bits are removed.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728173,"byte_end":728215,"line_start":829,"line_end":829,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728217,"byte_end":728220,"line_start":830,"line_end":830,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728222,"byte_end":728236,"line_start":831,"line_end":831,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728238,"byte_end":728241,"line_start":832,"line_end":832,"column_start":2,"column_end":5}},{"value":"/ [`Vec::drain`](alloc::vec::Vec::drain)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728243,"byte_end":728285,"line_start":833,"line_end":833,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728287,"byte_end":728290,"line_start":834,"line_end":834,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728292,"byte_end":728304,"line_start":835,"line_end":835,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728306,"byte_end":728309,"line_start":836,"line_end":836,"column_start":2,"column_end":5}},{"value":"/ Panics if the starting point is greater than the end point or if the end","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728311,"byte_end":728387,"line_start":837,"line_end":837,"column_start":2,"column_end":78}},{"value":"/ point is greater than the length of the bit-vector.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728389,"byte_end":728444,"line_start":838,"line_end":838,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728446,"byte_end":728449,"line_start":839,"line_end":839,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728451,"byte_end":728462,"line_start":840,"line_end":840,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728464,"byte_end":728491,"line_start":841,"line_end":841,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728493,"byte_end":728496,"line_start":842,"line_end":842,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728498,"byte_end":728532,"line_start":843,"line_end":843,"column_start":2,"column_end":36}},{"value":"/ let bv2: BitVec = bv.drain(1 ..).collect();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728534,"byte_end":728581,"line_start":844,"line_end":844,"column_start":2,"column_end":49}},{"value":"/ assert_eq!(bv, bits![0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728583,"byte_end":728612,"line_start":845,"line_end":845,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(bv2, bits![1, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728614,"byte_end":728647,"line_start":846,"line_end":846,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728649,"byte_end":728652,"line_start":847,"line_end":847,"column_start":2,"column_end":5}},{"value":"/ // A full range clears the vector","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728654,"byte_end":728691,"line_start":848,"line_end":848,"column_start":2,"column_end":39}},{"value":"/ bv.drain(..);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728693,"byte_end":728710,"line_start":849,"line_end":849,"column_start":2,"column_end":19}},{"value":"/ assert_eq!(bv, bits![]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728712,"byte_end":728740,"line_start":850,"line_end":850,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728742,"byte_end":728749,"line_start":851,"line_end":851,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728751,"byte_end":728754,"line_start":852,"line_end":852,"column_start":2,"column_end":5}},{"value":"/ [`mem::forget`]: core::mem::forget","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728756,"byte_end":728794,"line_start":853,"line_end":853,"column_start":2,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728796,"byte_end":728813,"line_start":854,"line_end":854,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728815,"byte_end":728845,"line_start":855,"line_end":855,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":4238},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729310,"byte_end":729315,"line_start":875,"line_end":875,"column_start":9,"column_end":14},"name":"clear","qualname":"<BitVec<O, T>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the bit-vector, removing all values.","sig":null,"attributes":[{"value":"/ Clears the bit-vector, removing all values.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":728961,"byte_end":729008,"line_start":861,"line_end":861,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729010,"byte_end":729013,"line_start":862,"line_end":862,"column_start":2,"column_end":5}},{"value":"/ Note that this method has no effect on the allocated capacity of the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729015,"byte_end":729087,"line_start":863,"line_end":863,"column_start":2,"column_end":74}},{"value":"/ bit-vector.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729089,"byte_end":729104,"line_start":864,"line_end":864,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729106,"byte_end":729109,"line_start":865,"line_end":865,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729111,"byte_end":729122,"line_start":866,"line_end":866,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729124,"byte_end":729151,"line_start":867,"line_end":867,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729153,"byte_end":729156,"line_start":868,"line_end":868,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729158,"byte_end":729195,"line_start":869,"line_end":869,"column_start":2,"column_end":39}},{"value":"/ bv.clear();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729197,"byte_end":729212,"line_start":870,"line_end":870,"column_start":2,"column_end":17}},{"value":"/ assert!(bv.is_empty());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729214,"byte_end":729241,"line_start":871,"line_end":871,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729243,"byte_end":729250,"line_start":872,"line_end":872,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729252,"byte_end":729269,"line_start":873,"line_end":873,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729271,"byte_end":729301,"line_start":874,"line_end":874,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":4239},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729716,"byte_end":729719,"line_start":896,"line_end":896,"column_start":9,"column_end":12},"name":"len","qualname":"<BitVec<O, T>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits in the bit-vector, also referred to as its\n ‘length’.","sig":null,"attributes":[{"value":"/ Returns the number of bits in the bit-vector, also referred to as its","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729354,"byte_end":729427,"line_start":879,"line_end":879,"column_start":2,"column_end":75}},{"value":"/ ‘length’.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729429,"byte_end":729446,"line_start":880,"line_end":880,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729448,"byte_end":729451,"line_start":881,"line_end":881,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729453,"byte_end":729467,"line_start":882,"line_end":882,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729469,"byte_end":729472,"line_start":883,"line_end":883,"column_start":2,"column_end":5}},{"value":"/ [`Vec::len`](alloc::vec::Vec::len)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729474,"byte_end":729512,"line_start":884,"line_end":884,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729514,"byte_end":729517,"line_start":885,"line_end":885,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729519,"byte_end":729533,"line_start":886,"line_end":886,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729535,"byte_end":729538,"line_start":887,"line_end":887,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729540,"byte_end":729551,"line_start":888,"line_end":888,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729553,"byte_end":729580,"line_start":889,"line_end":889,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729582,"byte_end":729585,"line_start":890,"line_end":890,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729587,"byte_end":729617,"line_start":891,"line_end":891,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(bv.len(), 3);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729619,"byte_end":729647,"line_start":892,"line_end":892,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729649,"byte_end":729656,"line_start":893,"line_end":893,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729658,"byte_end":729675,"line_start":894,"line_end":894,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729677,"byte_end":729707,"line_start":895,"line_end":895,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":4240},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730161,"byte_end":730169,"line_start":919,"line_end":919,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<BitVec<O, T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the bit-vector contains no bits.","sig":null,"attributes":[{"value":"/ Returns `true` if the bit-vector contains no bits.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729764,"byte_end":729818,"line_start":900,"line_end":900,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729820,"byte_end":729823,"line_start":901,"line_end":901,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729825,"byte_end":729839,"line_start":902,"line_end":902,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729841,"byte_end":729844,"line_start":903,"line_end":903,"column_start":2,"column_end":5}},{"value":"/ [`Vec::is_empty`](alloc::vec::Vec::is_empty)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729846,"byte_end":729894,"line_start":904,"line_end":904,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729896,"byte_end":729899,"line_start":905,"line_end":905,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729901,"byte_end":729915,"line_start":906,"line_end":906,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729917,"byte_end":729920,"line_start":907,"line_end":907,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729922,"byte_end":729933,"line_start":908,"line_end":908,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729935,"byte_end":729962,"line_start":909,"line_end":909,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729964,"byte_end":729967,"line_start":910,"line_end":910,"column_start":2,"column_end":5}},{"value":"/ let mut bv: BitVec = BitVec::new();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":729969,"byte_end":730008,"line_start":911,"line_end":911,"column_start":2,"column_end":41}},{"value":"/ assert!(bv.is_empty());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730010,"byte_end":730037,"line_start":912,"line_end":912,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730039,"byte_end":730042,"line_start":913,"line_end":913,"column_start":2,"column_end":5}},{"value":"/ bv.push(true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730044,"byte_end":730062,"line_start":914,"line_end":914,"column_start":2,"column_end":20}},{"value":"/ assert!(!bv.is_empty());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730064,"byte_end":730092,"line_start":915,"line_end":915,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730094,"byte_end":730101,"line_start":916,"line_end":916,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730103,"byte_end":730120,"line_start":917,"line_end":917,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730122,"byte_end":730152,"line_start":918,"line_end":918,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":4241},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730927,"byte_end":730936,"line_start":949,"line_end":949,"column_start":9,"column_end":18},"name":"split_off","qualname":"<BitVec<O, T>>::split_off","value":"pub fn split_off(&mut Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Splits the collection into two at the given index.","sig":null,"attributes":[{"value":"/ Splits the collection into two at the given index.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730218,"byte_end":730272,"line_start":923,"line_end":923,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730274,"byte_end":730277,"line_start":924,"line_end":924,"column_start":2,"column_end":5}},{"value":"/ Returns a newly allocated bit-vector containing the bits in range `[at,","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730279,"byte_end":730354,"line_start":925,"line_end":925,"column_start":2,"column_end":77}},{"value":"/ len)`. After the call, the original bit-vector will be left containing","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730356,"byte_end":730430,"line_start":926,"line_end":926,"column_start":2,"column_end":76}},{"value":"/ the bits `[0, at)` with its previous capacity unchanged.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730432,"byte_end":730492,"line_start":927,"line_end":927,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730494,"byte_end":730497,"line_start":928,"line_end":928,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730499,"byte_end":730513,"line_start":929,"line_end":929,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730515,"byte_end":730518,"line_start":930,"line_end":930,"column_start":2,"column_end":5}},{"value":"/ [`Vec::split_off`](alloc::vec::Vec::split_off)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730520,"byte_end":730570,"line_start":931,"line_end":931,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730572,"byte_end":730575,"line_start":932,"line_end":932,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730577,"byte_end":730589,"line_start":933,"line_end":933,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730591,"byte_end":730594,"line_start":934,"line_end":934,"column_start":2,"column_end":5}},{"value":"/ Panics if `at > len`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730596,"byte_end":730621,"line_start":935,"line_end":935,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730623,"byte_end":730626,"line_start":936,"line_end":936,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730628,"byte_end":730642,"line_start":937,"line_end":937,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730644,"byte_end":730647,"line_start":938,"line_end":938,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730649,"byte_end":730660,"line_start":939,"line_end":939,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730662,"byte_end":730689,"line_start":940,"line_end":940,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730691,"byte_end":730694,"line_start":941,"line_end":941,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730696,"byte_end":730730,"line_start":942,"line_end":942,"column_start":2,"column_end":36}},{"value":"/ let bv2 = bv.split_off(1);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730732,"byte_end":730762,"line_start":943,"line_end":943,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(bv, bits![0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730764,"byte_end":730793,"line_start":944,"line_end":944,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(bv2, bits![0, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730795,"byte_end":730828,"line_start":945,"line_end":945,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730830,"byte_end":730837,"line_start":946,"line_end":946,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730839,"byte_end":730848,"line_start":947,"line_end":947,"column_start":2,"column_end":11}},{"value":"must_use = \"use `.truncate()` if you don’t need the other half\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":730850,"byte_end":730918,"line_start":948,"line_end":948,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":4242},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732595,"byte_end":732606,"line_start":1002,"line_end":1002,"column_start":9,"column_end":20},"name":"resize_with","qualname":"<BitVec<O, T>>::resize_with","value":"pub fn resize_with<F>(&mut Self, usize, F) where F: FnMut() -> bool","parent":null,"children":[],"decl_id":null,"docs":" Resizes the `BitVec` in-place so that `len` is equal to `new_len`.","sig":null,"attributes":[{"value":"/ Resizes the `BitVec` in-place so that `len` is equal to `new_len`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":731279,"byte_end":731349,"line_start":964,"line_end":964,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":731351,"byte_end":731354,"line_start":965,"line_end":965,"column_start":2,"column_end":5}},{"value":"/ If `new_len` is greater than `len`, the `BitVec` is extended by the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":731356,"byte_end":731427,"line_start":966,"line_end":966,"column_start":2,"column_end":73}},{"value":"/ difference, with each additional slot filled with the result of calling","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":731429,"byte_end":731504,"line_start":967,"line_end":967,"column_start":2,"column_end":77}},{"value":"/ the closure `func`. The return values from `func` will end up in the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":731506,"byte_end":731578,"line_start":968,"line_end":968,"column_start":2,"column_end":74}},{"value":"/ `BitVec` in the order they have been generated.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":731580,"byte_end":731631,"line_start":969,"line_end":969,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":731633,"byte_end":731636,"line_start":970,"line_end":970,"column_start":2,"column_end":5}},{"value":"/ If `new_len` is less than `len`, the `BitVec` is simply truncated.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":731638,"byte_end":731708,"line_start":971,"line_end":971,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":731710,"byte_end":731713,"line_start":972,"line_end":972,"column_start":2,"column_end":5}},{"value":"/ This method uses a closure to create new values on every push. If you’d","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":731715,"byte_end":731792,"line_start":973,"line_end":973,"column_start":2,"column_end":77}},{"value":"/ rather [`Clone`] a given value, use [`resize`]. If you want to use the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":731794,"byte_end":731868,"line_start":974,"line_end":974,"column_start":2,"column_end":76}},{"value":"/ [`Default`] trait to generate values, you can pass","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":731870,"byte_end":731924,"line_start":975,"line_end":975,"column_start":2,"column_end":56}},{"value":"/ [`Default::default()`] as the second argument.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":731926,"byte_end":731976,"line_start":976,"line_end":976,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":731978,"byte_end":731981,"line_start":977,"line_end":977,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":731983,"byte_end":731997,"line_start":978,"line_end":978,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":731999,"byte_end":732002,"line_start":979,"line_end":979,"column_start":2,"column_end":5}},{"value":"/ [`Vec::resize_with`](alloc::vec::Vec::resize_with)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732004,"byte_end":732058,"line_start":980,"line_end":980,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732060,"byte_end":732063,"line_start":981,"line_end":981,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732065,"byte_end":732079,"line_start":982,"line_end":982,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732081,"byte_end":732084,"line_start":983,"line_end":983,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732086,"byte_end":732097,"line_start":984,"line_end":984,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732099,"byte_end":732126,"line_start":985,"line_end":985,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732128,"byte_end":732131,"line_start":986,"line_end":986,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1; 3];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732133,"byte_end":732164,"line_start":987,"line_end":987,"column_start":2,"column_end":33}},{"value":"/ bv.resize_with(5, Default::default);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732166,"byte_end":732206,"line_start":988,"line_end":988,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(bv, bits![1, 1, 1, 0, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732208,"byte_end":732249,"line_start":989,"line_end":989,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732251,"byte_end":732254,"line_start":990,"line_end":990,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732256,"byte_end":732283,"line_start":991,"line_end":991,"column_start":2,"column_end":29}},{"value":"/ let mut p = 0;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732285,"byte_end":732303,"line_start":992,"line_end":992,"column_start":2,"column_end":20}},{"value":"/ bv.resize_with(4, || { p += 1; p % 2 == 0 });","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732305,"byte_end":732354,"line_start":993,"line_end":993,"column_start":2,"column_end":51}},{"value":"/ assert_eq!(bv, bits![0, 1, 0, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732356,"byte_end":732394,"line_start":994,"line_end":994,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732396,"byte_end":732403,"line_start":995,"line_end":995,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732405,"byte_end":732408,"line_start":996,"line_end":996,"column_start":2,"column_end":5}},{"value":"/ [`Clone`]: core::clone::Clone","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732410,"byte_end":732443,"line_start":997,"line_end":997,"column_start":2,"column_end":35}},{"value":"/ [`Default`]: core::default::Default","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732445,"byte_end":732484,"line_start":998,"line_end":998,"column_start":2,"column_end":41}},{"value":"/ [`Default::default()`]: core::default::Default::default","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732486,"byte_end":732545,"line_start":999,"line_end":999,"column_start":2,"column_end":61}},{"value":"/ [`resize`]: Self::resize","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732547,"byte_end":732575,"line_start":1000,"line_end":1000,"column_start":2,"column_end":30}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732577,"byte_end":732586,"line_start":1001,"line_end":1001,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4244},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733660,"byte_end":733664,"line_start":1043,"line_end":1043,"column_start":9,"column_end":13},"name":"leak","qualname":"<BitVec<O, T>>::leak","value":"pub fn leak<'a>(Self) -> &'a mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Consumes and leaks the `BitVec`, returning a mutable reference to the\n contents, `&'a mut BitSlice<O, T>`. This lifetime may be chosen to be\n `'static`.","sig":null,"attributes":[{"value":"/ Consumes and leaks the `BitVec`, returning a mutable reference to the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732809,"byte_end":732882,"line_start":1013,"line_end":1013,"column_start":2,"column_end":75}},{"value":"/ contents, `&'a mut BitSlice<O, T>`. This lifetime may be chosen to be","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732884,"byte_end":732957,"line_start":1014,"line_end":1014,"column_start":2,"column_end":75}},{"value":"/ `'static`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732959,"byte_end":732973,"line_start":1015,"line_end":1015,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732975,"byte_end":732978,"line_start":1016,"line_end":1016,"column_start":2,"column_end":5}},{"value":"/ This function is similar to the [`leak`] function on [`BitBox`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":732980,"byte_end":733048,"line_start":1017,"line_end":1017,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733050,"byte_end":733053,"line_start":1018,"line_end":1018,"column_start":2,"column_end":5}},{"value":"/ This function is mainly useful for data that lives for the remainder of","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733055,"byte_end":733130,"line_start":1019,"line_end":1019,"column_start":2,"column_end":77}},{"value":"/ the program’s life. Dropping the returned reference will cause a memory","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733132,"byte_end":733209,"line_start":1020,"line_end":1020,"column_start":2,"column_end":77}},{"value":"/ leak.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733211,"byte_end":733220,"line_start":1021,"line_end":1021,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733222,"byte_end":733225,"line_start":1022,"line_end":1022,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733227,"byte_end":733241,"line_start":1023,"line_end":1023,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733243,"byte_end":733246,"line_start":1024,"line_end":1024,"column_start":2,"column_end":5}},{"value":"/ [`Vec::leak`](alloc::vec::Vec::leak)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733248,"byte_end":733288,"line_start":1025,"line_end":1025,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733290,"byte_end":733293,"line_start":1026,"line_end":1026,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733295,"byte_end":733309,"line_start":1027,"line_end":1027,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733311,"byte_end":733314,"line_start":1028,"line_end":1028,"column_start":2,"column_end":5}},{"value":"/ Simple usage:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733316,"byte_end":733333,"line_start":1029,"line_end":1029,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733335,"byte_end":733338,"line_start":1030,"line_end":1030,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733340,"byte_end":733351,"line_start":1031,"line_end":1031,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733353,"byte_end":733380,"line_start":1032,"line_end":1032,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733382,"byte_end":733385,"line_start":1033,"line_end":1033,"column_start":2,"column_end":5}},{"value":"/ let x = bitvec![0, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733387,"byte_end":733416,"line_start":1034,"line_end":1034,"column_start":2,"column_end":31}},{"value":"/ let static_ref: &'static mut BitSlice = x.leak();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733418,"byte_end":733471,"line_start":1035,"line_end":1035,"column_start":2,"column_end":55}},{"value":"/ static_ref.set(0, true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733473,"byte_end":733501,"line_start":1036,"line_end":1036,"column_start":2,"column_end":30}},{"value":"/ assert_eq!(static_ref, bits![1, 0, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733503,"byte_end":733546,"line_start":1037,"line_end":1037,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733548,"byte_end":733555,"line_start":1038,"line_end":1038,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733557,"byte_end":733560,"line_start":1039,"line_end":1039,"column_start":2,"column_end":5}},{"value":"/ [`BitBox`]: crate::boxed::BitBox","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733562,"byte_end":733598,"line_start":1040,"line_end":1040,"column_start":2,"column_end":38}},{"value":"/ [`leak`]: crate::boxed::BitBox::leak","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733600,"byte_end":733640,"line_start":1041,"line_end":1041,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733642,"byte_end":733651,"line_start":1042,"line_end":1042,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4246},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734560,"byte_end":734566,"line_start":1076,"line_end":1076,"column_start":9,"column_end":15},"name":"resize","qualname":"<BitVec<O, T>>::resize","value":"pub fn resize(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Resizes the `BitVec` in-place so that `len` is equal to `new_len`.","sig":null,"attributes":[{"value":"/ Resizes the `BitVec` in-place so that `len` is equal to `new_len`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733756,"byte_end":733826,"line_start":1047,"line_end":1047,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733828,"byte_end":733831,"line_start":1048,"line_end":1048,"column_start":2,"column_end":5}},{"value":"/ If `new_len` is greater than `len`, the `BitVec` is extended by the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733833,"byte_end":733904,"line_start":1049,"line_end":1049,"column_start":2,"column_end":73}},{"value":"/ difference, with each additional slot filled with `value`. If `new_len`","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733906,"byte_end":733981,"line_start":1050,"line_end":1050,"column_start":2,"column_end":77}},{"value":"/ is less than `len`, the `BitVec` is simply truncated.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":733983,"byte_end":734040,"line_start":1051,"line_end":1051,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734042,"byte_end":734045,"line_start":1052,"line_end":1052,"column_start":2,"column_end":5}},{"value":"/ This method requires a single `bool` value. If you need more","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734047,"byte_end":734111,"line_start":1053,"line_end":1053,"column_start":2,"column_end":66}},{"value":"/ flexibility, use [`resize_with`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734113,"byte_end":734150,"line_start":1054,"line_end":1054,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734152,"byte_end":734155,"line_start":1055,"line_end":1055,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734157,"byte_end":734171,"line_start":1056,"line_end":1056,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734173,"byte_end":734176,"line_start":1057,"line_end":1057,"column_start":2,"column_end":5}},{"value":"/ [`Vec::resize`](alloc::vec::Vec::resize)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734178,"byte_end":734222,"line_start":1058,"line_end":1058,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734224,"byte_end":734227,"line_start":1059,"line_end":1059,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734229,"byte_end":734243,"line_start":1060,"line_end":1060,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734245,"byte_end":734248,"line_start":1061,"line_end":1061,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734250,"byte_end":734261,"line_start":1062,"line_end":1062,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734263,"byte_end":734290,"line_start":1063,"line_end":1063,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734292,"byte_end":734295,"line_start":1064,"line_end":1064,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734297,"byte_end":734325,"line_start":1065,"line_end":1065,"column_start":2,"column_end":30}},{"value":"/ bv.resize(3, false);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734327,"byte_end":734351,"line_start":1066,"line_end":1066,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(bv, bits![1, 0, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734353,"byte_end":734388,"line_start":1067,"line_end":1067,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734390,"byte_end":734393,"line_start":1068,"line_end":1068,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![1; 4];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734395,"byte_end":734426,"line_start":1069,"line_end":1069,"column_start":2,"column_end":33}},{"value":"/ bv.resize(2, false);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734428,"byte_end":734452,"line_start":1070,"line_end":1070,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(bv, bits![1; 2]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734454,"byte_end":734486,"line_start":1071,"line_end":1071,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734488,"byte_end":734495,"line_start":1072,"line_end":1072,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734497,"byte_end":734500,"line_start":1073,"line_end":1073,"column_start":2,"column_end":5}},{"value":"/ [`resize_with`]: Self::resize_with","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734502,"byte_end":734540,"line_start":1074,"line_end":1074,"column_start":2,"column_end":40}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734542,"byte_end":734551,"line_start":1075,"line_end":1075,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":4248},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734971,"byte_end":734988,"line_start":1091,"line_end":1091,"column_start":9,"column_end":26},"name":"extend_from_slice","qualname":"<BitVec<O, T>>::extend_from_slice","value":"pub fn extend_from_slice<O2, T2>(&mut Self, &BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734764,"byte_end":734781,"line_start":1087,"line_end":1087,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734783,"byte_end":734813,"line_start":1088,"line_end":1088,"column_start":2,"column_end":32}},{"value":"deprecated =\n  \"Prefer `extend_from_bitslice`. If you need to extend from a \\\n\t                slice of `T` elements, use `extend_from_raw_slice`\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":734815,"byte_end":734962,"line_start":1089,"line_end":1090,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":4251},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":735262,"byte_end":735276,"line_start":1102,"line_end":1102,"column_start":9,"column_end":23},"name":"resize_default","qualname":"<BitVec<O, T>>::resize_default","value":"pub fn resize_default(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Resizes the `BitVec` in-place so that `len` is equal to `new_len`.\n","sig":null,"attributes":[{"value":"/ Resizes the `BitVec` in-place so that `len` is equal to `new_len`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":735117,"byte_end":735187,"line_start":1099,"line_end":1099,"column_start":2,"column_end":72}},{"value":"inline","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":735189,"byte_end":735198,"line_start":1100,"line_end":1100,"column_start":2,"column_end":11}},{"value":"deprecated = \"`Vec::resize_default` is deprecated\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":735200,"byte_end":735253,"line_start":1101,"line_end":1101,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":4252},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736956,"byte_end":736962,"line_start":1158,"line_end":1158,"column_start":9,"column_end":15},"name":"splice","qualname":"<BitVec<O, T>>::splice","value":"pub fn splice<R, I>(&mut Self, R, I) -> Splice<, O, T, I::IntoIter> where\nR: RangeBounds<usize>, I: IntoIterator<Item = bool>","parent":null,"children":[],"decl_id":null,"docs":" Creates a splicing iterator that replaces the specified range in the\n bit-vector with the given `replace_with` iterator and yields the removed\n items. `replace_with` does not need to be the same length as `range`.","sig":null,"attributes":[{"value":"/ Creates a splicing iterator that replaces the specified range in the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":735453,"byte_end":735525,"line_start":1112,"line_end":1112,"column_start":2,"column_end":74}},{"value":"/ bit-vector with the given `replace_with` iterator and yields the removed","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":735527,"byte_end":735603,"line_start":1113,"line_end":1113,"column_start":2,"column_end":78}},{"value":"/ items. `replace_with` does not need to be the same length as `range`.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":735605,"byte_end":735678,"line_start":1114,"line_end":1114,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":735680,"byte_end":735683,"line_start":1115,"line_end":1115,"column_start":2,"column_end":5}},{"value":"/ `range` is removed even if the iterator is not consumed until the end.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":735685,"byte_end":735759,"line_start":1116,"line_end":1116,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":735761,"byte_end":735764,"line_start":1117,"line_end":1117,"column_start":2,"column_end":5}},{"value":"/ It is unspecified how many bits are removed from the vector if the","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":735766,"byte_end":735836,"line_start":1118,"line_end":1118,"column_start":2,"column_end":72}},{"value":"/ [`Splice`] value is leaked.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":735838,"byte_end":735869,"line_start":1119,"line_end":1119,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":735871,"byte_end":735874,"line_start":1120,"line_end":1120,"column_start":2,"column_end":5}},{"value":"/ The input iterator `replace_with` is only consumed when the [`Splice`]","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":735876,"byte_end":735950,"line_start":1121,"line_end":1121,"column_start":2,"column_end":76}},{"value":"/ value is dropped.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":735952,"byte_end":735973,"line_start":1122,"line_end":1122,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":735975,"byte_end":735978,"line_start":1123,"line_end":1123,"column_start":2,"column_end":5}},{"value":"/ This is optimal if:","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":735980,"byte_end":736003,"line_start":1124,"line_end":1124,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736005,"byte_end":736008,"line_start":1125,"line_end":1125,"column_start":2,"column_end":5}},{"value":"/ - the tail (bits in the vector after `range`) is empty","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736010,"byte_end":736068,"line_start":1126,"line_end":1126,"column_start":2,"column_end":60}},{"value":"/ - or `replace_with` yields fewer bits than `range`’s length","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736070,"byte_end":736135,"line_start":1127,"line_end":1127,"column_start":2,"column_end":65}},{"value":"/ - or the lower bound of its [`size_hint`] is exact.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736137,"byte_end":736192,"line_start":1128,"line_end":1128,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736194,"byte_end":736197,"line_start":1129,"line_end":1129,"column_start":2,"column_end":5}},{"value":"/ Otherwise, a temporary bit-vector is allocated and the tail is moved","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736199,"byte_end":736271,"line_start":1130,"line_end":1130,"column_start":2,"column_end":74}},{"value":"/ twice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736273,"byte_end":736283,"line_start":1131,"line_end":1131,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736285,"byte_end":736288,"line_start":1132,"line_end":1132,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736290,"byte_end":736304,"line_start":1133,"line_end":1133,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736306,"byte_end":736309,"line_start":1134,"line_end":1134,"column_start":2,"column_end":5}},{"value":"/ [`Vec::splice`](alloc::vec::Vec::splice)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736311,"byte_end":736355,"line_start":1135,"line_end":1135,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736357,"byte_end":736360,"line_start":1136,"line_end":1136,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736362,"byte_end":736374,"line_start":1137,"line_end":1137,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736376,"byte_end":736379,"line_start":1138,"line_end":1138,"column_start":2,"column_end":5}},{"value":"/ Panics if the starting point is greater than the end point or if the end","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736381,"byte_end":736457,"line_start":1139,"line_end":1139,"column_start":2,"column_end":78}},{"value":"/ point is greater than the length of the bit-vector.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736459,"byte_end":736514,"line_start":1140,"line_end":1140,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736516,"byte_end":736519,"line_start":1141,"line_end":1141,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736521,"byte_end":736535,"line_start":1142,"line_end":1142,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736537,"byte_end":736540,"line_start":1143,"line_end":1143,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736542,"byte_end":736553,"line_start":1144,"line_end":1144,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736555,"byte_end":736582,"line_start":1145,"line_end":1145,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736584,"byte_end":736587,"line_start":1146,"line_end":1146,"column_start":2,"column_end":5}},{"value":"/ let mut bv = bitvec![0, 1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736589,"byte_end":736623,"line_start":1147,"line_end":1147,"column_start":2,"column_end":36}},{"value":"/ let new = bits![1, 0];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736625,"byte_end":736651,"line_start":1148,"line_end":1148,"column_start":2,"column_end":28}},{"value":"/ let old: BitVec = bv.splice(.. 2, new.iter().by_val()).collect();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736653,"byte_end":736722,"line_start":1149,"line_end":1149,"column_start":2,"column_end":71}},{"value":"/ assert_eq!(bv, bits![1, 0, 0]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736724,"byte_end":736759,"line_start":1150,"line_end":1150,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(old, bits![0, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736761,"byte_end":736794,"line_start":1151,"line_end":1151,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736796,"byte_end":736803,"line_start":1152,"line_end":1152,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736805,"byte_end":736808,"line_start":1153,"line_end":1153,"column_start":2,"column_end":5}},{"value":"/ [`Splice`]: crate::vec::Splice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736810,"byte_end":736844,"line_start":1154,"line_end":1154,"column_start":2,"column_end":36}},{"value":"/ [`size_hint`]: core::iter::Iterator::size_hint","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736846,"byte_end":736896,"line_start":1155,"line_end":1155,"column_start":2,"column_end":52}},{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736898,"byte_end":736915,"line_start":1156,"line_end":1156,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":736917,"byte_end":736947,"line_start":1157,"line_end":1157,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":4419},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":742492,"byte_end":742500,"line_start":255,"line_end":255,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::vec::iter::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":4422},{"krate":0,"index":4423},{"krate":0,"index":4424}],"decl_id":null,"docs":" An iterator that moves out of a [`BitVec`].","sig":null,"attributes":[{"value":"* An iterator that moves out of a [`BitVec`].\n\nThis `struct` is created by the [`into_iter`] method on [`BitVec`] (provided by\nthe [`IntoIterator`] trait).\n\n# Original\n\n[`vec::IntoIter`](alloc::vec::IntoIter)\n\n[`BitVec`]: crate::vec::BitVec\n[`IntoIterator`]: core::iter::IntoIterator\n[`into_iter`]: core::iter::IntoIterator::into_iter\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":742140,"byte_end":742480,"line_start":242,"line_end":254,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":4429},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":743869,"byte_end":743880,"line_start":309,"line_end":309,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<IntoIter<O, T>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining bits of this iterator as a [`BitSlice`].","sig":null,"attributes":[{"value":"/ Returns the remaining bits of this iterator as a [`BitSlice`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":743334,"byte_end":743400,"line_start":289,"line_end":289,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":743402,"byte_end":743405,"line_start":290,"line_end":290,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":743407,"byte_end":743421,"line_start":291,"line_end":291,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":743423,"byte_end":743426,"line_start":292,"line_end":292,"column_start":2,"column_end":5}},{"value":"/ [`vec::IntoIter::as_slice`](alloc::vec::IntoIter::as_slice)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":743428,"byte_end":743491,"line_start":293,"line_end":293,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":743493,"byte_end":743496,"line_start":294,"line_end":294,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":743498,"byte_end":743512,"line_start":295,"line_end":295,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":743514,"byte_end":743517,"line_start":296,"line_end":296,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":743519,"byte_end":743530,"line_start":297,"line_end":297,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":743532,"byte_end":743559,"line_start":298,"line_end":298,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":743561,"byte_end":743564,"line_start":299,"line_end":299,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":743566,"byte_end":743599,"line_start":300,"line_end":300,"column_start":2,"column_end":35}},{"value":"/ let mut into_iter = bv.into_iter();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":743601,"byte_end":743640,"line_start":301,"line_end":301,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":743642,"byte_end":743645,"line_start":302,"line_end":302,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(into_iter.as_bitslice(), bits![0, 1, 0, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":743647,"byte_end":743706,"line_start":303,"line_end":303,"column_start":2,"column_end":61}},{"value":"/ let _ = into_iter.next().unwrap();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":743708,"byte_end":743746,"line_start":304,"line_end":304,"column_start":2,"column_end":40}},{"value":"/ assert_eq!(into_iter.as_bitslice(), bits![1, 0, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":743748,"byte_end":743804,"line_start":305,"line_end":305,"column_start":2,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":743806,"byte_end":743813,"line_start":306,"line_end":306,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":743815,"byte_end":743818,"line_start":307,"line_end":307,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":743820,"byte_end":743860,"line_start":308,"line_end":308,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":4430},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744079,"byte_end":744087,"line_start":317,"line_end":317,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<IntoIter<O, T>>::as_slice","value":"pub fn as_slice(&Self) -> &BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":743956,"byte_end":743973,"line_start":314,"line_end":314,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpalin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":743975,"byte_end":744004,"line_start":315,"line_end":315,"column_start":2,"column_end":31}},{"value":"deprecated = \"Use `as_bitslice` to view the underlying slice\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744006,"byte_end":744070,"line_start":316,"line_end":316,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":4431},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744766,"byte_end":744781,"line_start":343,"line_end":343,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<IntoIter<O, T>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining bits of this iterator as a mutable [`BitSlice`].","sig":null,"attributes":[{"value":"/ Returns the remaining bits of this iterator as a mutable [`BitSlice`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744142,"byte_end":744216,"line_start":321,"line_end":321,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744218,"byte_end":744221,"line_start":322,"line_end":322,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744223,"byte_end":744237,"line_start":323,"line_end":323,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744239,"byte_end":744242,"line_start":324,"line_end":324,"column_start":2,"column_end":5}},{"value":"/ [`vec::IntoIter::as_mut_slice`](alloc::vec::IntoIter::as_mut_slice)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744244,"byte_end":744315,"line_start":325,"line_end":325,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744317,"byte_end":744320,"line_start":326,"line_end":326,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744322,"byte_end":744336,"line_start":327,"line_end":327,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744338,"byte_end":744341,"line_start":328,"line_end":328,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744343,"byte_end":744354,"line_start":329,"line_end":329,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744356,"byte_end":744383,"line_start":330,"line_end":330,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744385,"byte_end":744388,"line_start":331,"line_end":331,"column_start":2,"column_end":5}},{"value":"/ let bv = bitvec![0, 1, 0, 1];","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744390,"byte_end":744423,"line_start":332,"line_end":332,"column_start":2,"column_end":35}},{"value":"/ let mut into_iter = bv.into_iter();","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744425,"byte_end":744464,"line_start":333,"line_end":333,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744466,"byte_end":744469,"line_start":334,"line_end":334,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(into_iter.as_bitslice(), bits![0, 1, 0, 1]);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744471,"byte_end":744530,"line_start":335,"line_end":335,"column_start":2,"column_end":61}},{"value":"/ into_iter.as_mut_bitslice().set(2, true);","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744532,"byte_end":744577,"line_start":336,"line_end":336,"column_start":2,"column_end":47}},{"value":"/ assert!(!into_iter.next().unwrap());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744579,"byte_end":744619,"line_start":337,"line_end":337,"column_start":2,"column_end":42}},{"value":"/ assert!(into_iter.next().unwrap());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744621,"byte_end":744660,"line_start":338,"line_end":338,"column_start":2,"column_end":41}},{"value":"/ assert!(into_iter.next().unwrap());","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744662,"byte_end":744701,"line_start":339,"line_end":339,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744703,"byte_end":744710,"line_start":340,"line_end":340,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744712,"byte_end":744715,"line_start":341,"line_end":341,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744717,"byte_end":744757,"line_start":342,"line_end":342,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":4432},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":745094,"byte_end":745106,"line_start":353,"line_end":353,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<IntoIter<O, T>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744966,"byte_end":744983,"line_start":350,"line_end":350,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":744985,"byte_end":745015,"line_start":351,"line_end":351,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_mut_bitslice` to view the underlying slice\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":745017,"byte_end":745085,"line_start":352,"line_end":352,"column_start":2,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":4462},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":746874,"byte_end":746879,"line_start":452,"line_end":452,"column_start":12,"column_end":17},"name":"Drain","qualname":"::vec::iter::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":4466},{"krate":0,"index":4467},{"krate":0,"index":4468}],"decl_id":null,"docs":" A draining iterator for [`BitVec`].","sig":null,"attributes":[{"value":"* A draining iterator for [`BitVec`].\n\nThis `struct` is created by the [`.drain()`] method on [`BitVec`].\n\n# Original\n\n[`vec::Drain`](alloc::vec::Drain)\n\n[`BitVec`]: crate::vec::BitVec\n[`.drain()`]: crate::vec::BitVec::drain\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":746632,"byte_end":746862,"line_start":441,"line_end":451,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":4475},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":748589,"byte_end":748600,"line_start":514,"line_end":514,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<Drain>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remaining bits of this iterator as a [`BitSlice`].","sig":null,"attributes":[{"value":"/ Returns the remaining bits of this iterator as a [`BitSlice`].","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":748257,"byte_end":748323,"line_start":502,"line_end":502,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":748325,"byte_end":748328,"line_start":503,"line_end":503,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":748330,"byte_end":748344,"line_start":504,"line_end":504,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":748346,"byte_end":748349,"line_start":505,"line_end":505,"column_start":2,"column_end":5}},{"value":"/ [`Drain::as_slice`](alloc::vec::Drain::as_slice)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":748351,"byte_end":748403,"line_start":506,"line_end":506,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":748405,"byte_end":748408,"line_start":507,"line_end":507,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":748410,"byte_end":748431,"line_start":508,"line_end":508,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":748433,"byte_end":748436,"line_start":509,"line_end":509,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it operates on a [`BitSlice`] rather than an","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":748438,"byte_end":748513,"line_start":510,"line_end":510,"column_start":2,"column_end":77}},{"value":"/ element slice.","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":748515,"byte_end":748533,"line_start":511,"line_end":511,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":748535,"byte_end":748538,"line_start":512,"line_end":512,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":748540,"byte_end":748580,"line_start":513,"line_end":513,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":4476},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":748804,"byte_end":748812,"line_start":522,"line_end":522,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<Drain>::as_slice","value":"pub fn as_slice(&Self) -> &BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":748680,"byte_end":748697,"line_start":519,"line_end":519,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":748699,"byte_end":748729,"line_start":520,"line_end":520,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_bitslice` to view the underlying slice\"","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":748731,"byte_end":748795,"line_start":521,"line_end":521,"column_start":2,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":7890},"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":755026,"byte_end":755032,"line_start":777,"line_end":777,"column_start":12,"column_end":18},"name":"Splice","qualname":"::vec::iter::Splice","value":"Splice {  }","parent":null,"children":[{"krate":0,"index":7895},{"krate":0,"index":7896}],"decl_id":null,"docs":" A splicing iterator for [`BitVec`].","sig":null,"attributes":[{"value":"* A splicing iterator for [`BitVec`].\n\nThis struct is created by the [`.splice()`] method on [`BitVec`]. See its\ndocumentation for more.\n\n# Original\n\n[`vec::Splice`](alloc::vec::Splice)\n\n[`BitVec`]: crate::vec::BitVec\n[`.splice()`]: crate::vec::BitVec::splice\n**/","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":754732,"byte_end":754997,"line_start":764,"line_end":775,"column_start":1,"column_end":4}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48505,"byte_end":48506,"line_start":187,"line_end":187,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58117,"byte_end":58125,"line_start":160,"line_end":160,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":61774,"byte_end":61782,"line_start":57,"line_end":57,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":63438,"byte_end":63446,"line_start":129,"line_end":129,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":63656,"byte_end":63664,"line_start":142,"line_end":142,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":169},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":64299,"byte_end":64307,"line_start":178,"line_end":178,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":179}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":64652,"byte_end":64660,"line_start":195,"line_end":195,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":64801,"byte_end":64809,"line_start":206,"line_end":206,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":65178,"byte_end":65186,"line_start":25,"line_end":25,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":243},{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":65419,"byte_end":65427,"line_start":40,"line_end":40,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":249}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":65635,"byte_end":65643,"line_start":52,"line_end":52,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":65873,"byte_end":65881,"line_start":67,"line_end":67,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":260}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":66088,"byte_end":66096,"line_start":79,"line_end":79,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":66329,"byte_end":66337,"line_start":94,"line_end":94,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":66566,"byte_end":66574,"line_start":107,"line_end":107,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":276}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":66792,"byte_end":66800,"line_start":121,"line_end":121,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":280}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":66971,"byte_end":66979,"line_start":132,"line_end":132,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":285},{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":67253,"byte_end":67261,"line_start":146,"line_end":146,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":67480,"byte_end":67488,"line_start":158,"line_end":158,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":68167,"byte_end":68175,"line_start":39,"line_end":39,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":68388,"byte_end":68396,"line_start":51,"line_end":51,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":68567,"byte_end":68575,"line_start":62,"line_end":62,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":68845,"byte_end":68853,"line_start":79,"line_end":79,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":68917,"byte_end":68925,"line_start":86,"line_end":86,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":69122,"byte_end":69130,"line_start":97,"line_end":97,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":69316,"byte_end":69324,"line_start":109,"line_end":109,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":69549,"byte_end":69557,"line_start":122,"line_end":122,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":400}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":69780,"byte_end":69788,"line_start":134,"line_end":134,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":405}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":70080,"byte_end":70088,"line_start":148,"line_end":148,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":70297,"byte_end":70305,"line_start":160,"line_end":160,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":70505,"byte_end":70513,"line_start":172,"line_end":172,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":417}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":70680,"byte_end":70688,"line_start":183,"line_end":183,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":422},{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":72179,"byte_end":72187,"line_start":240,"line_end":240,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":72348,"byte_end":72356,"line_start":252,"line_end":252,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":443}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":72528,"byte_end":72536,"line_start":263,"line_end":263,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":447}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":72800,"byte_end":72808,"line_start":277,"line_end":277,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":73015,"byte_end":73023,"line_start":289,"line_end":289,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":455}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":73228,"byte_end":73236,"line_start":301,"line_end":301,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":459}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":73441,"byte_end":73449,"line_start":313,"line_end":313,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":73653,"byte_end":73661,"line_start":325,"line_end":325,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":73867,"byte_end":73875,"line_start":338,"line_end":338,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":74781,"byte_end":74789,"line_start":382,"line_end":382,"column_start":21,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":74862,"byte_end":74870,"line_start":389,"line_end":389,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":75316,"byte_end":75336,"line_start":413,"line_end":413,"column_start":16,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":75541,"byte_end":75561,"line_start":425,"line_end":425,"column_start":22,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":75820,"byte_end":75840,"line_start":439,"line_end":439,"column_start":24,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":508}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":76121,"byte_end":76141,"line_start":454,"line_end":454,"column_start":38,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89275,"byte_end":89284,"line_start":359,"line_end":359,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89392,"byte_end":89401,"line_start":369,"line_end":369,"column_start":21,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":97424,"byte_end":97430,"line_start":638,"line_end":638,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":97524,"byte_end":97530,"line_start":646,"line_end":646,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":622},{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":98177,"byte_end":98183,"line_start":673,"line_end":673,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":98806,"byte_end":98812,"line_start":698,"line_end":698,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":99074,"byte_end":99080,"line_start":711,"line_end":711,"column_start":39,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":99128,"byte_end":99134,"line_start":715,"line_end":715,"column_start":18,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124529,"byte_end":124537,"line_start":717,"line_end":717,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":714},{"krate":0,"index":716},{"krate":0,"index":718},{"krate":0,"index":720}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":134364,"byte_end":134372,"line_start":1031,"line_end":1031,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":724},{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":730}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":143396,"byte_end":143404,"line_start":1346,"line_end":1346,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":735},{"krate":0,"index":737},{"krate":0,"index":739},{"krate":0,"index":741}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":143908,"byte_end":143914,"line_start":1374,"line_end":1374,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":746},{"krate":0,"index":748},{"krate":0,"index":750},{"krate":0,"index":752}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":144412,"byte_end":144418,"line_start":1402,"line_end":1402,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":757},{"krate":0,"index":759},{"krate":0,"index":761},{"krate":0,"index":763}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field/io.rs","byte_start":154927,"byte_end":154933,"line_start":122,"line_end":122,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":827},{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160147,"byte_end":160153,"line_start":115,"line_end":115,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":882},{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":890},{"krate":0,"index":891},{"krate":0,"index":893},{"krate":0,"index":895},{"krate":0,"index":897},{"krate":0,"index":900},{"krate":0,"index":902},{"krate":0,"index":903}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":169452,"byte_end":169458,"line_start":414,"line_end":414,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":906},{"krate":0,"index":907}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":169615,"byte_end":169621,"line_start":424,"line_end":424,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":910}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":169779,"byte_end":169785,"line_start":432,"line_end":432,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":913}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":169983,"byte_end":169989,"line_start":441,"line_end":441,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":916}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170491,"byte_end":170502,"line_start":464,"line_end":464,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":919},{"krate":0,"index":920}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":171277,"byte_end":171288,"line_start":501,"line_end":501,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":923}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":171493,"byte_end":171504,"line_start":510,"line_end":510,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":926}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":171775,"byte_end":171786,"line_start":525,"line_end":525,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":173445,"byte_end":173452,"line_start":575,"line_end":575,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":936},{"krate":0,"index":939}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":177750,"byte_end":177757,"line_start":730,"line_end":730,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":942}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":177919,"byte_end":177926,"line_start":738,"line_end":738,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":945}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":178125,"byte_end":178132,"line_start":747,"line_end":747,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":948}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179689,"byte_end":179695,"line_start":798,"line_end":798,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181762,"byte_end":181768,"line_start":882,"line_end":882,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":961}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181926,"byte_end":181932,"line_start":890,"line_end":890,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182130,"byte_end":182136,"line_start":899,"line_end":899,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":967}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183442,"byte_end":183448,"line_start":948,"line_end":948,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":185500,"byte_end":185506,"line_start":1024,"line_end":1024,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":978}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":185664,"byte_end":185670,"line_start":1032,"line_end":1032,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":981}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":185868,"byte_end":185874,"line_start":1041,"line_end":1041,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":186789,"byte_end":186796,"line_start":1078,"line_end":1078,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":987},{"krate":0,"index":988},{"krate":0,"index":989},{"krate":0,"index":990},{"krate":0,"index":991},{"krate":0,"index":992},{"krate":0,"index":993}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188772,"byte_end":188779,"line_start":1164,"line_end":1164,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":996}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188938,"byte_end":188945,"line_start":1172,"line_end":1172,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":999}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":189144,"byte_end":189151,"line_start":1181,"line_end":1181,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1002}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":189309,"byte_end":189316,"line_start":1190,"line_end":1190,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1005}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":189477,"byte_end":189484,"line_start":1199,"line_end":1199,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1009},{"krate":0,"index":1010}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":189642,"byte_end":189649,"line_start":1211,"line_end":1211,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1013},{"krate":0,"index":1014}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":189801,"byte_end":189808,"line_start":1223,"line_end":1223,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1017},{"krate":0,"index":1018}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":205407,"byte_end":205412,"line_start":14,"line_end":14,"column_start":21,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":205440,"byte_end":205445,"line_start":17,"line_end":17,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":205728,"byte_end":205731,"line_start":26,"line_end":26,"column_start":21,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":205759,"byte_end":205762,"line_start":29,"line_end":29,"column_start":23,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":214600,"byte_end":214604,"line_start":264,"line_end":264,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1089},{"krate":0,"index":1091},{"krate":0,"index":1093}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":215811,"byte_end":215815,"line_start":307,"line_end":307,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1098},{"krate":0,"index":1100},{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":245978,"byte_end":245985,"line_start":67,"line_end":67,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1273},{"krate":0,"index":1274},{"krate":0,"index":1276},{"krate":0,"index":1277},{"krate":0,"index":1278},{"krate":0,"index":1279},{"krate":0,"index":1280},{"krate":0,"index":1281},{"krate":0,"index":1282},{"krate":0,"index":1283},{"krate":0,"index":1284},{"krate":0,"index":1285}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":249292,"byte_end":249299,"line_start":206,"line_end":206,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1288},{"krate":0,"index":1289}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":249735,"byte_end":249742,"line_start":224,"line_end":224,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1293}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":249899,"byte_end":249906,"line_start":236,"line_end":236,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1296}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":250105,"byte_end":250112,"line_start":249,"line_end":249,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1299}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":250318,"byte_end":250325,"line_start":262,"line_end":262,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1302},{"krate":0,"index":1303}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":250559,"byte_end":250566,"line_start":274,"line_end":274,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1306},{"krate":0,"index":1307}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":250755,"byte_end":250762,"line_start":285,"line_end":285,"column_start":19,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":250893,"byte_end":250900,"line_start":293,"line_end":293,"column_start":53,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1316}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":251186,"byte_end":251193,"line_start":308,"line_end":308,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1320}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":251460,"byte_end":251467,"line_start":321,"line_end":321,"column_start":54,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1326}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":251814,"byte_end":251821,"line_start":338,"line_end":338,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1330}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":252034,"byte_end":252041,"line_start":350,"line_end":350,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1334}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":252253,"byte_end":252260,"line_start":362,"line_end":362,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1338}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":252428,"byte_end":252435,"line_start":374,"line_end":374,"column_start":21,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":252831,"byte_end":252843,"line_start":392,"line_end":392,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1345}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":252986,"byte_end":252998,"line_start":400,"line_end":400,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1348}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":253460,"byte_end":253472,"line_start":421,"line_end":421,"column_start":31,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":256892,"byte_end":256898,"line_start":128,"line_end":128,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1439},{"krate":0,"index":1441},{"krate":0,"index":1443}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258413,"byte_end":258419,"line_start":195,"line_end":195,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1447},{"krate":0,"index":1448},{"krate":0,"index":1451},{"krate":0,"index":1452}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":260112,"byte_end":260118,"line_start":260,"line_end":260,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1456}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":260327,"byte_end":260333,"line_start":272,"line_end":272,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":260518,"byte_end":260524,"line_start":282,"line_end":282,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1465}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":261023,"byte_end":261029,"line_start":302,"line_end":302,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1473}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":261320,"byte_end":261326,"line_start":318,"line_end":318,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1478}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":261543,"byte_end":261549,"line_start":331,"line_end":331,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1483}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":262015,"byte_end":262021,"line_start":351,"line_end":351,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1491}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":262358,"byte_end":262364,"line_start":370,"line_end":370,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1496}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":262617,"byte_end":262623,"line_start":383,"line_end":383,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1501}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":262835,"byte_end":262841,"line_start":395,"line_end":395,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1506}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":263138,"byte_end":263144,"line_start":409,"line_end":409,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1511}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":263377,"byte_end":263383,"line_start":422,"line_end":422,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1516}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":263615,"byte_end":263621,"line_start":435,"line_end":435,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1521}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":264016,"byte_end":264022,"line_start":454,"line_end":454,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1527},{"krate":0,"index":1528}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":264239,"byte_end":264245,"line_start":469,"line_end":469,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1532}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":264410,"byte_end":264416,"line_start":480,"line_end":480,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1537}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":264786,"byte_end":264792,"line_start":499,"line_end":499,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1542},{"krate":0,"index":1543}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268322,"byte_end":268333,"line_start":79,"line_end":79,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1614},{"krate":0,"index":1615},{"krate":0,"index":1616},{"krate":0,"index":1617},{"krate":0,"index":1618},{"krate":0,"index":1621},{"krate":0,"index":1622},{"krate":0,"index":1623}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":271983,"byte_end":271994,"line_start":215,"line_end":215,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1628}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":272148,"byte_end":272159,"line_start":227,"line_end":227,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":272318,"byte_end":272329,"line_start":237,"line_end":237,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1639}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":272697,"byte_end":272708,"line_start":255,"line_end":255,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1644}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":272911,"byte_end":272922,"line_start":268,"line_end":268,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1649}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":273174,"byte_end":273185,"line_start":281,"line_end":281,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1654}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":273390,"byte_end":273401,"line_start":294,"line_end":294,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1659}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":273750,"byte_end":273761,"line_start":310,"line_end":310,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1664}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":273970,"byte_end":273981,"line_start":324,"line_end":324,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1670},{"krate":0,"index":1671},{"krate":0,"index":1672},{"krate":0,"index":1673},{"krate":0,"index":1674},{"krate":0,"index":1675}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":274776,"byte_end":274787,"line_start":369,"line_end":369,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1680},{"krate":0,"index":1681}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":275254,"byte_end":275265,"line_start":395,"line_end":395,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1686}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":275501,"byte_end":275512,"line_start":407,"line_end":407,"column_start":33,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":275655,"byte_end":275666,"line_start":416,"line_end":416,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1695},{"krate":0,"index":1696}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278840,"byte_end":278846,"line_start":120,"line_end":120,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1815},{"krate":0,"index":1816},{"krate":0,"index":1817},{"krate":0,"index":1819},{"krate":0,"index":1820},{"krate":0,"index":1821},{"krate":0,"index":1822},{"krate":0,"index":1823},{"krate":0,"index":1824},{"krate":0,"index":1826},{"krate":0,"index":1827},{"krate":0,"index":1828},{"krate":0,"index":1829},{"krate":0,"index":1831},{"krate":0,"index":1833},{"krate":0,"index":1834},{"krate":0,"index":1835},{"krate":0,"index":1836},{"krate":0,"index":1837},{"krate":0,"index":1838},{"krate":0,"index":1839},{"krate":0,"index":1840},{"krate":0,"index":1841},{"krate":0,"index":1842},{"krate":0,"index":1845},{"krate":0,"index":1848}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301628,"byte_end":301634,"line_start":867,"line_end":867,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1852},{"krate":0,"index":1853},{"krate":0,"index":1854},{"krate":0,"index":1855}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303612,"byte_end":303618,"line_start":942,"line_end":942,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1859},{"krate":0,"index":1860},{"krate":0,"index":1861},{"krate":0,"index":1862},{"krate":0,"index":1863},{"krate":0,"index":1865},{"krate":0,"index":1868},{"krate":0,"index":1871},{"krate":0,"index":1872},{"krate":0,"index":1873},{"krate":0,"index":1874}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311793,"byte_end":311799,"line_start":1226,"line_end":1226,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1881}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311984,"byte_end":311990,"line_start":1241,"line_end":1241,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":312108,"byte_end":312114,"line_start":1250,"line_end":1250,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1890}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":312436,"byte_end":312442,"line_start":1265,"line_end":1265,"column_start":58,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1897}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":312876,"byte_end":312882,"line_start":1284,"line_end":1284,"column_start":59,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1904}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":313389,"byte_end":313395,"line_start":1307,"line_end":1307,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1908}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":313589,"byte_end":313595,"line_start":1319,"line_end":1319,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1912}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":313796,"byte_end":313802,"line_start":1331,"line_end":1331,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1916},{"krate":0,"index":1917}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":314055,"byte_end":314061,"line_start":1345,"line_end":1345,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1921},{"krate":0,"index":1922}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":314272,"byte_end":314278,"line_start":1358,"line_end":1358,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1927}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":314719,"byte_end":314725,"line_start":1380,"line_end":1380,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1932}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":315012,"byte_end":315018,"line_start":1395,"line_end":1395,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1937}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":315229,"byte_end":315235,"line_start":1409,"line_end":1409,"column_start":24,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":315691,"byte_end":315702,"line_start":1429,"line_end":1429,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1945}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":315889,"byte_end":315900,"line_start":1439,"line_end":1439,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1948}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":316080,"byte_end":316091,"line_start":1449,"line_end":1449,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1951}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":316284,"byte_end":316295,"line_start":1459,"line_end":1459,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1954}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":316548,"byte_end":316559,"line_start":1471,"line_end":1471,"column_start":25,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":316610,"byte_end":316621,"line_start":1475,"line_end":1475,"column_start":25,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":316702,"byte_end":316713,"line_start":1480,"line_end":1480,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":324501,"byte_end":324508,"line_start":203,"line_end":203,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":2060},{"krate":0,"index":2061},{"krate":0,"index":2062},{"krate":0,"index":2063},{"krate":0,"index":2064},{"krate":0,"index":2065},{"krate":0,"index":2066},{"krate":0,"index":2067},{"krate":0,"index":2068},{"krate":0,"index":2069},{"krate":0,"index":2070},{"krate":0,"index":2071},{"krate":0,"index":2072},{"krate":0,"index":2073},{"krate":0,"index":2075},{"krate":0,"index":2077},{"krate":0,"index":2079},{"krate":0,"index":2080},{"krate":0,"index":2082},{"krate":0,"index":2083},{"krate":0,"index":2084},{"krate":0,"index":2085},{"krate":0,"index":2086},{"krate":0,"index":2087},{"krate":0,"index":2088},{"krate":0,"index":2089},{"krate":0,"index":2090},{"krate":0,"index":2091}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":344934,"byte_end":344941,"line_start":880,"line_end":880,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2097},{"krate":0,"index":2098}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":346463,"byte_end":346470,"line_start":935,"line_end":935,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":2102},{"krate":0,"index":2103}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":347802,"byte_end":347809,"line_start":980,"line_end":980,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2109}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":347933,"byte_end":347940,"line_start":991,"line_end":991,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":348063,"byte_end":348070,"line_start":999,"line_end":999,"column_start":59,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2120}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":348672,"byte_end":348679,"line_start":1020,"line_end":1020,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2125}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":348859,"byte_end":348866,"line_start":1033,"line_end":1033,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2130}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":349089,"byte_end":349096,"line_start":1046,"line_end":1046,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2135}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":349291,"byte_end":349298,"line_start":1058,"line_end":1058,"column_start":24,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":349794,"byte_end":349806,"line_start":1080,"line_end":1080,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2142}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":349982,"byte_end":349994,"line_start":1090,"line_end":1090,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2145}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":350185,"byte_end":350197,"line_start":1100,"line_end":1100,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2148}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":350713,"byte_end":350725,"line_start":1122,"line_end":1122,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2151}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":351218,"byte_end":351230,"line_start":1143,"line_end":1143,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":351281,"byte_end":351293,"line_start":1147,"line_end":1147,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":351374,"byte_end":351386,"line_start":1152,"line_end":1152,"column_start":31,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372561,"byte_end":372569,"line_start":458,"line_end":458,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2354},{"krate":0,"index":2355},{"krate":0,"index":2356},{"krate":0,"index":2357},{"krate":0,"index":2358},{"krate":0,"index":2359},{"krate":0,"index":2360},{"krate":0,"index":2362},{"krate":0,"index":2364},{"krate":0,"index":2365},{"krate":0,"index":2366},{"krate":0,"index":2370},{"krate":0,"index":2374},{"krate":0,"index":2375},{"krate":0,"index":2376},{"krate":0,"index":2377},{"krate":0,"index":2381},{"krate":0,"index":2385},{"krate":0,"index":2386},{"krate":0,"index":2387},{"krate":0,"index":2388},{"krate":0,"index":2389},{"krate":0,"index":2390},{"krate":0,"index":2391},{"krate":0,"index":2392},{"krate":0,"index":2393},{"krate":0,"index":2395},{"krate":0,"index":2397},{"krate":0,"index":2400},{"krate":0,"index":2401},{"krate":0,"index":2404},{"krate":0,"index":2405},{"krate":0,"index":2406},{"krate":0,"index":2407},{"krate":0,"index":2409},{"krate":0,"index":2410}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411168,"byte_end":411176,"line_start":1889,"line_end":1889,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2414},{"krate":0,"index":2415},{"krate":0,"index":2416},{"krate":0,"index":2417},{"krate":0,"index":2418},{"krate":0,"index":2419}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418002,"byte_end":418010,"line_start":2121,"line_end":2121,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2424},{"krate":0,"index":2425},{"krate":0,"index":2426},{"krate":0,"index":2427},{"krate":0,"index":2428},{"krate":0,"index":2429},{"krate":0,"index":2430},{"krate":0,"index":2431},{"krate":0,"index":2432}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429849,"byte_end":429857,"line_start":2480,"line_end":2480,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2436},{"krate":0,"index":2437},{"krate":0,"index":2438},{"krate":0,"index":2439},{"krate":0,"index":2440},{"krate":0,"index":2441},{"krate":0,"index":2442}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432469,"byte_end":432477,"line_start":2562,"line_end":2562,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2446}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":433192,"byte_end":433200,"line_start":2588,"line_end":2588,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2450},{"krate":0,"index":2451}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434546,"byte_end":434554,"line_start":2621,"line_end":2621,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2455}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438563,"byte_end":438571,"line_start":68,"line_end":68,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2605},{"krate":0,"index":2606},{"krate":0,"index":2607},{"krate":0,"index":2608},{"krate":0,"index":2609},{"krate":0,"index":2610},{"krate":0,"index":2611},{"krate":0,"index":2612},{"krate":0,"index":2613},{"krate":0,"index":2614},{"krate":0,"index":2615},{"krate":0,"index":2618},{"krate":0,"index":2621},{"krate":0,"index":2624},{"krate":0,"index":2627},{"krate":0,"index":2628},{"krate":0,"index":2629},{"krate":0,"index":2630},{"krate":0,"index":2631},{"krate":0,"index":2632},{"krate":0,"index":2633},{"krate":0,"index":2634},{"krate":0,"index":2635},{"krate":0,"index":2636},{"krate":0,"index":2637},{"krate":0,"index":2638},{"krate":0,"index":2639},{"krate":0,"index":2640},{"krate":0,"index":2641},{"krate":0,"index":2642},{"krate":0,"index":2643},{"krate":0,"index":2644},{"krate":0,"index":2645},{"krate":0,"index":2646},{"krate":0,"index":2648},{"krate":0,"index":2650},{"krate":0,"index":2652},{"krate":0,"index":2654},{"krate":0,"index":2656},{"krate":0,"index":2658},{"krate":0,"index":2660},{"krate":0,"index":2662},{"krate":0,"index":2666},{"krate":0,"index":2669},{"krate":0,"index":2672},{"krate":0,"index":2673},{"krate":0,"index":2674},{"krate":0,"index":2677},{"krate":0,"index":2678},{"krate":0,"index":2680},{"krate":0,"index":2683},{"krate":0,"index":2685}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501253,"byte_end":501261,"line_start":2126,"line_end":2126,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2690},{"krate":0,"index":2691}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":518078,"byte_end":518087,"line_start":2720,"line_end":2720,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2737},{"krate":0,"index":2738},{"krate":0,"index":2739},{"krate":0,"index":2740},{"krate":0,"index":2741},{"krate":0,"index":2742},{"krate":0,"index":2743},{"krate":0,"index":2744}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":520463,"byte_end":520467,"line_start":105,"line_end":105,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2831},{"krate":0,"index":2832},{"krate":0,"index":2833},{"krate":0,"index":2834},{"krate":0,"index":2837},{"krate":0,"index":2840}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":524903,"byte_end":524907,"line_start":277,"line_end":277,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2845}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":525078,"byte_end":525082,"line_start":290,"line_end":290,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2849}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":525247,"byte_end":525251,"line_start":301,"line_end":301,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2853}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":526365,"byte_end":526372,"line_start":353,"line_end":353,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2864},{"krate":0,"index":2865},{"krate":0,"index":2866},{"krate":0,"index":2867}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":528464,"byte_end":528471,"line_start":434,"line_end":434,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2871}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":539997,"byte_end":540008,"line_start":944,"line_end":944,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2878},{"krate":0,"index":2879}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":543115,"byte_end":543129,"line_start":1070,"line_end":1070,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2884},{"krate":0,"index":2885}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":552373,"byte_end":552385,"line_start":1420,"line_end":1420,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2890},{"krate":0,"index":2891}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":555581,"byte_end":555596,"line_start":1546,"line_end":1546,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2896},{"krate":0,"index":2897}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":572149,"byte_end":572157,"line_start":2261,"line_end":2261,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2951}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":572332,"byte_end":572340,"line_start":2274,"line_end":2274,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2955}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":572497,"byte_end":572505,"line_start":2287,"line_end":2287,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2959},{"krate":0,"index":2960},{"krate":0,"index":2962},{"krate":0,"index":2963},{"krate":0,"index":2964}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573699,"byte_end":573707,"line_start":2343,"line_end":2343,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2968}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":574450,"byte_end":574458,"line_start":2379,"line_end":2379,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2973}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":574592,"byte_end":574600,"line_start":2389,"line_end":2389,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":575203,"byte_end":575212,"line_start":2415,"line_end":2415,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2981}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":575387,"byte_end":575396,"line_start":2428,"line_end":2428,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2985}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":575553,"byte_end":575562,"line_start":2441,"line_end":2441,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2989},{"krate":0,"index":2990},{"krate":0,"index":2992},{"krate":0,"index":2993},{"krate":0,"index":2994}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":576582,"byte_end":576591,"line_start":2494,"line_end":2494,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2998}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":577337,"byte_end":577346,"line_start":2530,"line_end":2530,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3003}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":577481,"byte_end":577490,"line_start":2540,"line_end":2540,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/ops.rs","byte_start":584362,"byte_end":584370,"line_start":29,"line_end":29,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3070}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/ops.rs","byte_start":584626,"byte_end":584634,"line_start":41,"line_end":41,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3076}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/ops.rs","byte_start":584890,"byte_end":584898,"line_start":53,"line_end":53,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":3082}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/ops.rs","byte_start":585145,"byte_end":585153,"line_start":65,"line_end":65,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3087},{"krate":0,"index":3088}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/specialization.rs","byte_start":588237,"byte_end":588245,"line_start":38,"line_end":38,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3134},{"krate":0,"index":3135},{"krate":0,"index":3137},{"krate":0,"index":3139},{"krate":0,"index":3140},{"krate":0,"index":3143},{"krate":0,"index":3144}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/specialization.rs","byte_start":596460,"byte_end":596468,"line_start":328,"line_end":328,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3149},{"krate":0,"index":3150},{"krate":0,"index":3152},{"krate":0,"index":3154},{"krate":0,"index":3155},{"krate":0,"index":3156},{"krate":0,"index":3157}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":603697,"byte_end":603705,"line_start":45,"line_end":45,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":603770,"byte_end":603778,"line_start":52,"line_end":52,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3245}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":604269,"byte_end":604277,"line_start":70,"line_end":70,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3251}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":605761,"byte_end":605769,"line_start":143,"line_end":143,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3271}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":605976,"byte_end":605984,"line_start":155,"line_end":155,"column_start":59,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":3277}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":606541,"byte_end":606549,"line_start":174,"line_end":174,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3283}],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":607554,"byte_end":607562,"line_start":221,"line_end":221,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3301}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":607809,"byte_end":607817,"line_start":233,"line_end":233,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":3307}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":609368,"byte_end":609376,"line_start":316,"line_end":316,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3345}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":609599,"byte_end":609607,"line_start":328,"line_end":328,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3349}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":615482,"byte_end":615490,"line_start":499,"line_end":499,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3354}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":616749,"byte_end":616757,"line_start":534,"line_end":534,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":617933,"byte_end":617941,"line_start":564,"line_end":564,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":618043,"byte_end":618051,"line_start":572,"line_end":572,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3365},{"krate":0,"index":3366}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637377,"byte_end":637378,"line_start":119,"line_end":119,"column_start":21,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3533},{"krate":0,"index":3534},{"krate":0,"index":3536},{"krate":0,"index":3538}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":642588,"byte_end":642589,"line_start":335,"line_end":335,"column_start":26,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3568}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":642813,"byte_end":642814,"line_start":348,"line_end":348,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3573}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648267,"byte_end":648273,"line_start":135,"line_end":135,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3629},{"krate":0,"index":3630},{"krate":0,"index":3631},{"krate":0,"index":3634},{"krate":0,"index":3636},{"krate":0,"index":3638},{"krate":0,"index":3639},{"krate":0,"index":3640},{"krate":0,"index":3641},{"krate":0,"index":3642},{"krate":0,"index":3643}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":658752,"byte_end":658758,"line_start":20,"line_end":20,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":3683},{"krate":0,"index":3684},{"krate":0,"index":3685},{"krate":0,"index":3686},{"krate":0,"index":3687},{"krate":0,"index":3689}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":664959,"byte_end":664965,"line_start":27,"line_end":27,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3746},{"krate":0,"index":3747}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":665192,"byte_end":665198,"line_start":42,"line_end":42,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3752}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":665400,"byte_end":665406,"line_start":54,"line_end":54,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3757},{"krate":0,"index":3758}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":665630,"byte_end":665636,"line_start":69,"line_end":69,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3763}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":665837,"byte_end":665843,"line_start":81,"line_end":81,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3768},{"krate":0,"index":3769}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":666070,"byte_end":666076,"line_start":96,"line_end":96,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3774}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":666299,"byte_end":666305,"line_start":109,"line_end":109,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3778},{"krate":0,"index":3779}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":666517,"byte_end":666523,"line_start":123,"line_end":123,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3783}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":666684,"byte_end":666690,"line_start":134,"line_end":134,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3787}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":666953,"byte_end":666959,"line_start":147,"line_end":147,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3793},{"krate":0,"index":3794}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":667251,"byte_end":667257,"line_start":162,"line_end":162,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3799}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":667501,"byte_end":667507,"line_start":175,"line_end":175,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3803},{"krate":0,"index":3804}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":668231,"byte_end":668237,"line_start":42,"line_end":42,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":3886}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":668437,"byte_end":668443,"line_start":54,"line_end":54,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":3890}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":668639,"byte_end":668645,"line_start":66,"line_end":66,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3894}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":668797,"byte_end":668803,"line_start":77,"line_end":77,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":668899,"byte_end":668905,"line_start":85,"line_end":85,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3901}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":669141,"byte_end":669149,"line_start":97,"line_end":97,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3907}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":669920,"byte_end":669926,"line_start":139,"line_end":139,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":3924}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":670178,"byte_end":670186,"line_start":152,"line_end":152,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":3930}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":670461,"byte_end":670467,"line_start":166,"line_end":166,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3935}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":671358,"byte_end":671364,"line_start":207,"line_end":207,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3953}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":671559,"byte_end":671565,"line_start":219,"line_end":219,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3957}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":671780,"byte_end":671786,"line_start":231,"line_end":231,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":3962}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":671994,"byte_end":672000,"line_start":243,"line_end":243,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3966}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":672193,"byte_end":672199,"line_start":255,"line_end":255,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":3970}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":672386,"byte_end":672392,"line_start":267,"line_end":267,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3974},{"krate":0,"index":3975}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":672636,"byte_end":672642,"line_start":281,"line_end":281,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3979}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":672809,"byte_end":672815,"line_start":294,"line_end":294,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3983}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":673059,"byte_end":673065,"line_start":308,"line_end":308,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3987}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":673271,"byte_end":673277,"line_start":320,"line_end":320,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3991}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":673484,"byte_end":673490,"line_start":332,"line_end":332,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3995}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":673696,"byte_end":673702,"line_start":344,"line_end":344,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3999}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":673907,"byte_end":673913,"line_start":356,"line_end":356,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4003}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":674126,"byte_end":674132,"line_start":368,"line_end":368,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4007}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":674337,"byte_end":674343,"line_start":380,"line_end":380,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4011}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":674655,"byte_end":674661,"line_start":395,"line_end":395,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4016},{"krate":0,"index":4017},{"krate":0,"index":4018}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":674942,"byte_end":674948,"line_start":409,"line_end":409,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":675021,"byte_end":675027,"line_start":416,"line_end":416,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":675094,"byte_end":675100,"line_start":423,"line_end":423,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683407,"byte_end":683413,"line_start":265,"line_end":265,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4105},{"krate":0,"index":4106},{"krate":0,"index":4107},{"krate":0,"index":4108},{"krate":0,"index":4111},{"krate":0,"index":4114},{"krate":0,"index":4115},{"krate":0,"index":4116},{"krate":0,"index":4117},{"krate":0,"index":4118},{"krate":0,"index":4120},{"krate":0,"index":4121},{"krate":0,"index":4123},{"krate":0,"index":4124},{"krate":0,"index":4125},{"krate":0,"index":4126},{"krate":0,"index":4127},{"krate":0,"index":4128},{"krate":0,"index":4129},{"krate":0,"index":4130},{"krate":0,"index":4131},{"krate":0,"index":4132},{"krate":0,"index":4133},{"krate":0,"index":4134},{"krate":0,"index":4138}],"docs":"","sig":null,"attributes":[]},{"id":312,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":705878,"byte_end":705884,"line_start":41,"line_end":41,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":4209},{"krate":0,"index":4210},{"krate":0,"index":4211},{"krate":0,"index":4212},{"krate":0,"index":4213},{"krate":0,"index":4214},{"krate":0,"index":4215},{"krate":0,"index":4216},{"krate":0,"index":4218},{"krate":0,"index":4219},{"krate":0,"index":4220},{"krate":0,"index":4221},{"krate":0,"index":4222},{"krate":0,"index":4223},{"krate":0,"index":4224},{"krate":0,"index":4225},{"krate":0,"index":4226},{"krate":0,"index":4227},{"krate":0,"index":4228},{"krate":0,"index":4230},{"krate":0,"index":4232},{"krate":0,"index":4233},{"krate":0,"index":4236},{"krate":0,"index":4238},{"krate":0,"index":4239},{"krate":0,"index":4240},{"krate":0,"index":4241},{"krate":0,"index":4242},{"krate":0,"index":4244},{"krate":0,"index":4246},{"krate":0,"index":4248},{"krate":0,"index":4251},{"krate":0,"index":4252},{"krate":0,"index":4255}],"docs":"","sig":null,"attributes":[]},{"id":313,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":737958,"byte_end":737964,"line_start":47,"line_end":47,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4336}],"docs":"","sig":null,"attributes":[]},{"id":314,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":738686,"byte_end":738692,"line_start":78,"line_end":78,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4343}],"docs":"","sig":null,"attributes":[]},{"id":315,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":738921,"byte_end":738927,"line_start":89,"line_end":89,"column_start":63,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":4352}],"docs":"","sig":null,"attributes":[]},{"id":316,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":739189,"byte_end":739195,"line_start":103,"line_end":103,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":4358}],"docs":"","sig":null,"attributes":[]},{"id":317,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":739438,"byte_end":739444,"line_start":116,"line_end":116,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4364}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":739691,"byte_end":739697,"line_start":129,"line_end":129,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4369}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":739943,"byte_end":739949,"line_start":141,"line_end":141,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4379}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":740235,"byte_end":740241,"line_start":155,"line_end":155,"column_start":43,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":4386}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":740720,"byte_end":740726,"line_start":174,"line_end":174,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4391}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":740943,"byte_end":740949,"line_start":185,"line_end":185,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4397}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":741380,"byte_end":741386,"line_start":203,"line_end":203,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4402},{"krate":0,"index":4403},{"krate":0,"index":4404}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":742821,"byte_end":742829,"line_start":270,"line_end":270,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4428},{"krate":0,"index":4429},{"krate":0,"index":4430},{"krate":0,"index":4431},{"krate":0,"index":4432}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":745226,"byte_end":745234,"line_start":359,"line_end":359,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4436}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":745434,"byte_end":745442,"line_start":371,"line_end":371,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":4440},{"krate":0,"index":4441},{"krate":0,"index":4442},{"krate":0,"index":4443},{"krate":0,"index":4444},{"krate":0,"index":4445}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":745912,"byte_end":745920,"line_start":399,"line_end":399,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4449},{"krate":0,"index":4450}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":746201,"byte_end":746209,"line_start":413,"line_end":413,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4454}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":746331,"byte_end":746339,"line_start":423,"line_end":423,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":746405,"byte_end":746413,"line_start":430,"line_end":430,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4461}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":747282,"byte_end":747287,"line_start":466,"line_end":466,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":4473},{"krate":0,"index":4475},{"krate":0,"index":4476},{"krate":0,"index":4477},{"krate":0,"index":4479}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":751969,"byte_end":751974,"line_start":624,"line_end":624,"column_start":38,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4483}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":752143,"byte_end":752148,"line_start":635,"line_end":635,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4488}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":752355,"byte_end":752360,"line_start":647,"line_end":647,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4492},{"krate":0,"index":4493},{"krate":0,"index":4494},{"krate":0,"index":4495},{"krate":0,"index":4496},{"krate":0,"index":4497}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":752837,"byte_end":752842,"line_start":675,"line_end":675,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4501},{"krate":0,"index":4502}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":753129,"byte_end":753134,"line_start":689,"line_end":689,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4506}],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":753261,"byte_end":753266,"line_start":699,"line_end":699,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":753343,"byte_end":753348,"line_start":706,"line_end":706,"column_start":28,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":753425,"byte_end":753430,"line_start":713,"line_end":713,"column_start":28,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":753500,"byte_end":753505,"line_start":720,"line_end":720,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4519}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Inherent","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":755261,"byte_end":755267,"line_start":789,"line_end":789,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4525}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":755616,"byte_end":755622,"line_start":803,"line_end":803,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4531},{"krate":0,"index":4532},{"krate":0,"index":4534},{"krate":0,"index":4535},{"krate":0,"index":4536}],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":756658,"byte_end":756664,"line_start":844,"line_end":844,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4541},{"krate":0,"index":4542}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":756944,"byte_end":756950,"line_start":859,"line_end":859,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4547}],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":757110,"byte_end":757116,"line_start":870,"line_end":870,"column_start":33,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":757219,"byte_end":757225,"line_start":878,"line_end":878,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4556}],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":759143,"byte_end":759149,"line_start":27,"line_end":27,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4613},{"krate":0,"index":4614}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":759365,"byte_end":759371,"line_start":41,"line_end":41,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4619}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":759562,"byte_end":759568,"line_start":52,"line_end":52,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4624},{"krate":0,"index":4625}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":759781,"byte_end":759787,"line_start":66,"line_end":66,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4630}],"docs":"","sig":null,"attributes":[]},{"id":351,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":759977,"byte_end":759983,"line_start":77,"line_end":77,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4635},{"krate":0,"index":4636}],"docs":"","sig":null,"attributes":[]},{"id":352,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":760199,"byte_end":760205,"line_start":91,"line_end":91,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4641}],"docs":"","sig":null,"attributes":[]},{"id":353,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":760386,"byte_end":760392,"line_start":102,"line_end":102,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4645},{"krate":0,"index":4646}],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":760554,"byte_end":760560,"line_start":114,"line_end":114,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4650}],"docs":"","sig":null,"attributes":[]},{"id":355,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":760702,"byte_end":760708,"line_start":124,"line_end":124,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4654}],"docs":"","sig":null,"attributes":[]},{"id":356,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":760929,"byte_end":760935,"line_start":135,"line_end":135,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4660},{"krate":0,"index":4661}],"docs":"","sig":null,"attributes":[]},{"id":357,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":761185,"byte_end":761191,"line_start":148,"line_end":148,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4666}],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":761571,"byte_end":761577,"line_start":163,"line_end":163,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4670},{"krate":0,"index":4671}],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":762203,"byte_end":762209,"line_start":38,"line_end":38,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":4744}],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":762359,"byte_end":762365,"line_start":48,"line_end":48,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":4748}],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":762511,"byte_end":762517,"line_start":58,"line_end":58,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4752},{"krate":0,"index":4754}],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":762807,"byte_end":762813,"line_start":74,"line_end":74,"column_start":19,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":762878,"byte_end":762884,"line_start":81,"line_end":81,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4761}],"docs":"","sig":null,"attributes":[]},{"id":364,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":763078,"byte_end":763086,"line_start":91,"line_end":91,"column_start":52,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":4767}],"docs":"","sig":null,"attributes":[]},{"id":365,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":763731,"byte_end":763737,"line_start":127,"line_end":127,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":4784}],"docs":"","sig":null,"attributes":[]},{"id":366,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":763947,"byte_end":763955,"line_start":138,"line_end":138,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":4790}],"docs":"","sig":null,"attributes":[]},{"id":367,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":764722,"byte_end":764728,"line_start":174,"line_end":174,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":4809}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":764960,"byte_end":764966,"line_start":185,"line_end":185,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4813}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":765112,"byte_end":765118,"line_start":195,"line_end":195,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":4817}],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":765283,"byte_end":765289,"line_start":205,"line_end":205,"column_start":45,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":4822}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":765461,"byte_end":765467,"line_start":215,"line_end":215,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":4827}],"docs":"","sig":null,"attributes":[]},{"id":372,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":765629,"byte_end":765635,"line_start":225,"line_end":225,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":4831}],"docs":"","sig":null,"attributes":[]},{"id":373,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":765774,"byte_end":765780,"line_start":235,"line_end":235,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4835}],"docs":"","sig":null,"attributes":[]},{"id":374,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":765905,"byte_end":765911,"line_start":245,"line_end":245,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":4839},{"krate":0,"index":4840}],"docs":"","sig":null,"attributes":[]},{"id":375,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":766089,"byte_end":766095,"line_start":257,"line_end":257,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4844}],"docs":"","sig":null,"attributes":[]},{"id":376,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":766203,"byte_end":766209,"line_start":267,"line_end":267,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4848}],"docs":"","sig":null,"attributes":[]},{"id":377,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":766484,"byte_end":766490,"line_start":282,"line_end":282,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4852}],"docs":"","sig":null,"attributes":[]},{"id":378,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":766654,"byte_end":766660,"line_start":292,"line_end":292,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4856}],"docs":"","sig":null,"attributes":[]},{"id":379,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":766825,"byte_end":766831,"line_start":302,"line_end":302,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4860}],"docs":"","sig":null,"attributes":[]},{"id":380,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":766995,"byte_end":767001,"line_start":312,"line_end":312,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4864}],"docs":"","sig":null,"attributes":[]},{"id":381,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":767165,"byte_end":767171,"line_start":322,"line_end":322,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":4868}],"docs":"","sig":null,"attributes":[]},{"id":382,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":767365,"byte_end":767371,"line_start":333,"line_end":333,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4872}],"docs":"","sig":null,"attributes":[]},{"id":383,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":767533,"byte_end":767539,"line_start":344,"line_end":344,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":384,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":767612,"byte_end":767618,"line_start":351,"line_end":351,"column_start":28,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":385,"kind":"Direct","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":767685,"byte_end":767691,"line_start":358,"line_end":358,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11110,"byte_end":11116,"line_start":274,"line_end":274,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros.rs","byte_start":11566,"byte_end":11574,"line_start":7,"line_end":7,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":5}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11127,"byte_end":11133,"line_start":276,"line_end":276,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":28}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11143,"byte_end":11148,"line_start":277,"line_end":277,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":65}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11169,"byte_end":11175,"line_start":279,"line_end":279,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":550}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11185,"byte_end":11190,"line_start":280,"line_end":280,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":642}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11200,"byte_end":11205,"line_start":281,"line_end":281,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":829}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11215,"byte_end":11218,"line_start":282,"line_end":282,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1019}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11244,"byte_end":11249,"line_start":284,"line_end":284,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":1058}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11259,"byte_end":11266,"line_start":285,"line_end":285,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1117}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11276,"byte_end":11279,"line_start":286,"line_end":286,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1176}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11289,"byte_end":11294,"line_start":287,"line_end":287,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2242}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11304,"byte_end":11309,"line_start":288,"line_end":288,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3448}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11319,"byte_end":11323,"line_start":289,"line_end":289,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":3495}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11360,"byte_end":11365,"line_start":292,"line_end":292,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3575}},{"kind":"Mod","span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11402,"byte_end":11405,"line_start":295,"line_end":295,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":4028}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44283,"byte_end":44289,"line_start":54,"line_end":54,"column_start":22,"column_end":28},"kind":"SuperTrait","from":{"krate":19,"index":31},"to":{"krate":0,"index":49}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48505,"byte_end":48506,"line_start":187,"line_end":187,"column_start":23,"column_end":24},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":58},"to":{"krate":0,"index":49}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58117,"byte_end":58125,"line_start":160,"line_end":160,"column_start":12,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":90},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":61774,"byte_end":61782,"line_start":57,"line_end":57,"column_start":12,"column_end":20},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":4938},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":63438,"byte_end":63446,"line_start":129,"line_end":129,"column_start":22,"column_end":30},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":4938},"to":{"krate":2,"index":9373}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":63656,"byte_end":63664,"line_start":142,"line_end":142,"column_start":25,"column_end":33},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":4938},"to":{"krate":2,"index":7623}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":64299,"byte_end":64307,"line_start":178,"line_end":178,"column_start":36,"column_end":44},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":4938},"to":{"krate":2,"index":7487}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":64652,"byte_end":64660,"line_start":195,"line_end":195,"column_start":34,"column_end":42},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":4938},"to":{"krate":2,"index":7512}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":64801,"byte_end":64809,"line_start":206,"line_end":206,"column_start":30,"column_end":38},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":4938},"to":{"krate":2,"index":7891}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":65178,"byte_end":65186,"line_start":25,"line_end":25,"column_start":33,"column_end":41},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":3127}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":65419,"byte_end":65427,"line_start":40,"line_end":40,"column_start":39,"column_end":47},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":3154}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":65635,"byte_end":65643,"line_start":52,"line_end":52,"column_start":32,"column_end":40},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":3132}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":65873,"byte_end":65881,"line_start":67,"line_end":67,"column_start":38,"column_end":46},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":3158}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":66088,"byte_end":66096,"line_start":79,"line_end":79,"column_start":33,"column_end":41},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":3137}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":66329,"byte_end":66337,"line_start":94,"line_end":94,"column_start":39,"column_end":47},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":3162}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":66566,"byte_end":66574,"line_start":107,"line_end":107,"column_start":22,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":3215}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":66792,"byte_end":66800,"line_start":121,"line_end":121,"column_start":25,"column_end":33},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":3228}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":66971,"byte_end":66979,"line_start":132,"line_end":132,"column_start":32,"column_end":40},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":3300}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":67253,"byte_end":67261,"line_start":146,"line_end":146,"column_start":35,"column_end":43},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":3304}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":67480,"byte_end":67488,"line_start":158,"line_end":158,"column_start":20,"column_end":28},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":3123}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":68167,"byte_end":68175,"line_start":39,"line_end":39,"column_start":46,"column_end":54},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":2603}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":68388,"byte_end":68396,"line_start":51,"line_end":51,"column_start":49,"column_end":57},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":2606}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":68567,"byte_end":68575,"line_start":62,"line_end":62,"column_start":22,"column_end":30},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":2625}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":68845,"byte_end":68853,"line_start":79,"line_end":79,"column_start":19,"column_end":27},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":2660}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":68917,"byte_end":68925,"line_start":86,"line_end":86,"column_start":20,"column_end":28},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":2691}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":69122,"byte_end":69130,"line_start":97,"line_end":97,"column_start":45,"column_end":53},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":2345},"to":{"krate":2,"index":2655}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":69316,"byte_end":69324,"line_start":109,"line_end":109,"column_start":36,"column_end":44},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":2655}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":69549,"byte_end":69557,"line_start":122,"line_end":122,"column_start":46,"column_end":54},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":2345},"to":{"krate":2,"index":2702}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":69780,"byte_end":69788,"line_start":134,"line_end":134,"column_start":37,"column_end":45},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":2702}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":70080,"byte_end":70088,"line_start":148,"line_end":148,"column_start":45,"column_end":53},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":2901}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":70297,"byte_end":70305,"line_start":160,"line_end":160,"column_start":45,"column_end":53},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":2904}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":70505,"byte_end":70513,"line_start":172,"line_end":172,"column_start":24,"column_end":32},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":70680,"byte_end":70688,"line_start":183,"line_end":183,"column_start":55,"column_end":63},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":2917}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":72179,"byte_end":72187,"line_start":240,"line_end":240,"column_start":24,"column_end":32},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":72348,"byte_end":72356,"line_start":252,"line_end":252,"column_start":23,"column_end":31},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":9384}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":72528,"byte_end":72536,"line_start":263,"line_end":263,"column_start":22,"column_end":30},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":9373}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":72800,"byte_end":72808,"line_start":277,"line_end":277,"column_start":24,"column_end":32},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":9380}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":73015,"byte_end":73023,"line_start":289,"line_end":289,"column_start":25,"column_end":33},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":9386}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":73228,"byte_end":73236,"line_start":301,"line_end":301,"column_start":22,"column_end":30},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":9382}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":73441,"byte_end":73449,"line_start":313,"line_end":313,"column_start":25,"column_end":33},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":9388}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":73653,"byte_end":73661,"line_start":325,"line_end":325,"column_start":21,"column_end":29},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":9579}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":73867,"byte_end":73875,"line_start":338,"line_end":338,"column_start":29,"column_end":37},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":7443}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":74781,"byte_end":74789,"line_start":382,"line_end":382,"column_start":21,"column_end":29},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":3014}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":74862,"byte_end":74870,"line_start":389,"line_end":389,"column_start":22,"column_end":30},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":3045}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":75316,"byte_end":75336,"line_start":413,"line_end":413,"column_start":16,"column_end":36},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":4947},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":75541,"byte_end":75561,"line_start":425,"line_end":425,"column_start":22,"column_end":42},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":4947},"to":{"krate":2,"index":9373}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":75820,"byte_end":75840,"line_start":439,"line_end":439,"column_start":24,"column_end":44},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":4947},"to":{"krate":2,"index":9380}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":76121,"byte_end":76141,"line_start":454,"line_end":454,"column_start":38,"column_end":58},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":4947},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89275,"byte_end":89284,"line_start":359,"line_end":359,"column_start":22,"column_end":31},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":5003},"to":{"krate":2,"index":2625}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89392,"byte_end":89401,"line_start":369,"line_end":369,"column_start":21,"column_end":30},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":5003},"to":{"krate":2,"index":3014}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":97424,"byte_end":97430,"line_start":638,"line_end":638,"column_start":19,"column_end":25},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":5063},"to":{"krate":2,"index":2625}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":97524,"byte_end":97530,"line_start":646,"line_end":646,"column_start":26,"column_end":32},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":5063},"to":{"krate":2,"index":7623}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":98177,"byte_end":98183,"line_start":673,"line_end":673,"column_start":37,"column_end":43},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":5063},"to":{"krate":2,"index":7487}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":98806,"byte_end":98812,"line_start":698,"line_end":698,"column_start":31,"column_end":37},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":5063},"to":{"krate":2,"index":7512}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":99074,"byte_end":99080,"line_start":711,"line_end":711,"column_start":39,"column_end":45},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":5063},"to":{"krate":2,"index":7891}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":99128,"byte_end":99134,"line_start":715,"line_end":715,"column_start":18,"column_end":24},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":5063},"to":{"krate":2,"index":3014}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124529,"byte_end":124537,"line_start":717,"line_end":717,"column_start":22,"column_end":30},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":2345},"to":{"krate":0,"index":699}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":134364,"byte_end":134372,"line_start":1031,"line_end":1031,"column_start":22,"column_end":30},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":2345},"to":{"krate":0,"index":699}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":143396,"byte_end":143404,"line_start":1346,"line_end":1346,"column_start":25,"column_end":33},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":90},"to":{"krate":0,"index":699}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":143908,"byte_end":143914,"line_start":1374,"line_end":1374,"column_start":25,"column_end":31},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":3622},"to":{"krate":0,"index":699}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":144412,"byte_end":144418,"line_start":1402,"line_end":1402,"column_start":25,"column_end":31},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":4097},"to":{"krate":0,"index":699}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field/io.rs","byte_start":154927,"byte_end":154933,"line_start":122,"line_end":122,"column_start":22,"column_end":28},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":4097},"to":{"krate":1,"index":4403}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160147,"byte_end":160153,"line_start":115,"line_end":115,"column_start":9,"column_end":15},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":5118},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":169452,"byte_end":169458,"line_start":414,"line_end":414,"column_start":25,"column_end":31},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":5118},"to":{"krate":2,"index":2917}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":169615,"byte_end":169621,"line_start":424,"line_end":424,"column_start":20,"column_end":26},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":5118},"to":{"krate":2,"index":9384}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":169779,"byte_end":169785,"line_start":432,"line_end":432,"column_start":19,"column_end":25},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":5118},"to":{"krate":2,"index":9373}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":169983,"byte_end":169989,"line_start":441,"line_end":441,"column_start":21,"column_end":27},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":5118},"to":{"krate":2,"index":9380}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170491,"byte_end":170502,"line_start":464,"line_end":464,"column_start":9,"column_end":20},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":5151},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":171277,"byte_end":171288,"line_start":501,"line_end":501,"column_start":19,"column_end":30},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":5151},"to":{"krate":2,"index":9373}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":171493,"byte_end":171504,"line_start":510,"line_end":510,"column_start":21,"column_end":32},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":5151},"to":{"krate":2,"index":9380}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":171775,"byte_end":171786,"line_start":525,"line_end":525,"column_start":31,"column_end":42},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":5151},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":173445,"byte_end":173452,"line_start":575,"line_end":575,"column_start":9,"column_end":16},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":5184},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":177750,"byte_end":177757,"line_start":730,"line_end":730,"column_start":20,"column_end":27},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":5184},"to":{"krate":2,"index":9384}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":177919,"byte_end":177926,"line_start":738,"line_end":738,"column_start":19,"column_end":26},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":5184},"to":{"krate":2,"index":9373}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":178125,"byte_end":178132,"line_start":747,"line_end":747,"column_start":21,"column_end":28},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":5184},"to":{"krate":2,"index":9380}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179689,"byte_end":179695,"line_start":798,"line_end":798,"column_start":9,"column_end":15},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":5217},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181762,"byte_end":181768,"line_start":882,"line_end":882,"column_start":20,"column_end":26},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":5217},"to":{"krate":2,"index":9384}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181926,"byte_end":181932,"line_start":890,"line_end":890,"column_start":19,"column_end":25},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":5217},"to":{"krate":2,"index":9373}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182130,"byte_end":182136,"line_start":899,"line_end":899,"column_start":21,"column_end":27},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":5217},"to":{"krate":2,"index":9380}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183442,"byte_end":183448,"line_start":948,"line_end":948,"column_start":9,"column_end":15},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":5250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":185500,"byte_end":185506,"line_start":1024,"line_end":1024,"column_start":20,"column_end":26},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":5250},"to":{"krate":2,"index":9384}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":185664,"byte_end":185670,"line_start":1032,"line_end":1032,"column_start":19,"column_end":25},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":5250},"to":{"krate":2,"index":9373}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":185868,"byte_end":185874,"line_start":1041,"line_end":1041,"column_start":21,"column_end":27},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":5250},"to":{"krate":2,"index":9380}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":186789,"byte_end":186796,"line_start":1078,"line_end":1078,"column_start":9,"column_end":16},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":5282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188772,"byte_end":188779,"line_start":1164,"line_end":1164,"column_start":20,"column_end":27},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":5282},"to":{"krate":2,"index":9384}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":188938,"byte_end":188945,"line_start":1172,"line_end":1172,"column_start":19,"column_end":26},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":5282},"to":{"krate":2,"index":9373}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":189144,"byte_end":189151,"line_start":1181,"line_end":1181,"column_start":21,"column_end":28},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":5282},"to":{"krate":2,"index":9380}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":189309,"byte_end":189316,"line_start":1190,"line_end":1190,"column_start":28,"column_end":35},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":5282},"to":{"krate":2,"index":7402}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":189477,"byte_end":189484,"line_start":1199,"line_end":1199,"column_start":23,"column_end":30},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":5282},"to":{"krate":2,"index":3127}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":189642,"byte_end":189649,"line_start":1211,"line_end":1211,"column_start":22,"column_end":29},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":5282},"to":{"krate":2,"index":3132}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":189801,"byte_end":189808,"line_start":1223,"line_end":1223,"column_start":17,"column_end":24},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":5282},"to":{"krate":2,"index":3123}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":200675,"byte_end":200685,"line_start":34,"line_end":34,"column_start":22,"column_end":32},"kind":"SuperTrait","from":{"krate":18,"index":267},"to":{"krate":0,"index":1029}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":200694,"byte_end":200700,"line_start":34,"line_end":34,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":1049},"to":{"krate":0,"index":1029}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":201705,"byte_end":201714,"line_start":61,"line_end":61,"column_start":24,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":1029},"to":{"krate":0,"index":1033}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":201717,"byte_end":201723,"line_start":61,"line_end":61,"column_start":36,"column_end":42},"kind":"SuperTrait","from":{"krate":19,"index":50},"to":{"krate":0,"index":1033}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":205269,"byte_end":205275,"line_start":8,"line_end":8,"column_start":39,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":1057},"to":{"krate":0,"index":1051}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":205407,"byte_end":205412,"line_start":14,"line_end":14,"column_start":21,"column_end":26},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":5338},"to":{"krate":0,"index":1051}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":205440,"byte_end":205445,"line_start":17,"line_end":17,"column_start":23,"column_end":28},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":5338},"to":{"krate":0,"index":1057}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":205728,"byte_end":205731,"line_start":26,"line_end":26,"column_start":21,"column_end":24},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":5355},"to":{"krate":0,"index":1051}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":205759,"byte_end":205762,"line_start":29,"line_end":29,"column_start":23,"column_end":26},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":5355},"to":{"krate":0,"index":1057}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":214600,"byte_end":214604,"line_start":264,"line_end":264,"column_start":26,"column_end":30},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":5372},"to":{"krate":0,"index":1079}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":215811,"byte_end":215815,"line_start":307,"line_end":307,"column_start":26,"column_end":30},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":5394},"to":{"krate":0,"index":1079}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":245978,"byte_end":245985,"line_start":67,"line_end":67,"column_start":12,"column_end":19},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":249292,"byte_end":249299,"line_start":206,"line_end":206,"column_start":9,"column_end":16},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1265},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":249735,"byte_end":249742,"line_start":224,"line_end":224,"column_start":22,"column_end":29},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1265},"to":{"krate":2,"index":2625}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":249899,"byte_end":249906,"line_start":236,"line_end":236,"column_start":22,"column_end":29},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1265},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":250105,"byte_end":250112,"line_start":249,"line_end":249,"column_start":26,"column_end":33},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1265},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":250318,"byte_end":250325,"line_start":262,"line_end":262,"column_start":31,"column_end":38},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1265},"to":{"krate":2,"index":2917}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":250559,"byte_end":250566,"line_start":274,"line_end":274,"column_start":29,"column_end":36},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1265},"to":{"krate":2,"index":2917}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":250755,"byte_end":250762,"line_start":285,"line_end":285,"column_start":19,"column_end":26},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1265},"to":{"krate":2,"index":2660}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":250893,"byte_end":250900,"line_start":293,"line_end":293,"column_start":53,"column_end":60},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1265},"to":{"krate":2,"index":2655}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":251186,"byte_end":251193,"line_start":308,"line_end":308,"column_start":20,"column_end":27},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1265},"to":{"krate":2,"index":2691}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":251460,"byte_end":251467,"line_start":321,"line_end":321,"column_start":54,"column_end":61},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1265},"to":{"krate":2,"index":2702}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":251814,"byte_end":251821,"line_start":338,"line_end":338,"column_start":22,"column_end":29},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1265},"to":{"krate":2,"index":9373}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":252034,"byte_end":252041,"line_start":350,"line_end":350,"column_start":24,"column_end":31},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1265},"to":{"krate":2,"index":9390}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":252253,"byte_end":252260,"line_start":362,"line_end":362,"column_start":21,"column_end":28},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1265},"to":{"krate":2,"index":9579}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":252428,"byte_end":252435,"line_start":374,"line_end":374,"column_start":21,"column_end":28},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1265},"to":{"krate":2,"index":3014}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":252831,"byte_end":252843,"line_start":392,"line_end":392,"column_start":30,"column_end":42},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":5416},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":252986,"byte_end":252998,"line_start":400,"line_end":400,"column_start":21,"column_end":33},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":5416},"to":{"krate":2,"index":9380}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":253460,"byte_end":253472,"line_start":421,"line_end":421,"column_start":31,"column_end":43},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":5416},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":256892,"byte_end":256898,"line_start":128,"line_end":128,"column_start":15,"column_end":21},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1425},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258413,"byte_end":258419,"line_start":195,"line_end":195,"column_start":12,"column_end":18},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1425},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":260112,"byte_end":260118,"line_start":260,"line_end":260,"column_start":22,"column_end":28},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1425},"to":{"krate":2,"index":2625}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":260327,"byte_end":260333,"line_start":272,"line_end":272,"column_start":22,"column_end":28},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1425},"to":{"krate":2,"index":2660}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":260518,"byte_end":260524,"line_start":282,"line_end":282,"column_start":23,"column_end":29},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1425},"to":{"krate":2,"index":2691}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":261023,"byte_end":261029,"line_start":302,"line_end":302,"column_start":6,"column_end":12},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1425},"to":{"krate":2,"index":2655}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":261320,"byte_end":261326,"line_start":318,"line_end":318,"column_start":35,"column_end":41},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1425},"to":{"krate":2,"index":2655}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":261543,"byte_end":261549,"line_start":331,"line_end":331,"column_start":36,"column_end":42},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1425},"to":{"krate":2,"index":2655}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":262015,"byte_end":262021,"line_start":351,"line_end":351,"column_start":6,"column_end":12},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1425},"to":{"krate":2,"index":2702}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":262358,"byte_end":262364,"line_start":370,"line_end":370,"column_start":36,"column_end":42},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1425},"to":{"krate":2,"index":2702}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":262617,"byte_end":262623,"line_start":383,"line_end":383,"column_start":37,"column_end":43},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1425},"to":{"krate":2,"index":2702}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":262835,"byte_end":262841,"line_start":395,"line_end":395,"column_start":25,"column_end":31},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1425},"to":{"krate":2,"index":9373}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":263138,"byte_end":263144,"line_start":409,"line_end":409,"column_start":27,"column_end":33},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1425},"to":{"krate":2,"index":9380}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":263377,"byte_end":263383,"line_start":422,"line_end":422,"column_start":27,"column_end":33},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1425},"to":{"krate":2,"index":9390}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":263615,"byte_end":263621,"line_start":435,"line_end":435,"column_start":24,"column_end":30},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1425},"to":{"krate":2,"index":9579}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":264016,"byte_end":264022,"line_start":454,"line_end":454,"column_start":25,"column_end":31},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1425},"to":{"krate":2,"index":3215}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":264239,"byte_end":264245,"line_start":469,"line_end":469,"column_start":25,"column_end":31},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1425},"to":{"krate":2,"index":3228}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":264410,"byte_end":264416,"line_start":480,"line_end":480,"column_start":24,"column_end":30},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1425},"to":{"krate":2,"index":3239}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":264786,"byte_end":264792,"line_start":499,"line_end":499,"column_start":23,"column_end":29},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1425},"to":{"krate":2,"index":3123}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268322,"byte_end":268333,"line_start":79,"line_end":79,"column_start":15,"column_end":26},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1604},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":271983,"byte_end":271994,"line_start":215,"line_end":215,"column_start":25,"column_end":36},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1604},"to":{"krate":2,"index":2625}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":272148,"byte_end":272159,"line_start":227,"line_end":227,"column_start":22,"column_end":33},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1604},"to":{"krate":2,"index":2660}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":272318,"byte_end":272329,"line_start":237,"line_end":237,"column_start":6,"column_end":17},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1604},"to":{"krate":2,"index":2655}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":272697,"byte_end":272708,"line_start":255,"line_end":255,"column_start":27,"column_end":38},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1604},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":272911,"byte_end":272922,"line_start":268,"line_end":268,"column_start":48,"column_end":59},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1604},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":273174,"byte_end":273185,"line_start":281,"line_end":281,"column_start":48,"column_end":59},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1604},"to":{"krate":2,"index":2907}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":273390,"byte_end":273401,"line_start":294,"line_end":294,"column_start":25,"column_end":36},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1604},"to":{"krate":2,"index":9373}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":273750,"byte_end":273761,"line_start":310,"line_end":310,"column_start":24,"column_end":35},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1604},"to":{"krate":2,"index":9579}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":273970,"byte_end":273981,"line_start":324,"line_end":324,"column_start":28,"column_end":39},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1604},"to":{"krate":2,"index":7623}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":274776,"byte_end":274787,"line_start":369,"line_end":369,"column_start":39,"column_end":50},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1604},"to":{"krate":2,"index":7487}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":275254,"byte_end":275265,"line_start":395,"line_end":395,"column_start":37,"column_end":48},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1604},"to":{"krate":2,"index":7512}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":275501,"byte_end":275512,"line_start":407,"line_end":407,"column_start":33,"column_end":44},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1604},"to":{"krate":2,"index":7891}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":275655,"byte_end":275666,"line_start":416,"line_end":416,"column_start":48,"column_end":59},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1604},"to":{"krate":2,"index":3371}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278840,"byte_end":278846,"line_start":120,"line_end":120,"column_start":15,"column_end":21},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1804},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301628,"byte_end":301634,"line_start":867,"line_end":867,"column_start":12,"column_end":18},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1804},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303612,"byte_end":303618,"line_start":942,"line_end":942,"column_start":12,"column_end":18},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1804},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311793,"byte_end":311799,"line_start":1226,"line_end":1226,"column_start":25,"column_end":31},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1804},"to":{"krate":2,"index":2625}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311984,"byte_end":311990,"line_start":1241,"line_end":1241,"column_start":22,"column_end":28},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1804},"to":{"krate":2,"index":2660}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":312108,"byte_end":312114,"line_start":1250,"line_end":1250,"column_start":23,"column_end":29},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1804},"to":{"krate":2,"index":2691}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":312436,"byte_end":312442,"line_start":1265,"line_end":1265,"column_start":58,"column_end":64},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1804},"to":{"krate":2,"index":2655}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":312876,"byte_end":312882,"line_start":1284,"line_end":1284,"column_start":59,"column_end":65},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1804},"to":{"krate":2,"index":2702}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":313389,"byte_end":313395,"line_start":1307,"line_end":1307,"column_start":25,"column_end":31},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1804},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":313589,"byte_end":313595,"line_start":1319,"line_end":1319,"column_start":29,"column_end":35},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1804},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":313796,"byte_end":313802,"line_start":1331,"line_end":1331,"column_start":34,"column_end":40},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1804},"to":{"krate":2,"index":2917}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":314055,"byte_end":314061,"line_start":1345,"line_end":1345,"column_start":32,"column_end":38},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1804},"to":{"krate":2,"index":2917}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":314272,"byte_end":314278,"line_start":1358,"line_end":1358,"column_start":25,"column_end":31},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1804},"to":{"krate":2,"index":9373}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":314719,"byte_end":314725,"line_start":1380,"line_end":1380,"column_start":27,"column_end":33},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1804},"to":{"krate":2,"index":9390}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":315012,"byte_end":315018,"line_start":1395,"line_end":1395,"column_start":24,"column_end":30},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1804},"to":{"krate":2,"index":9579}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":315229,"byte_end":315235,"line_start":1409,"line_end":1409,"column_start":24,"column_end":30},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1804},"to":{"krate":2,"index":3014}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":315691,"byte_end":315702,"line_start":1429,"line_end":1429,"column_start":35,"column_end":46},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":5452},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":315889,"byte_end":315900,"line_start":1439,"line_end":1439,"column_start":39,"column_end":50},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":5452},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":316080,"byte_end":316091,"line_start":1449,"line_end":1449,"column_start":30,"column_end":41},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":5452},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":316284,"byte_end":316295,"line_start":1459,"line_end":1459,"column_start":21,"column_end":32},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":5452},"to":{"krate":2,"index":9380}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":316548,"byte_end":316559,"line_start":1471,"line_end":1471,"column_start":25,"column_end":36},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":5452},"to":{"krate":2,"index":3004}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":316610,"byte_end":316621,"line_start":1475,"line_end":1475,"column_start":25,"column_end":36},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":5452},"to":{"krate":2,"index":3016}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":316702,"byte_end":316713,"line_start":1480,"line_end":1480,"column_start":31,"column_end":42},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":5452},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":324501,"byte_end":324508,"line_start":203,"line_end":203,"column_start":15,"column_end":22},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":2048},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":344934,"byte_end":344941,"line_start":880,"line_end":880,"column_start":12,"column_end":19},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":2048},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":346463,"byte_end":346470,"line_start":935,"line_end":935,"column_start":12,"column_end":19},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":2048},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":347802,"byte_end":347809,"line_start":980,"line_end":980,"column_start":25,"column_end":32},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":2048},"to":{"krate":2,"index":2625}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":347933,"byte_end":347940,"line_start":991,"line_end":991,"column_start":22,"column_end":29},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":2048},"to":{"krate":2,"index":2660}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":348063,"byte_end":348070,"line_start":999,"line_end":999,"column_start":59,"column_end":66},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":2048},"to":{"krate":2,"index":2655}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":348672,"byte_end":348679,"line_start":1020,"line_end":1020,"column_start":27,"column_end":34},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":2048},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":348859,"byte_end":348866,"line_start":1033,"line_end":1033,"column_start":25,"column_end":32},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":2048},"to":{"krate":2,"index":9373}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":349089,"byte_end":349096,"line_start":1046,"line_end":1046,"column_start":27,"column_end":34},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":2048},"to":{"krate":2,"index":9390}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":349291,"byte_end":349298,"line_start":1058,"line_end":1058,"column_start":24,"column_end":31},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":2048},"to":{"krate":2,"index":3014}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":349794,"byte_end":349806,"line_start":1080,"line_end":1080,"column_start":34,"column_end":46},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":5489},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":349982,"byte_end":349994,"line_start":1090,"line_end":1090,"column_start":30,"column_end":42},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":5489},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":350185,"byte_end":350197,"line_start":1100,"line_end":1100,"column_start":19,"column_end":31},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":5489},"to":{"krate":2,"index":9373}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":350713,"byte_end":350725,"line_start":1122,"line_end":1122,"column_start":21,"column_end":33},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":5489},"to":{"krate":2,"index":9380}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":351218,"byte_end":351230,"line_start":1143,"line_end":1143,"column_start":25,"column_end":37},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":5489},"to":{"krate":2,"index":3004}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":351281,"byte_end":351293,"line_start":1147,"line_end":1147,"column_start":25,"column_end":37},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":5489},"to":{"krate":2,"index":3016}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":351374,"byte_end":351386,"line_start":1152,"line_end":1152,"column_start":31,"column_end":43},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":5489},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372561,"byte_end":372569,"line_start":458,"line_end":458,"column_start":12,"column_end":20},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":2345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411168,"byte_end":411176,"line_start":1889,"line_end":1889,"column_start":12,"column_end":20},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":2345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418002,"byte_end":418010,"line_start":2121,"line_end":2121,"column_start":12,"column_end":20},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":2345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429849,"byte_end":429857,"line_start":2480,"line_end":2480,"column_start":12,"column_end":20},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":2345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432469,"byte_end":432477,"line_start":2562,"line_end":2562,"column_start":12,"column_end":20},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":2345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":433192,"byte_end":433200,"line_start":2588,"line_end":2588,"column_start":12,"column_end":20},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":2345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":434546,"byte_end":434554,"line_start":2621,"line_end":2621,"column_start":12,"column_end":20},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":2345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438563,"byte_end":438571,"line_start":68,"line_end":68,"column_start":12,"column_end":20},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":2345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501253,"byte_end":501261,"line_start":2126,"line_end":2126,"column_start":12,"column_end":20},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":2345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":518078,"byte_end":518087,"line_start":2720,"line_end":2720,"column_start":44,"column_end":53},"kind":{"Impl":{"id":203}},"from":{"krate":2,"index":35512},"to":{"krate":0,"index":2706}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":520463,"byte_end":520467,"line_start":105,"line_end":105,"column_start":16,"column_end":20},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":2821},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":524903,"byte_end":524907,"line_start":277,"line_end":277,"column_start":22,"column_end":26},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":2821},"to":{"krate":2,"index":2625}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":525078,"byte_end":525082,"line_start":290,"line_end":290,"column_start":38,"column_end":42},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":2821},"to":{"krate":2,"index":2901}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":525247,"byte_end":525251,"line_start":301,"line_end":301,"column_start":22,"column_end":26},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":2821},"to":{"krate":2,"index":9373}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":526365,"byte_end":526372,"line_start":353,"line_end":353,"column_start":16,"column_end":23},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":2854},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":528464,"byte_end":528471,"line_start":434,"line_end":434,"column_start":22,"column_end":29},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":2854},"to":{"krate":2,"index":9373}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":539997,"byte_end":540008,"line_start":944,"line_end":944,"column_start":16,"column_end":27},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":5782},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":543115,"byte_end":543129,"line_start":1070,"line_end":1070,"column_start":16,"column_end":30},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":5822},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":552373,"byte_end":552385,"line_start":1420,"line_end":1420,"column_start":16,"column_end":28},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":5930},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":555581,"byte_end":555596,"line_start":1546,"line_end":1546,"column_start":16,"column_end":31},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":5970},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":566443,"byte_end":566462,"line_start":2032,"line_end":2032,"column_start":18,"column_end":37},"kind":"SuperTrait","from":{"krate":2,"index":7487},"to":{"krate":0,"index":2916}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":572149,"byte_end":572157,"line_start":2261,"line_end":2261,"column_start":16,"column_end":24},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":6302},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":572332,"byte_end":572340,"line_start":2274,"line_end":2274,"column_start":24,"column_end":32},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":6302},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":572497,"byte_end":572505,"line_start":2287,"line_end":2287,"column_start":25,"column_end":33},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":6302},"to":{"krate":2,"index":7623}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573699,"byte_end":573707,"line_start":2343,"line_end":2343,"column_start":36,"column_end":44},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":6302},"to":{"krate":2,"index":7487}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":574450,"byte_end":574458,"line_start":2379,"line_end":2379,"column_start":34,"column_end":42},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":6302},"to":{"krate":2,"index":7512}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":574592,"byte_end":574600,"line_start":2389,"line_end":2389,"column_start":30,"column_end":38},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":6302},"to":{"krate":2,"index":7891}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":575203,"byte_end":575212,"line_start":2415,"line_end":2415,"column_start":16,"column_end":25},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":6351},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":575387,"byte_end":575396,"line_start":2428,"line_end":2428,"column_start":24,"column_end":33},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":6351},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":575553,"byte_end":575562,"line_start":2441,"line_end":2441,"column_start":25,"column_end":34},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":6351},"to":{"krate":2,"index":7623}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":576582,"byte_end":576591,"line_start":2494,"line_end":2494,"column_start":36,"column_end":45},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":6351},"to":{"krate":2,"index":7487}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":577337,"byte_end":577346,"line_start":2530,"line_end":2530,"column_start":34,"column_end":43},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":6351},"to":{"krate":2,"index":7512}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":577481,"byte_end":577490,"line_start":2540,"line_end":2540,"column_start":30,"column_end":39},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":6351},"to":{"krate":2,"index":7891}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/ops.rs","byte_start":584362,"byte_end":584370,"line_start":29,"line_end":29,"column_start":39,"column_end":47},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":2345},"to":{"krate":2,"index":3154}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/ops.rs","byte_start":584626,"byte_end":584634,"line_start":41,"line_end":41,"column_start":38,"column_end":46},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":2345},"to":{"krate":2,"index":3158}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/ops.rs","byte_start":584890,"byte_end":584898,"line_start":53,"line_end":53,"column_start":39,"column_end":47},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":2345},"to":{"krate":2,"index":3162}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/ops.rs","byte_start":585145,"byte_end":585153,"line_start":65,"line_end":65,"column_start":29,"column_end":37},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":2345},"to":{"krate":2,"index":3300}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/specialization.rs","byte_start":588237,"byte_end":588245,"line_start":38,"line_end":38,"column_start":9,"column_end":17},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":2345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/specialization.rs","byte_start":596460,"byte_end":596468,"line_start":328,"line_end":328,"column_start":9,"column_end":17},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":2345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":603697,"byte_end":603705,"line_start":45,"line_end":45,"column_start":19,"column_end":27},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":2345},"to":{"krate":2,"index":2660}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":603770,"byte_end":603778,"line_start":52,"line_end":52,"column_start":20,"column_end":28},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":2345},"to":{"krate":2,"index":2691}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":604269,"byte_end":604277,"line_start":70,"line_end":70,"column_start":54,"column_end":62},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":2345},"to":{"krate":2,"index":2655}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":605761,"byte_end":605769,"line_start":143,"line_end":143,"column_start":55,"column_end":63},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":2345},"to":{"krate":2,"index":2655}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":605976,"byte_end":605984,"line_start":155,"line_end":155,"column_start":59,"column_end":67},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":2345},"to":{"krate":2,"index":2655}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":606541,"byte_end":606549,"line_start":174,"line_end":174,"column_start":55,"column_end":63},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":2345},"to":{"krate":2,"index":2702}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":607554,"byte_end":607562,"line_start":221,"line_end":221,"column_start":56,"column_end":64},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":2345},"to":{"krate":2,"index":2702}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":607809,"byte_end":607817,"line_start":233,"line_end":233,"column_start":60,"column_end":68},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":2345},"to":{"krate":2,"index":2702}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":609368,"byte_end":609376,"line_start":316,"line_end":316,"column_start":22,"column_end":30},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":2345},"to":{"krate":2,"index":9373}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":609599,"byte_end":609607,"line_start":328,"line_end":328,"column_start":24,"column_end":32},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":2345},"to":{"krate":2,"index":9380}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":615482,"byte_end":615490,"line_start":499,"line_end":499,"column_start":21,"column_end":29},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":2345},"to":{"krate":2,"index":9579}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":616749,"byte_end":616757,"line_start":534,"line_end":534,"column_start":28,"column_end":36},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":2345},"to":{"krate":2,"index":3004}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":617933,"byte_end":617941,"line_start":564,"line_end":564,"column_start":28,"column_end":36},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":2345},"to":{"krate":2,"index":3016}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":618043,"byte_end":618051,"line_start":572,"line_end":572,"column_start":24,"column_end":32},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":2345},"to":{"krate":5,"index":537}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":625129,"byte_end":625135,"line_start":149,"line_end":149,"column_start":37,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":3494},"to":{"krate":0,"index":3478}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":625138,"byte_end":625143,"line_start":149,"line_end":149,"column_start":46,"column_end":51},"kind":"SuperTrait","from":{"krate":2,"index":9373},"to":{"krate":0,"index":3478}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637377,"byte_end":637378,"line_start":119,"line_end":119,"column_start":21,"column_end":22},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":3532},"to":{"krate":0,"index":3523}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":642588,"byte_end":642589,"line_start":335,"line_end":335,"column_start":26,"column_end":27},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":3566},"to":{"krate":0,"index":3557}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":642813,"byte_end":642814,"line_start":348,"line_end":348,"column_start":29,"column_end":30},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":3571},"to":{"krate":0,"index":3561}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed.rs","byte_start":648267,"byte_end":648273,"line_start":135,"line_end":135,"column_start":12,"column_end":18},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":3622},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/api.rs","byte_start":658752,"byte_end":658758,"line_start":20,"line_end":20,"column_start":12,"column_end":18},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":3622},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":664959,"byte_end":664965,"line_start":27,"line_end":27,"column_start":33,"column_end":39},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":3127}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":665192,"byte_end":665198,"line_start":42,"line_end":42,"column_start":39,"column_end":45},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":3154}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":665400,"byte_end":665406,"line_start":54,"line_end":54,"column_start":32,"column_end":38},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":3132}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":665630,"byte_end":665636,"line_start":69,"line_end":69,"column_start":38,"column_end":44},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":3158}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":665837,"byte_end":665843,"line_start":81,"line_end":81,"column_start":33,"column_end":39},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":3137}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":666070,"byte_end":666076,"line_start":96,"line_end":96,"column_start":39,"column_end":45},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":3162}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":666299,"byte_end":666305,"line_start":109,"line_end":109,"column_start":22,"column_end":28},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":3215}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":666517,"byte_end":666523,"line_start":123,"line_end":123,"column_start":25,"column_end":31},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":3228}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":666684,"byte_end":666690,"line_start":134,"line_end":134,"column_start":21,"column_end":27},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":3239}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":666953,"byte_end":666959,"line_start":147,"line_end":147,"column_start":32,"column_end":38},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":3300}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":667251,"byte_end":667257,"line_start":162,"line_end":162,"column_start":35,"column_end":41},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":3304}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/ops.rs","byte_start":667501,"byte_end":667507,"line_start":175,"line_end":175,"column_start":20,"column_end":26},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":3123}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":668231,"byte_end":668237,"line_start":42,"line_end":42,"column_start":39,"column_end":45},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":2603}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":668437,"byte_end":668443,"line_start":54,"line_end":54,"column_start":42,"column_end":48},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":2606}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":668639,"byte_end":668645,"line_start":66,"line_end":66,"column_start":22,"column_end":28},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":2625}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":668797,"byte_end":668803,"line_start":77,"line_end":77,"column_start":19,"column_end":25},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":2660}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":668899,"byte_end":668905,"line_start":85,"line_end":85,"column_start":20,"column_end":26},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":2691}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":669141,"byte_end":669149,"line_start":97,"line_end":97,"column_start":52,"column_end":60},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":2345},"to":{"krate":2,"index":2655}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":669920,"byte_end":669926,"line_start":139,"line_end":139,"column_start":36,"column_end":42},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":2655}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":670178,"byte_end":670186,"line_start":152,"line_end":152,"column_start":53,"column_end":61},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":2345},"to":{"krate":2,"index":2702}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":670461,"byte_end":670467,"line_start":166,"line_end":166,"column_start":37,"column_end":43},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":2702}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":671358,"byte_end":671364,"line_start":207,"line_end":207,"column_start":38,"column_end":44},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":2901}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":671559,"byte_end":671565,"line_start":219,"line_end":219,"column_start":38,"column_end":44},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":2904}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":671780,"byte_end":671786,"line_start":231,"line_end":231,"column_start":45,"column_end":51},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":671994,"byte_end":672000,"line_start":243,"line_end":243,"column_start":35,"column_end":41},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":672193,"byte_end":672199,"line_start":255,"line_end":255,"column_start":31,"column_end":37},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":2907}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":672386,"byte_end":672392,"line_start":267,"line_end":267,"column_start":34,"column_end":40},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":2917}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":672636,"byte_end":672642,"line_start":281,"line_end":281,"column_start":24,"column_end":30},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":672809,"byte_end":672815,"line_start":294,"line_end":294,"column_start":22,"column_end":28},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":9373}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":673059,"byte_end":673065,"line_start":308,"line_end":308,"column_start":24,"column_end":30},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":9380}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":673271,"byte_end":673277,"line_start":320,"line_end":320,"column_start":23,"column_end":29},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":9384}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":673484,"byte_end":673490,"line_start":332,"line_end":332,"column_start":25,"column_end":31},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":9386}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":673696,"byte_end":673702,"line_start":344,"line_end":344,"column_start":22,"column_end":28},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":9382}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":673907,"byte_end":673913,"line_start":356,"line_end":356,"column_start":24,"column_end":30},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":9390}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":674126,"byte_end":674132,"line_start":368,"line_end":368,"column_start":25,"column_end":31},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":9388}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":674337,"byte_end":674343,"line_start":380,"line_end":380,"column_start":21,"column_end":27},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":9579}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":674655,"byte_end":674661,"line_start":395,"line_end":395,"column_start":29,"column_end":35},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":7443}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":674942,"byte_end":674948,"line_start":409,"line_end":409,"column_start":28,"column_end":34},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":3004}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":675021,"byte_end":675027,"line_start":416,"line_end":416,"column_start":28,"column_end":34},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":3016}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/boxed/traits.rs","byte_start":675094,"byte_end":675100,"line_start":423,"line_end":423,"column_start":22,"column_end":28},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":3622},"to":{"krate":2,"index":3045}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec.rs","byte_start":683407,"byte_end":683413,"line_start":265,"line_end":265,"column_start":12,"column_end":18},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":4097},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/api.rs","byte_start":705878,"byte_end":705884,"line_start":41,"line_end":41,"column_start":12,"column_end":18},"kind":{"Impl":{"id":312}},"from":{"krate":0,"index":4097},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":737958,"byte_end":737964,"line_start":47,"line_end":47,"column_start":29,"column_end":35},"kind":{"Impl":{"id":313}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":7452}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":738686,"byte_end":738692,"line_start":78,"line_end":78,"column_start":37,"column_end":43},"kind":{"Impl":{"id":314}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":7452}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":738921,"byte_end":738927,"line_start":89,"line_end":89,"column_start":63,"column_end":69},"kind":{"Impl":{"id":315}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":7452}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":739189,"byte_end":739195,"line_start":103,"line_end":103,"column_start":26,"column_end":32},"kind":{"Impl":{"id":316}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":7452}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":739438,"byte_end":739444,"line_start":116,"line_end":116,"column_start":34,"column_end":40},"kind":{"Impl":{"id":317}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":7452}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":739691,"byte_end":739697,"line_start":129,"line_end":129,"column_start":35,"column_end":41},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":7439}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":739943,"byte_end":739949,"line_start":141,"line_end":141,"column_start":6,"column_end":12},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":7439}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":740235,"byte_end":740241,"line_start":155,"line_end":155,"column_start":43,"column_end":49},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":7439}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":740720,"byte_end":740726,"line_start":174,"line_end":174,"column_start":32,"column_end":38},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":7439}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":740943,"byte_end":740949,"line_start":185,"line_end":185,"column_start":40,"column_end":46},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":7439}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":741380,"byte_end":741386,"line_start":203,"line_end":203,"column_start":29,"column_end":35},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":7443}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":742821,"byte_end":742829,"line_start":270,"line_end":270,"column_start":12,"column_end":20},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":4419},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":745226,"byte_end":745234,"line_start":359,"line_end":359,"column_start":22,"column_end":30},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":4419},"to":{"krate":2,"index":9373}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":745434,"byte_end":745442,"line_start":371,"line_end":371,"column_start":25,"column_end":33},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":4419},"to":{"krate":2,"index":7623}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":745912,"byte_end":745920,"line_start":399,"line_end":399,"column_start":36,"column_end":44},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":4419},"to":{"krate":2,"index":7487}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":746201,"byte_end":746209,"line_start":413,"line_end":413,"column_start":34,"column_end":42},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":4419},"to":{"krate":2,"index":7512}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":746331,"byte_end":746339,"line_start":423,"line_end":423,"column_start":30,"column_end":38},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":4419},"to":{"krate":2,"index":7891}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":746405,"byte_end":746413,"line_start":430,"line_end":430,"column_start":21,"column_end":29},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":4419},"to":{"krate":2,"index":3239}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":747282,"byte_end":747287,"line_start":466,"line_end":466,"column_start":16,"column_end":21},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":4462},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":751969,"byte_end":751974,"line_start":624,"line_end":624,"column_start":38,"column_end":43},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":4462},"to":{"krate":2,"index":2901}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":752143,"byte_end":752148,"line_start":635,"line_end":635,"column_start":26,"column_end":31},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":4462},"to":{"krate":2,"index":9373}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":752355,"byte_end":752360,"line_start":647,"line_end":647,"column_start":25,"column_end":30},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":4462},"to":{"krate":2,"index":7623}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":752837,"byte_end":752842,"line_start":675,"line_end":675,"column_start":36,"column_end":41},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":4462},"to":{"krate":2,"index":7487}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":753129,"byte_end":753134,"line_start":689,"line_end":689,"column_start":34,"column_end":39},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":4462},"to":{"krate":2,"index":7512}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":753261,"byte_end":753266,"line_start":699,"line_end":699,"column_start":30,"column_end":35},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":4462},"to":{"krate":2,"index":7891}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":753343,"byte_end":753348,"line_start":706,"line_end":706,"column_start":28,"column_end":33},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":4462},"to":{"krate":2,"index":3004}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":753425,"byte_end":753430,"line_start":713,"line_end":713,"column_start":28,"column_end":33},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":4462},"to":{"krate":2,"index":3016}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":753500,"byte_end":753505,"line_start":720,"line_end":720,"column_start":21,"column_end":26},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":4462},"to":{"krate":2,"index":3239}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":755261,"byte_end":755267,"line_start":789,"line_end":789,"column_start":19,"column_end":25},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":7890},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":755616,"byte_end":755622,"line_start":803,"line_end":803,"column_start":28,"column_end":34},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":7890},"to":{"krate":2,"index":7623}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":756658,"byte_end":756664,"line_start":844,"line_end":844,"column_start":39,"column_end":45},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":7890},"to":{"krate":2,"index":7487}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":756944,"byte_end":756950,"line_start":859,"line_end":859,"column_start":37,"column_end":43},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":7890},"to":{"krate":2,"index":7512}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":757110,"byte_end":757116,"line_start":870,"line_end":870,"column_start":33,"column_end":39},"kind":{"Impl":{"id":345}},"from":{"krate":0,"index":7890},"to":{"krate":2,"index":7891}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/iter.rs","byte_start":757219,"byte_end":757225,"line_start":878,"line_end":878,"column_start":24,"column_end":30},"kind":{"Impl":{"id":346}},"from":{"krate":0,"index":7890},"to":{"krate":2,"index":3239}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":759143,"byte_end":759149,"line_start":27,"line_end":27,"column_start":33,"column_end":39},"kind":{"Impl":{"id":347}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":3127}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":759365,"byte_end":759371,"line_start":41,"line_end":41,"column_start":39,"column_end":45},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":3154}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":759562,"byte_end":759568,"line_start":52,"line_end":52,"column_start":32,"column_end":38},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":3132}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":759781,"byte_end":759787,"line_start":66,"line_end":66,"column_start":38,"column_end":44},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":3158}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":759977,"byte_end":759983,"line_start":77,"line_end":77,"column_start":33,"column_end":39},"kind":{"Impl":{"id":351}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":3137}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":760199,"byte_end":760205,"line_start":91,"line_end":91,"column_start":39,"column_end":45},"kind":{"Impl":{"id":352}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":3162}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":760386,"byte_end":760392,"line_start":102,"line_end":102,"column_start":22,"column_end":28},"kind":{"Impl":{"id":353}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":3215}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":760554,"byte_end":760560,"line_start":114,"line_end":114,"column_start":25,"column_end":31},"kind":{"Impl":{"id":354}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":3228}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":760702,"byte_end":760708,"line_start":124,"line_end":124,"column_start":21,"column_end":27},"kind":{"Impl":{"id":355}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":3239}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":760929,"byte_end":760935,"line_start":135,"line_end":135,"column_start":32,"column_end":38},"kind":{"Impl":{"id":356}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":3300}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":761185,"byte_end":761191,"line_start":148,"line_end":148,"column_start":35,"column_end":41},"kind":{"Impl":{"id":357}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":3304}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/ops.rs","byte_start":761571,"byte_end":761577,"line_start":163,"line_end":163,"column_start":20,"column_end":26},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":3123}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":762203,"byte_end":762209,"line_start":38,"line_end":38,"column_start":39,"column_end":45},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":2603}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":762359,"byte_end":762365,"line_start":48,"line_end":48,"column_start":42,"column_end":48},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":2606}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":762511,"byte_end":762517,"line_start":58,"line_end":58,"column_start":22,"column_end":28},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":2625}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":762807,"byte_end":762813,"line_start":74,"line_end":74,"column_start":19,"column_end":25},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":2660}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":762878,"byte_end":762884,"line_start":81,"line_end":81,"column_start":20,"column_end":26},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":2691}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":763078,"byte_end":763086,"line_start":91,"line_end":91,"column_start":52,"column_end":60},"kind":{"Impl":{"id":364}},"from":{"krate":0,"index":2345},"to":{"krate":2,"index":2655}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":763731,"byte_end":763737,"line_start":127,"line_end":127,"column_start":36,"column_end":42},"kind":{"Impl":{"id":365}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":2655}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":763947,"byte_end":763955,"line_start":138,"line_end":138,"column_start":53,"column_end":61},"kind":{"Impl":{"id":366}},"from":{"krate":0,"index":2345},"to":{"krate":2,"index":2702}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":764722,"byte_end":764728,"line_start":174,"line_end":174,"column_start":37,"column_end":43},"kind":{"Impl":{"id":367}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":2702}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":764960,"byte_end":764966,"line_start":185,"line_end":185,"column_start":38,"column_end":44},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":2901}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":765112,"byte_end":765118,"line_start":195,"line_end":195,"column_start":38,"column_end":44},"kind":{"Impl":{"id":369}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":2904}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":765283,"byte_end":765289,"line_start":205,"line_end":205,"column_start":45,"column_end":51},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":765461,"byte_end":765467,"line_start":215,"line_end":215,"column_start":49,"column_end":55},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":765629,"byte_end":765635,"line_start":225,"line_end":225,"column_start":35,"column_end":41},"kind":{"Impl":{"id":372}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":2910}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":765774,"byte_end":765780,"line_start":235,"line_end":235,"column_start":29,"column_end":35},"kind":{"Impl":{"id":373}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":2907}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":765905,"byte_end":765911,"line_start":245,"line_end":245,"column_start":32,"column_end":38},"kind":{"Impl":{"id":374}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":2917}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":766089,"byte_end":766095,"line_start":257,"line_end":257,"column_start":24,"column_end":30},"kind":{"Impl":{"id":375}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":2982}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":766203,"byte_end":766209,"line_start":267,"line_end":267,"column_start":22,"column_end":28},"kind":{"Impl":{"id":376}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":9373}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":766484,"byte_end":766490,"line_start":282,"line_end":282,"column_start":24,"column_end":30},"kind":{"Impl":{"id":377}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":9380}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":766654,"byte_end":766660,"line_start":292,"line_end":292,"column_start":23,"column_end":29},"kind":{"Impl":{"id":378}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":9384}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":766825,"byte_end":766831,"line_start":302,"line_end":302,"column_start":25,"column_end":31},"kind":{"Impl":{"id":379}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":9386}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":766995,"byte_end":767001,"line_start":312,"line_end":312,"column_start":22,"column_end":28},"kind":{"Impl":{"id":380}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":9382}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":767165,"byte_end":767171,"line_start":322,"line_end":322,"column_start":25,"column_end":31},"kind":{"Impl":{"id":381}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":9388}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":767365,"byte_end":767371,"line_start":333,"line_end":333,"column_start":21,"column_end":27},"kind":{"Impl":{"id":382}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":9579}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":767533,"byte_end":767539,"line_start":344,"line_end":344,"column_start":28,"column_end":34},"kind":{"Impl":{"id":383}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":3004}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":767612,"byte_end":767618,"line_start":351,"line_end":351,"column_start":28,"column_end":34},"kind":{"Impl":{"id":384}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":3016}},{"span":{"file_name":"/Users/thomascnorton/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/vec/traits.rs","byte_start":767685,"byte_end":767691,"line_start":358,"line_end":358,"column_start":22,"column_end":28},"kind":{"Impl":{"id":385}},"from":{"krate":0,"index":4097},"to":{"krate":2,"index":3045}}]}